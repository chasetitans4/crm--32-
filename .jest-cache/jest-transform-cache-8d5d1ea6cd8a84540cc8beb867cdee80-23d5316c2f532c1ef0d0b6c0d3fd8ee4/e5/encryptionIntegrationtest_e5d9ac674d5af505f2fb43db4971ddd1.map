{"version":3,"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\__tests__\\components\\encryptionIntegration.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport '@testing-library/jest-dom'\nimport { advancedEncryption } from '../../utils/encryption'\nimport { secureStorage } from '../../utils/secureStorage'\n\n// Mock the encryption and storage utilities\njest.mock('../../utils/encryption', () => ({\n  advancedEncryption: {\n    encrypt: jest.fn((data: string) => `encrypted_${btoa(data)}`),\n    decrypt: jest.fn((data: string) => atob(data.replace('encrypted_', '')))\n  }\n}))\n\njest.mock('../../utils/secureStorage', () => ({\n  secureStorage: {\n    setItem: jest.fn(),\n    getItem: jest.fn(),\n    removeItem: jest.fn(),\n    clear: jest.fn()\n  }\n}))\n\n// Mock the hooks and components\njest.mock('../../hooks/useLeadManagement', () => ({\n  useLeadManagement: () => ({\n    leads: [],\n    newLead: {\n      name: '',\n      company: '',\n      status: 'NEW',\n      source: '',\n      notes: '',\n      value: 0,\n      contacts: [{ name: '', email: '', phone: '', position: '', isPrimary: true }]\n    },\n    addLead: jest.fn(),\n    updateLead: jest.fn(),\n    deleteLead: jest.fn(),\n    setNewLead: jest.fn(),\n    editingLead: null,\n    setEditingLead: jest.fn(),\n    isAddingLead: false,\n    setIsAddingLead: jest.fn()\n  })\n}))\n\ndescribe('Encryption Integration Tests', () => {\n  const mockEncrypt = advancedEncryption.encrypt as jest.MockedFunction<typeof advancedEncryption.encrypt>\n  const mockDecrypt = advancedEncryption.decrypt as jest.MockedFunction<typeof advancedEncryption.decrypt>\n  const mockSetItem = secureStorage.setItem as jest.MockedFunction<typeof secureStorage.setItem>\n  const mockGetItem = secureStorage.getItem as jest.MockedFunction<typeof secureStorage.getItem>\n  const mockRemoveItem = secureStorage.removeItem as jest.MockedFunction<typeof secureStorage.removeItem>\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('Client Data Encryption', () => {\n    test('should encrypt sensitive client data when adding a new client', () => {\n      const sensitiveClientData = {\n        name: 'John Doe',\n        email: 'john@example.com',\n        phone: '+1-555-123-4567',\n        contact: 'John Doe',\n        company: 'Acme Corp'\n      }\n\n      // Simulate the encryption process that happens in handleAddClient\n      const encryptedData = mockEncrypt(JSON.stringify(sensitiveClientData))\n      mockSetItem('client_123', encryptedData)\n\n      expect(mockEncrypt).toHaveBeenCalledWith(JSON.stringify(sensitiveClientData))\n      expect(mockSetItem).toHaveBeenCalledWith('client_123', encryptedData)\n      expect(encryptedData).not.toContain('John Doe')\n      expect(encryptedData).not.toContain('john@example.com')\n    })\n\n    test('should encrypt email data when sending emails', () => {\n      const emailData = {\n        to: 'client@example.com',\n        subject: 'Important Business Matter',\n        body: 'This is confidential information about the client.',\n        clientId: 123,\n        timestamp: new Date().toISOString()\n      }\n\n      // Simulate the encryption process that happens in handleSendEmail\n      const encryptedData = mockEncrypt(JSON.stringify(emailData))\n      mockSetItem('email_123', encryptedData)\n\n      expect(mockEncrypt).toHaveBeenCalledWith(JSON.stringify(emailData))\n      expect(mockSetItem).toHaveBeenCalledWith('email_123', encryptedData)\n      expect(encryptedData).not.toContain('client@example.com')\n      expect(encryptedData).not.toContain('confidential information')\n    })\n\n    test('should handle encryption errors gracefully', () => {\n      mockEncrypt.mockImplementationOnce(() => {\n        throw new Error('Encryption failed')\n      })\n\n      const sensitiveData = { name: 'Test User', email: 'test@example.com' }\n      \n      // Should not throw an error when encryption fails\n      expect(() => {\n        try {\n          const encrypted = mockEncrypt(JSON.stringify(sensitiveData))\n          mockSetItem('test_key', encrypted)\n        } catch (error) {\n          console.error('Failed to encrypt data:', error)\n        }\n      }).not.toThrow()\n    })\n  })\n\n  describe('Lead Data Encryption', () => {\n    test('should encrypt sensitive lead data when adding a new lead', () => {\n      const sensitiveLeadData = {\n        name: 'ABC Corporation',\n        company: 'ABC Corporation',\n        contacts: [\n          {\n            name: 'Jane Smith',\n            email: 'jane@abc.com',\n            phone: '+1-555-987-6543',\n            position: 'CEO'\n          }\n        ],\n        notes: 'Potential high-value client with specific requirements'\n      }\n\n      // Simulate the encryption process that happens in addLead\n      const encryptedData = mockEncrypt(JSON.stringify(sensitiveLeadData))\n      mockSetItem('lead_456', encryptedData)\n\n      expect(mockEncrypt).toHaveBeenCalledWith(JSON.stringify(sensitiveLeadData))\n      expect(mockSetItem).toHaveBeenCalledWith('lead_456', encryptedData)\n      expect(encryptedData).not.toContain('ABC Corporation')\n      expect(encryptedData).not.toContain('jane@abc.com')\n      expect(encryptedData).not.toContain('high-value client')\n    })\n\n    test('should encrypt sensitive lead data when updating existing lead', () => {\n      const updatedLeadData = {\n        name: 'Updated Corp Name',\n        company: 'Updated Corp Name',\n        contacts: [\n          {\n            name: 'Updated Contact',\n            email: 'updated@corp.com',\n            phone: '+1-555-111-2222',\n            position: 'Manager'\n          }\n        ],\n        notes: 'Updated notes with sensitive information'\n      }\n\n      // Simulate the encryption process that happens in updateLead\n      const encryptedData = mockEncrypt(JSON.stringify(updatedLeadData))\n      mockSetItem('lead_456', encryptedData)\n\n      expect(mockEncrypt).toHaveBeenCalledWith(JSON.stringify(updatedLeadData))\n      expect(mockSetItem).toHaveBeenCalledWith('lead_456', encryptedData)\n      expect(encryptedData).not.toContain('Updated Corp Name')\n      expect(encryptedData).not.toContain('updated@corp.com')\n    })\n  })\n\n  describe('Data Cleanup and Security', () => {\n    test('should auto-clear encrypted data after timeout', async () => {\n      jest.useFakeTimers()\n\n      const sensitiveData = { name: 'Test User', email: 'test@example.com' }\n      const encryptedData = mockEncrypt(JSON.stringify(sensitiveData))\n      mockSetItem('temp_data', encryptedData)\n\n      // Simulate the auto-clear timeout (10 minutes = 600,000ms)\n      setTimeout(() => {\n        mockRemoveItem('temp_data')\n      }, 10 * 60 * 1000)\n\n      // Fast-forward time by 10 minutes\n      jest.advanceTimersByTime(10 * 60 * 1000)\n\n      expect(mockRemoveItem).toHaveBeenCalledWith('temp_data')\n\n      jest.useRealTimers()\n    })\n\n    test('should clear sensitive data on component unmount', () => {\n      // Simulate component unmount cleanup\n      const keysToClean = ['client_123', 'lead_456', 'email_789']\n      \n      keysToClean.forEach(key => {\n        mockRemoveItem(key)\n      })\n\n      keysToClean.forEach(key => {\n        expect(mockRemoveItem).toHaveBeenCalledWith(key)\n      })\n    })\n\n    test('should handle storage quota exceeded errors', () => {\n      mockSetItem.mockImplementationOnce(() => {\n        throw new Error('QuotaExceededError: Storage quota exceeded')\n      })\n\n      const sensitiveData = { name: 'Test User', email: 'test@example.com' }\n      const encryptedData = mockEncrypt(JSON.stringify(sensitiveData))\n\n      // Should handle storage errors gracefully\n      expect(() => {\n        try {\n          mockSetItem('test_key', encryptedData)\n        } catch (error) {\n          console.error('Storage error:', error)\n        }\n      }).not.toThrow()\n    })\n  })\n\n  describe('Data Retrieval and Decryption', () => {\n    test('should decrypt data when retrieving from storage', () => {\n      const originalData = {\n        name: 'John Doe',\n        email: 'john@example.com',\n        phone: '+1-555-123-4567'\n      }\n      \n      const encryptedData = `encrypted_${btoa(JSON.stringify(originalData))}`\n      mockGetItem.mockReturnValue(encryptedData)\n      \n      const retrieved = mockGetItem('client_123')\n      const decrypted = mockDecrypt(retrieved!)\n      const parsedData = JSON.parse(decrypted)\n\n      expect(mockGetItem).toHaveBeenCalledWith('client_123')\n      expect(mockDecrypt).toHaveBeenCalledWith(encryptedData)\n      expect(parsedData).toEqual(originalData)\n    })\n\n    test('should handle missing encrypted data gracefully', () => {\n      mockGetItem.mockReturnValue(null)\n      \n      const retrieved = mockGetItem('non_existent_key')\n      \n      expect(retrieved).toBeNull()\n      expect(mockDecrypt).not.toHaveBeenCalled()\n    })\n\n    test('should handle corrupted encrypted data', () => {\n      const corruptedData = 'corrupted_encrypted_data'\n      mockGetItem.mockReturnValue(corruptedData)\n      mockDecrypt.mockImplementationOnce(() => {\n        throw new Error('Decryption failed')\n      })\n\n      const retrieved = mockGetItem('corrupted_key')\n      \n      expect(() => {\n        try {\n          if (retrieved) {\n            mockDecrypt(retrieved)\n          }\n        } catch (error) {\n          console.error('Decryption error:', error)\n        }\n      }).not.toThrow()\n    })\n  })\n\n  describe('Performance and Scalability', () => {\n    test('should handle multiple encryption operations efficiently', () => {\n      const dataItems = Array(50).fill(0).map((_, i) => ({\n        id: i,\n        name: `User ${i}`,\n        email: `user${i}@example.com`,\n        sensitive: `sensitive_data_${i}`\n      }))\n\n      dataItems.forEach((item, index) => {\n        const encryptedData = mockEncrypt(JSON.stringify(item))\n        mockSetItem(`item_${index}`, encryptedData)\n      })\n\n      expect(mockEncrypt).toHaveBeenCalledTimes(50)\n      expect(mockSetItem).toHaveBeenCalledTimes(50)\n    })\n\n    test('should handle large data objects', () => {\n      const largeData = {\n        id: 1,\n        name: 'Large Data Object',\n        description: 'x'.repeat(10000), // 10KB of data\n        metadata: Array(100).fill(0).map((_, i) => ({\n          key: `meta_${i}`,\n          value: `value_${i}`.repeat(50)\n        }))\n      }\n\n      const encryptedData = mockEncrypt(JSON.stringify(largeData))\n      mockSetItem('large_data', encryptedData)\n\n      expect(mockEncrypt).toHaveBeenCalledWith(JSON.stringify(largeData))\n      expect(mockSetItem).toHaveBeenCalledWith('large_data', encryptedData)\n    })\n  })\n\n  describe('Security Validation', () => {\n    test('should ensure no plaintext data is stored', () => {\n      const sensitiveData = {\n        ssn: '123-45-6789',\n        creditCard: '4111-1111-1111-1111',\n        password: 'MySecretPassword123!',\n        personalNotes: 'Confidential client information'\n      }\n\n      const encryptedData = mockEncrypt(JSON.stringify(sensitiveData))\n      mockSetItem('sensitive_client', encryptedData)\n\n      // Verify that the encrypted data doesn't contain plaintext\n      expect(encryptedData).not.toContain('123-45-6789')\n      expect(encryptedData).not.toContain('4111-1111-1111-1111')\n      expect(encryptedData).not.toContain('MySecretPassword123!')\n      expect(encryptedData).not.toContain('Confidential client information')\n    })\n\n    test('should use different encryption for same data (randomization)', () => {\n      const data = 'Same sensitive data'\n      \n      const encrypted1 = mockEncrypt(data)\n      const encrypted2 = mockEncrypt(data)\n\n      // Mock different outputs for same input (simulating randomization)\n      mockEncrypt.mockReturnValueOnce(`encrypted_${btoa(data)}_1`)\n      mockEncrypt.mockReturnValueOnce(`encrypted_${btoa(data)}_2`)\n\n      const result1 = mockEncrypt(data)\n      const result2 = mockEncrypt(data)\n\n      expect(result1).not.toBe(result2)\n    })\n  })\n})"],"names":["jest","mock","advancedEncryption","encrypt","fn","data","btoa","decrypt","atob","replace","secureStorage","setItem","getItem","removeItem","clear","useLeadManagement","leads","newLead","name","company","status","source","notes","value","contacts","email","phone","position","isPrimary","addLead","updateLead","deleteLead","setNewLead","editingLead","setEditingLead","isAddingLead","setIsAddingLead","describe","mockEncrypt","mockDecrypt","mockSetItem","mockGetItem","mockRemoveItem","beforeEach","clearAllMocks","test","sensitiveClientData","contact","encryptedData","JSON","stringify","expect","toHaveBeenCalledWith","not","toContain","emailData","to","subject","body","clientId","timestamp","Date","toISOString","mockImplementationOnce","Error","sensitiveData","encrypted","error","console","toThrow","sensitiveLeadData","updatedLeadData","useFakeTimers","setTimeout","advanceTimersByTime","useRealTimers","keysToClean","forEach","key","originalData","mockReturnValue","retrieved","decrypted","parsedData","parse","toEqual","toBeNull","toHaveBeenCalled","corruptedData","dataItems","Array","fill","map","_","i","id","sensitive","item","index","toHaveBeenCalledTimes","largeData","description","repeat","metadata","ssn","creditCard","password","personalNotes","encrypted1","encrypted2","mockReturnValueOnce","result1","result2","toBe"],"mappings":"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"}