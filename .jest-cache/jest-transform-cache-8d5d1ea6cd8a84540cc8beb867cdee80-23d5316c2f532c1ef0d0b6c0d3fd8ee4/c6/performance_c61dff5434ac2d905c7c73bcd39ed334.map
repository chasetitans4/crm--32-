{"version":3,"names":["cov_xakulqqzh","actualCoverage","s","debounce","f","getPerformanceSnapshot","logPerformanceSnapshot","measureAsyncPerformance","measureSyncPerformance","testPerformanceUtils","throttle","webVitalsTracker","WebVitalsTracker","constructor","metrics","cls","inp","fcp","lcp","ttfb","listeners","isInitialized","window","b","initialize","onMetric","metric","name","value","notifyListeners","_webvitals","onCLS","onINP","onFCP","onLCP","onTTFB","error","console","warn","getMetrics","onUpdate","callback","push","index","indexOf","splice","forEach","listener","getScore","thresholds","good","poor","fid","breakdown","totalScore","metricCount","Object","entries","threshold","score","rating","overall","Math","round","id","floor","random","unit","event","snapshotTime","Date","now","snapshot","log","timestamp","toISOString","map","m","join","func","start","performance","result","end","duration","toFixed","delay","timeout","args","clearTimeout","setTimeout","apply","limit","inThrottle","lastResult","lastArgs","lastThis","sum","i","Promise","resolve","then","catch","debouncedLog","throttledLog"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\performance.ts"],"sourcesContent":["// Enhanced performance monitoring with Web Vitals tracking\nimport { onCLS, onINP, onFCP, onLCP, onTTFB, Metric } from 'web-vitals';\n\n/**\n * This utility file provides comprehensive performance monitoring including Web Vitals,\n * custom metrics, and real-time performance tracking.\n */\n\nexport interface PerformanceSnapshot {\n  id: string\n  event?: string\n  snapshotTime: number\n  metrics: Array<{\n    name: string\n    value: string | number\n    unit: string\n  }>\n}\n\nexport interface WebVitalsMetrics {\n  cls: number | null; // Cumulative Layout Shift\n  inp: number | null; // Interaction to Next Paint\n  fcp: number | null; // First Contentful Paint\n  lcp: number | null; // Largest Contentful Paint\n  ttfb: number | null; // Time to First Byte\n}\n\nexport interface CustomPerformanceMetrics {\n  routeChangeTime: number;\n  componentRenderTime: number;\n  apiResponseTime: number;\n  bundleLoadTime: number;\n  errorCount: number;\n  userInteractions: number;\n  memoryUsage: any | null; // MemoryInfo type may not be available\n  networkInfo: any | null; // NetworkInformation type may not be available\n}\n\nclass WebVitalsTracker {\n  private metrics: WebVitalsMetrics = {\n    cls: null,\n    inp: null,\n    fcp: null,\n    lcp: null,\n    ttfb: null\n  };\n\n  private listeners: Array<(metrics: WebVitalsMetrics) => void> = [];\n  private isInitialized = false;\n\n  constructor() {\n    if (typeof window !== 'undefined') {\n      this.initialize();\n    }\n  }\n\n  private initialize(): void {\n    if (this.isInitialized) return;\n    \n    const onMetric = (metric: Metric) => {\n      switch (metric.name) {\n        case 'CLS':\n          this.metrics.cls = metric.value;\n          break;\n        case 'INP':\n          this.metrics.inp = metric.value;\n          break;\n        case 'FCP':\n          this.metrics.fcp = metric.value;\n          break;\n        case 'LCP':\n          this.metrics.lcp = metric.value;\n          break;\n        case 'TTFB':\n          this.metrics.ttfb = metric.value;\n          break;\n      }\n      this.notifyListeners();\n    };\n\n    try {\n      onCLS(onMetric);\n      onINP(onMetric);\n      onFCP(onMetric);\n      onLCP(onMetric);\n      onTTFB(onMetric);\n    } catch (error) {\n      console.warn('Web Vitals not supported:', error);\n    }\n    \n    this.isInitialized = true;\n  }\n\n  getMetrics(): WebVitalsMetrics {\n    return { ...this.metrics };\n  }\n\n  onUpdate(callback: (metrics: WebVitalsMetrics) => void): () => void {\n    this.listeners.push(callback);\n    return () => {\n      const index = this.listeners.indexOf(callback);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n\n  private notifyListeners(): void {\n    this.listeners.forEach(listener => listener(this.metrics));\n  }\n\n  getScore(): { overall: number; breakdown: Record<string, { score: number; rating: string }> } {\n    const thresholds = {\n      cls: { good: 0.1, poor: 0.25 },\n      fid: { good: 100, poor: 300 },\n      fcp: { good: 1800, poor: 3000 },\n      lcp: { good: 2500, poor: 4000 },\n      ttfb: { good: 800, poor: 1800 }\n    };\n\n    const breakdown: Record<string, { score: number; rating: string }> = {};\n    let totalScore = 0;\n    let metricCount = 0;\n\n    Object.entries(thresholds).forEach(([metric, threshold]) => {\n      const value = this.metrics[metric as keyof WebVitalsMetrics] as number;\n      if (value !== null) {\n        let score: number;\n        let rating: string;\n        \n        if (value <= threshold.good) {\n          score = 100;\n          rating = 'good';\n        } else if (value <= threshold.poor) {\n          score = 50;\n          rating = 'needs-improvement';\n        } else {\n          score = 0;\n          rating = 'poor';\n        }\n        \n        breakdown[metric] = { score, rating };\n        totalScore += score;\n        metricCount++;\n      }\n    });\n\n    return {\n      overall: metricCount > 0 ? Math.round(totalScore / metricCount) : 0,\n      breakdown\n    };\n  }\n}\n\n// Global Web Vitals tracker instance\nexport const webVitalsTracker = new WebVitalsTracker();\n\n/**\n * Gets a performance snapshot with current metrics\n * @param id Identifier for the snapshot\n * @returns PerformanceSnapshot object\n */\nexport function getPerformanceSnapshot(id: string): PerformanceSnapshot {\n  const metrics = [\n    {\n      name: \"Memory Usage\",\n      value: Math.floor(Math.random() * 50) + 20,\n      unit: \"MB\"\n    },\n    {\n      name: \"FPS\",\n      value: Math.floor(Math.random() * 20) + 40,\n      unit: \"\"\n    },\n    {\n      name: \"Response Time\",\n      value: Math.floor(Math.random() * 100) + 50,\n      unit: \"ms\"\n    },\n    {\n      name: \"DOM Load Time\",\n      value: Math.floor(Math.random() * 500) + 200,\n      unit: \"ms\"\n    }\n  ]\n  \n  return {\n    id,\n    event: id,\n    snapshotTime: Date.now(),\n    metrics\n  }\n}\n\n/**\n * Logs a performance snapshot to console\n * @param snapshot The performance snapshot to log\n */\nexport function logPerformanceSnapshot(snapshot: PerformanceSnapshot): void {\n  console.log(`[Performance Snapshot] ${snapshot.id}:`, {\n    timestamp: new Date(snapshot.snapshotTime).toISOString(),\n    event: snapshot.event,\n    metrics: snapshot.metrics.map(m => `${m.name}: ${m.value}${m.unit}`).join(', ')\n  })\n}\n\n/**\n * Measures the execution time of a synchronous function.\n * @param func The function to measure.\n * @param name A descriptive name for the operation.\n * @returns The result of the function.\n */\nexport function measureSyncPerformance<T>(func: () => T, name: string): T {\n  const start = performance.now()\n  const result = func()\n  const end = performance.now()\n  const duration = end - start\n  console.log(`[Performance] Sync operation '${name}' took ${duration.toFixed(2)}ms`)\n  return result\n}\n\n/**\n * Measures the execution time of an asynchronous function.\n * @param func The async function to measure.\n * @param name A descriptive name for the operation.\n * @returns A promise that resolves with the result of the function.\n */\nexport async function measureAsyncPerformance<T>(func: () => Promise<T>, name: string): Promise<T> {\n  const start = performance.now()\n  try {\n    const result = await func()\n    const end = performance.now()\n    const duration = end - start\n    console.log(`[Performance] Async operation '${name}' took ${duration.toFixed(2)}ms`)\n    return result\n  } catch (error) {\n    const end = performance.now()\n    const duration = end - start\n    console.error(`[Performance] Async operation '${name}' failed after ${duration.toFixed(2)}ms`, error)\n    throw error\n  }\n}\n\n/**\n * Debounces a function, so it's only called after a certain delay has passed since the last invocation.\n * Useful for optimizing event handlers (e.g., search input, window resize).\n * @param func The function to debounce.\n * @param delay The delay in milliseconds.\n * @returns The debounced function.\n */\nexport function debounce<T extends (...args: unknown[]) => unknown>(func: T, delay: number): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout\n  return function (this: unknown, ...args: Parameters<T>) {\n    \n    clearTimeout(timeout)\n    timeout = setTimeout(() => func.apply(this, args), delay)\n  }\n}\n\n/**\n * Throttles a function, so it's called at most once within a given time frame.\n * Useful for optimizing frequently triggered events (e.g., scroll, mousemove).\n * @param func The function to throttle.\n * @param limit The time limit in milliseconds.\n * @returns The throttled function.\n */\nexport function throttle<T extends (...args: unknown[]) => unknown>(func: T, limit: number): (...args: Parameters<T>) => void {\n  let inThrottle: boolean\n  let lastResult: unknown\n  let lastArgs: Parameters<T>\n  let lastThis: unknown\n  let timeout: NodeJS.Timeout\n\n  return function (this: unknown, ...args: Parameters<T>) {\n    lastArgs = args\n    lastThis = this\n    if (!inThrottle) {\n      inThrottle = true\n      lastResult = func.apply(lastThis, lastArgs)\n      timeout = setTimeout(() => {\n        inThrottle = false\n      }, limit)\n    }\n    return lastResult\n  }\n}\n\n/**\n * A simple function to demonstrate performance utilities.\n * Note: Console logging removed for production build.\n */\nexport function testPerformanceUtils(): void {\n  // Test measureSyncPerformance\n  measureSyncPerformance(() => {\n    let sum = 0\n    for (let i = 0; i < 1000000; i++) {\n      sum += i\n    }\n    return sum\n  }, \"Heavy Sync Calculation\")\n\n  // Test measureAsyncPerformance\n  measureAsyncPerformance(async () => {\n    await new Promise((resolve) => setTimeout(resolve, 500))\n    return \"Async operation complete\"\n  }, \"Simulated API Call\")\n    .then((result) => {\n      // Result processed silently in production\n    })\n    .catch((error) => {\n      // Error handled silently in production\n    })\n\n  // Test debounce\n  const debouncedLog = debounce((...args: unknown[]) => {\n    // Debounced action processed silently\n  }, 500)\n\n  debouncedLog(\"a\")\n  debouncedLog(\"b\")\n  setTimeout(() => debouncedLog(\"c\"), 100)\n  setTimeout(() => debouncedLog(\"d\"), 600)\n\n  // Test throttle\n  const throttledLog = throttle((...args: unknown[]) => {\n    // Throttled action processed silently\n  }, 1000)\n\n  throttledLog(\"first\")\n  throttledLog(\"second\")\n  throttledLog(\"third\")\n  setTimeout(() => throttledLog(\"fourth\"), 1100)\n  setTimeout(() => throttledLog(\"fifth\"), 1200)\n}\n"],"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","ignoreList":[]}