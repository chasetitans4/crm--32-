{"version":3,"names":["backendService","cov_255m12gg1k","f","s","default","_default","isRealSupabaseConnection","supabaseUrl","process","env","NEXT_PUBLIC_SUPABASE_URL","supabaseKey","NEXT_PUBLIC_SUPABASE_ANON_KEY","b","includes","BackendService","constructor","config","offlineQueue","syncStatus","Map","isOnline","navigator","onLine","syncInterval","hasRealConnection","apiUrl","NEXT_PUBLIC_API_URL","timeout","retryAttempts","enableOfflineMode","Boolean","initializeOfflineSupport","startSyncInterval","initialize","window","addEventListener","syncOfflineActions","savedQueue","localStorage","getItem","JSON","parse","clearInterval","setInterval","syncAllEntities","create","table","data","id","crypto","randomUUID","created_at","Date","toISOString","updated_at","queueOfflineAction","result","error","_supabase","supabase","from","insert","select","single","updateSyncStatus","update","eq","delete","read","filters","getMockData","query","Object","entries","forEach","key","value","Array","isArray","in","getCachedData","name","email","phone","company","status","stage","title","description","priority","due_date","client_id","assigned_to","start_date","end_date","type","entity","action","timestamp","synced","push","saveOfflineQueue","setItem","stringify","pendingActions","filter","executeOfflineAction","message","updateData","cacheKey","cached","setCachedData","errorMessage","set","lastSync","getSyncStatus","get","values","entities","getPerformanceMetrics","responseTime","errorRate","syncQueueSize","cacheHitRate","startTime","now","Error","limit","calculateErrorRate","length","calculateCacheHitRate","errorStatuses","Math","max","size","destroy","removeEventListener"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\backendService.ts"],"sourcesContent":["import { supabase } from \"../lib/supabase\"\nimport type { Database } from \"../lib/supabase\"\n\ntype Tables<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Row\"]\ntype Inserts<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Insert\"]\ntype Updates<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Update\"]\n\nexport interface BackendConfig {\n  apiUrl: string\n  timeout: number\n  retryAttempts: number\n  enableOfflineMode: boolean\n  syncInterval: number\n}\n\nexport interface SyncStatus {\n  entity: string\n  lastSync: string\n  status: \"synced\" | \"pending\" | \"error\"\n  errorMessage?: string\n}\n\nexport interface OfflineAction {\n  id: string\n  type: \"create\" | \"update\" | \"delete\"\n  entity: string\n  data: Record<string, unknown>\n  timestamp: string\n  synced: boolean\n}\n\nexport interface BackupData {\n  id: string\n  timestamp: string\n  entities: Record<string, unknown[]>\n  size: number\n  compressed: boolean\n}\n\n// Helper function to check if we have a real Supabase connection\nconst isRealSupabaseConnection = () => {\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\n  const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n  return supabaseUrl && supabaseKey && !supabaseUrl.includes(\"your-project\") && !supabaseKey.includes(\"your-anon-key\")\n}\n\nclass BackendService {\n  private config: BackendConfig\n  private offlineQueue: OfflineAction[] = []\n  private syncStatus: Map<string, SyncStatus> = new Map()\n  private isOnline = navigator.onLine\n  private syncInterval: NodeJS.Timeout | null = null\n  private hasRealConnection = false\n\n  constructor(config: Partial<BackendConfig> = {}) {\n    this.config = {\n      apiUrl: process.env.NEXT_PUBLIC_API_URL || \"http://localhost:3001\",\n      timeout: 30000,\n      retryAttempts: 3,\n      enableOfflineMode: true,\n      syncInterval: 30000, // 30 seconds\n      ...config,\n    }\n\n    this.hasRealConnection = Boolean(isRealSupabaseConnection())\n\n    if (this.hasRealConnection) {\n      this.initializeOfflineSupport()\n      this.startSyncInterval()\n    } else {\n      // Silent logging - Backend service running in mock mode\n    }\n  }\n\n  async initialize(): Promise<void> {\n    if (this.hasRealConnection) {\n      // Silent logging - Backend service initialized with real database\n    } else {\n      // Silent logging - Backend service initialized in mock mode\n    }\n  }\n\n  // Connection Management\n  private initializeOfflineSupport(): void {\n    if (!this.hasRealConnection) return\n\n    window.addEventListener(\"online\", () => {\n      this.isOnline = true\n      this.syncOfflineActions()\n    })\n\n    window.addEventListener(\"offline\", () => {\n      this.isOnline = false\n    })\n\n    // Load offline queue from localStorage\n    const savedQueue = localStorage.getItem(\"offline_queue\")\n    if (savedQueue) {\n      this.offlineQueue = JSON.parse(savedQueue)\n    }\n  }\n\n  private startSyncInterval(): void {\n    if (!this.hasRealConnection) return\n\n    if (this.syncInterval) {\n      clearInterval(this.syncInterval)\n    }\n\n    this.syncInterval = setInterval(() => {\n      if (this.isOnline && this.hasRealConnection) {\n        this.syncAllEntities()\n      }\n    }, this.config.syncInterval)\n  }\n\n  // CRUD Operations with Offline Support\n  async create<T extends keyof Database[\"public\"][\"Tables\"]>(table: T, data: Inserts<T>): Promise<Tables<T>> {\n    if (!this.hasRealConnection) {\n      // Return mock data for development\n      return {\n        id: crypto.randomUUID(),\n        ...data,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      } as Tables<T>\n    }\n\n    if (!this.isOnline && this.config.enableOfflineMode) {\n      return this.queueOfflineAction(\"create\", table as string, data as any)\n    }\n\n    try {\n      const { data: result, error } = await (supabase as any).from(table).insert(data as any).select().single()\n\n      if (error) throw error\n\n      // Update sync status\n      this.updateSyncStatus(table as string, \"synced\")\n\n      return result as Tables<T>\n    } catch (error: any) {\n      if (this.config.enableOfflineMode) {\n        return this.queueOfflineAction(\"create\", table as string, data as any)\n      }\n      throw error\n    }\n  }\n\n  async update<T extends keyof Database[\"public\"][\"Tables\"]>(\n    table: T,\n    id: string,\n    data: Updates<T>,\n  ): Promise<Tables<T>> {\n    if (!this.hasRealConnection) {\n      // Return mock data for development\n      return {\n        id,\n        ...data,\n        updated_at: new Date().toISOString(),\n      } as Tables<T>\n    }\n\n    if (!this.isOnline && this.config.enableOfflineMode) {\n      return this.queueOfflineAction(\"update\", table as string, { id, ...data as any })\n    }\n\n    try {\n      const { data: result, error } = await (supabase as any).from(table).update(data as any).eq(\"id\", id as any).select().single()\n\n      if (error) throw error\n\n      this.updateSyncStatus(table as string, \"synced\")\n\n      return result as Tables<T>\n    } catch (error: any) {\n      if (this.config.enableOfflineMode) {\n        return this.queueOfflineAction(\"update\", table as string, { id, ...data as any })\n      }\n      throw error\n    }\n  }\n\n  async delete<T extends keyof Database[\"public\"][\"Tables\"]>(table: T, id: string): Promise<void> {\n    if (!this.hasRealConnection) {\n      // Mock delete - just log it\n      // Silent logging - Mock delete operation\n      return\n    }\n\n    if (!this.isOnline && this.config.enableOfflineMode) {\n      this.queueOfflineAction(\"delete\", table as string, { id })\n      return\n    }\n\n    try {\n      const { error } = await (supabase as any).from(table).delete().eq(\"id\", id as any)\n\n      if (error) throw error\n\n      this.updateSyncStatus(table as string, \"synced\")\n    } catch (error: any) {\n      if (this.config.enableOfflineMode) {\n        this.queueOfflineAction(\"delete\", table as string, { id })\n        return\n      }\n      throw error\n    }\n  }\n\n  async read<T extends keyof Database[\"public\"][\"Tables\"]>(\n    table: T,\n    filters?: Record<string, any>,\n  ): Promise<Tables<T>[]> {\n    if (!this.hasRealConnection) {\n      // Return mock data based on table\n      return this.getMockData(table as string) as Tables<T>[]\n    }\n\n    try {\n      let query = (supabase as any).from(table).select(\"*\")\n\n      if (filters) {\n        Object.entries(filters).forEach(([key, value]) => {\n          if (Array.isArray(value)) {\n            query = query.in(key as any, value as any)\n          } else {\n            query = query.eq(key as any, value as any)\n          }\n        })\n      }\n\n      const { data, error } = await query\n\n      if (error) throw error\n\n      this.updateSyncStatus(table as string, \"synced\")\n\n      return (data || []) as Tables<T>[]\n    } catch (error: any) {\n      // Try to get cached data if offline\n      if (!this.isOnline && this.config.enableOfflineMode) {\n        return this.getCachedData(table as string, filters)\n      }\n      throw error\n    }\n  }\n\n  // Mock data for development\n  private getMockData(table: string): any[] {\n    switch (table) {\n      case \"clients\":\n        return [\n          {\n            id: \"1\",\n            name: \"Acme Corp\",\n            email: \"john@acme.com\",\n            phone: \"555-0123\",\n            company: \"Acme Corporation\",\n            status: \"active\",\n            stage: \"1\",\n            value: 5000,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n          },\n          {\n            id: \"2\",\n            name: \"Tech Solutions\",\n            email: \"sarah@techsolutions.com\",\n            phone: \"555-0456\",\n            company: \"Tech Solutions Inc\",\n            status: \"active\",\n            stage: \"3\",\n            value: 12000,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n          },\n        ]\n      case \"tasks\":\n        return [\n          {\n            id: \"1\",\n            title: \"Design Homepage\",\n            description: \"Create homepage design mockup\",\n            status: \"pending\",\n            priority: \"high\",\n            due_date: \"2024-02-15\",\n            client_id: \"1\",\n            assigned_to: \"John Doe\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n          },\n          {\n            id: \"2\",\n            title: \"Client Review\",\n            description: \"Review client feedback\",\n            status: \"completed\",\n            priority: \"medium\",\n            due_date: \"2024-02-20\",\n            client_id: \"2\",\n            assigned_to: \"Jane Smith\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n          },\n        ]\n      case \"events\":\n        return [\n          {\n            id: \"1\",\n            title: \"Client Meeting\",\n            description: \"Discuss project requirements\",\n            start_date: \"2024-02-15T10:00:00Z\",\n            end_date: \"2024-02-15T11:00:00Z\",\n            type: \"meeting\",\n            client_id: \"1\",\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n          },\n        ]\n      default:\n        return []\n    }\n  }\n\n  // Offline Queue Management\n  private queueOfflineAction(type: OfflineAction[\"type\"], entity: string, data: any): any {\n    const action: OfflineAction = {\n      id: crypto.randomUUID(),\n      type,\n      entity,\n      data,\n      timestamp: new Date().toISOString(),\n      synced: false,\n    }\n\n    this.offlineQueue.push(action)\n    this.saveOfflineQueue()\n    this.updateSyncStatus(entity, \"pending\")\n\n    // Return optimistic result for UI\n    return {\n      id: action.id,\n      ...data,\n      created_at: action.timestamp,\n      updated_at: action.timestamp,\n    }\n  }\n\n  private saveOfflineQueue(): void {\n    if (!this.hasRealConnection) return\n    localStorage.setItem(\"offline_queue\", JSON.stringify(this.offlineQueue))\n  }\n\n  private async syncOfflineActions(): Promise<void> {\n    if (!this.hasRealConnection) return\n\n    const pendingActions = this.offlineQueue.filter((action) => !action.synced)\n\n    for (const action of pendingActions) {\n      try {\n        await this.executeOfflineAction(action)\n        action.synced = true\n        this.updateSyncStatus(action.entity, \"synced\")\n      } catch (error: any) {\n        // Silent error handling - Failed to sync action\n        this.updateSyncStatus(action.entity, \"error\", error.message)\n      }\n    }\n\n    // Remove synced actions\n    this.offlineQueue = this.offlineQueue.filter((action) => !action.synced)\n    this.saveOfflineQueue()\n  }\n\n  private async executeOfflineAction(action: OfflineAction): Promise<void> {\n    if (!this.hasRealConnection) return\n\n    const { type, entity, data } = action\n\n    switch (type) {\n      case \"create\":\n        await (supabase as any).from(entity).insert(data as any)\n        break\n      case \"update\":\n        const { id, ...updateData } = data\n        await (supabase as any).from(entity).update(updateData as any).eq(\"id\", id as any)\n        break\n      case \"delete\":\n        await (supabase as any).from(entity).delete().eq(\"id\", (data as any).id)\n        break\n    }\n  }\n\n  // Caching\n  private getCachedData(entity: string, filters?: Record<string, any>): any[] {\n    if (!this.hasRealConnection) {\n      return this.getMockData(entity)\n    }\n\n    const cacheKey = `cache_${entity}_${JSON.stringify(filters || {})}`\n    const cached = localStorage.getItem(cacheKey)\n    return cached ? JSON.parse(cached) : []\n  }\n\n  private setCachedData(entity: string, data: any[], filters?: Record<string, any>): void {\n    if (!this.hasRealConnection) return\n\n    const cacheKey = `cache_${entity}_${JSON.stringify(filters || {})}`\n    localStorage.setItem(cacheKey, JSON.stringify(data))\n  }\n\n  // Sync Status Management\n  private updateSyncStatus(entity: string, status: SyncStatus[\"status\"], errorMessage?: string): void {\n    this.syncStatus.set(entity, {\n      entity,\n      lastSync: new Date().toISOString(),\n      status,\n      errorMessage,\n    })\n  }\n\n  getSyncStatus(entity?: string): SyncStatus | SyncStatus[] {\n    if (entity) {\n      return (\n        this.syncStatus.get(entity) || {\n          entity,\n          lastSync: \"\",\n          status: this.hasRealConnection ? \"pending\" : \"synced\",\n        }\n      )\n    }\n    return Array.from(this.syncStatus.values())\n  }\n\n  // Full Sync\n  private async syncAllEntities(): Promise<void> {\n    if (!this.hasRealConnection) {\n      // Silent logging - Skipping sync, using mock data\n      return\n    }\n\n    const entities = [\"clients\", \"tasks\", \"events\", \"projects\", \"invoices\"]\n\n    for (const entity of entities) {\n      try {\n        const data = await this.read(entity as any)\n        this.setCachedData(entity, data)\n        this.updateSyncStatus(entity, \"synced\")\n      } catch (error: any) {\n        // Silent error handling - Failed to sync entity\n        this.updateSyncStatus(entity, \"error\", error.message)\n      }\n    }\n  }\n\n  // Performance Monitoring\n  async getPerformanceMetrics(): Promise<{\n    responseTime: number\n    errorRate: number\n    syncQueueSize: number\n    cacheHitRate: number\n  }> {\n    if (!this.hasRealConnection) {\n      // Return mock metrics for development\n      return {\n        responseTime: 50,\n        errorRate: 0,\n        syncQueueSize: 0,\n        cacheHitRate: 1,\n      }\n    }\n\n    const startTime = Date.now()\n\n    try {\n      if (!supabase) {\n        throw new Error(\"Supabase client not initialized\")\n      }\n      \n      await supabase.from(\"clients\").select(\"count\").limit(1)\n      const responseTime = Date.now() - startTime\n\n      return {\n        responseTime,\n        errorRate: this.calculateErrorRate(),\n        syncQueueSize: this.offlineQueue.length,\n        cacheHitRate: this.calculateCacheHitRate(),\n      }\n    } catch (error) {\n      return {\n        responseTime: -1,\n        errorRate: 1,\n        syncQueueSize: this.offlineQueue.length,\n        cacheHitRate: 0,\n      }\n    }\n  }\n\n  private calculateErrorRate(): number {\n    const errorStatuses = Array.from(this.syncStatus.values()).filter((status) => status.status === \"error\")\n    return errorStatuses.length / Math.max(this.syncStatus.size, 1)\n  }\n\n  private calculateCacheHitRate(): number {\n    // Simplified cache hit rate calculation\n    // In a real implementation, you'd track cache hits vs misses\n    return this.hasRealConnection ? 0.85 : 1.0 // 100% hit rate for mock data\n  }\n\n  // Cleanup\n  destroy(): void {\n    if (this.syncInterval) {\n      clearInterval(this.syncInterval)\n    }\n\n    if (this.hasRealConnection) {\n      window.removeEventListener(\"online\", this.syncOfflineActions)\n      window.removeEventListener(\"offline\", () => (this.isOnline = false))\n    }\n  }\n}\n\nexport const backendService = new BackendService()\nexport default backendService\n"],"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","ignoreList":[]}