{"version":3,"names":["cov_2jqglj253c","actualCoverage","s","errorHandler","f","handleApiError","handleAsyncOperation","handleError","handleSuccess","handleValidationErrors","ErrorHandler","constructor","errorReportingService","getInstance","instance","b","setErrorReportingService","service","error","context","options","showToast","logToConsole","reportToService","fallbackMessage","errorMessage","message","displayMessage","console","_usetoast","toast","title","description","timestamp","Date","toISOString","reportingError","log","errors","length","map","e","join","status","Error","operation","result","successMessage"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\errorHandler.ts"],"sourcesContent":["\"use client\"\n\nimport { toast } from \"../components/ui/use-toast\"\n\nexport interface ErrorHandlerOptions {\n  showToast?: boolean\n  logToConsole?: boolean\n  reportToService?: boolean\n  fallbackMessage?: string\n}\n\nexport interface ValidationError {\n  field: string\n  message: string\n}\n\nexport interface ApiError extends Error {\n  status?: number\n  code?: string\n  details?: unknown\n}\n\nclass ErrorHandler {\n  private static instance: ErrorHandler\n  private errorReportingService: ((error: Error, context?: unknown) => void) | null = null\n\n  private constructor() {}\n\n  static getInstance(): ErrorHandler {\n    if (!ErrorHandler.instance) {\n      ErrorHandler.instance = new ErrorHandler()\n    }\n    return ErrorHandler.instance\n  }\n\n  setErrorReportingService(service: (error: Error, context?: unknown) => void) {\n    this.errorReportingService = service\n  }\n\n  handleError(\n    error: Error | string,\n    context?: string,\n    options: ErrorHandlerOptions = {}\n  ) {\n    const {\n      showToast = true,\n      logToConsole = true,\n      reportToService = false,\n      fallbackMessage = \"An unexpected error occurred\"\n    } = options\n\n    const errorMessage = typeof error === 'string' ? error : error.message\n    const displayMessage = errorMessage || fallbackMessage\n\n    // Log to console if enabled\n    if (logToConsole) {\n      console.error(`[${context || 'Error'}]:`, error)\n    }\n\n    // Show toast notification if enabled\n    if (showToast) {\n      toast({\n        title: \"Error\",\n        description: displayMessage,\n      })\n    }\n\n    // Report to external service if enabled and configured\n    if (reportToService && this.errorReportingService && typeof error !== 'string') {\n      try {\n        this.errorReportingService(error, { context, timestamp: new Date().toISOString() })\n      } catch (reportingError) {\n        console.error('Failed to report error:', reportingError)\n      }\n    }\n  }\n\n  handleSuccess(\n    message: string,\n    options: { showToast?: boolean; logToConsole?: boolean } = {}\n  ) {\n    const { showToast = true, logToConsole = false } = options\n\n    if (logToConsole) {\n      console.log(`[Success]: ${message}`)\n    }\n\n    if (showToast) {\n      toast({\n        title: \"Success\",\n        description: message,\n      })\n    }\n  }\n\n  handleValidationErrors(\n    errors: ValidationError[],\n    options: { showToast?: boolean } = {}\n  ) {\n    const { showToast = true } = options\n\n    if (showToast) {\n      const errorMessage = errors.length === 1 \n        ? errors[0].message\n        : `Please fix the following errors:\\n${errors.map(e => `â€¢ ${e.message}`).join('\\n')}`\n\n      toast({\n        title: \"Validation Error\",\n        description: errorMessage,\n      })\n    }\n  }\n\n  handleApiError(\n    error: ApiError,\n    context?: string,\n    options: ErrorHandlerOptions = {}\n  ) {\n    let message = error.message\n\n    // Customize message based on status code\n    if (error.status) {\n      switch (error.status) {\n        case 400:\n          message = \"Invalid request. Please check your input.\"\n          break\n        case 401:\n          message = \"You are not authorized to perform this action.\"\n          break\n        case 403:\n          message = \"Access denied. You don't have permission for this action.\"\n          break\n        case 404:\n          message = \"The requested resource was not found.\"\n          break\n        case 429:\n          message = \"Too many requests. Please try again later.\"\n          break\n        case 500:\n          message = \"Server error. Please try again later.\"\n          break\n        default:\n          message = error.message || \"An unexpected error occurred\"\n      }\n    }\n\n    this.handleError(new Error(message), context, options)\n  }\n\n  async handleAsyncOperation<T>(\n    operation: () => Promise<T>,\n    context: string,\n    options: ErrorHandlerOptions & {\n      successMessage?: string\n      loadingMessage?: string\n    } = {}\n  ): Promise<T | null> {\n    try {\n      const result = await operation()\n      \n      if (options.successMessage) {\n        this.handleSuccess(options.successMessage)\n      }\n      \n      return result\n    } catch (error) {\n      this.handleError(error as Error, context, options)\n      return null\n    }\n  }\n}\n\n// Export singleton instance\nexport const errorHandler = ErrorHandler.getInstance()\n\n// Convenience functions\nexport const handleError = (error: Error | string, context?: string, options?: ErrorHandlerOptions) => {\n  errorHandler.handleError(error, context, options)\n}\n\nexport const handleSuccess = (message: string, options?: { showToast?: boolean; logToConsole?: boolean }) => {\n  errorHandler.handleSuccess(message, options)\n}\n\nexport const handleValidationErrors = (errors: ValidationError[], options?: { showToast?: boolean }) => {\n  errorHandler.handleValidationErrors(errors, options)\n}\n\nexport const handleApiError = (error: ApiError, context?: string, options?: ErrorHandlerOptions) => {\n  errorHandler.handleApiError(error, context, options)\n}\n\nexport const handleAsyncOperation = <T>(\n  operation: () => Promise<T>,\n  context: string,\n  options?: ErrorHandlerOptions & {\n    successMessage?: string\n    loadingMessage?: string\n  }\n) => {\n  return errorHandler.handleAsyncOperation(operation, context, options)\n}"],"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","ignoreList":[]}