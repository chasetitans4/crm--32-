{"version":3,"names":["cov_y1fled6i9","actualCoverage","s","IntersectionLazy","f","LazyWrapper","createLazyComponent","createRouteComponent","default","_default","useIntersectionLazyLoad","usePreloadComponent","LazyErrorBoundary","_react","Component","constructor","props","state","hasError","getDerivedStateFromError","error","componentDidCatch","errorInfo","console","onError","message","stack","timestamp","Date","now","render","b","fallback","_jsxruntime","jsxs","_card","Card","className","jsx","CardHeader","_lucidereact","Loader2","CardContent","children","CardSkeleton","rows","_skeleton","Skeleton","Array","from","length","map","_","i","TableSkeleton","j","FormSkeleton","DashboardSkeleton","LoadingSkeleton","type","errorFallback","minHeight","skeleton","skeletonRows","onLoad","defaultFallback","useEffect","style","Suspense","importFn","options","preload","retryCount","timeout","LazyComponent","lazy","startTime","Promise","race","lastError","Error","attempt","module","log","loadTime","warn","resolve","setTimeout","Math","pow","reject","window","catch","forwardRef","ref","condition","preloadTimer","clearTimeout","isIntersecting","setIsIntersecting","useState","hasIntersected","setHasIntersected","element","current","observer","IntersectionObserver","entry","disconnect","threshold","rootMargin","observe","once","useRef","shouldRender"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\components\\ui\\LazyWrapper.tsx"],"sourcesContent":["'use client'\n\nimport React, { Suspense, lazy, ComponentType, ReactNode } from 'react'\nimport { Skeleton } from '../../../components/ui/skeleton'\nimport { Card, CardContent, CardHeader } from '@/components/ui/card'\nimport { Loader2 } from 'lucide-react'\nimport { performanceOptimizationService } from '@/services/performanceOptimization'\n\ninterface LazyWrapperProps {\n  children: ReactNode\n  fallback?: ReactNode\n  errorFallback?: ReactNode\n  className?: string\n  minHeight?: string | number\n  skeleton?: 'card' | 'table' | 'form' | 'dashboard' | 'custom'\n  skeletonRows?: number\n  onLoad?: () => void\n  onError?: (error: Error) => void\n}\n\ninterface LazyComponentProps {\n  importFn: () => Promise<{ default: ComponentType<any> }>\n  fallback?: ReactNode\n  errorFallback?: ReactNode\n  preload?: boolean\n  retryCount?: number\n  timeout?: number\n}\n\n// Error Boundary for lazy components\nclass LazyErrorBoundary extends React.Component<\n  { children: ReactNode; fallback?: ReactNode; onError?: (error: Error) => void },\n  { hasError: boolean; error?: Error }\n> {\n  constructor(props: any) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true, error }\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('Lazy component error:', error, errorInfo)\n    this.props.onError?.(error)\n    \n    // Log performance metric for failed component loads\n    console.error('Component load error metrics:', {\n      error: error.message,\n      stack: error.stack,\n      timestamp: Date.now()\n    })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return this.props.fallback || (\n        <Card className=\"border-red-200\">\n          <CardHeader>\n            <div className=\"flex items-center gap-2 text-red-600\">\n              <Loader2 className=\"h-4 w-4\" />\n              Failed to load component\n            </div>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-muted-foreground\">\n              {this.state.error?.message || 'An unexpected error occurred'}\n            </p>\n          </CardContent>\n        </Card>\n      )\n    }\n\n    return this.props.children\n  }\n}\n\n// Skeleton components for different layouts\nconst CardSkeleton = ({ rows = 3 }: { rows?: number }) => (\n  <Card>\n    <CardHeader>\n      <Skeleton className=\"h-6 w-3/4\" />\n      <Skeleton className=\"h-4 w-1/2\" />\n    </CardHeader>\n    <CardContent className=\"space-y-3\">\n      {Array.from({ length: rows }).map((_, i) => (\n        <Skeleton key={i} className=\"h-4 w-full\" />\n      ))}\n    </CardContent>\n  </Card>\n)\n\nconst TableSkeleton = ({ rows = 5 }: { rows?: number }) => (\n  <div className=\"space-y-3\">\n    <div className=\"flex space-x-4\">\n      {Array.from({ length: 4 }).map((_, i) => (\n        <Skeleton key={i} className=\"h-8 flex-1\" />\n      ))}\n    </div>\n    {Array.from({ length: rows }).map((_, i) => (\n      <div key={i} className=\"flex space-x-4\">\n        {Array.from({ length: 4 }).map((_, j) => (\n          <Skeleton key={j} className=\"h-6 flex-1\" />\n        ))}\n      </div>\n    ))}\n  </div>\n)\n\nconst FormSkeleton = ({ rows = 4 }: { rows?: number }) => (\n  <div className=\"space-y-4\">\n    {Array.from({ length: rows }).map((_, i) => (\n      <div key={i} className=\"space-y-2\">\n        <Skeleton className=\"h-4 w-1/4\" />\n        <Skeleton className=\"h-10 w-full\" />\n      </div>\n    ))}\n    <div className=\"flex justify-end space-x-2\">\n      <Skeleton className=\"h-10 w-20\" />\n      <Skeleton className=\"h-10 w-20\" />\n    </div>\n  </div>\n)\n\nconst DashboardSkeleton = () => (\n  <div className=\"space-y-6\">\n    {/* Header */}\n    <div className=\"flex justify-between items-center\">\n      <Skeleton className=\"h-8 w-48\" />\n      <Skeleton className=\"h-10 w-32\" />\n    </div>\n    \n    {/* Stats Cards */}\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n      {Array.from({ length: 4 }).map((_, i) => (\n        <Card key={i}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-2\">\n                <Skeleton className=\"h-4 w-20\" />\n                <Skeleton className=\"h-8 w-16\" />\n              </div>\n              <Skeleton className=\"h-8 w-8 rounded\" />\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n    \n    {/* Main Content */}\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      <CardSkeleton rows={6} />\n      <CardSkeleton rows={6} />\n    </div>\n  </div>\n)\n\nconst LoadingSkeleton = ({ type, rows }: { type: LazyWrapperProps['skeleton']; rows?: number }) => {\n  switch (type) {\n    case 'card':\n      return <CardSkeleton rows={rows} />\n    case 'table':\n      return <TableSkeleton rows={rows} />\n    case 'form':\n      return <FormSkeleton rows={rows} />\n    case 'dashboard':\n      return <DashboardSkeleton />\n    default:\n      return (\n        <div className=\"flex items-center justify-center p-8\">\n          <Loader2 className=\"h-6 w-6 animate-spin\" />\n        </div>\n      )\n  }\n}\n\n// Main LazyWrapper component\nexport function LazyWrapper({\n  children,\n  fallback,\n  errorFallback,\n  className,\n  minHeight,\n  skeleton = 'custom',\n  skeletonRows = 3,\n  onLoad,\n  onError\n}: LazyWrapperProps) {\n  const defaultFallback = fallback || <LoadingSkeleton type={skeleton} rows={skeletonRows} />\n\n  React.useEffect(() => {\n    onLoad?.()\n  }, [])\n\n  return (\n    <LazyErrorBoundary fallback={errorFallback} onError={onError}>\n      <div className={className} style={{ minHeight }}>\n        <Suspense fallback={defaultFallback}>\n          {children}\n        </Suspense>\n      </div>\n    </LazyErrorBoundary>\n  )\n}\n\n// Higher-order component for creating lazy components\nexport function createLazyComponent<T = {}>(\n  importFn: () => Promise<{ default: ComponentType<T> }>,\n  options: Omit<LazyComponentProps, 'importFn'> = {}\n) {\n  const {\n    fallback,\n    errorFallback,\n    preload = false,\n    retryCount = 3,\n    timeout = 10000\n  } = options\n\n  // Create lazy component with retry logic\n  const LazyComponent = lazy(() => {\n    const startTime = Date.now()\n    \n    return Promise.race([\n      // Main import with retry logic\n      (async () => {\n        let lastError: Error = new Error('Component load failed')\n        \n        for (let attempt = 1; attempt <= retryCount; attempt++) {\n          try {\n            const module = await importFn()\n            \n            // Log successful load\n            console.log('Component load success:', {\n              loadTime: Date.now() - startTime,\n              attempt,\n              timestamp: Date.now()\n            })\n            \n            return module\n          } catch (error) {\n            lastError = error as Error\n            console.warn(`Component load attempt ${attempt} failed:`, error)\n            \n            if (attempt < retryCount) {\n              // Exponential backoff\n              await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000))\n            }\n          }\n        }\n        \n        throw lastError\n      })(),\n      \n      // Timeout\n      new Promise<never>((_, reject) => {\n        setTimeout(() => {\n          reject(new Error(`Component load timeout after ${timeout}ms`))\n        }, timeout)\n      })\n    ])\n  })\n\n  // Preload if requested\n  if (preload && typeof window !== 'undefined') {\n    // Preload after a short delay to not block initial render\n    setTimeout(() => {\n      importFn().catch(error => {\n        console.warn('Preload failed:', error)\n      })\n    }, 100)\n  }\n\n  // Return wrapped component\n  return React.forwardRef<any, T>((props, ref) => (\n    <LazyWrapper\n      fallback={fallback}\n      errorFallback={errorFallback}\n      skeleton=\"card\"\n    >\n      <LazyComponent {...(props as any)} ref={ref} />\n    </LazyWrapper>\n  ))\n}\n\n// Hook for preloading components\nexport function usePreloadComponent(\n  importFn: () => Promise<{ default: ComponentType<any> }>,\n  condition: boolean = true\n) {\n  React.useEffect(() => {\n    if (condition && typeof window !== 'undefined') {\n      const preloadTimer = setTimeout(() => {\n        importFn().catch(error => {\n          console.warn('Component preload failed:', error)\n        })\n      }, 100)\n\n      return () => clearTimeout(preloadTimer)\n    }\n  }, [importFn, condition])\n}\n\n// Intersection Observer based lazy loading\nexport function useIntersectionLazyLoad(\n  ref: React.RefObject<HTMLElement | null>,\n  options: IntersectionObserverInit = {}\n) {\n  const [isIntersecting, setIsIntersecting] = React.useState(false)\n  const [hasIntersected, setHasIntersected] = React.useState(false)\n\n  React.useEffect(() => {\n    const element = ref.current\n    if (!element || hasIntersected) return\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setIsIntersecting(true)\n          setHasIntersected(true)\n          observer.disconnect()\n        }\n      },\n      {\n        threshold: 0.1,\n        rootMargin: '50px',\n        ...options\n      }\n    )\n\n    observer.observe(element)\n\n    return () => observer.disconnect()\n  }, [ref, hasIntersected, options])\n\n  return { isIntersecting, hasIntersected }\n}\n\n// Component for intersection-based lazy loading\ninterface IntersectionLazyProps {\n  children: ReactNode\n  fallback?: ReactNode\n  className?: string\n  threshold?: number\n  rootMargin?: string\n  once?: boolean\n}\n\nexport function IntersectionLazy({\n  children,\n  fallback,\n  className,\n  threshold = 0.1,\n  rootMargin = '50px',\n  once = true\n}: IntersectionLazyProps) {\n  const ref = React.useRef<HTMLDivElement>(null)\n  const { isIntersecting, hasIntersected } = useIntersectionLazyLoad(ref, {\n    threshold,\n    rootMargin\n  })\n\n  const shouldRender = once ? hasIntersected : isIntersecting\n\n  return (\n    <div ref={ref} className={className}>\n      {shouldRender ? children : (fallback || <LoadingSkeleton type=\"custom\" />)}\n    </div>\n  )\n}\n\n// Utility for creating route-based code splitting\nexport function createRouteComponent(\n  importFn: () => Promise<{ default: ComponentType<any> }>\n) {\n  return createLazyComponent(importFn, {\n    preload: false,\n    retryCount: 3,\n    timeout: 15000,\n    fallback: <LoadingSkeleton type=\"dashboard\" />\n  })\n}\n\nexport default LazyWrapper"],"mappingskLgB;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAAAA,aAAA,GAAAE,CAAA;;;;;;;;;;;;;;;;;;;;MA0KAC,iBAAA;IAAA;IAAAH,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAAC,gBAAA;;MA1KAE,YAAA;IAAA;IAAAL,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAAG,WAAA;;MA6BAC,oBAAA;IAAA;IAAAN,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAAI,mBAAA;;MAqKAC,qBAAA;IAAA;IAAAP,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAAK,oBAAA;;MAWhBC,QAAA;IAAA;IAAAR,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAAO,QAAA;;MA/EgBC,wBAAA;IAAA;IAAAV,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAAQ,uBAAA;;MAlBAC,oBAAA;IAAA;IAAAX,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAAS,mBAAA;;;;;;;;yEA5RgD;;;kCACvC;;;kCACqB;;;kCACtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBxB;AACA,MAAMC,iBAAA;AAAA;AAAA,CAA0BC,MAAA,CAAAL,OAAK,CAACM,SAAS;EAI7CC,YAAYC,KAAU,EAAE;IAAA;IAAAhB,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACtB,KAAK,CAACc,KAAA;IAAA;IAAAhB,aAAA,GAAAE,CAAA;IACN,IAAI,CAACe,KAAK,GAAG;MAAEC,QAAA,EAAU;IAAM;EACjC;EAEA,OAAOC,yBAAyBC,KAAY,EAAE;IAAA;IAAApB,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IAC5C,OAAO;MAAEgB,QAAA,EAAU;MAAME;IAAM;EACjC;EAEAC,kBAAkBD,KAAY,EAAEE,SAA0B,EAAE;IAAA;IAAAtB,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IAC1DqB,OAAA,CAAQH,KAAK,CAAC,yBAAyBA,KAAA,EAAOE,SAAA;IAAA;IAAAtB,aAAA,GAAAE,CAAA;IAC9C,IAAI,CAACc,KAAK,CAACQ,OAAO,GAAGJ,KAAA;IAErB;IAAA;IAAApB,aAAA,GAAAE,CAAA;IACAqB,OAAA,CAAQH,KAAK,CAAC,iCAAiC;MAC7CA,KAAA,EAAOA,KAAA,CAAMK,OAAO;MACpBC,KAAA,EAAON,KAAA,CAAMM,KAAK;MAClBC,SAAA,EAAWC,IAAA,CAAKC,GAAG;IACrB;EACF;EAEAC,OAAA,EAAS;IAAA;IAAA9B,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACP,IAAI,IAAI,CAACe,KAAK,CAACC,QAAQ,EAAE;MAAA;MAAAlB,aAAA,GAAA+B,CAAA;MAAA/B,aAAA,GAAAE,CAAA;MACvB,OAAO,2BAAAF,aAAA,GAAA+B,CAAA,eAAI,CAACf,KAAK,CAACgB,QAAQ;MAAA;MAAA,CAAAhC,aAAA,GAAA+B,CAAA,wBACxB,IAAAE,WAAA,CAAAC,IAAA,EAACC,KAAA,CAAAC,IAAI;QAACC,SAAA,EAAU;gCACd,IAAAJ,WAAA,CAAAK,GAAA,EAACH,KAAA,CAAAI,UAAU;oBACT,iBAAAN,WAAA,CAAAC,IAAA,EAAC;YAAIG,SAAA,EAAU;oCACb,IAAAJ,WAAA,CAAAK,GAAA,EAACE,YAAA,CAAAC,OAAO;cAACJ,SAAA,EAAU;gBAAY;;yBAInC,IAAAJ,WAAA,CAAAK,GAAA,EAACH,KAAA,CAAAO,WAAW;oBACV,iBAAAT,WAAA,CAAAK,GAAA,EAAC;YAAED,SAAA,EAAU;;YACV;YAAA,CAAArC,aAAA,GAAA+B,CAAA,eAAI,CAACd,KAAK,CAACG,KAAK,EAAEK,OAAA;YAAA;YAAA,CAAAzB,aAAA,GAAA+B,CAAA,WAAW;;;;IAKxC;IAAA;IAAA;MAAA/B,aAAA,GAAA+B,CAAA;IAAA;IAAA/B,aAAA,GAAAE,CAAA;IAEA,OAAO,IAAI,CAACc,KAAK,CAAC2B,QAAQ;EAC5B;AACF;AAEA;AAAA;AAAA3C,aAAA,GAAAE,CAAA;AACA,MAAM0C,YAAA,GAAeA,CAAC;EAAEC,IAAA;EAAA;EAAA,CAAA7C,aAAA,GAAA+B,CAAA,WAAO,CAAC;AAAA,CAAqB,KACnD;EAAA;EAAA/B,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EAAA,OADmD,aACnD,IAAA+B,WAAA,CAAAC,IAAA,EAACC,KAAA,CAAAC,IAAI;4BACH,IAAAH,WAAA,CAAAC,IAAA,EAACC,KAAA,CAAAI,UAAU;8BACT,IAAAN,WAAA,CAAAK,GAAA,EAACQ,SAAA,CAAAC,QAAQ;QAACV,SAAA,EAAU;uBACpB,IAAAJ,WAAA,CAAAK,GAAA,EAACQ,SAAA,CAAAC,QAAQ;QAACV,SAAA,EAAU;;qBAEtB,IAAAJ,WAAA,CAAAK,GAAA,EAACH,KAAA,CAAAO,WAAW;MAACL,SAAA,EAAU;gBACpBW,KAAA,CAAMC,IAAI,CAAC;QAAEC,MAAA,EAAQL;MAAK,GAAGM,GAAG,CAAC,CAACC,CAAA,EAAGC,CAAA,KACpC;QAAA;QAAArD,aAAA,GAAAI,CAAA;QAAAJ,aAAA,GAAAE,CAAA;QAAA,OADoC,aACpC,IAAA+B,WAAA,CAAAK,GAAA,EAACQ,SAAA,CAAAC,QAAQ;UAASV,SAAA,EAAU;WAAbgB,CAAA;MAAA;;;;;;AAMvB,MAAMC,aAAA,GAAgBA,CAAC;EAAET,IAAA;EAAA;EAAA,CAAA7C,aAAA,GAAA+B,CAAA,WAAO,CAAC;AAAA,CAAqB,KACpD;EAAA;EAAA/B,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EAAA,OADoD,aACpD,IAAA+B,WAAA,CAAAC,IAAA,EAAC;IAAIG,SAAA,EAAU;4BACb,IAAAJ,WAAA,CAAAK,GAAA,EAAC;MAAID,SAAA,EAAU;gBACZW,KAAA,CAAMC,IAAI,CAAC;QAAEC,MAAA,EAAQ;MAAE,GAAGC,GAAG,CAAC,CAACC,CAAA,EAAGC,CAAA,KACjC;QAAA;QAAArD,aAAA,GAAAI,CAAA;QAAAJ,aAAA,GAAAE,CAAA;QAAA,OADiC,aACjC,IAAA+B,WAAA,CAAAK,GAAA,EAACQ,SAAA,CAAAC,QAAQ;UAASV,SAAA,EAAU;WAAbgB,CAAA;MAAA;QAGlBL,KAAA,CAAMC,IAAI,CAAC;MAAEC,MAAA,EAAQL;IAAK,GAAGM,GAAG,CAAC,CAACC,CAAA,EAAGC,CAAA,KACpC;MAAA;MAAArD,aAAA,GAAAI,CAAA;MAAAJ,aAAA,GAAAE,CAAA;MAAA,OADoC,aACpC,IAAA+B,WAAA,CAAAK,GAAA,EAAC;QAAYD,SAAA,EAAU;kBACpBW,KAAA,CAAMC,IAAI,CAAC;UAAEC,MAAA,EAAQ;QAAE,GAAGC,GAAG,CAAC,CAACC,CAAA,EAAGG,CAAA,KACjC;UAAA;UAAAvD,aAAA,GAAAI,CAAA;UAAAJ,aAAA,GAAAE,CAAA;UAAA,OADiC,aACjC,IAAA+B,WAAA,CAAAK,GAAA,EAACQ,SAAA,CAAAC,QAAQ;YAASV,SAAA,EAAU;aAAbkB,CAAA;QAAA;SAFTF,CAAA;IAAA;;;;;AAShB,MAAMG,YAAA,GAAeA,CAAC;EAAEX,IAAA;EAAA;EAAA,CAAA7C,aAAA,GAAA+B,CAAA,WAAO,CAAC;AAAA,CAAqB,KACnD;EAAA;EAAA/B,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EAAA,OADmD,aACnD,IAAA+B,WAAA,CAAAC,IAAA,EAAC;IAAIG,SAAA,EAAU;eACZW,KAAA,CAAMC,IAAI,CAAC;MAAEC,MAAA,EAAQL;IAAK,GAAGM,GAAG,CAAC,CAACC,CAAA,EAAGC,CAAA,KACpC;MAAA;MAAArD,aAAA,GAAAI,CAAA;MAAAJ,aAAA,GAAAE,CAAA;MAAA,OADoC,aACpC,IAAA+B,WAAA,CAAAC,IAAA,EAAC;QAAYG,SAAA,EAAU;gCACrB,IAAAJ,WAAA,CAAAK,GAAA,EAACQ,SAAA,CAAAC,QAAQ;UAACV,SAAA,EAAU;yBACpB,IAAAJ,WAAA,CAAAK,GAAA,EAACQ,SAAA,CAAAC,QAAQ;UAACV,SAAA,EAAU;;SAFZgB,CAAA;IAAA,I,aAKZ,IAAApB,WAAA,CAAAC,IAAA,EAAC;MAAIG,SAAA,EAAU;8BACb,IAAAJ,WAAA,CAAAK,GAAA,EAACQ,SAAA,CAAAC,QAAQ;QAACV,SAAA,EAAU;uBACpB,IAAAJ,WAAA,CAAAK,GAAA,EAACQ,SAAA,CAAAC,QAAQ;QAACV,SAAA,EAAU;;;;;;;AAK1B,MAAMoB,iBAAA,GAAoBA,CAAA,KACxB;EAAA;EAAAzD,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EAAA,OADwB,aACxB,IAAA+B,WAAA,CAAAC,IAAA,EAAC;IAAIG,SAAA,EAAU;4BAEb,IAAAJ,WAAA,CAAAC,IAAA,EAAC;MAAIG,SAAA,EAAU;8BACb,IAAAJ,WAAA,CAAAK,GAAA,EAACQ,SAAA,CAAAC,QAAQ;QAACV,SAAA,EAAU;uBACpB,IAAAJ,WAAA,CAAAK,GAAA,EAACQ,SAAA,CAAAC,QAAQ;QAACV,SAAA,EAAU;;qBAItB,IAAAJ,WAAA,CAAAK,GAAA,EAAC;MAAID,SAAA,EAAU;gBACZW,KAAA,CAAMC,IAAI,CAAC;QAAEC,MAAA,EAAQ;MAAE,GAAGC,GAAG,CAAC,CAACC,CAAA,EAAGC,CAAA,KACjC;QAAA;QAAArD,aAAA,GAAAI,CAAA;QAAAJ,aAAA,GAAAE,CAAA;QAAA,OADiC,aACjC,IAAA+B,WAAA,CAAAK,GAAA,EAACH,KAAA,CAAAC,IAAI;oBACH,iBAAAH,WAAA,CAAAK,GAAA,EAACH,KAAA,CAAAO,WAAW;YAACL,SAAA,EAAU;sBACrB,iBAAAJ,WAAA,CAAAC,IAAA,EAAC;cAAIG,SAAA,EAAU;sCACb,IAAAJ,WAAA,CAAAC,IAAA,EAAC;gBAAIG,SAAA,EAAU;wCACb,IAAAJ,WAAA,CAAAK,GAAA,EAACQ,SAAA,CAAAC,QAAQ;kBAACV,SAAA,EAAU;iCACpB,IAAAJ,WAAA,CAAAK,GAAA,EAACQ,SAAA,CAAAC,QAAQ;kBAACV,SAAA,EAAU;;+BAEtB,IAAAJ,WAAA,CAAAK,GAAA,EAACQ,SAAA,CAAAC,QAAQ;gBAACV,SAAA,EAAU;;;;WAPfgB,CAAA;MAAA;qBAef,IAAApB,WAAA,CAAAC,IAAA,EAAC;MAAIG,SAAA,EAAU;8BACb,IAAAJ,WAAA,CAAAK,GAAA,EAACM,YAAA;QAAaC,IAAA,EAAM;uBACpB,IAAAZ,WAAA,CAAAK,GAAA,EAACM,YAAA;QAAaC,IAAA,EAAM;;;;;;;AAK1B,MAAMa,eAAA,GAAkBA,CAAC;EAAEC,IAAI;EAAEd;AAAI,CAAyD;EAAA;EAAA7C,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EAC5F,QAAQyD,IAAA;IACN,KAAK;MAAA;MAAA3D,aAAA,GAAA+B,CAAA;MAAA/B,aAAA,GAAAE,CAAA;MACH,oBAAO,IAAA+B,WAAA,CAAAK,GAAA,EAACM,YAAA;QAAaC,IAAA,EAAMA;;IAC7B,KAAK;MAAA;MAAA7C,aAAA,GAAA+B,CAAA;MAAA/B,aAAA,GAAAE,CAAA;MACH,oBAAO,IAAA+B,WAAA,CAAAK,GAAA,EAACgB,aAAA;QAAcT,IAAA,EAAMA;;IAC9B,KAAK;MAAA;MAAA7C,aAAA,GAAA+B,CAAA;MAAA/B,aAAA,GAAAE,CAAA;MACH,oBAAO,IAAA+B,WAAA,CAAAK,GAAA,EAACkB,YAAA;QAAaX,IAAA,EAAMA;;IAC7B,KAAK;MAAA;MAAA7C,aAAA,GAAA+B,CAAA;MAAA/B,aAAA,GAAAE,CAAA;MACH,oBAAO,IAAA+B,WAAA,CAAAK,GAAA,EAACmB,iBAAA;IACV;MAAA;MAAAzD,aAAA,GAAA+B,CAAA;MAAA/B,aAAA,GAAAE,CAAA;MACE,oBACE,IAAA+B,WAAA,CAAAK,GAAA,EAAC;QAAID,SAAA,EAAU;kBACb,iBAAAJ,WAAA,CAAAK,GAAA,EAACE,YAAA,CAAAC,OAAO;UAACJ,SAAA,EAAU;;;EAG3B;AACF;AAGO,SAAShC,YAAY;EAC1BsC,QAAQ;EACRX,QAAQ;EACR4B,aAAa;EACbvB,SAAS;EACTwB,SAAS;EACTC,QAAA;EAAA;EAAA,CAAA9D,aAAA,GAAA+B,CAAA,WAAW,QAAQ;EACnBgC,YAAA;EAAA;EAAA,CAAA/D,aAAA,GAAA+B,CAAA,WAAe,CAAC;EAChBiC,MAAM;EACNxC;AAAO,CACU;EAAA;EAAAxB,aAAA,GAAAI,CAAA;EACjB,MAAM6D,eAAA;EAAA;EAAA,CAAAjE,aAAA,GAAAE,CAAA;EAAkB;EAAA,CAAAF,aAAA,GAAA+B,CAAA,WAAAC,QAAA;EAAA;EAAA,CAAAhC,aAAA,GAAA+B,CAAA,wBAAY,IAAAE,WAAA,CAAAK,GAAA,EAACoB,eAAA;IAAgBC,IAAA,EAAMG,QAAA;IAAUjB,IAAA,EAAMkB;;;;EAE3ElD,MAAA,CAAAL,OAAK,CAAC0D,SAAS,CAAC;IAAA;IAAAlE,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACd8D,MAAA;EACF,GAAG,EAAE;EAAA;EAAAhE,aAAA,GAAAE,CAAA;EAEL,oBACE,IAAA+B,WAAA,CAAAK,GAAA,EAAC1B,iBAAA;IAAkBoB,QAAA,EAAU4B,aAAA;IAAepC,OAAA,EAASA,OAAA;cACnD,iBAAAS,WAAA,CAAAK,GAAA,EAAC;MAAID,SAAA,EAAWA,SAAA;MAAW8B,KAAA,EAAO;QAAEN;MAAU;gBAC5C,iBAAA5B,WAAA,CAAAK,GAAA,EAACzB,MAAA,CAAAuD,QAAQ;QAACpC,QAAA,EAAUiC,eAAA;kBACjBtB;;;;AAKX;AAGO,SAASrC,oBACd+D,QAAsD,EACtDC,OAAA;AAAA;AAAA,CAAAtE,aAAA,GAAA+B,CAAA,WAAgD,CAAC,CAAC;EAAA;EAAA/B,aAAA,GAAAI,CAAA;EAElD,MAAM;IACJ4B,QAAQ;IACR4B,aAAa;IACbW,OAAA;IAAA;IAAA,CAAAvE,aAAA,GAAA+B,CAAA,WAAU,KAAK;IACfyC,UAAA;IAAA;IAAA,CAAAxE,aAAA,GAAA+B,CAAA,WAAa,CAAC;IACd0C,OAAA;IAAA;IAAA,CAAAzE,aAAA,GAAA+B,CAAA,WAAU,KAAK;EAAA,CAChB;EAAA;EAAA,CAAA/B,aAAA,GAAAE,CAAA,QAAGoE,OAAA;EAEJ;EACA,MAAMI,aAAA;EAAA;EAAA,cAAA1E,aAAA,GAAAE,CAAA,QAAgB,IAAAW,MAAA,CAAA8D,IAAI,EAAC;IAAA;IAAA3E,aAAA,GAAAI,CAAA;IACzB,MAAMwE,SAAA;IAAA;IAAA,CAAA5E,aAAA,GAAAE,CAAA,QAAY0B,IAAA,CAAKC,GAAG;IAAA;IAAA7B,aAAA,GAAAE,CAAA;IAE1B,OAAO2E,OAAA,CAAQC,IAAI,CAAC;IAClB;IACC;MAAA;MAAA9E,aAAA,GAAAI,CAAA;MACC,IAAI2E,SAAA;MAAA;MAAA,CAAA/E,aAAA,GAAAE,CAAA,QAAmB,IAAI8E,KAAA,CAAM;MAAA;MAAAhF,aAAA,GAAAE,CAAA;MAEjC,KAAK,IAAI+E,OAAA;MAAA;MAAA,CAAAjF,aAAA,GAAAE,CAAA,QAAU,IAAG+E,OAAA,IAAWT,UAAA,EAAYS,OAAA,IAAW;QAAA;QAAAjF,aAAA,GAAAE,CAAA;QACtD,IAAI;UACF,MAAMgF,MAAA;UAAA;UAAA,CAAAlF,aAAA,GAAAE,CAAA,QAAS,MAAMmE,QAAA;UAErB;UAAA;UAAArE,aAAA,GAAAE,CAAA;UACAqB,OAAA,CAAQ4D,GAAG,CAAC,2BAA2B;YACrCC,QAAA,EAAUxD,IAAA,CAAKC,GAAG,KAAK+C,SAAA;YACvBK,OAAA;YACAtD,SAAA,EAAWC,IAAA,CAAKC,GAAG;UACrB;UAAA;UAAA7B,aAAA,GAAAE,CAAA;UAEA,OAAOgF,MAAA;QACT,EAAE,OAAO9D,KAAA,EAAO;UAAA;UAAApB,aAAA,GAAAE,CAAA;UACd6E,SAAA,GAAY3D,KAAA;UAAA;UAAApB,aAAA,GAAAE,CAAA;UACZqB,OAAA,CAAQ8D,IAAI,CAAC,0BAA0BJ,OAAA,UAAiB,EAAE7D,KAAA;UAAA;UAAApB,aAAA,GAAAE,CAAA;UAE1D,IAAI+E,OAAA,GAAUT,UAAA,EAAY;YAAA;YAAAxE,aAAA,GAAA+B,CAAA;YAAA/B,aAAA,GAAAE,CAAA;YACxB;YACA,MAAM,IAAI2E,OAAA,CAAQS,OAAA,IAAW;cAAA;cAAAtF,aAAA,GAAAI,CAAA;cAAAJ,aAAA,GAAAE,CAAA;cAAA,OAAAqF,UAAA,CAAWD,OAAA,EAASE,IAAA,CAAKC,GAAG,CAAC,GAAGR,OAAA,IAAW;YAAA;UAC1E;UAAA;UAAA;YAAAjF,aAAA,GAAA+B,CAAA;UAAA;QACF;MACF;MAAA;MAAA/B,aAAA,GAAAE,CAAA;MAEA,MAAM6E,SAAA;IACR;IAEA;IACA,IAAIF,OAAA,CAAe,CAACzB,CAAA,EAAGsC,MAAA;MAAA;MAAA1F,aAAA,GAAAI,CAAA;MAAAJ,aAAA,GAAAE,CAAA;MACrBqF,UAAA,CAAW;QAAA;QAAAvF,aAAA,GAAAI,CAAA;QAAAJ,aAAA,GAAAE,CAAA;QACTwF,MAAA,CAAO,IAAIV,KAAA,CAAM,gCAAgCP,OAAA,IAAW;MAC9D,GAAGA,OAAA;IACL,GACD;EACH;EAEA;EAAA;EAAAzE,aAAA,GAAAE,CAAA;EACA;EAAI;EAAA,CAAAF,aAAA,GAAA+B,CAAA,WAAAwC,OAAA;EAAA;EAAA,CAAAvE,aAAA,GAAA+B,CAAA,WAAW,OAAO4D,MAAA,KAAW,cAAa;IAAA;IAAA3F,aAAA,GAAA+B,CAAA;IAAA/B,aAAA,GAAAE,CAAA;IAC5C;IACAqF,UAAA,CAAW;MAAA;MAAAvF,aAAA,GAAAI,CAAA;MAAAJ,aAAA,GAAAE,CAAA;MACTmE,QAAA,GAAWuB,KAAK,CAACxE,KAAA;QAAA;QAAApB,aAAA,GAAAI,CAAA;QAAAJ,aAAA,GAAAE,CAAA;QACfqB,OAAA,CAAQ8D,IAAI,CAAC,mBAAmBjE,KAAA;MAClC;IACF,GAAG;EACL;EAAA;EAAA;IAAApB,aAAA,GAAA+B,CAAA;EAAA;EAEA;EAAA/B,aAAA,GAAAE,CAAA;EACA,oBAAOW,MAAA,CAAAL,OAAK,CAACqF,UAAU,CAAS,CAAC7E,KAAA,EAAO8E,GAAA,KACtC;IAAA;IAAA9F,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IAAA,OADsC,aACtC,IAAA+B,WAAA,CAAAK,GAAA,EAACjC,WAAA;MACC2B,QAAA,EAAUA,QAAA;MACV4B,aAAA,EAAeA,aAAA;MACfE,QAAA,EAAS;gBAET,iBAAA7B,WAAA,CAAAK,GAAA,EAACoC,aAAA;QAAe,GAAI1D,KAAK;QAAU8E,GAAA,EAAKA;;;;AAG9C;AAGO,SAASnF,oBACd0D,QAAwD,EACxD0B,SAAA;AAAA;AAAA,CAAA/F,aAAA,GAAA+B,CAAA,WAAqB,IAAI;EAAA;EAAA/B,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EAEzBW,MAAA,CAAAL,OAAK,CAAC0D,SAAS,CAAC;IAAA;IAAAlE,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACd;IAAI;IAAA,CAAAF,aAAA,GAAA+B,CAAA,WAAAgE,SAAA;IAAA;IAAA,CAAA/F,aAAA,GAAA+B,CAAA,WAAa,OAAO4D,MAAA,KAAW,cAAa;MAAA;MAAA3F,aAAA,GAAA+B,CAAA;MAC9C,MAAMiE,YAAA;MAAA;MAAA,CAAAhG,aAAA,GAAAE,CAAA,SAAeqF,UAAA,CAAW;QAAA;QAAAvF,aAAA,GAAAI,CAAA;QAAAJ,aAAA,GAAAE,CAAA;QAC9BmE,QAAA,GAAWuB,KAAK,CAACxE,KAAA;UAAA;UAAApB,aAAA,GAAAI,CAAA;UAAAJ,aAAA,GAAAE,CAAA;UACfqB,OAAA,CAAQ8D,IAAI,CAAC,6BAA6BjE,KAAA;QAC5C;MACF,GAAG;MAAA;MAAApB,aAAA,GAAAE,CAAA;MAEH,OAAO,MAAM;QAAA;QAAAF,aAAA,GAAAI,CAAA;QAAAJ,aAAA,GAAAE,CAAA;QAAA,OAAA+F,YAAA,CAAaD,YAAA;MAAA;IAC5B;IAAA;IAAA;MAAAhG,aAAA,GAAA+B,CAAA;IAAA;EACF,GAAG,CAACsC,QAAA,EAAU0B,SAAA,CAAU;AAC1B;AAGO,SAASrF,wBACdoF,GAAwC,EACxCxB,OAAA;AAAA;AAAA,CAAAtE,aAAA,GAAA+B,CAAA,WAAoC,CAAC,CAAC;EAAA;EAAA/B,aAAA,GAAAI,CAAA;EAEtC,MAAM,CAAC8F,cAAA,EAAgBC,iBAAA,CAAkB;EAAA;EAAA,CAAAnG,aAAA,GAAAE,CAAA,SAAGW,MAAA,CAAAL,OAAK,CAAC4F,QAAQ,CAAC;EAC3D,MAAM,CAACC,cAAA,EAAgBC,iBAAA,CAAkB;EAAA;EAAA,CAAAtG,aAAA,GAAAE,CAAA,SAAGW,MAAA,CAAAL,OAAK,CAAC4F,QAAQ,CAAC;EAAA;EAAApG,aAAA,GAAAE,CAAA;EAE3DW,MAAA,CAAAL,OAAK,CAAC0D,SAAS,CAAC;IAAA;IAAAlE,aAAA,GAAAI,CAAA;IACd,MAAMmG,OAAA;IAAA;IAAA,CAAAvG,aAAA,GAAAE,CAAA,SAAU4F,GAAA,CAAIU,OAAO;IAAA;IAAAxG,aAAA,GAAAE,CAAA;IAC3B;IAAI;IAAA,CAAAF,aAAA,GAAA+B,CAAA,YAACwE,OAAA;IAAA;IAAA,CAAAvG,aAAA,GAAA+B,CAAA,WAAWsE,cAAA,GAAgB;MAAA;MAAArG,aAAA,GAAA+B,CAAA;MAAA/B,aAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,aAAA,GAAA+B,CAAA;IAAA;IAEhC,MAAM0E,QAAA;IAAA;IAAA,CAAAzG,aAAA,GAAAE,CAAA,SAAW,IAAIwG,oBAAA,CACnB,CAAC,CAACC,KAAA,CAAM;MAAA;MAAA3G,aAAA,GAAAI,CAAA;MAAAJ,aAAA,GAAAE,CAAA;MACN,IAAIyG,KAAA,CAAMT,cAAc,EAAE;QAAA;QAAAlG,aAAA,GAAA+B,CAAA;QAAA/B,aAAA,GAAAE,CAAA;QACxBiG,iBAAA,CAAkB;QAAA;QAAAnG,aAAA,GAAAE,CAAA;QAClBoG,iBAAA,CAAkB;QAAA;QAAAtG,aAAA,GAAAE,CAAA;QAClBuG,QAAA,CAASG,UAAU;MACrB;MAAA;MAAA;QAAA5G,aAAA,GAAA+B,CAAA;MAAA;IACF,GACA;MACE8E,SAAA,EAAW;MACXC,UAAA,EAAY;MACZ,GAAGxC;IACL;IAAA;IAAAtE,aAAA,GAAAE,CAAA;IAGFuG,QAAA,CAASM,OAAO,CAACR,OAAA;IAAA;IAAAvG,aAAA,GAAAE,CAAA;IAEjB,OAAO,MAAM;MAAA;MAAAF,aAAA,GAAAI,CAAA;MAAAJ,aAAA,GAAAE,CAAA;MAAA,OAAAuG,QAAA,CAASG,UAAU;IAAA;EAClC,GAAG,CAACd,GAAA,EAAKO,cAAA,EAAgB/B,OAAA,CAAQ;EAAA;EAAAtE,aAAA,GAAAE,CAAA;EAEjC,OAAO;IAAEgG,cAAA;IAAgBG;EAAe;AAC1C;AAYO,SAASlG,iBAAiB;EAC/BwC,QAAQ;EACRX,QAAQ;EACRK,SAAS;EACTwE,SAAA;EAAA;EAAA,CAAA7G,aAAA,GAAA+B,CAAA,WAAY,GAAG;EACf+E,UAAA;EAAA;EAAA,CAAA9G,aAAA,GAAA+B,CAAA,WAAa,MAAM;EACnBiF,IAAA;EAAA;EAAA,CAAAhH,aAAA,GAAA+B,CAAA,WAAO,IAAI;AAAA,CACW;EAAA;EAAA/B,aAAA,GAAAI,CAAA;EACtB,MAAM0F,GAAA;EAAA;EAAA,CAAA9F,aAAA,GAAAE,CAAA,SAAMW,MAAA,CAAAL,OAAK,CAACyG,MAAM,CAAiB;EACzC,MAAM;IAAEf,cAAc;IAAEG;EAAc,CAAE;EAAA;EAAA,CAAArG,aAAA,GAAAE,CAAA,SAAGQ,uBAAA,CAAwBoF,GAAA,EAAK;IACtEe,SAAA;IACAC;EACF;EAEA,MAAMI,YAAA;EAAA;EAAA,CAAAlH,aAAA,GAAAE,CAAA,SAAe8G,IAAA;EAAA;EAAA,CAAAhH,aAAA,GAAA+B,CAAA,WAAOsE,cAAA;EAAA;EAAA,CAAArG,aAAA,GAAA+B,CAAA,WAAiBmE,cAAA;EAAA;EAAAlG,aAAA,GAAAE,CAAA;EAE7C,oBACE,IAAA+B,WAAA,CAAAK,GAAA,EAAC;IAAIwD,GAAA,EAAKA,GAAA;IAAKzD,SAAA,EAAWA,SAAA;cACvB6E,YAAA;IAAA;IAAA,CAAAlH,aAAA,GAAA+B,CAAA,WAAeY,QAAA;IAAA;IAAA,CAAA3C,aAAA,GAAA+B,CAAA;IAAY;IAAA,CAAA/B,aAAA,GAAA+B,CAAA,WAAAC,QAAA;IAAA;IAAA,CAAAhC,aAAA,GAAA+B,CAAA,wBAAY,IAAAE,WAAA,CAAAK,GAAA,EAACoB,eAAA;MAAgBC,IAAA,EAAK;;;AAGpE;AAGO,SAASpD,qBACd8D,QAAwD;EAAA;EAAArE,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EAExD,OAAOI,mBAAA,CAAoB+D,QAAA,EAAU;IACnCE,OAAA,EAAS;IACTC,UAAA,EAAY;IACZC,OAAA,EAAS;IACTzC,QAAA,eAAU,IAAAC,WAAA,CAAAK,GAAA,EAACoB,eAAA;MAAgBC,IAAA,EAAK;;EAClC;AACF;MAEAlD,QAAA;AAAA;AAAA,CAAAT,aAAA,GAAAE,CAAA,SAAeG,WAAA","ignoreList":[]}