{"version":3,"names":["CriticalImage","cov_1c23cztmkj","f","s","OptimizedBackground","OptimizedImage","default","_default","useImagePreload","withImageOptimization","src","alt","className","b","width","height","quality","format","lazy","placeholder","fallback","onLoad","onError","priority","sizes","isLoaded","setIsLoaded","_react","useState","isInView","setIsInView","hasError","setHasError","currentSrc","setCurrentSrc","imgRef","useRef","observerRef","optimizationOptions","optimizedSrc","_performanceOptimization","performanceOptimizationService","optimizeImage","useEffect","current","createIntersectionObserver","entries","forEach","entry","isIntersecting","disconnect","observe","handleLoad","handleError","event","error","Error","generateSrcSet","undefined","densities","map","density","scaledWidth","Math","round","scaledHeight","scaledSrc","join","PlaceholderComponent","_jsxruntime","jsx","style","_lucidereact","Loader2","ErrorComponent","jsxs","AlertTriangle","ref","srcSet","position","top","left","loading","decoding","Component","forwardRef","props","options","isPreloaded","setIsPreloaded","img","Image","onload","onerror","children","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\components\\ui\\OptimizedImage.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\nimport { performanceOptimizationService, ImageOptimizationOptions } from '../../services/performanceOptimization'\nimport { Loader2, AlertTriangle } from 'lucide-react'\n\ninterface OptimizedImageProps {\n  src: string\n  alt: string\n  className?: string\n  width?: number\n  height?: number\n  quality?: number\n  format?: 'webp' | 'avif' | 'jpeg' | 'png'\n  lazy?: boolean\n  placeholder?: string\n  fallback?: string\n  onLoad?: () => void\n  onError?: (error: Error) => void\n  priority?: boolean // For above-the-fold images\n  sizes?: string // Responsive sizes\n}\n\nexport const OptimizedImage: React.FC<OptimizedImageProps> = ({\n  src,\n  alt,\n  className = '',\n  width,\n  height,\n  quality = 80,\n  format = 'webp',\n  lazy = true,\n  placeholder,\n  fallback,\n  onLoad,\n  onError,\n  priority = false,\n  sizes\n}) => {\n  const [isLoaded, setIsLoaded] = useState(false)\n  const [isInView, setIsInView] = useState(!lazy || priority)\n  const [hasError, setHasError] = useState(false)\n  const [currentSrc, setCurrentSrc] = useState<string>('')\n  const imgRef = useRef<HTMLImageElement>(null)\n  const observerRef = useRef<IntersectionObserver | null>(null)\n\n  // Generate optimized image URL\n  const optimizationOptions: Partial<ImageOptimizationOptions> = {\n    quality,\n    format,\n    width,\n    height,\n    lazy\n  }\n\n  const optimizedSrc = performanceOptimizationService.optimizeImage(src, optimizationOptions)\n\n  // Set up intersection observer for lazy loading\n  useEffect(() => {\n    if (!lazy || priority) {\n      setIsInView(true)\n      return\n    }\n\n    if (imgRef.current) {\n      observerRef.current = performanceOptimizationService.createIntersectionObserver(\n        (entries) => {\n          entries.forEach((entry) => {\n            if (entry.isIntersecting) {\n              setIsInView(true)\n              observerRef.current?.disconnect()\n            }\n          })\n        }\n      )\n\n      observerRef.current.observe(imgRef.current)\n    }\n\n    return () => {\n      observerRef.current?.disconnect()\n    }\n  }, [lazy, priority])\n\n  // Handle image loading\n  useEffect(() => {\n    if (isInView && !currentSrc) {\n      setCurrentSrc(optimizedSrc)\n    }\n  }, [isInView, optimizedSrc, currentSrc])\n\n  const handleLoad = () => {\n    setIsLoaded(true)\n    onLoad?.()\n  }\n\n  const handleError = (event: React.SyntheticEvent<HTMLImageElement, Event>) => {\n    setHasError(true)\n    const error = new Error(`Failed to load image: ${src}`)\n    onError?.(error)\n\n    // Try fallback image if provided\n    if (fallback && currentSrc !== fallback) {\n      setCurrentSrc(fallback)\n      setHasError(false)\n    }\n  }\n\n  // Generate responsive srcSet for different screen densities\n  const generateSrcSet = () => {\n    if (!width || !height) return undefined\n\n    const densities = [1, 1.5, 2, 3]\n    return densities\n      .map(density => {\n        const scaledWidth = Math.round(width * density)\n        const scaledHeight = Math.round(height * density)\n        const scaledSrc = performanceOptimizationService.optimizeImage(src, {\n          ...optimizationOptions,\n          width: scaledWidth,\n          height: scaledHeight\n        })\n        return `${scaledSrc} ${density}x`\n      })\n      .join(', ')\n  }\n\n  // Placeholder component\n  const PlaceholderComponent = () => {\n    if (placeholder) {\n      return (\n        <img\n          src={placeholder}\n          alt=\"\"\n          className={`${className} blur-sm transition-all duration-300`}\n          style={{ width, height }}\n        />\n      )\n    }\n\n    return (\n      <div\n        className={`${className} bg-gray-200 flex items-center justify-center transition-all duration-300`}\n        style={{ width, height }}\n      >\n        <Loader2 className=\"h-6 w-6 text-gray-400 animate-spin\" />\n      </div>\n    )\n  }\n\n  // Error component\n  const ErrorComponent = () => (\n    <div\n      className={`${className} bg-gray-100 border-2 border-dashed border-gray-300 flex flex-col items-center justify-center text-gray-500`}\n      style={{ width, height }}\n    >\n      <AlertTriangle className=\"h-6 w-6 mb-2\" />\n      <span className=\"text-sm text-center px-2\">Failed to load image</span>\n    </div>\n  )\n\n  // Don't render anything if not in view and lazy loading\n  if (!isInView) {\n    return (\n      <div\n        ref={imgRef}\n        className={className}\n        style={{ width, height }}\n      >\n        <PlaceholderComponent />\n      </div>\n    )\n  }\n\n  // Show error state\n  if (hasError && !fallback) {\n    return <ErrorComponent />\n  }\n\n  return (\n    <div className=\"relative\" style={{ width, height }}>\n      {/* Placeholder while loading */}\n      {!isLoaded && <PlaceholderComponent />}\n      \n      {/* Main image */}\n      <img\n        ref={imgRef}\n        src={currentSrc}\n        srcSet={generateSrcSet()}\n        sizes={sizes}\n        alt={alt}\n        className={`${className} transition-opacity duration-300 ${\n          isLoaded ? 'opacity-100' : 'opacity-0'\n        }`}\n        style={{\n          width,\n          height,\n          position: isLoaded ? 'static' : 'absolute',\n          top: 0,\n          left: 0\n        }}\n        onLoad={handleLoad}\n        onError={handleError}\n        loading={priority ? 'eager' : 'lazy'}\n        decoding=\"async\"\n      />\n    </div>\n  )\n}\n\n// Higher-order component for automatic optimization\nexport const withImageOptimization = <P extends object>(\n  Component: React.ComponentType<P>\n) => {\n  return React.forwardRef<any, P>((props, ref) => {\n    return <Component {...(props as any)} ref={ref} />\n  })\n}\n\n// Hook for image preloading\nexport const useImagePreload = (src: string, options?: Partial<ImageOptimizationOptions>) => {\n  const [isPreloaded, setIsPreloaded] = useState(false)\n\n  useEffect(() => {\n    const optimizedSrc = performanceOptimizationService.optimizeImage(src, options)\n    \n    const img = new Image()\n    img.onload = () => setIsPreloaded(true)\n    img.onerror = () => setIsPreloaded(false)\n    img.src = optimizedSrc\n\n    return () => {\n      img.onload = null\n      img.onerror = null\n    }\n  }, [src, options])\n\n  return isPreloaded\n}\n\n// Component for critical above-the-fold images\nexport const CriticalImage: React.FC<OptimizedImageProps> = (props) => {\n  return <OptimizedImage {...props} priority={true} lazy={false} />\n}\n\n// Component for background images with optimization\ninterface OptimizedBackgroundProps {\n  src: string\n  className?: string\n  children?: React.ReactNode\n  quality?: number\n  format?: 'webp' | 'avif' | 'jpeg' | 'png'\n  width?: number\n  height?: number\n}\n\nexport const OptimizedBackground: React.FC<OptimizedBackgroundProps> = ({\n  src,\n  className = '',\n  children,\n  quality = 80,\n  format = 'webp',\n  width,\n  height\n}) => {\n  const optimizedSrc = performanceOptimizationService.optimizeImage(src, {\n    quality,\n    format,\n    width,\n    height\n  })\n\n  return (\n    <div\n      className={className}\n      style={{\n        backgroundImage: `url(${optimizedSrc})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat'\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default OptimizedImage"],"mappingsaA,cAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAH,aAAA;;MAeAI,oBAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAC,mBAAA;;MAzOAC,eAAA;IAAA;IAAAJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAE,cAAA;;MAwQbC,QAAA;IAAA;IAAAL,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAI,QAAA;;MAnEaC,gBAAA;IAAA;IAAAP,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAK,eAAA;;MATAC,sBAAA;IAAA;IAAAR,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAM,qBAAA;;;;;;;;0EAjNsC;;;mCACsB;;;mCAClC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBhC,MAAMJ,cAAA,GAAgDA,CAAC;EAC5DK,GAAG;EACHC,GAAG;EACHC,SAAA;EAAA;EAAA,CAAAX,cAAA,GAAAY,CAAA,WAAY,EAAE;EACdC,KAAK;EACLC,MAAM;EACNC,OAAA;EAAA;EAAA,CAAAf,cAAA,GAAAY,CAAA,WAAU,EAAE;EACZI,MAAA;EAAA;EAAA,CAAAhB,cAAA,GAAAY,CAAA,WAAS,MAAM;EACfK,IAAA;EAAA;EAAA,CAAAjB,cAAA,GAAAY,CAAA,WAAO,IAAI;EACXM,WAAW;EACXC,QAAQ;EACRC,MAAM;EACNC,OAAO;EACPC,QAAA;EAAA;EAAA,CAAAtB,cAAA,GAAAY,CAAA,WAAW,KAAK;EAChBW;AAAK,CACN;EAAA;EAAAvB,cAAA,GAAAC,CAAA;EACC,MAAM,CAACuB,QAAA,EAAUC,WAAA,CAAY;EAAA;EAAA,CAAAzB,cAAA,GAAAE,CAAA,QAAG,IAAAwB,MAAA,CAAAC,QAAQ,EAAC;EACzC,MAAM,CAACC,QAAA,EAAUC,WAAA,CAAY;EAAA;EAAA,CAAA7B,cAAA,GAAAE,CAAA,QAAG,IAAAwB,MAAA,CAAAC,QAAQ;EAAC;EAAA,CAAA3B,cAAA,GAAAY,CAAA,YAACK,IAAA;EAAA;EAAA,CAAAjB,cAAA,GAAAY,CAAA,WAAQU,QAAA;EAClD,MAAM,CAACQ,QAAA,EAAUC,WAAA,CAAY;EAAA;EAAA,CAAA/B,cAAA,GAAAE,CAAA,QAAG,IAAAwB,MAAA,CAAAC,QAAQ,EAAC;EACzC,MAAM,CAACK,UAAA,EAAYC,aAAA,CAAc;EAAA;EAAA,CAAAjC,cAAA,GAAAE,CAAA,QAAG,IAAAwB,MAAA,CAAAC,QAAQ,EAAS;EACrD,MAAMO,MAAA;EAAA;EAAA,CAAAlC,cAAA,GAAAE,CAAA,QAAS,IAAAwB,MAAA,CAAAS,MAAM,EAAmB;EACxC,MAAMC,WAAA;EAAA;EAAA,CAAApC,cAAA,GAAAE,CAAA,QAAc,IAAAwB,MAAA,CAAAS,MAAM,EAA8B;EAExD;EACA,MAAME,mBAAA;EAAA;EAAA,CAAArC,cAAA,GAAAE,CAAA,QAAyD;IAC7Da,OAAA;IACAC,MAAA;IACAH,KAAA;IACAC,MAAA;IACAG;EACF;EAEA,MAAMqB,YAAA;EAAA;EAAA,CAAAtC,cAAA,GAAAE,CAAA,QAAeqC,wBAAA,CAAAC,8BAA8B,CAACC,aAAa,CAAChC,GAAA,EAAK4B,mBAAA;EAEvE;EAAA;EAAArC,cAAA,GAAAE,CAAA;EACA,IAAAwB,MAAA,CAAAgB,SAAS,EAAC;IAAA;IAAA1C,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACR;IAAI;IAAA,CAAAF,cAAA,GAAAY,CAAA,YAACK,IAAA;IAAA;IAAA,CAAAjB,cAAA,GAAAY,CAAA,WAAQU,QAAA,GAAU;MAAA;MAAAtB,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MACrB2B,WAAA,CAAY;MAAA;MAAA7B,cAAA,GAAAE,CAAA;MACZ;IACF;IAAA;IAAA;MAAAF,cAAA,GAAAY,CAAA;IAAA;IAAAZ,cAAA,GAAAE,CAAA;IAEA,IAAIgC,MAAA,CAAOS,OAAO,EAAE;MAAA;MAAA3C,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MAClBkC,WAAA,CAAYO,OAAO,GAAGJ,wBAAA,CAAAC,8BAA8B,CAACI,0BAA0B,CAC5EC,OAAA;QAAA;QAAA7C,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QACC2C,OAAA,CAAQC,OAAO,CAAEC,KAAA;UAAA;UAAA/C,cAAA,GAAAC,CAAA;UAAAD,cAAA,GAAAE,CAAA;UACf,IAAI6C,KAAA,CAAMC,cAAc,EAAE;YAAA;YAAAhD,cAAA,GAAAY,CAAA;YAAAZ,cAAA,GAAAE,CAAA;YACxB2B,WAAA,CAAY;YAAA;YAAA7B,cAAA,GAAAE,CAAA;YACZkC,WAAA,CAAYO,OAAO,EAAEM,UAAA;UACvB;UAAA;UAAA;YAAAjD,cAAA,GAAAY,CAAA;UAAA;QACF;MACF;MAAA;MAAAZ,cAAA,GAAAE,CAAA;MAGFkC,WAAA,CAAYO,OAAO,CAACO,OAAO,CAAChB,MAAA,CAAOS,OAAO;IAC5C;IAAA;IAAA;MAAA3C,cAAA,GAAAY,CAAA;IAAA;IAAAZ,cAAA,GAAAE,CAAA;IAEA,OAAO;MAAA;MAAAF,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MACLkC,WAAA,CAAYO,OAAO,EAAEM,UAAA;IACvB;EACF,GAAG,CAAChC,IAAA,EAAMK,QAAA,CAAS;EAEnB;EAAA;EAAAtB,cAAA,GAAAE,CAAA;EACA,IAAAwB,MAAA,CAAAgB,SAAS,EAAC;IAAA;IAAA1C,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACR;IAAI;IAAA,CAAAF,cAAA,GAAAY,CAAA,WAAAgB,QAAA;IAAA;IAAA,CAAA5B,cAAA,GAAAY,CAAA,WAAY,CAACoB,UAAA,GAAY;MAAA;MAAAhC,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MAC3B+B,aAAA,CAAcK,YAAA;IAChB;IAAA;IAAA;MAAAtC,cAAA,GAAAY,CAAA;IAAA;EACF,GAAG,CAACgB,QAAA,EAAUU,YAAA,EAAcN,UAAA,CAAW;EAAA;EAAAhC,cAAA,GAAAE,CAAA;EAEvC,MAAMiD,UAAA,GAAaA,CAAA;IAAA;IAAAnD,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACjBuB,WAAA,CAAY;IAAA;IAAAzB,cAAA,GAAAE,CAAA;IACZkB,MAAA;EACF;EAAA;EAAApB,cAAA,GAAAE,CAAA;EAEA,MAAMkD,WAAA,GAAeC,KAAA;IAAA;IAAArD,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACnB6B,WAAA,CAAY;IACZ,MAAMuB,KAAA;IAAA;IAAA,CAAAtD,cAAA,GAAAE,CAAA,QAAQ,IAAIqD,KAAA,CAAM,yBAAyB9C,GAAA,EAAK;IAAA;IAAAT,cAAA,GAAAE,CAAA;IACtDmB,OAAA,GAAUiC,KAAA;IAEV;IAAA;IAAAtD,cAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,cAAA,GAAAY,CAAA,WAAAO,QAAA;IAAA;IAAA,CAAAnB,cAAA,GAAAY,CAAA,WAAYoB,UAAA,KAAeb,QAAA,GAAU;MAAA;MAAAnB,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MACvC+B,aAAA,CAAcd,QAAA;MAAA;MAAAnB,cAAA,GAAAE,CAAA;MACd6B,WAAA,CAAY;IACd;IAAA;IAAA;MAAA/B,cAAA,GAAAY,CAAA;IAAA;EACF;EAEA;EAAA;EAAAZ,cAAA,GAAAE,CAAA;EACA,MAAMsD,cAAA,GAAiBA,CAAA;IAAA;IAAAxD,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACrB;IAAI;IAAA,CAAAF,cAAA,GAAAY,CAAA,YAACC,KAAA;IAAA;IAAA,CAAAb,cAAA,GAAAY,CAAA,WAAS,CAACE,MAAA,GAAQ;MAAA;MAAAd,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MAAA,OAAOuD,SAAA;IAAA;IAAA;IAAA;MAAAzD,cAAA,GAAAY,CAAA;IAAA;IAE9B,MAAM8C,SAAA;IAAA;IAAA,CAAA1D,cAAA,GAAAE,CAAA,QAAY,CAAC,GAAG,KAAK,GAAG,EAAE;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAChC,OAAOwD,SAAA,CACJC,GAAG,CAACC,OAAA;MAAA;MAAA5D,cAAA,GAAAC,CAAA;MACH,MAAM4D,WAAA;MAAA;MAAA,CAAA7D,cAAA,GAAAE,CAAA,QAAc4D,IAAA,CAAKC,KAAK,CAAClD,KAAA,GAAQ+C,OAAA;MACvC,MAAMI,YAAA;MAAA;MAAA,CAAAhE,cAAA,GAAAE,CAAA,QAAe4D,IAAA,CAAKC,KAAK,CAACjD,MAAA,GAAS8C,OAAA;MACzC,MAAMK,SAAA;MAAA;MAAA,CAAAjE,cAAA,GAAAE,CAAA,QAAYqC,wBAAA,CAAAC,8BAA8B,CAACC,aAAa,CAAChC,GAAA,EAAK;QAClE,GAAG4B,mBAAmB;QACtBxB,KAAA,EAAOgD,WAAA;QACP/C,MAAA,EAAQkD;MACV;MAAA;MAAAhE,cAAA,GAAAE,CAAA;MACA,OAAO,GAAG+D,SAAA,IAAaL,OAAA,GAAU;IACnC,GACCM,IAAI,CAAC;EACV;EAEA;EAAA;EAAAlE,cAAA,GAAAE,CAAA;EACA,MAAMiE,oBAAA,GAAuBA,CAAA;IAAA;IAAAnE,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC3B,IAAIgB,WAAA,EAAa;MAAA;MAAAlB,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MACf,oBACE,IAAAkE,WAAA,CAAAC,GAAA,EAAC;QACC5D,GAAA,EAAKS,WAAA;QACLR,GAAA,EAAI;QACJC,SAAA,EAAW,GAAGA,SAAA,sCAA+C;QAC7D2D,KAAA,EAAO;UAAEzD,KAAA;UAAOC;QAAO;;IAG7B;IAAA;IAAA;MAAAd,cAAA,GAAAY,CAAA;IAAA;IAAAZ,cAAA,GAAAE,CAAA;IAEA,oBACE,IAAAkE,WAAA,CAAAC,GAAA,EAAC;MACC1D,SAAA,EAAW,GAAGA,SAAA,2EAAoF;MAClG2D,KAAA,EAAO;QAAEzD,KAAA;QAAOC;MAAO;gBAEvB,iBAAAsD,WAAA,CAAAC,GAAA,EAACE,YAAA,CAAAC,OAAO;QAAC7D,SAAA,EAAU;;;EAGzB;EAEA;EAAA;EAAAX,cAAA,GAAAE,CAAA;EACA,MAAMuE,cAAA,GAAiBA,CAAA,KACrB;IAAA;IAAAzE,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAAA,OADqB,aACrB,IAAAkE,WAAA,CAAAM,IAAA,EAAC;MACC/D,SAAA,EAAW,GAAGA,SAAA,6GAAsH;MACpI2D,KAAA,EAAO;QAAEzD,KAAA;QAAOC;MAAO;8BAEvB,IAAAsD,WAAA,CAAAC,GAAA,EAACE,YAAA,CAAAI,aAAa;QAAChE,SAAA,EAAU;uBACzB,IAAAyD,WAAA,CAAAC,GAAA,EAAC;QAAK1D,SAAA,EAAU;kBAA2B;;;;EAI/C;EAAA;EAAAX,cAAA,GAAAE,CAAA;EACA,IAAI,CAAC0B,QAAA,EAAU;IAAA;IAAA5B,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IACb,oBACE,IAAAkE,WAAA,CAAAC,GAAA,EAAC;MACCO,GAAA,EAAK1C,MAAA;MACLvB,SAAA,EAAWA,SAAA;MACX2D,KAAA,EAAO;QAAEzD,KAAA;QAAOC;MAAO;gBAEvB,iBAAAsD,WAAA,CAAAC,GAAA,EAACF,oBAAA;;EAGP;EAAA;EAAA;IAAAnE,cAAA,GAAAY,CAAA;EAAA;EAEA;EAAAZ,cAAA,GAAAE,CAAA;EACA;EAAI;EAAA,CAAAF,cAAA,GAAAY,CAAA,WAAAkB,QAAA;EAAA;EAAA,CAAA9B,cAAA,GAAAY,CAAA,WAAY,CAACO,QAAA,GAAU;IAAA;IAAAnB,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAE,CAAA;IACzB,oBAAO,IAAAkE,WAAA,CAAAC,GAAA,EAACI,cAAA;EACV;EAAA;EAAA;IAAAzE,cAAA,GAAAY,CAAA;EAAA;EAAAZ,cAAA,GAAAE,CAAA;EAEA,oBACE,IAAAkE,WAAA,CAAAM,IAAA,EAAC;IAAI/D,SAAA,EAAU;IAAW2D,KAAA,EAAO;MAAEzD,KAAA;MAAOC;IAAO;;IAE9C;IAAA,CAAAd,cAAA,GAAAY,CAAA,YAACY,QAAA;IAAA;IAAA,CAAAxB,cAAA,GAAAY,CAAA,wBAAY,IAAAwD,WAAA,CAAAC,GAAA,EAACF,oBAAA,Q,aAGf,IAAAC,WAAA,CAAAC,GAAA,EAAC;MACCO,GAAA,EAAK1C,MAAA;MACLzB,GAAA,EAAKuB,UAAA;MACL6C,MAAA,EAAQrB,cAAA;MACRjC,KAAA,EAAOA,KAAA;MACPb,GAAA,EAAKA,GAAA;MACLC,SAAA,EAAW,GAAGA,SAAA,oCACZa,QAAA;MAAA;MAAA,CAAAxB,cAAA,GAAAY,CAAA,WAAW;MAAA;MAAA,CAAAZ,cAAA,GAAAY,CAAA,WAAgB,cAC3B;MACF0D,KAAA,EAAO;QACLzD,KAAA;QACAC,MAAA;QACAgE,QAAA,EAAUtD,QAAA;QAAA;QAAA,CAAAxB,cAAA,GAAAY,CAAA,WAAW;QAAA;QAAA,CAAAZ,cAAA,GAAAY,CAAA,WAAW;QAChCmE,GAAA,EAAK;QACLC,IAAA,EAAM;MACR;MACA5D,MAAA,EAAQ+B,UAAA;MACR9B,OAAA,EAAS+B,WAAA;MACT6B,OAAA,EAAS3D,QAAA;MAAA;MAAA,CAAAtB,cAAA,GAAAY,CAAA,WAAW;MAAA;MAAA,CAAAZ,cAAA,GAAAY,CAAA,WAAU;MAC9BsE,QAAA,EAAS;;;AAIjB;AAAA;AAAAlF,cAAA,GAAAE,CAAA;AAGO,MAAMM,qBAAA,GACX2E,SAAA;EAAA;EAAAnF,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAEA,oBAAOwB,MAAA,CAAArB,OAAK,CAAC+E,UAAU,CAAS,CAACC,KAAA,EAAOT,GAAA;IAAA;IAAA5E,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACtC,oBAAO,IAAAkE,WAAA,CAAAC,GAAA,EAACc,SAAA;MAAW,GAAIE,KAAK;MAAUT,GAAA,EAAKA;;EAC7C;AACF;AAAA;AAAA5E,cAAA,GAAAE,CAAA;AAGO,MAAMK,eAAA,GAAkBA,CAACE,GAAA,EAAa6E,OAAA;EAAA;EAAAtF,cAAA,GAAAC,CAAA;EAC3C,MAAM,CAACsF,WAAA,EAAaC,cAAA,CAAe;EAAA;EAAA,CAAAxF,cAAA,GAAAE,CAAA,QAAG,IAAAwB,MAAA,CAAAC,QAAQ,EAAC;EAAA;EAAA3B,cAAA,GAAAE,CAAA;EAE/C,IAAAwB,MAAA,CAAAgB,SAAS,EAAC;IAAA;IAAA1C,cAAA,GAAAC,CAAA;IACR,MAAMqC,YAAA;IAAA;IAAA,CAAAtC,cAAA,GAAAE,CAAA,SAAeqC,wBAAA,CAAAC,8BAA8B,CAACC,aAAa,CAAChC,GAAA,EAAK6E,OAAA;IAEvE,MAAMG,GAAA;IAAA;IAAA,CAAAzF,cAAA,GAAAE,CAAA,SAAM,IAAIwF,KAAA;IAAA;IAAA1F,cAAA,GAAAE,CAAA;IAChBuF,GAAA,CAAIE,MAAM,GAAG,MAAM;MAAA;MAAA3F,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAAsF,cAAA,CAAe;IAAA;IAAA;IAAAxF,cAAA,GAAAE,CAAA;IAClCuF,GAAA,CAAIG,OAAO,GAAG,MAAM;MAAA;MAAA5F,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA,OAAAsF,cAAA,CAAe;IAAA;IAAA;IAAAxF,cAAA,GAAAE,CAAA;IACnCuF,GAAA,CAAIhF,GAAG,GAAG6B,YAAA;IAAA;IAAAtC,cAAA,GAAAE,CAAA;IAEV,OAAO;MAAA;MAAAF,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MACLuF,GAAA,CAAIE,MAAM,GAAG;MAAA;MAAA3F,cAAA,GAAAE,CAAA;MACbuF,GAAA,CAAIG,OAAO,GAAG;IAChB;EACF,GAAG,CAACnF,GAAA,EAAK6E,OAAA,CAAQ;EAAA;EAAAtF,cAAA,GAAAE,CAAA;EAEjB,OAAOqF,WAAA;AACT;AAAA;AAAAvF,cAAA,GAAAE,CAAA;AAGO,MAAMH,aAAA,GAAgDsF,KAAA;EAAA;EAAArF,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAC3D,oBAAO,IAAAkE,WAAA,CAAAC,GAAA,EAACjE,cAAA;IAAgB,GAAGiF,KAAK;IAAE/D,QAAA,EAAU;IAAML,IAAA,EAAM;;AAC1D;AAAA;AAAAjB,cAAA,GAAAE,CAAA;AAaO,MAAMC,mBAAA,GAA0DA,CAAC;EACtEM,GAAG;EACHE,SAAA;EAAA;EAAA,CAAAX,cAAA,GAAAY,CAAA,WAAY,EAAE;EACdiF,QAAQ;EACR9E,OAAA;EAAA;EAAA,CAAAf,cAAA,GAAAY,CAAA,WAAU,EAAE;EACZI,MAAA;EAAA;EAAA,CAAAhB,cAAA,GAAAY,CAAA,WAAS,MAAM;EACfC,KAAK;EACLC;AAAM,CACP;EAAA;EAAAd,cAAA,GAAAC,CAAA;EACC,MAAMqC,YAAA;EAAA;EAAA,CAAAtC,cAAA,GAAAE,CAAA,SAAeqC,wBAAA,CAAAC,8BAA8B,CAACC,aAAa,CAAChC,GAAA,EAAK;IACrEM,OAAA;IACAC,MAAA;IACAH,KAAA;IACAC;EACF;EAAA;EAAAd,cAAA,GAAAE,CAAA;EAEA,oBACE,IAAAkE,WAAA,CAAAC,GAAA,EAAC;IACC1D,SAAA,EAAWA,SAAA;IACX2D,KAAA,EAAO;MACLwB,eAAA,EAAiB,OAAOxD,YAAA,GAAe;MACvCyD,cAAA,EAAgB;MAChBC,kBAAA,EAAoB;MACpBC,gBAAA,EAAkB;IACpB;cAECJ;;AAGP;MAEAvF,QAAA;AAAA;AAAA,CAAAN,cAAA,GAAAE,CAAA,SAAeE,cAAA","ignoreList":[]}