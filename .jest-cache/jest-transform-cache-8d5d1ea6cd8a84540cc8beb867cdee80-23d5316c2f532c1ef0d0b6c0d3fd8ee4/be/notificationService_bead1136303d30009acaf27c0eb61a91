8a761198140b30365de2331539657e78
"use strict";

/* istanbul ignore next */
function cov_2gqr7kvrmv() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\notificationService.ts";
  var hash = "071085e2c0ac7717365453487e060d828c2d2c72";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\notificationService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 24
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 35
        }
      },
      "6": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 19,
          column: 44
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "8": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 66
        }
      },
      "9": {
        start: {
          line: 26,
          column: 32
        },
        end: {
          line: 28,
          column: 23
        }
      },
      "10": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 86
        }
      },
      "11": {
        start: {
          line: 29,
          column: 19
        },
        end: {
          line: 29,
          column: 86
        }
      },
      "12": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 26
        }
      },
      "13": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "14": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 66
        }
      },
      "15": {
        start: {
          line: 36,
          column: 33
        },
        end: {
          line: 39,
          column: 50
        }
      },
      "16": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 83
        }
      },
      "17": {
        start: {
          line: 40,
          column: 19
        },
        end: {
          line: 40,
          column: 83
        }
      },
      "18": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 26
        }
      },
      "19": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "20": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 66
        }
      },
      "21": {
        start: {
          line: 47,
          column: 26
        },
        end: {
          line: 50,
          column: 35
        }
      },
      "22": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 92
        }
      },
      "23": {
        start: {
          line: 51,
          column: 19
        },
        end: {
          line: 51,
          column: 92
        }
      },
      "24": {
        start: {
          line: 54,
          column: 26
        },
        end: {
          line: 57,
          column: 50
        }
      },
      "25": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 97
        }
      },
      "26": {
        start: {
          line: 58,
          column: 19
        },
        end: {
          line: 58,
          column: 97
        }
      },
      "27": {
        start: {
          line: 61,
          column: 26
        },
        end: {
          line: 61,
          column: 106
        }
      },
      "28": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 86
        }
      },
      "29": {
        start: {
          line: 62,
          column: 19
        },
        end: {
          line: 62,
          column: 86
        }
      },
      "30": {
        start: {
          line: 65,
          column: 32
        },
        end: {
          line: 69,
          column: 28
        }
      },
      "31": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 86
        }
      },
      "32": {
        start: {
          line: 70,
          column: 19
        },
        end: {
          line: 70,
          column: 86
        }
      },
      "33": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 20
        }
      },
      "34": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "35": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 66
        }
      },
      "36": {
        start: {
          line: 78,
          column: 32
        },
        end: {
          line: 78,
          column: 132
        }
      },
      "37": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "38": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 90
        }
      },
      "39": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 20
        }
      },
      "40": {
        start: {
          line: 85,
          column: 32
        },
        end: {
          line: 89,
          column: 28
        }
      },
      "41": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 98
        }
      },
      "42": {
        start: {
          line: 90,
          column: 19
        },
        end: {
          line: 90,
          column: 98
        }
      },
      "43": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 20
        }
      },
      "44": {
        start: {
          line: 95,
          column: 28
        },
        end: {
          line: 95,
          column: 73
        }
      },
      "45": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 49
        }
      },
      "46": {
        start: {
          line: 96,
          column: 42
        },
        end: {
          line: 96,
          column: 49
        }
      },
      "47": {
        start: {
          line: 97,
          column: 29
        },
        end: {
          line: 97,
          column: 98
        }
      },
      "48": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 111,
          column: 11
        }
      },
      "49": {
        start: {
          line: 114,
          column: 28
        },
        end: {
          line: 114,
          column: 73
        }
      },
      "50": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 47
        }
      },
      "51": {
        start: {
          line: 115,
          column: 40
        },
        end: {
          line: 115,
          column: 47
        }
      },
      "52": {
        start: {
          line: 116,
          column: 26
        },
        end: {
          line: 116,
          column: 97
        }
      },
      "53": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 130,
          column: 11
        }
      },
      "54": {
        start: {
          line: 133,
          column: 28
        },
        end: {
          line: 133,
          column: 73
        }
      },
      "55": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 53
        }
      },
      "56": {
        start: {
          line: 134,
          column: 46
        },
        end: {
          line: 134,
          column: 53
        }
      },
      "57": {
        start: {
          line: 135,
          column: 26
        },
        end: {
          line: 135,
          column: 46
        }
      },
      "58": {
        start: {
          line: 136,
          column: 25
        },
        end: {
          line: 136,
          column: 54
        }
      },
      "59": {
        start: {
          line: 137,
          column: 22
        },
        end: {
          line: 137,
          column: 73
        }
      },
      "60": {
        start: {
          line: 138,
          column: 24
        },
        end: {
          line: 138,
          column: 143
        }
      },
      "61": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 153,
          column: 11
        }
      },
      "62": {
        start: {
          line: 156,
          column: 28
        },
        end: {
          line: 156,
          column: 73
        }
      },
      "63": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 51
        }
      },
      "64": {
        start: {
          line: 157,
          column: 44
        },
        end: {
          line: 157,
          column: 51
        }
      },
      "65": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 171,
          column: 11
        }
      },
      "66": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 187,
          column: 11
        }
      },
      "67": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "68": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 66
        }
      },
      "69": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 38
        }
      },
      "70": {
        start: {
          line: 195,
          column: 24
        },
        end: {
          line: 205,
          column: 22
        }
      },
      "71": {
        start: {
          line: 202,
          column: 34
        },
        end: {
          line: 202,
          column: 69
        }
      },
      "72": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 54
        }
      },
      "73": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 72
        }
      },
      "74": {
        start: {
          line: 204,
          column: 47
        },
        end: {
          line: 204,
          column: 70
        }
      },
      "75": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 209,
          column: 10
        }
      },
      "76": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 34
        }
      },
      "77": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 72
        }
      },
      "78": {
        start: {
          line: 208,
          column: 56
        },
        end: {
          line: 208,
          column: 70
        }
      },
      "79": {
        start: {
          line: 213,
          column: 28
        },
        end: {
          line: 213,
          column: 73
        }
      },
      "80": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 54
        }
      },
      "81": {
        start: {
          line: 214,
          column: 47
        },
        end: {
          line: 214,
          column: 54
        }
      },
      "82": {
        start: {
          line: 216,
          column: 31
        },
        end: {
          line: 216,
          column: 111
        }
      },
      "83": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 33
        }
      },
      "84": {
        start: {
          line: 217,
          column: 26
        },
        end: {
          line: 217,
          column: 33
        }
      },
      "85": {
        start: {
          line: 219,
          column: 35
        },
        end: {
          line: 219,
          column: 155
        }
      },
      "86": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 30
        }
      },
      "87": {
        start: {
          line: 220,
          column: 23
        },
        end: {
          line: 220,
          column: 30
        }
      },
      "88": {
        start: {
          line: 222,
          column: 22
        },
        end: {
          line: 222,
          column: 38
        }
      },
      "89": {
        start: {
          line: 223,
          column: 19
        },
        end: {
          line: 223,
          column: 32
        }
      },
      "90": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 228,
          column: 11
        }
      },
      "91": {
        start: {
          line: 225,
          column: 32
        },
        end: {
          line: 225,
          column: 44
        }
      },
      "92": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 83
        }
      },
      "93": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 77
        }
      },
      "94": {
        start: {
          line: 235,
          column: 26
        },
        end: {
          line: 239,
          column: 16
        }
      },
      "95": {
        start: {
          line: 235,
          column: 115
        },
        end: {
          line: 239,
          column: 13
        }
      },
      "96": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 92
        }
      },
      "97": {
        start: {
          line: 240,
          column: 19
        },
        end: {
          line: 240,
          column: 92
        }
      },
      "98": {
        start: {
          line: 244,
          column: 27
        },
        end: {
          line: 244,
          column: 37
        }
      },
      "99": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 62
        }
      },
      "100": {
        start: {
          line: 246,
          column: 26
        },
        end: {
          line: 246,
          column: 163
        }
      },
      "101": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 247,
          column: 92
        }
      },
      "102": {
        start: {
          line: 247,
          column: 19
        },
        end: {
          line: 247,
          column: 92
        }
      },
      "103": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 250,
          column: 28
        }
      },
      "104": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 39
        }
      },
      "105": {
        start: {
          line: 254,
          column: 28
        },
        end: {
          line: 254,
          column: 53
        }
      },
      "106": {
        start: {
          line: 255,
          column: 17
        },
        end: {
          line: 255,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 19
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 31
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 47
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 22
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        loc: {
          start: {
            line: 32,
            column: 33
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 32
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 37
          },
          end: {
            line: 52,
            column: 5
          }
        },
        line: 43
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 32
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 53
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        loc: {
          start: {
            line: 60,
            column: 45
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 60
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 43
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 64
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 45
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 74
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 61
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 84
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        loc: {
          start: {
            line: 94,
            column: 54
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 94
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        loc: {
          start: {
            line: 113,
            column: 62
          },
          end: {
            line: 131,
            column: 5
          }
        },
        line: 113
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        },
        loc: {
          start: {
            line: 132,
            column: 80
          },
          end: {
            line: 154,
            column: 5
          }
        },
        line: 132
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        loc: {
          start: {
            line: 155,
            column: 74
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 155
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 173,
            column: 4
          },
          end: {
            line: 173,
            column: 5
          }
        },
        loc: {
          start: {
            line: 173,
            column: 71
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 173
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 190,
            column: 4
          },
          end: {
            line: 190,
            column: 5
          }
        },
        loc: {
          start: {
            line: 190,
            column: 47
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 190
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 200,
            column: 11
          },
          end: {
            line: 200,
            column: 12
          }
        },
        loc: {
          start: {
            line: 200,
            column: 21
          },
          end: {
            line: 205,
            column: 9
          }
        },
        line: 200
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 204,
            column: 35
          },
          end: {
            line: 204,
            column: 36
          }
        },
        loc: {
          start: {
            line: 204,
            column: 47
          },
          end: {
            line: 204,
            column: 70
          }
        },
        line: 204
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 206,
            column: 15
          },
          end: {
            line: 206,
            column: 16
          }
        },
        loc: {
          start: {
            line: 206,
            column: 19
          },
          end: {
            line: 209,
            column: 9
          }
        },
        line: 206
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 208,
            column: 51
          },
          end: {
            line: 208,
            column: 52
          }
        },
        loc: {
          start: {
            line: 208,
            column: 56
          },
          end: {
            line: 208,
            column: 70
          }
        },
        line: 208
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 212,
            column: 5
          }
        },
        loc: {
          start: {
            line: 212,
            column: 65
          },
          end: {
            line: 232,
            column: 5
          }
        },
        line: 212
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 224,
            column: 42
          },
          end: {
            line: 224,
            column: 43
          }
        },
        loc: {
          start: {
            line: 224,
            column: 58
          },
          end: {
            line: 228,
            column: 9
          }
        },
        line: 224
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 234,
            column: 5
          }
        },
        loc: {
          start: {
            line: 234,
            column: 49
          },
          end: {
            line: 241,
            column: 5
          }
        },
        line: 234
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 235,
            column: 98
          },
          end: {
            line: 235,
            column: 99
          }
        },
        loc: {
          start: {
            line: 235,
            column: 115
          },
          end: {
            line: 239,
            column: 13
          }
        },
        line: 235
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 243,
            column: 5
          }
        },
        loc: {
          start: {
            line: 243,
            column: 59
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 243
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 249,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        },
        loc: {
          start: {
            line: 249,
            column: 17
          },
          end: {
            line: 252,
            column: 5
          }
        },
        line: 249
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 35
          },
          end: {
            line: 22,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 22,
            column: 43
          },
          end: {
            line: 22,
            column: 45
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 29,
            column: 86
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 29,
            column: 86
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "3": {
        loc: {
          start: {
            line: 30,
            column: 15
          },
          end: {
            line: 30,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 15
          },
          end: {
            line: 30,
            column: 19
          }
        }, {
          start: {
            line: 30,
            column: 23
          },
          end: {
            line: 30,
            column: 25
          }
        }],
        line: 30
      },
      "4": {
        loc: {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "5": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 40,
            column: 83
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 40,
            column: 83
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "6": {
        loc: {
          start: {
            line: 41,
            column: 15
          },
          end: {
            line: 41,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 15
          },
          end: {
            line: 41,
            column: 20
          }
        }, {
          start: {
            line: 41,
            column: 24
          },
          end: {
            line: 41,
            column: 25
          }
        }],
        line: 41
      },
      "7": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "8": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 51,
            column: 92
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 51,
            column: 92
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "9": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 58,
            column: 97
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 58,
            column: 97
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "10": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 62,
            column: 86
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 62,
            column: 86
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "11": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 70,
            column: 86
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 70,
            column: 86
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "12": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "13": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "14": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 79,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 79,
            column: 17
          }
        }, {
          start: {
            line: 79,
            column: 21
          },
          end: {
            line: 79,
            column: 46
          }
        }],
        line: 79
      },
      "15": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 90,
            column: 98
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 90,
            column: 98
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "16": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 96,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 96,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "17": {
        loc: {
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 115,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 8
          },
          end: {
            line: 115,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "18": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 134,
            column: 53
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 134,
            column: 53
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "19": {
        loc: {
          start: {
            line: 136,
            column: 25
          },
          end: {
            line: 136,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 136,
            column: 37
          },
          end: {
            line: 136,
            column: 45
          }
        }, {
          start: {
            line: 136,
            column: 48
          },
          end: {
            line: 136,
            column: 54
          }
        }],
        line: 136
      },
      "20": {
        loc: {
          start: {
            line: 137,
            column: 22
          },
          end: {
            line: 137,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 137,
            column: 34
          },
          end: {
            line: 137,
            column: 51
          }
        }, {
          start: {
            line: 137,
            column: 54
          },
          end: {
            line: 137,
            column: 73
          }
        }],
        line: 137
      },
      "21": {
        loc: {
          start: {
            line: 138,
            column: 24
          },
          end: {
            line: 138,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 138,
            column: 36
          },
          end: {
            line: 138,
            column: 87
          }
        }, {
          start: {
            line: 138,
            column: 90
          },
          end: {
            line: 138,
            column: 143
          }
        }],
        line: 138
      },
      "22": {
        loc: {
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 157,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 157,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "23": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "24": {
        loc: {
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 214,
            column: 54
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 214,
            column: 54
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "25": {
        loc: {
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 217,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 217,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "26": {
        loc: {
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 220,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 220,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "27": {
        loc: {
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 240,
            column: 92
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 240,
            column: 92
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      },
      "28": {
        loc: {
          start: {
            line: 243,
            column: 42
          },
          end: {
            line: 243,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 243,
            column: 55
          },
          end: {
            line: 243,
            column: 57
          }
        }],
        line: 243
      },
      "29": {
        loc: {
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 247,
            column: 92
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 247,
            column: 92
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0],
      "29": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\notificationService.ts"],
      sourcesContent: ["import { supabase } from \"../lib/supabase\"\nimport type { Database } from \"../lib/supabase\"\n\ntype Tables<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Row\"]\ntype Inserts<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Insert\"]\ntype Updates<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Update\"]\n\nexport interface NotificationPreferences {\n  id: string\n  user_id: string\n  email_notifications: boolean\n  push_notifications: boolean\n  in_app_notifications: boolean\n  task_reminders: boolean\n  event_alerts: boolean\n  lead_assignments: boolean\n  invoice_due_alerts: boolean\n  system_updates: boolean\n  marketing_emails: boolean\n  reminder_timing: number // minutes before event\n  quiet_hours_start: string // HH:MM format\n  quiet_hours_end: string // HH:MM format\n  created_at: string\n  updated_at: string\n}\n\nexport interface Notification {\n  id: string\n  user_id: string\n  type: \"task\" | \"event\" | \"invoice\" | \"lead\" | \"system\" | \"mention\"\n  title: string\n  message: string\n  priority: \"low\" | \"medium\" | \"high\" | \"urgent\"\n  read: boolean\n  action_url?: string\n  action_label?: string\n  metadata?: Record<string, any>\n  scheduled_for?: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface NotificationTemplate {\n  id: string\n  name: string\n  type: string\n  subject: string\n  body: string\n  variables: string[]\n  active: boolean\n  created_at: string\n  updated_at: string\n}\n\nclass NotificationService {\n  private listeners: Array<(notifications: Notification[]) => void> = []\n  private currentNotifications: Notification[] = []\n\n  // Notification CRUD operations\n  async getNotifications(userId: string, limit = 50): Promise<Notification[]> {\n    if (!supabase) {\n      throw new Error('Supabase client is not initialized');\n    }\n    \n    const { data, error } = await supabase\n      .from(\"notifications\")\n      .select(\"*\")\n      .eq(\"user_id\", userId)\n      .order(\"created_at\", { ascending: false })\n      .limit(limit)\n\n    if (error) throw new Error(`Failed to fetch notifications: ${error.message}`)\n    return data || []\n  }\n\n  async getUnreadCount(userId: string): Promise<number> {\n    if (!supabase) {\n      throw new Error('Supabase client is not initialized');\n    }\n    \n    const { count, error } = await supabase\n      .from(\"notifications\")\n      .select(\"*\", { count: \"exact\", head: true })\n      .eq(\"user_id\", userId)\n      .eq(\"read\", false)\n\n    if (error) throw new Error(`Failed to get unread count: ${error.message}`)\n    return count || 0\n  }\n\n  async markAsRead(notificationId: string): Promise<void> {\n    if (!supabase) {\n      throw new Error('Supabase client is not initialized');\n    }\n    \n    const { error } = await (supabase as any)\n      .from(\"notifications\")\n      .update({ read: true, updated_at: new Date().toISOString() } as any)\n      .eq(\"id\", notificationId)\n\n    if (error) throw new Error(`Failed to mark notification as read: ${error.message}`)\n  }\n\n  async markAllAsRead(userId: string): Promise<void> {\n    const { error } = await (supabase as any)\n      .from(\"notifications\")\n      .update({ read: true, updated_at: new Date().toISOString() } as any)\n      .eq(\"user_id\", userId)\n      .eq(\"read\", false)\n\n    if (error) throw new Error(`Failed to mark all notifications as read: ${error.message}`)\n  }\n\n  async deleteNotification(notificationId: string): Promise<void> {\n    const { error } = await (supabase as any).from(\"notifications\").delete().eq(\"id\", notificationId)\n\n    if (error) throw new Error(`Failed to delete notification: ${error.message}`)\n  }\n\n  async createNotification(\n    notification: Omit<Notification, \"id\" | \"created_at\" | \"updated_at\">,\n  ): Promise<Notification> {\n    const { data, error } = await (supabase as any)\n      .from(\"notifications\")\n      .insert({\n        ...notification,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      } as any)\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to create notification: ${error.message}`)\n    return data\n  }\n\n  // Notification preferences\n  async getNotificationPreferences(userId: string): Promise<NotificationPreferences | null> {\n    if (!supabase) {\n      throw new Error('Supabase client is not initialized');\n    }\n    \n    const { data, error } = await supabase.from(\"notification_preferences\").select(\"*\").eq(\"user_id\", userId).single()\n\n    if (error && error.code !== \"PGRST116\") {\n      throw new Error(`Failed to fetch notification preferences: ${error.message}`)\n    }\n    return data\n  }\n\n  async updateNotificationPreferences(\n    userId: string,\n    preferences: Partial<Omit<NotificationPreferences, \"id\" | \"user_id\" | \"created_at\" | \"updated_at\">>,\n  ): Promise<NotificationPreferences> {\n    const { data, error } = await (supabase as any)\n      .from(\"notification_preferences\")\n      .upsert({\n        user_id: userId,\n        ...preferences,\n        updated_at: new Date().toISOString(),\n      } as any)\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to update notification preferences: ${error.message}`)\n    return data\n  }\n\n  // Smart notification creation based on events\n  async createTaskReminder(taskId: string, userId: string, dueDate: Date): Promise<void> {\n    const preferences = await this.getNotificationPreferences(userId)\n    if (!preferences?.task_reminders) return\n\n    const reminderTime = new Date(dueDate.getTime() - preferences.reminder_timing * 60 * 1000)\n\n    await this.createNotification({\n      user_id: userId,\n      type: \"task\",\n      title: \"Task Due Soon\",\n      message: `Your task is due in ${preferences.reminder_timing} minutes`,\n      priority: \"medium\",\n      read: false,\n      action_url: \"/tasks\",\n      action_label: \"View Task\",\n      metadata: { task_id: taskId },\n      scheduled_for: reminderTime.toISOString(),\n    })\n  }\n\n  async createEventAlert(eventId: string, userId: string, startDate: Date, title: string): Promise<void> {\n    const preferences = await this.getNotificationPreferences(userId)\n    if (!preferences?.event_alerts) return\n\n    const alertTime = new Date(startDate.getTime() - preferences.reminder_timing * 60 * 1000)\n\n    await this.createNotification({\n      user_id: userId,\n      type: \"event\",\n      title: \"Upcoming Event\",\n      message: `\"${title}\" starts in ${preferences.reminder_timing} minutes`,\n      priority: \"high\",\n      read: false,\n      action_url: \"/calendar\",\n      action_label: \"View Calendar\",\n      metadata: { event_id: eventId },\n      scheduled_for: alertTime.toISOString(),\n    })\n  }\n\n  async createInvoiceDueAlert(\n    invoiceId: string,\n    userId: string,\n    clientName: string,\n    amount: number,\n    dueDate: Date,\n  ): Promise<void> {\n    const preferences = await this.getNotificationPreferences(userId)\n    if (!preferences?.invoice_due_alerts) return\n\n    const isOverdue = dueDate < new Date()\n    const priority = isOverdue ? \"urgent\" : \"high\"\n    const title = isOverdue ? \"Invoice Overdue\" : \"Invoice Due Today\"\n    const message = isOverdue\n      ? `Invoice for ${clientName} ($${amount}) is overdue`\n      : `Invoice for ${clientName} ($${amount}) is due today`\n\n    await this.createNotification({\n      user_id: userId,\n      type: \"invoice\",\n      title,\n      message,\n      priority,\n      read: false,\n      action_url: \"/invoicing\",\n      action_label: \"View Invoice\",\n      metadata: { invoice_id: invoiceId, client_name: clientName, amount },\n    })\n  }\n\n  async createLeadAssignmentAlert(leadId: string, userId: string, leadName: string, assignedBy: string): Promise<void> {\n    const preferences = await this.getNotificationPreferences(userId)\n    if (!preferences?.lead_assignments) return\n\n    await this.createNotification({\n      user_id: userId,\n      type: \"lead\",\n      title: \"New Lead Assigned\",\n      message: `You have been assigned a new lead: ${leadName} by ${assignedBy}`,\n      priority: \"medium\",\n      read: false,\n      action_url: \"/clients\",\n      action_label: \"View Lead\",\n      metadata: { lead_id: leadId, assigned_by: assignedBy },\n    })\n  }\n\n  async createMentionAlert(userId: string, mentionedBy: string, context: string, contextUrl: string): Promise<void> {\n    await this.createNotification({\n      user_id: userId,\n      type: \"mention\",\n      title: \"You were mentioned\",\n      message: `${mentionedBy} mentioned you in ${context}`,\n      priority: \"medium\",\n      read: false,\n      action_url: contextUrl,\n      action_label: \"View\",\n      metadata: { mentioned_by: mentionedBy, context },\n    })\n  }\n\n  // Real-time subscription\n  subscribeToNotifications(userId: string, callback: (notifications: Notification[]) => void) {\n    if (!supabase) {\n      throw new Error('Supabase client is not initialized');\n    }\n    \n    this.listeners.push(callback)\n\n    const channel = supabase\n      .channel(`notifications:${userId}`)\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"*\",\n          schema: \"public\",\n          table: \"notifications\",\n          filter: `user_id=eq.${userId}`,\n        },\n        async () => {\n          // Fetch updated notifications\n          const notifications = await this.getNotifications(userId)\n          this.currentNotifications = notifications\n          this.listeners.forEach((listener) => listener(notifications))\n        },\n      )\n      .subscribe()\n\n    return () => {\n      channel.unsubscribe()\n      this.listeners = this.listeners.filter((l) => l !== callback)\n    }\n  }\n\n  // Email notification service\n  async sendEmailNotification(userId: string, templateName: string, variables: Record<string, any>): Promise<void> {\n    const preferences = await this.getNotificationPreferences(userId)\n    if (!preferences?.email_notifications) return\n\n    // Get user email\n    const { data: user } = await (supabase as any).from(\"users\").select(\"email\").eq(\"id\", userId).single()\n\n    if (!user?.email) return\n\n    // Get email template\n    const { data: template } = await (supabase as any)\n      .from(\"notification_templates\")\n      .select(\"*\")\n      .eq(\"name\", templateName)\n      .eq(\"active\", true)\n      .single()\n\n    if (!template) return\n\n    // Replace variables in template\n    let subject = (template as any).subject\n    let body = (template as any).body\n\n    Object.entries(variables).forEach(([key, value]) => {\n      const placeholder = `{{${key}}}`\n      subject = subject.replace(new RegExp(placeholder, \"g\"), String(value))\n      body = body.replace(new RegExp(placeholder, \"g\"), String(value))\n    })\n\n    // Send email (integrate with your email service)\n    // This would typically call an email service like SendGrid, Mailgun, etc.\n    // Silent logging - Sending email notification\n  }\n\n  // Batch operations for performance\n  async createBulkNotifications(\n    notifications: Array<Omit<Notification, \"id\" | \"created_at\" | \"updated_at\">>,\n  ): Promise<void> {\n    const { error } = await (supabase as any).from(\"notifications\").insert(\n      notifications.map((notification) => ({\n        ...notification,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      })) as any,\n    )\n\n    if (error) throw new Error(`Failed to create bulk notifications: ${error.message}`)\n  }\n\n  // Cleanup old notifications\n  async cleanupOldNotifications(userId: string, daysToKeep = 30): Promise<void> {\n    const cutoffDate = new Date()\n    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep)\n\n    const { error } = await (supabase as any)\n      .from(\"notifications\")\n      .delete()\n      .eq(\"user_id\", userId)\n      .eq(\"read\", true)\n      .lt(\"created_at\", cutoffDate.toISOString())\n\n    if (error) throw new Error(`Failed to cleanup old notifications: ${error.message}`)\n  }\n}\n\nexport const notificationService = new NotificationService()\nexport default notificationService\n"],
      names: ["notificationService", "NotificationService", "getNotifications", "userId", "limit", "supabase", "Error", "data", "error", "from", "select", "eq", "order", "ascending", "message", "getUnreadCount", "count", "head", "markAsRead", "notificationId", "update", "read", "updated_at", "Date", "toISOString", "markAllAsRead", "deleteNotification", "delete", "createNotification", "notification", "insert", "created_at", "single", "getNotificationPreferences", "code", "updateNotificationPreferences", "preferences", "upsert", "user_id", "createTaskReminder", "taskId", "dueDate", "task_reminders", "reminderTime", "getTime", "reminder_timing", "type", "title", "priority", "action_url", "action_label", "metadata", "task_id", "scheduled_for", "createEventAlert", "eventId", "startDate", "event_alerts", "alertTime", "event_id", "createInvoiceDueAlert", "invoiceId", "clientName", "amount", "invoice_due_alerts", "isOverdue", "invoice_id", "client_name", "createLeadAssignmentAlert", "leadId", "leadName", "assignedBy", "lead_assignments", "lead_id", "assigned_by", "createMentionAlert", "mentionedBy", "context", "contextUrl", "mentioned_by", "subscribeToNotifications", "callback", "listeners", "push", "channel", "on", "event", "schema", "table", "filter", "notifications", "currentNotifications", "forEach", "listener", "subscribe", "unsubscribe", "l", "sendEmailNotification", "templateName", "variables", "email_notifications", "user", "email", "template", "subject", "body", "Object", "entries", "key", "value", "placeholder", "replace", "RegExp", "String", "createBulkNotifications", "map", "cleanupOldNotifications", "daysToKeep", "cutoffDate", "setDate", "getDate", "lt"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "071085e2c0ac7717365453487e060d828c2d2c72"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2gqr7kvrmv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2gqr7kvrmv();
cov_2gqr7kvrmv().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2gqr7kvrmv().f[0]++;
  cov_2gqr7kvrmv().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2gqr7kvrmv().s[3]++;
_export(exports, {
  get default() {
    /* istanbul ignore next */
    cov_2gqr7kvrmv().f[1]++;
    cov_2gqr7kvrmv().s[4]++;
    return _default;
  },
  get notificationService() {
    /* istanbul ignore next */
    cov_2gqr7kvrmv().f[2]++;
    cov_2gqr7kvrmv().s[5]++;
    return notificationService;
  }
});
const _supabase =
/* istanbul ignore next */
(cov_2gqr7kvrmv().s[6]++, require("../lib/supabase"));
class NotificationService {
  // Notification CRUD operations
  async getNotifications(userId, limit =
  /* istanbul ignore next */
  (cov_2gqr7kvrmv().b[0][0]++, 50)) {
    /* istanbul ignore next */
    cov_2gqr7kvrmv().f[3]++;
    cov_2gqr7kvrmv().s[7]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[1][0]++;
      cov_2gqr7kvrmv().s[8]++;
      throw new Error('Supabase client is not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[1][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[9]++, await _supabase.supabase.from("notifications").select("*").eq("user_id", userId).order("created_at", {
      ascending: false
    }).limit(limit));
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[10]++;
    if (error) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[2][0]++;
      cov_2gqr7kvrmv().s[11]++;
      throw new Error(`Failed to fetch notifications: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[2][1]++;
    }
    cov_2gqr7kvrmv().s[12]++;
    return /* istanbul ignore next */(cov_2gqr7kvrmv().b[3][0]++, data) ||
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().b[3][1]++, []);
  }
  async getUnreadCount(userId) {
    /* istanbul ignore next */
    cov_2gqr7kvrmv().f[4]++;
    cov_2gqr7kvrmv().s[13]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[4][0]++;
      cov_2gqr7kvrmv().s[14]++;
      throw new Error('Supabase client is not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[4][1]++;
    }
    const {
      count,
      error
    } =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[15]++, await _supabase.supabase.from("notifications").select("*", {
      count: "exact",
      head: true
    }).eq("user_id", userId).eq("read", false));
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[16]++;
    if (error) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[5][0]++;
      cov_2gqr7kvrmv().s[17]++;
      throw new Error(`Failed to get unread count: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[5][1]++;
    }
    cov_2gqr7kvrmv().s[18]++;
    return /* istanbul ignore next */(cov_2gqr7kvrmv().b[6][0]++, count) ||
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().b[6][1]++, 0);
  }
  async markAsRead(notificationId) {
    /* istanbul ignore next */
    cov_2gqr7kvrmv().f[5]++;
    cov_2gqr7kvrmv().s[19]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[7][0]++;
      cov_2gqr7kvrmv().s[20]++;
      throw new Error('Supabase client is not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[7][1]++;
    }
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[21]++, await _supabase.supabase.from("notifications").update({
      read: true,
      updated_at: new Date().toISOString()
    }).eq("id", notificationId));
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[22]++;
    if (error) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[8][0]++;
      cov_2gqr7kvrmv().s[23]++;
      throw new Error(`Failed to mark notification as read: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[8][1]++;
    }
  }
  async markAllAsRead(userId) {
    /* istanbul ignore next */
    cov_2gqr7kvrmv().f[6]++;
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[24]++, await _supabase.supabase.from("notifications").update({
      read: true,
      updated_at: new Date().toISOString()
    }).eq("user_id", userId).eq("read", false));
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[25]++;
    if (error) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[9][0]++;
      cov_2gqr7kvrmv().s[26]++;
      throw new Error(`Failed to mark all notifications as read: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[9][1]++;
    }
  }
  async deleteNotification(notificationId) {
    /* istanbul ignore next */
    cov_2gqr7kvrmv().f[7]++;
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[27]++, await _supabase.supabase.from("notifications").delete().eq("id", notificationId));
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[28]++;
    if (error) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[10][0]++;
      cov_2gqr7kvrmv().s[29]++;
      throw new Error(`Failed to delete notification: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[10][1]++;
    }
  }
  async createNotification(notification) {
    /* istanbul ignore next */
    cov_2gqr7kvrmv().f[8]++;
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[30]++, await _supabase.supabase.from("notifications").insert({
      ...notification,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }).select().single());
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[31]++;
    if (error) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[11][0]++;
      cov_2gqr7kvrmv().s[32]++;
      throw new Error(`Failed to create notification: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[11][1]++;
    }
    cov_2gqr7kvrmv().s[33]++;
    return data;
  }
  // Notification preferences
  async getNotificationPreferences(userId) {
    /* istanbul ignore next */
    cov_2gqr7kvrmv().f[9]++;
    cov_2gqr7kvrmv().s[34]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[12][0]++;
      cov_2gqr7kvrmv().s[35]++;
      throw new Error('Supabase client is not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[12][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[36]++, await _supabase.supabase.from("notification_preferences").select("*").eq("user_id", userId).single());
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[37]++;
    if (
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().b[14][0]++, error) &&
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().b[14][1]++, error.code !== "PGRST116")) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[13][0]++;
      cov_2gqr7kvrmv().s[38]++;
      throw new Error(`Failed to fetch notification preferences: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[13][1]++;
    }
    cov_2gqr7kvrmv().s[39]++;
    return data;
  }
  async updateNotificationPreferences(userId, preferences) {
    /* istanbul ignore next */
    cov_2gqr7kvrmv().f[10]++;
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[40]++, await _supabase.supabase.from("notification_preferences").upsert({
      user_id: userId,
      ...preferences,
      updated_at: new Date().toISOString()
    }).select().single());
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[41]++;
    if (error) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[15][0]++;
      cov_2gqr7kvrmv().s[42]++;
      throw new Error(`Failed to update notification preferences: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[15][1]++;
    }
    cov_2gqr7kvrmv().s[43]++;
    return data;
  }
  // Smart notification creation based on events
  async createTaskReminder(taskId, userId, dueDate) {
    /* istanbul ignore next */
    cov_2gqr7kvrmv().f[11]++;
    const preferences =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[44]++, await this.getNotificationPreferences(userId));
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[45]++;
    if (!preferences?.task_reminders) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[16][0]++;
      cov_2gqr7kvrmv().s[46]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[16][1]++;
    }
    const reminderTime =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[47]++, new Date(dueDate.getTime() - preferences.reminder_timing * 60 * 1000));
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[48]++;
    await this.createNotification({
      user_id: userId,
      type: "task",
      title: "Task Due Soon",
      message: `Your task is due in ${preferences.reminder_timing} minutes`,
      priority: "medium",
      read: false,
      action_url: "/tasks",
      action_label: "View Task",
      metadata: {
        task_id: taskId
      },
      scheduled_for: reminderTime.toISOString()
    });
  }
  async createEventAlert(eventId, userId, startDate, title) {
    /* istanbul ignore next */
    cov_2gqr7kvrmv().f[12]++;
    const preferences =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[49]++, await this.getNotificationPreferences(userId));
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[50]++;
    if (!preferences?.event_alerts) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[17][0]++;
      cov_2gqr7kvrmv().s[51]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[17][1]++;
    }
    const alertTime =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[52]++, new Date(startDate.getTime() - preferences.reminder_timing * 60 * 1000));
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[53]++;
    await this.createNotification({
      user_id: userId,
      type: "event",
      title: "Upcoming Event",
      message: `"${title}" starts in ${preferences.reminder_timing} minutes`,
      priority: "high",
      read: false,
      action_url: "/calendar",
      action_label: "View Calendar",
      metadata: {
        event_id: eventId
      },
      scheduled_for: alertTime.toISOString()
    });
  }
  async createInvoiceDueAlert(invoiceId, userId, clientName, amount, dueDate) {
    /* istanbul ignore next */
    cov_2gqr7kvrmv().f[13]++;
    const preferences =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[54]++, await this.getNotificationPreferences(userId));
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[55]++;
    if (!preferences?.invoice_due_alerts) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[18][0]++;
      cov_2gqr7kvrmv().s[56]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[18][1]++;
    }
    const isOverdue =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[57]++, dueDate < new Date());
    const priority =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[58]++, isOverdue ?
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().b[19][0]++, "urgent") :
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().b[19][1]++, "high"));
    const title =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[59]++, isOverdue ?
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().b[20][0]++, "Invoice Overdue") :
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().b[20][1]++, "Invoice Due Today"));
    const message =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[60]++, isOverdue ?
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().b[21][0]++, `Invoice for ${clientName} ($${amount}) is overdue`) :
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().b[21][1]++, `Invoice for ${clientName} ($${amount}) is due today`));
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[61]++;
    await this.createNotification({
      user_id: userId,
      type: "invoice",
      title,
      message,
      priority,
      read: false,
      action_url: "/invoicing",
      action_label: "View Invoice",
      metadata: {
        invoice_id: invoiceId,
        client_name: clientName,
        amount
      }
    });
  }
  async createLeadAssignmentAlert(leadId, userId, leadName, assignedBy) {
    /* istanbul ignore next */
    cov_2gqr7kvrmv().f[14]++;
    const preferences =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[62]++, await this.getNotificationPreferences(userId));
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[63]++;
    if (!preferences?.lead_assignments) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[22][0]++;
      cov_2gqr7kvrmv().s[64]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[22][1]++;
    }
    cov_2gqr7kvrmv().s[65]++;
    await this.createNotification({
      user_id: userId,
      type: "lead",
      title: "New Lead Assigned",
      message: `You have been assigned a new lead: ${leadName} by ${assignedBy}`,
      priority: "medium",
      read: false,
      action_url: "/clients",
      action_label: "View Lead",
      metadata: {
        lead_id: leadId,
        assigned_by: assignedBy
      }
    });
  }
  async createMentionAlert(userId, mentionedBy, context, contextUrl) {
    /* istanbul ignore next */
    cov_2gqr7kvrmv().f[15]++;
    cov_2gqr7kvrmv().s[66]++;
    await this.createNotification({
      user_id: userId,
      type: "mention",
      title: "You were mentioned",
      message: `${mentionedBy} mentioned you in ${context}`,
      priority: "medium",
      read: false,
      action_url: contextUrl,
      action_label: "View",
      metadata: {
        mentioned_by: mentionedBy,
        context
      }
    });
  }
  // Real-time subscription
  subscribeToNotifications(userId, callback) {
    /* istanbul ignore next */
    cov_2gqr7kvrmv().f[16]++;
    cov_2gqr7kvrmv().s[67]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[23][0]++;
      cov_2gqr7kvrmv().s[68]++;
      throw new Error('Supabase client is not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[23][1]++;
    }
    cov_2gqr7kvrmv().s[69]++;
    this.listeners.push(callback);
    const channel =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[70]++, _supabase.supabase.channel(`notifications:${userId}`).on("postgres_changes", {
      event: "*",
      schema: "public",
      table: "notifications",
      filter: `user_id=eq.${userId}`
    }, async () => {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().f[17]++;
      // Fetch updated notifications
      const notifications =
      /* istanbul ignore next */
      (cov_2gqr7kvrmv().s[71]++, await this.getNotifications(userId));
      /* istanbul ignore next */
      cov_2gqr7kvrmv().s[72]++;
      this.currentNotifications = notifications;
      /* istanbul ignore next */
      cov_2gqr7kvrmv().s[73]++;
      this.listeners.forEach(listener => {
        /* istanbul ignore next */
        cov_2gqr7kvrmv().f[18]++;
        cov_2gqr7kvrmv().s[74]++;
        return listener(notifications);
      });
    }).subscribe());
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[75]++;
    return () => {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().f[19]++;
      cov_2gqr7kvrmv().s[76]++;
      channel.unsubscribe();
      /* istanbul ignore next */
      cov_2gqr7kvrmv().s[77]++;
      this.listeners = this.listeners.filter(l => {
        /* istanbul ignore next */
        cov_2gqr7kvrmv().f[20]++;
        cov_2gqr7kvrmv().s[78]++;
        return l !== callback;
      });
    };
  }
  // Email notification service
  async sendEmailNotification(userId, templateName, variables) {
    /* istanbul ignore next */
    cov_2gqr7kvrmv().f[21]++;
    const preferences =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[79]++, await this.getNotificationPreferences(userId));
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[80]++;
    if (!preferences?.email_notifications) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[24][0]++;
      cov_2gqr7kvrmv().s[81]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[24][1]++;
    }
    // Get user email
    const {
      data: user
    } =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[82]++, await _supabase.supabase.from("users").select("email").eq("id", userId).single());
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[83]++;
    if (!user?.email) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[25][0]++;
      cov_2gqr7kvrmv().s[84]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[25][1]++;
    }
    // Get email template
    const {
      data: template
    } =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[85]++, await _supabase.supabase.from("notification_templates").select("*").eq("name", templateName).eq("active", true).single());
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[86]++;
    if (!template) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[26][0]++;
      cov_2gqr7kvrmv().s[87]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[26][1]++;
    }
    // Replace variables in template
    let subject =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[88]++, template.subject);
    let body =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[89]++, template.body);
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[90]++;
    Object.entries(variables).forEach(([key, value]) => {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().f[22]++;
      const placeholder =
      /* istanbul ignore next */
      (cov_2gqr7kvrmv().s[91]++, `{{${key}}}`);
      /* istanbul ignore next */
      cov_2gqr7kvrmv().s[92]++;
      subject = subject.replace(new RegExp(placeholder, "g"), String(value));
      /* istanbul ignore next */
      cov_2gqr7kvrmv().s[93]++;
      body = body.replace(new RegExp(placeholder, "g"), String(value));
    });
    // Send email (integrate with your email service)
    // This would typically call an email service like SendGrid, Mailgun, etc.
    // Silent logging - Sending email notification
  }
  // Batch operations for performance
  async createBulkNotifications(notifications) {
    /* istanbul ignore next */
    cov_2gqr7kvrmv().f[23]++;
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[94]++, await _supabase.supabase.from("notifications").insert(notifications.map(notification => {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().f[24]++;
      cov_2gqr7kvrmv().s[95]++;
      return {
        ...notification,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
    })));
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[96]++;
    if (error) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[27][0]++;
      cov_2gqr7kvrmv().s[97]++;
      throw new Error(`Failed to create bulk notifications: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[27][1]++;
    }
  }
  // Cleanup old notifications
  async cleanupOldNotifications(userId, daysToKeep =
  /* istanbul ignore next */
  (cov_2gqr7kvrmv().b[28][0]++, 30)) {
    /* istanbul ignore next */
    cov_2gqr7kvrmv().f[25]++;
    const cutoffDate =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[98]++, new Date());
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[99]++;
    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_2gqr7kvrmv().s[100]++, await _supabase.supabase.from("notifications").delete().eq("user_id", userId).eq("read", true).lt("created_at", cutoffDate.toISOString()));
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[101]++;
    if (error) {
      /* istanbul ignore next */
      cov_2gqr7kvrmv().b[29][0]++;
      cov_2gqr7kvrmv().s[102]++;
      throw new Error(`Failed to cleanup old notifications: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_2gqr7kvrmv().b[29][1]++;
    }
  }
  constructor() {
    /* istanbul ignore next */
    cov_2gqr7kvrmv().f[26]++;
    cov_2gqr7kvrmv().s[103]++;
    this.listeners = [];
    /* istanbul ignore next */
    cov_2gqr7kvrmv().s[104]++;
    this.currentNotifications = [];
  }
}
const notificationService =
/* istanbul ignore next */
(cov_2gqr7kvrmv().s[105]++, new NotificationService());
const _default =
/* istanbul ignore next */
(cov_2gqr7kvrmv().s[106]++, notificationService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,