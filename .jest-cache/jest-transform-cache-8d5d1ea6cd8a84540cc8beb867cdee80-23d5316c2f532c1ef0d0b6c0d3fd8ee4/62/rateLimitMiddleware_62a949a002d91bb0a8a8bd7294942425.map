{"version":3,"names":["RateLimitMiddleware","cov_3qcnrehs8","f","s","getRateLimitMiddleware","initializeRateLimitMiddleware","middlewareConfigs","rateLimitMiddleware","withRateLimit","constructor","config","b","responseTimes","errorCount","rateLimitConfig","_rateLimiting","rateLimitConfigs","api","enableAdaptiveRateLimit","enableCircuitBreaker","circuitBreakerConfig","failureThreshold","recoveryTimeout","successThreshold","excludePaths","includePaths","customKeyGenerator","req","getClientIdentifier","onLimitReached","enableMetrics","rateLimiter","AdaptiveRateLimiter","keyGenerator","RateLimiter","circuitBreaker","CircuitBreaker","metrics","totalRequests","blockedRequests","averageResponseTime","errorRate","lastResetTime","Date","now","forwarded","headers","get","realIp","cfConnectingIp","ip","split","userAgent","userAgentHash","simpleHash","str","hash","i","length","char","charCodeAt","Math","abs","toString","shouldApplyRateLimit","pathname","some","path","startsWith","updateMetrics","responseTime","wasBlocked","wasError","push","slice","reduce","a","createRateLimitResponse","remaining","resetTime","retryAfter","ceil","response","_server","NextResponse","json","error","message","status","set","maxRequests","toISOString","createCircuitBreakerResponse","handle","startTime","nextUrl","breakerState","getState","state","rateLimitResult","check","allowed","console","getMetrics","result","rateLimiterStats","getStats","circuitBreakerState","systemLoad","getSystemLoad","resetMetrics","destroy","globalMiddleware","middleware","handler","rateLimitResponse","strict","moderate","lenient","auth"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\middleware\\rateLimitMiddleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport {\n  RateLimiter,\n  AdaptiveRateLimiter,\n  CircuitBreaker,\n  rateLimitConfigs,\n  type RateLimitConfig\n} from '@/utils/rateLimiting';\n\ninterface MiddlewareConfig {\n  rateLimitConfig?: RateLimitConfig;\n  enableAdaptiveRateLimit?: boolean;\n  enableCircuitBreaker?: boolean;\n  circuitBreakerConfig?: {\n    failureThreshold?: number;\n    recoveryTimeout?: number;\n    successThreshold?: number;\n  };\n  excludePaths?: string[];\n  includePaths?: string[];\n  customKeyGenerator?: (req: NextRequest) => string;\n  onLimitReached?: (req: NextRequest) => void;\n  enableMetrics?: boolean;\n}\n\ninterface RequestMetrics {\n  totalRequests: number;\n  blockedRequests: number;\n  averageResponseTime: number;\n  errorRate: number;\n  lastResetTime: number;\n}\n\nclass RateLimitMiddleware {\n  private rateLimiter: RateLimiter | AdaptiveRateLimiter;\n  private circuitBreaker?: CircuitBreaker;\n  private config: Required<MiddlewareConfig>;\n  private metrics: RequestMetrics;\n  private responseTimes: number[] = [];\n  private errorCount: number = 0;\n\n  constructor(config: MiddlewareConfig = {}) {\n    this.config = {\n      rateLimitConfig: rateLimitConfigs.api,\n      enableAdaptiveRateLimit: false,\n      enableCircuitBreaker: true,\n      circuitBreakerConfig: {\n        failureThreshold: 5,\n        recoveryTimeout: 60000,\n        successThreshold: 3\n      },\n      excludePaths: ['/api/health', '/api/metrics'],\n      includePaths: [],\n      customKeyGenerator: (req) => this.getClientIdentifier(req),\n      onLimitReached: () => {},\n      enableMetrics: true,\n      ...config\n    };\n\n    // Initialize rate limiter\n    if (this.config.enableAdaptiveRateLimit) {\n      this.rateLimiter = new AdaptiveRateLimiter({\n        ...this.config.rateLimitConfig,\n        keyGenerator: this.config.customKeyGenerator,\n        onLimitReached: this.config.onLimitReached\n      });\n    } else {\n      this.rateLimiter = new RateLimiter({\n        ...this.config.rateLimitConfig,\n        keyGenerator: this.config.customKeyGenerator,\n        onLimitReached: this.config.onLimitReached\n      });\n    }\n\n    // Initialize circuit breaker\n    if (this.config.enableCircuitBreaker) {\n      this.circuitBreaker = new CircuitBreaker(\n        this.config.circuitBreakerConfig.failureThreshold,\n        this.config.circuitBreakerConfig.recoveryTimeout,\n        this.config.circuitBreakerConfig.successThreshold\n      );\n    }\n\n    // Initialize metrics\n    this.metrics = {\n      totalRequests: 0,\n      blockedRequests: 0,\n      averageResponseTime: 0,\n      errorRate: 0,\n      lastResetTime: Date.now()\n    };\n  }\n\n  private getClientIdentifier(req: NextRequest): string {\n    // Try to get real IP from various headers\n    const forwarded = req.headers.get('x-forwarded-for');\n    const realIp = req.headers.get('x-real-ip');\n    const cfConnectingIp = req.headers.get('cf-connecting-ip');\n    \n    let ip = forwarded?.split(',')[0] || realIp || cfConnectingIp;\n    \n    // Fallback to connection remote address\n    if (!ip && req.ip) {\n      ip = req.ip;\n    }\n    \n    // Final fallback\n    if (!ip) {\n      ip = 'unknown';\n    }\n\n    // Include user agent for more specific identification\n    const userAgent = req.headers.get('user-agent') || 'unknown';\n    const userAgentHash = this.simpleHash(userAgent);\n    \n    return `${ip}:${userAgentHash}`;\n  }\n\n  private simpleHash(str: string): string {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash).toString(36);\n  }\n\n  private shouldApplyRateLimit(pathname: string): boolean {\n    // Check exclude paths\n    if (this.config.excludePaths.some(path => pathname.startsWith(path))) {\n      return false;\n    }\n\n    // Check include paths (if specified, only apply to these paths)\n    if (this.config.includePaths.length > 0) {\n      return this.config.includePaths.some(path => pathname.startsWith(path));\n    }\n\n    // Default: apply to all API routes\n    return pathname.startsWith('/api/');\n  }\n\n  private updateMetrics(responseTime: number, wasBlocked: boolean, wasError: boolean): void {\n    if (!this.config.enableMetrics) return;\n\n    this.metrics.totalRequests++;\n    \n    if (wasBlocked) {\n      this.metrics.blockedRequests++;\n    } else {\n      this.responseTimes.push(responseTime);\n      \n      // Keep only last 1000 response times\n      if (this.responseTimes.length > 1000) {\n        this.responseTimes = this.responseTimes.slice(-1000);\n      }\n      \n      this.metrics.averageResponseTime = \n        this.responseTimes.reduce((a, b) => a + b, 0) / this.responseTimes.length;\n    }\n\n    if (wasError) {\n      this.errorCount++;\n    }\n\n    this.metrics.errorRate = (this.errorCount / this.metrics.totalRequests) * 100;\n  }\n\n  private createRateLimitResponse(remaining: number, resetTime: number): NextResponse {\n    const retryAfter = Math.ceil((resetTime - Date.now()) / 1000);\n    \n    const response = NextResponse.json(\n      {\n        error: 'Too Many Requests',\n        message: 'Rate limit exceeded. Please try again later.',\n        retryAfter\n      },\n      { status: 429 }\n    );\n\n    // Add rate limit headers\n    response.headers.set('X-RateLimit-Limit', this.config.rateLimitConfig.maxRequests.toString());\n    response.headers.set('X-RateLimit-Remaining', remaining.toString());\n    response.headers.set('X-RateLimit-Reset', new Date(resetTime).toISOString());\n    response.headers.set('Retry-After', retryAfter.toString());\n\n    return response;\n  }\n\n  private createCircuitBreakerResponse(): NextResponse {\n    return NextResponse.json(\n      {\n        error: 'Service Unavailable',\n        message: 'Service is temporarily unavailable. Please try again later.'\n      },\n      { status: 503 }\n    );\n  }\n\n  public async handle(req: NextRequest): Promise<NextResponse | null> {\n    const startTime = Date.now();\n    const pathname = req.nextUrl.pathname;\n\n    // Skip rate limiting for excluded paths\n    if (!this.shouldApplyRateLimit(pathname)) {\n      return null;\n    }\n\n    try {\n      // Check circuit breaker\n      if (this.circuitBreaker) {\n        const breakerState = this.circuitBreaker.getState();\n        if (breakerState.state === 'open') {\n          this.updateMetrics(Date.now() - startTime, false, true);\n          return this.createCircuitBreakerResponse();\n        }\n      }\n\n      // Check rate limit\n      const rateLimitResult = this.rateLimiter.check(req);\n      \n      if (!rateLimitResult.allowed) {\n        this.updateMetrics(Date.now() - startTime, true, false);\n        return this.createRateLimitResponse(rateLimitResult.remaining, rateLimitResult.resetTime);\n      }\n\n      // Request is allowed, continue processing\n      return null;\n    } catch (error) {\n      console.error('Rate limit middleware error:', error);\n      this.updateMetrics(Date.now() - startTime, false, true);\n      \n      // Fail open - allow request to continue\n      return null;\n    }\n  }\n\n  public getMetrics(): RequestMetrics & {\n    rateLimiterStats: any;\n    circuitBreakerState?: any;\n    systemLoad?: number;\n  } {\n    const result: any = {\n      ...this.metrics,\n      rateLimiterStats: this.rateLimiter.getStats()\n    };\n\n    if (this.circuitBreaker) {\n      result.circuitBreakerState = this.circuitBreaker.getState();\n    }\n\n    if (this.rateLimiter instanceof AdaptiveRateLimiter) {\n      result.systemLoad = this.rateLimiter.getSystemLoad();\n    }\n\n    return result;\n  }\n\n  public resetMetrics(): void {\n    this.metrics = {\n      totalRequests: 0,\n      blockedRequests: 0,\n      averageResponseTime: 0,\n      errorRate: 0,\n      lastResetTime: Date.now()\n    };\n    this.responseTimes = [];\n    this.errorCount = 0;\n  }\n\n  public destroy(): void {\n    if (this.rateLimiter instanceof AdaptiveRateLimiter) {\n      this.rateLimiter.destroy();\n    } else {\n      this.rateLimiter.destroy();\n    }\n  }\n}\n\n// Global middleware instance\nlet globalMiddleware: RateLimitMiddleware | null = null;\n\n// Initialize global middleware\nexport function initializeRateLimitMiddleware(config: MiddlewareConfig = {}): void {\n  if (globalMiddleware) {\n    globalMiddleware.destroy();\n  }\n  globalMiddleware = new RateLimitMiddleware(config);\n}\n\n// Get global middleware instance\nexport function getRateLimitMiddleware(): RateLimitMiddleware {\n  if (!globalMiddleware) {\n    globalMiddleware = new RateLimitMiddleware();\n  }\n  return globalMiddleware;\n}\n\n// Middleware function for Next.js\nexport async function rateLimitMiddleware(req: NextRequest): Promise<NextResponse | null> {\n  const middleware = getRateLimitMiddleware();\n  return middleware.handle(req);\n}\n\n// API route wrapper for rate limiting\nexport function withRateLimit(\n  handler: (req: NextRequest) => Promise<NextResponse>,\n  config?: MiddlewareConfig\n) {\n  const middleware = new RateLimitMiddleware(config);\n  \n  return async (req: NextRequest): Promise<NextResponse> => {\n    const rateLimitResponse = await middleware.handle(req);\n    \n    if (rateLimitResponse) {\n      return rateLimitResponse;\n    }\n    \n    try {\n      const response = await handler(req);\n      \n      // Add rate limit headers to successful responses\n      const rateLimitResult = middleware.getMetrics().rateLimiterStats;\n      if (rateLimitResult) {\n        response.headers.set('X-RateLimit-Limit', config?.rateLimitConfig?.maxRequests?.toString() || '60');\n        response.headers.set('X-RateLimit-Remaining', '0'); // Would need to track this properly\n      }\n      \n      return response;\n    } catch (error) {\n      // Handle circuit breaker for failed requests\n      throw error;\n    }\n  };\n}\n\n// Predefined middleware configurations\nexport const middlewareConfigs = {\n  strict: {\n    rateLimitConfig: rateLimitConfigs.strict,\n    enableAdaptiveRateLimit: true,\n    enableCircuitBreaker: true\n  },\n  moderate: {\n    rateLimitConfig: rateLimitConfigs.moderate,\n    enableAdaptiveRateLimit: false,\n    enableCircuitBreaker: true\n  },\n  lenient: {\n    rateLimitConfig: rateLimitConfigs.lenient,\n    enableAdaptiveRateLimit: false,\n    enableCircuitBreaker: false\n  },\n  api: {\n    rateLimitConfig: rateLimitConfigs.api,\n    enableAdaptiveRateLimit: true,\n    enableCircuitBreaker: true,\n    includePaths: ['/api/']\n  },\n  auth: {\n    rateLimitConfig: rateLimitConfigs.auth,\n    enableAdaptiveRateLimit: false,\n    enableCircuitBreaker: true,\n    includePaths: ['/api/auth/', '/api/login', '/api/register']\n  }\n};\n\nexport { RateLimitMiddleware };\nexport type { MiddlewareConfig, RequestMetrics };"],"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","ignoreList":[]}