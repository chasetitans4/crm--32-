{"version":3,"names":["cov_1z2yoyf8k5","actualCoverage","s","useActions","f","useAppState","useAuth","useCache","useClients","useDebouncedSelector","useDevTools","useFilters","useOptimisticUpdate","usePagination","usePerformanceMonitor","useSelector","useSelectors","useSyncedLocalState","useToast","useUI","state","setState","_react","useState","_stateManager","stateManager","getState","useEffect","unsubscribe","subscribe","selector","value","setValue","selectorRef","useRef","current","select","newValue","actions","selectors","currentUser","getCurrentUser","isAuthenticated","permissions","getUserPermissions","preferences","getUserPreferences","login","logout","updatePreferences","clients","getClients","selectedClient","getSelectedClient","filters","getClientFilters","loading","isClientsLoading","error","getClientsError","loadClients","createClient","updateClient","deleteClient","selectClient","toasts","setToasts","activeTab","getActiveTab","sidebarCollapsed","isSidebarCollapsed","theme","getTheme","modals","getModals","setActiveTab","toggleSidebar","setTheme","showModal","hideModal","addToast","toast","prev","removeToast","id","filter","t","getCacheValue","useCallback","key","isCacheValid","setCache","clearCache","updateAction","currentValue","optimisticValue","setOptimisticValue","isOptimistic","setIsOptimistic","b","performOptimisticUpdate","optimisticData","actualUpdate","delay","debouncedValue","setDebouncedValue","timer","setTimeout","clearTimeout","initialValue","localValue","setLocalValue","globalValue","undefined","entityType","pagination","tasks","projects","invoices","emails","page","limit","total","hasMore","setPagination","newPagination","dispatch","type","payload","nextPage","prevPage","Math","max","setPage","setLimit","events","notifications","setFilters","newFilters","updateFilter","clearFilters","showToast","title","message","duration","console","log","toUpperCase","window","Notification","permission","body","crypto","randomUUID","showSuccess","showError","showWarning","showInfo","metrics","setMetrics","getPerformanceMetrics","interval","setInterval","clearInterval","actionHistory","setActionHistory","getActionHistory","replayActions","bind","resetState"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\useAppState.ts"],"sourcesContent":["\"use client\"\n\nimport { useEffect, useState, useCallback, useRef } from \"react\"\nimport { stateManager, type AppState, type Selector, type PaginationState, actions, selectors } from \"../services/stateManager\"\n\n// Hook for accessing the entire state\nexport function useAppState(): AppState {\n  const [state, setState] = useState<AppState>(stateManager.getState())\n\n  useEffect(() => {\n    const unsubscribe = stateManager.subscribe(setState)\n    return unsubscribe\n  }, [])\n\n  return state\n}\n\n// Hook for selecting specific parts of the state\nexport function useSelector<T>(selector: Selector<T>): T {\n  const [value, setValue] = useState<T>(selector(stateManager.getState()))\n  const selectorRef = useRef(selector)\n\n  useEffect(() => {\n    selectorRef.current = selector\n    const unsubscribe = stateManager.select(\n      (state) => selectorRef.current(state),\n      (newValue) => setValue(newValue),\n    )\n    return unsubscribe\n  }, [selector])\n\n  return value\n}\n\n// Hook for dispatching actions\nexport function useActions() {\n  return actions\n}\n\n// Hook for accessing selectors\nexport function useSelectors() {\n  return selectors\n}\n\n// Specific hooks for common use cases\nexport function useAuth() {\n  const currentUser = useSelector(selectors.getCurrentUser)\n  const isAuthenticated = useSelector(selectors.isAuthenticated)\n  const permissions = useSelector(selectors.getUserPermissions)\n  const preferences = useSelector(selectors.getUserPreferences)\n\n  return {\n    currentUser,\n    isAuthenticated,\n    permissions,\n    preferences,\n    login: actions.login,\n    logout: actions.logout,\n    updatePreferences: actions.updatePreferences,\n  }\n}\n\nexport function useClients() {\n  const clients = useSelector(selectors.getClients)\n  const selectedClient = useSelector(selectors.getSelectedClient)\n  const filters = useSelector(selectors.getClientFilters)\n  const loading = useSelector(selectors.isClientsLoading)\n  const error = useSelector(selectors.getClientsError)\n\n  return {\n    clients,\n    selectedClient,\n    filters,\n    loading,\n    error,\n    loadClients: actions.loadClients,\n    createClient: actions.createClient,\n    updateClient: actions.updateClient,\n    deleteClient: actions.deleteClient,\n    selectClient: actions.selectClient,\n  }\n}\n\n// Simple UI hook that works with existing context\nexport function useUI() {\n  const [toasts, setToasts] = useState<Array<{ id: string; message: string; type?: string }>>([])\n  const activeTab = useSelector(selectors.getActiveTab)\n  const sidebarCollapsed = useSelector(selectors.isSidebarCollapsed)\n  const theme = useSelector(selectors.getTheme)\n  const modals = useSelector(selectors.getModals)\n  //const toasts = useSelector(selectors.getToasts)\n\n  return {\n    activeTab,\n    sidebarCollapsed,\n    theme,\n    modals,\n    toasts,\n    setActiveTab: actions.setActiveTab,\n    toggleSidebar: actions.toggleSidebar,\n    setTheme: actions.setTheme,\n    showModal: actions.showModal,\n    hideModal: actions.hideModal,\n    addToast: (toast: { id: string; message: string; type?: string }) => setToasts((prev) => [...prev, toast]),\n    removeToast: (id: string) => setToasts((prev) => prev.filter((t) => t.id !== id)),\n  }\n}\n\nexport function useCache() {\n  const getCacheValue = useCallback((key: string) => {\n    return selectors.getCacheValue(key)(stateManager.getState())\n  }, [])\n\n  const isCacheValid = useCallback((key: string) => {\n    return selectors.isCacheValid(key)(stateManager.getState())\n  }, [])\n\n  return {\n    getCacheValue,\n    isCacheValid,\n    setCache: actions.setCache,\n    clearCache: actions.clearCache,\n  }\n}\n\n// Hook for optimistic updates\nexport function useOptimisticUpdate<T>(selector: Selector<T>, updateAction: (data: T) => void) {\n  const currentValue = useSelector(selector)\n  const [optimisticValue, setOptimisticValue] = useState<T>(currentValue)\n  const [isOptimistic, setIsOptimistic] = useState(false)\n\n  useEffect(() => {\n    if (!isOptimistic) {\n      setOptimisticValue(currentValue)\n    }\n  }, [currentValue, isOptimistic])\n\n  const performOptimisticUpdate = useCallback(\n    async (optimisticData: T, actualUpdate: () => Promise<void>) => {\n      setOptimisticValue(optimisticData)\n      setIsOptimistic(true)\n\n      try {\n        await actualUpdate()\n      } catch (error) {\n        // Revert on error\n        setOptimisticValue(currentValue)\n        throw error\n      } finally {\n        setIsOptimistic(false)\n      }\n    },\n    [currentValue],\n  )\n\n  return {\n    value: optimisticValue,\n    isOptimistic,\n    performOptimisticUpdate,\n  }\n}\n\n// Hook for debounced state updates\nexport function useDebouncedSelector<T>(selector: Selector<T>, delay = 300): T {\n  const value = useSelector(selector)\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    return () => clearTimeout(timer)\n  }, [value, delay])\n\n  return debouncedValue\n}\n\n// Hook for local state with state manager sync\nexport function useSyncedLocalState<T>(key: string, initialValue: T, selector?: Selector<T>): [T, (value: T) => void] {\n  const [localValue, setLocalValue] = useState<T>(initialValue)\n  const globalValue = selector ? useSelector(selector) : undefined\n\n  useEffect(() => {\n    if (selector) {\n      setLocalValue(useSelector(selector))\n    }\n  }, [selector])\n\n  const setValue = useCallback(\n    (value: T) => {\n      setLocalValue(value)\n      // Optionally sync to global state\n      if (selector) {\n        actions.setCache(key, value)\n      }\n    },\n    [key, selector],\n  )\n\n  return [localValue, setValue]\n}\n\n// Hook for pagination\nexport function usePagination(entityType: string) {\n  const pagination = useSelector((state: AppState) => {\n    switch (entityType) {\n      case \"clients\":\n        return state.clients.pagination\n      case \"tasks\":\n        return state.tasks.pagination\n      case \"projects\":\n        return state.projects.pagination\n      case \"invoices\":\n        return state.invoices.pagination\n      case \"emails\":\n        return state.emails.pagination\n      default:\n        return { page: 1, limit: 20, total: 0, hasMore: false }\n    }\n  })\n\n  const setPagination = useCallback(\n    (newPagination: Partial<PaginationState>) => {\n      switch (entityType) {\n        case \"clients\":\n          stateManager.dispatch({ type: \"CLIENTS_SET_PAGINATION\", payload: newPagination })\n          break\n        case \"tasks\":\n          stateManager.dispatch({ type: \"TASKS_SET_PAGINATION\", payload: newPagination })\n          break\n        // Add other cases as needed\n      }\n    },\n    [entityType],\n  )\n\n  return {\n    ...pagination,\n    setPagination,\n    nextPage: () => setPagination({ ...pagination, page: pagination.page + 1 }),\n    prevPage: () => setPagination({ ...pagination, page: Math.max(1, pagination.page - 1) }),\n    setPage: (page: number) => setPagination({ ...pagination, page }),\n    setLimit: (limit: number) => setPagination({ ...pagination, limit, page: 1 }),\n  }\n}\n\n// Hook for filters\nexport function useFilters(entityType: string) {\n  const filters = useSelector((state: AppState) => {\n    switch (entityType) {\n      case \"clients\":\n        return state.clients.filters\n      case \"tasks\":\n        return state.tasks.filters\n      case \"events\":\n        return state.events.filters\n      case \"projects\":\n        return state.projects.filters\n      case \"invoices\":\n        return state.invoices.filters\n      case \"emails\":\n        return state.emails.filters\n      case \"notifications\":\n        return state.notifications.filters\n      default:\n        return {}\n    }\n  })\n\n  const setFilters = useCallback(\n    (newFilters: Record<string, any>) => {\n      switch (entityType) {\n        case \"clients\":\n          stateManager.dispatch({ type: \"CLIENTS_SET_FILTERS\", payload: newFilters })\n          break\n        case \"tasks\":\n          stateManager.dispatch({ type: \"TASKS_SET_FILTERS\", payload: newFilters })\n          break\n        case \"events\":\n          stateManager.dispatch({ type: \"EVENTS_SET_FILTERS\", payload: newFilters })\n          break\n        // Add other cases as needed\n      }\n    },\n    [entityType],\n  )\n\n  const updateFilter = useCallback(\n    (key: string, value: unknown) => {\n      setFilters({ ...filters, [key]: value })\n    },\n    [filters, setFilters],\n  )\n\n  const clearFilters = useCallback(() => {\n    setFilters({})\n  }, [setFilters])\n\n  return {\n    filters,\n    setFilters,\n    updateFilter,\n    clearFilters,\n  }\n}\n\n// Simple toast hook that works with existing context\nexport function useToast() {\n  const showToast = useCallback(\n    (\n      type: \"success\" | \"error\" | \"warning\" | \"info\",\n      title: string,\n      message: string,\n      duration?: number,\n      actions?: Array<{ label: string; action: () => void }>,\n    ) => {\n      // For now, use console.log until we fully integrate state manager\n      console.log(`${type.toUpperCase()}: ${title} - ${message}`)\n\n      // You can also show browser notifications\n      if (\"Notification\" in window && Notification.permission === \"granted\") {\n        new Notification(title, { body: message })\n      }\n\n      return crypto.randomUUID()\n    },\n    [],\n  )\n\n  const showSuccess = useCallback(\n    (title: string, message: string, duration?: number) => {\n      return showToast(\"success\", title, message, duration)\n    },\n    [showToast],\n  )\n\n  const showError = useCallback(\n    (title: string, message: string, duration?: number) => {\n      return showToast(\"error\", title, message, duration)\n    },\n    [showToast],\n  )\n\n  const showWarning = useCallback(\n    (title: string, message: string, duration?: number) => {\n      return showToast(\"warning\", title, message, duration)\n    },\n    [showToast],\n  )\n\n  const showInfo = useCallback(\n    (title: string, message: string, duration?: number) => {\n      return showToast(\"info\", title, message, duration)\n    },\n    [showToast],\n  )\n\n  const removeToast = useCallback((id: string) => {\n    console.log(`Removing toast: ${id}`)\n  }, [])\n\n  return {\n    showToast,\n    showSuccess,\n    showError,\n    showWarning,\n    showInfo,\n    removeToast,\n  }\n}\n\n// Hook for performance monitoring\nexport function usePerformanceMonitor() {\n  const [metrics, setMetrics] = useState(stateManager.getPerformanceMetrics())\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setMetrics(stateManager.getPerformanceMetrics())\n    }, 5000) // Update every 5 seconds\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return metrics\n}\n\n// Hook for development tools\nexport function useDevTools() {\n  const [actionHistory, setActionHistory] = useState(stateManager.getActionHistory())\n\n  useEffect(() => {\n    const unsubscribe = stateManager.subscribe(() => {\n      setActionHistory(stateManager.getActionHistory())\n    })\n    return unsubscribe\n  }, [])\n\n  return {\n    actionHistory,\n    replayActions: stateManager.replayActions.bind(stateManager),\n    resetState: stateManager.resetState.bind(stateManager),\n    getState: stateManager.getState.bind(stateManager),\n  }\n}\n"],"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","ignoreList":[]}