{"version":3,"names":["default","cov_2jej1skikm","f","s","_default","granularRBACService","GranularRBACService","constructor","permissions","Map","roles","userRoles","permissionCache","cacheTimeout","initializeDefaultPermissions","initializeDefaultRoles","defaultPermissions","id","name","resource","action","scope","conditions","field","operator","value","timeRestrictions","allowedHours","start","end","allowedDays","forEach","permission","set","now","Date","defaultRoles","description","Array","from","keys","isSystemRole","isActive","requiresMFA","dataAccessLevel","auditLevel","maxSessions","sessionTimeout","createdAt","updatedAt","createdBy","role","checkAccess","userId","context","data","userPermissions","getUserPermissions","permissionId","includes","b","allowed","reason","requiredPermissions","missingPermissions","auditRequired","riskScore","get","timeCheck","checkTimeRestrictions","timestamp","ipRestrictions","ipAddress","ipCheck","checkIPRestrictions","location","conditionCheck","checkConditions","calculateAccessRiskScore","error","console","cached","userRoleAssignments","activeAssignments","filter","assignment","expiresAt","allPermissions","Set","roleId","add","inheritsFrom","parentRoleId","parentRole","assignRole","assignedBy","Error","assignedAt","existingIndex","findIndex","a","push","delete","removeRole","updatedRoles","map","createRole","Math","random","toString","substr","newRole","updateRole","updates","updatedRole","clear","restrictions","hour","getHours","day","getDay","isAllowedHour","some","range","blockedIPs","allowedIPs","country","blockedCountries","allowedCountries","condition","fieldValue","conditionValue","conditionMet","String","Number","isArray","score","actionScores","scopeMultipliers","min","max","getUserRoles","getAllRoles","values","getAllPermissions","clearUserCache","clearAllCaches"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\granularRBAC.ts"],"sourcesContent":["import { rbacService, type Permission, type Role } from './rbacService';\n\nexport interface GranularPermission {\n  id: string;\n  name: string;\n  resource: string;\n  action: string;\n  conditions?: {\n    field?: string;\n    operator: 'equals' | 'not_equals' | 'contains' | 'not_contains' | 'greater_than' | 'less_than' | 'in' | 'not_in';\n    value: any;\n  }[];\n  scope?: 'global' | 'organization' | 'team' | 'personal';\n  timeRestrictions?: {\n    allowedHours?: { start: number; end: number }[];\n    allowedDays?: number[]; // 0-6, Sunday-Saturday\n    timezone?: string;\n  };\n  ipRestrictions?: {\n    allowedIPs?: string[];\n    blockedIPs?: string[];\n    allowedCountries?: string[];\n    blockedCountries?: string[];\n  };\n  dataFilters?: {\n    field: string;\n    operator: 'equals' | 'not_equals' | 'contains' | 'not_contains' | 'greater_than' | 'less_than';\n    value: any;\n  }[];\n}\n\nexport interface GranularRole {\n  id: string;\n  name: string;\n  description: string;\n  permissions: string[]; // Permission IDs\n  inheritsFrom?: string[]; // Parent role IDs\n  isSystemRole: boolean;\n  isActive: boolean;\n  maxSessions?: number;\n  sessionTimeout?: number; // minutes\n  requiresMFA?: boolean;\n  allowedFeatures?: string[];\n  deniedFeatures?: string[];\n  dataAccessLevel: 'none' | 'read' | 'write' | 'admin';\n  auditLevel: 'none' | 'basic' | 'detailed' | 'full';\n  createdAt: Date;\n  updatedAt: Date;\n  createdBy: string;\n}\n\nexport interface UserRoleAssignment {\n  userId: string;\n  roleId: string;\n  assignedBy: string;\n  assignedAt: Date;\n  expiresAt?: Date;\n  isActive: boolean;\n  conditions?: {\n    field: string;\n    operator: string;\n    value: any;\n  }[];\n}\n\nexport interface AccessContext {\n  userId: string;\n  userEmail: string;\n  ipAddress?: string;\n  userAgent?: string;\n  location?: {\n    country?: string;\n    city?: string;\n  };\n  timestamp: Date;\n  sessionId?: string;\n  organizationId?: string;\n  teamId?: string;\n}\n\nexport interface AccessResult {\n  allowed: boolean;\n  reason?: string;\n  requiredPermissions?: string[];\n  missingPermissions?: string[];\n  conditions?: any;\n  auditRequired: boolean;\n  riskScore: number;\n}\n\nclass GranularRBACService {\n  private permissions: Map<string, GranularPermission> = new Map();\n  private roles: Map<string, GranularRole> = new Map();\n  private userRoles: Map<string, UserRoleAssignment[]> = new Map();\n  private permissionCache: Map<string, { permissions: string[]; timestamp: number }> = new Map();\n  private cacheTimeout = 5 * 60 * 1000; // 5 minutes\n\n  constructor() {\n    this.initializeDefaultPermissions();\n    this.initializeDefaultRoles();\n  }\n\n  /**\n   * Initialize default system permissions\n   */\n  private initializeDefaultPermissions(): void {\n    const defaultPermissions: GranularPermission[] = [\n      // User Management\n      {\n        id: 'users.read',\n        name: 'Read Users',\n        resource: 'users',\n        action: 'read',\n        scope: 'organization'\n      },\n      {\n        id: 'users.create',\n        name: 'Create Users',\n        resource: 'users',\n        action: 'create',\n        scope: 'organization'\n      },\n      {\n        id: 'users.update',\n        name: 'Update Users',\n        resource: 'users',\n        action: 'update',\n        scope: 'organization'\n      },\n      {\n        id: 'users.delete',\n        name: 'Delete Users',\n        resource: 'users',\n        action: 'delete',\n        scope: 'organization'\n      },\n      \n      // Contact Management\n      {\n        id: 'contacts.read',\n        name: 'Read Contacts',\n        resource: 'contacts',\n        action: 'read',\n        scope: 'team'\n      },\n      {\n        id: 'contacts.create',\n        name: 'Create Contacts',\n        resource: 'contacts',\n        action: 'create',\n        scope: 'team'\n      },\n      {\n        id: 'contacts.update',\n        name: 'Update Contacts',\n        resource: 'contacts',\n        action: 'update',\n        scope: 'team'\n      },\n      {\n        id: 'contacts.delete',\n        name: 'Delete Contacts',\n        resource: 'contacts',\n        action: 'delete',\n        scope: 'team'\n      },\n      \n      // Quote Management\n      {\n        id: 'quotes.read',\n        name: 'Read Quotes',\n        resource: 'quotes',\n        action: 'read',\n        scope: 'team'\n      },\n      {\n        id: 'quotes.create',\n        name: 'Create Quotes',\n        resource: 'quotes',\n        action: 'create',\n        scope: 'team'\n      },\n      {\n        id: 'quotes.update',\n        name: 'Update Quotes',\n        resource: 'quotes',\n        action: 'update',\n        scope: 'team'\n      },\n      {\n        id: 'quotes.delete',\n        name: 'Delete Quotes',\n        resource: 'quotes',\n        action: 'delete',\n        scope: 'team'\n      },\n      {\n        id: 'quotes.approve',\n        name: 'Approve Quotes',\n        resource: 'quotes',\n        action: 'approve',\n        scope: 'team',\n        conditions: [{\n          field: 'amount',\n          operator: 'less_than',\n          value: 10000\n        }]\n      },\n      \n      // Contract Management\n      {\n        id: 'contracts.read',\n        name: 'Read Contracts',\n        resource: 'contracts',\n        action: 'read',\n        scope: 'team'\n      },\n      {\n        id: 'contracts.create',\n        name: 'Create Contracts',\n        resource: 'contracts',\n        action: 'create',\n        scope: 'team'\n      },\n      {\n        id: 'contracts.update',\n        name: 'Update Contracts',\n        resource: 'contracts',\n        action: 'update',\n        scope: 'team'\n      },\n      {\n        id: 'contracts.delete',\n        name: 'Delete Contracts',\n        resource: 'contracts',\n        action: 'delete',\n        scope: 'team'\n      },\n      {\n        id: 'contracts.sign',\n        name: 'Sign Contracts',\n        resource: 'contracts',\n        action: 'sign',\n        scope: 'team'\n      },\n      \n      // Invoice Management\n      {\n        id: 'invoices.read',\n        name: 'Read Invoices',\n        resource: 'invoices',\n        action: 'read',\n        scope: 'team'\n      },\n      {\n        id: 'invoices.create',\n        name: 'Create Invoices',\n        resource: 'invoices',\n        action: 'create',\n        scope: 'team'\n      },\n      {\n        id: 'invoices.update',\n        name: 'Update Invoices',\n        resource: 'invoices',\n        action: 'update',\n        scope: 'team'\n      },\n      {\n        id: 'invoices.delete',\n        name: 'Delete Invoices',\n        resource: 'invoices',\n        action: 'delete',\n        scope: 'team'\n      },\n      {\n        id: 'invoices.send',\n        name: 'Send Invoices',\n        resource: 'invoices',\n        action: 'send',\n        scope: 'team'\n      },\n      \n      // Reporting\n      {\n        id: 'reports.read',\n        name: 'Read Reports',\n        resource: 'reports',\n        action: 'read',\n        scope: 'team'\n      },\n      {\n        id: 'reports.create',\n        name: 'Create Reports',\n        resource: 'reports',\n        action: 'create',\n        scope: 'team'\n      },\n      {\n        id: 'reports.export',\n        name: 'Export Reports',\n        resource: 'reports',\n        action: 'export',\n        scope: 'team'\n      },\n      \n      // System Administration\n      {\n        id: 'system.admin',\n        name: 'System Administration',\n        resource: 'system',\n        action: 'admin',\n        scope: 'global',\n        timeRestrictions: {\n          allowedHours: [{ start: 9, end: 17 }],\n          allowedDays: [1, 2, 3, 4, 5] // Monday-Friday\n        }\n      },\n      {\n        id: 'audit.read',\n        name: 'Read Audit Logs',\n        resource: 'audit',\n        action: 'read',\n        scope: 'organization'\n      },\n      {\n        id: 'security.manage',\n        name: 'Manage Security',\n        resource: 'security',\n        action: 'manage',\n        scope: 'global'\n      }\n    ];\n\n    defaultPermissions.forEach(permission => {\n      this.permissions.set(permission.id, permission);\n    });\n  }\n\n  /**\n   * Initialize default system roles\n   */\n  private initializeDefaultRoles(): void {\n    const now = new Date();\n    \n    const defaultRoles: GranularRole[] = [\n      {\n        id: 'super_admin',\n        name: 'Super Administrator',\n        description: 'Full system access with all permissions',\n        permissions: Array.from(this.permissions.keys()),\n        isSystemRole: true,\n        isActive: true,\n        requiresMFA: true,\n        dataAccessLevel: 'admin',\n        auditLevel: 'full',\n        maxSessions: 2,\n        sessionTimeout: 60,\n        createdAt: now,\n        updatedAt: now,\n        createdBy: 'system'\n      },\n      {\n        id: 'admin',\n        name: 'Administrator',\n        description: 'Organization administrator with most permissions',\n        permissions: [\n          'users.read', 'users.create', 'users.update',\n          'contacts.read', 'contacts.create', 'contacts.update', 'contacts.delete',\n          'quotes.read', 'quotes.create', 'quotes.update', 'quotes.delete', 'quotes.approve',\n          'contracts.read', 'contracts.create', 'contracts.update', 'contracts.delete', 'contracts.sign',\n          'invoices.read', 'invoices.create', 'invoices.update', 'invoices.delete', 'invoices.send',\n          'reports.read', 'reports.create', 'reports.export',\n          'audit.read'\n        ],\n        isSystemRole: true,\n        isActive: true,\n        requiresMFA: true,\n        dataAccessLevel: 'admin',\n        auditLevel: 'detailed',\n        maxSessions: 3,\n        sessionTimeout: 120,\n        createdAt: now,\n        updatedAt: now,\n        createdBy: 'system'\n      },\n      {\n        id: 'manager',\n        name: 'Manager',\n        description: 'Team manager with elevated permissions',\n        permissions: [\n          'contacts.read', 'contacts.create', 'contacts.update',\n          'quotes.read', 'quotes.create', 'quotes.update', 'quotes.approve',\n          'contracts.read', 'contracts.create', 'contracts.update', 'contracts.sign',\n          'invoices.read', 'invoices.create', 'invoices.update', 'invoices.send',\n          'reports.read', 'reports.create'\n        ],\n        isSystemRole: true,\n        isActive: true,\n        requiresMFA: false,\n        dataAccessLevel: 'write',\n        auditLevel: 'basic',\n        maxSessions: 2,\n        sessionTimeout: 240,\n        createdAt: now,\n        updatedAt: now,\n        createdBy: 'system'\n      },\n      {\n        id: 'sales_rep',\n        name: 'Sales Representative',\n        description: 'Sales team member with standard permissions',\n        permissions: [\n          'contacts.read', 'contacts.create', 'contacts.update',\n          'quotes.read', 'quotes.create', 'quotes.update',\n          'contracts.read',\n          'invoices.read',\n          'reports.read'\n        ],\n        isSystemRole: true,\n        isActive: true,\n        requiresMFA: false,\n        dataAccessLevel: 'write',\n        auditLevel: 'basic',\n        maxSessions: 1,\n        sessionTimeout: 480,\n        createdAt: now,\n        updatedAt: now,\n        createdBy: 'system'\n      },\n      {\n        id: 'viewer',\n        name: 'Viewer',\n        description: 'Read-only access to basic information',\n        permissions: [\n          'contacts.read',\n          'quotes.read',\n          'contracts.read',\n          'invoices.read',\n          'reports.read'\n        ],\n        isSystemRole: true,\n        isActive: true,\n        requiresMFA: false,\n        dataAccessLevel: 'read',\n        auditLevel: 'basic',\n        maxSessions: 1,\n        sessionTimeout: 480,\n        createdAt: now,\n        updatedAt: now,\n        createdBy: 'system'\n      }\n    ];\n\n    defaultRoles.forEach(role => {\n      this.roles.set(role.id, role);\n    });\n  }\n\n  /**\n   * Check if user has permission to perform an action\n   */\n  async checkAccess(\n    userId: string,\n    resource: string,\n    action: string,\n    context: AccessContext,\n    data?: any\n  ): Promise<AccessResult> {\n    try {\n      const userPermissions = await this.getUserPermissions(userId);\n      const permissionId = `${resource}.${action}`;\n      \n      // Check if user has the required permission\n      if (!userPermissions.includes(permissionId)) {\n        return {\n          allowed: false,\n          reason: 'Insufficient permissions',\n          requiredPermissions: [permissionId],\n          missingPermissions: [permissionId],\n          auditRequired: true,\n          riskScore: 0.7\n        };\n      }\n\n      const permission = this.permissions.get(permissionId);\n      if (!permission) {\n        return {\n          allowed: false,\n          reason: 'Permission not found',\n          auditRequired: true,\n          riskScore: 0.8\n        };\n      }\n\n      // Check time restrictions\n      if (permission.timeRestrictions) {\n        const timeCheck = this.checkTimeRestrictions(permission.timeRestrictions, context.timestamp);\n        if (!timeCheck.allowed) {\n          return {\n            allowed: false,\n            reason: timeCheck.reason,\n            auditRequired: true,\n            riskScore: 0.6\n          };\n        }\n      }\n\n      // Check IP restrictions\n      if (permission.ipRestrictions && context.ipAddress) {\n        const ipCheck = this.checkIPRestrictions(permission.ipRestrictions, context.ipAddress, context.location);\n        if (!ipCheck.allowed) {\n          return {\n            allowed: false,\n            reason: ipCheck.reason,\n            auditRequired: true,\n            riskScore: 0.9\n          };\n        }\n      }\n\n      // Check data conditions\n      if (permission.conditions && data) {\n        const conditionCheck = this.checkConditions(permission.conditions, data);\n        if (!conditionCheck.allowed) {\n          return {\n            allowed: false,\n            reason: conditionCheck.reason,\n            auditRequired: true,\n            riskScore: 0.5\n          };\n        }\n      }\n\n      // Calculate risk score\n      const riskScore = this.calculateAccessRiskScore(permission, context, data);\n\n      return {\n        allowed: true,\n        auditRequired: riskScore > 0.5,\n        riskScore\n      };\n    } catch (error) {\n      console.error('Error checking access:', error);\n      return {\n        allowed: false,\n        reason: 'Access check failed',\n        auditRequired: true,\n        riskScore: 1.0\n      };\n    }\n  }\n\n  /**\n   * Get all permissions for a user\n   */\n  async getUserPermissions(userId: string): Promise<string[]> {\n    // Check cache first\n    const cached = this.permissionCache.get(userId);\n    if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {\n      return cached.permissions;\n    }\n\n    const userRoleAssignments = this.userRoles.get(userId) || [];\n    const activeAssignments = userRoleAssignments.filter(assignment => \n      assignment.isActive && \n      (!assignment.expiresAt || assignment.expiresAt > new Date())\n    );\n\n    const allPermissions = new Set<string>();\n\n    for (const assignment of activeAssignments) {\n      const role = this.roles.get(assignment.roleId);\n      if (role && role.isActive) {\n        // Add direct permissions\n        role.permissions.forEach(permissionId => allPermissions.add(permissionId));\n        \n        // Add inherited permissions\n        if (role.inheritsFrom) {\n          for (const parentRoleId of role.inheritsFrom) {\n            const parentRole = this.roles.get(parentRoleId);\n            if (parentRole && parentRole.isActive) {\n              parentRole.permissions.forEach(permissionId => allPermissions.add(permissionId));\n            }\n          }\n        }\n      }\n    }\n\n    const permissions = Array.from(allPermissions);\n    \n    // Cache the result\n    this.permissionCache.set(userId, {\n      permissions,\n      timestamp: Date.now()\n    });\n\n    return permissions;\n  }\n\n  /**\n   * Assign role to user\n   */\n  async assignRole(\n    userId: string,\n    roleId: string,\n    assignedBy: string,\n    expiresAt?: Date,\n    conditions?: any[]\n  ): Promise<boolean> {\n    try {\n      const role = this.roles.get(roleId);\n      if (!role || !role.isActive) {\n        throw new Error('Role not found or inactive');\n      }\n\n      const assignment: UserRoleAssignment = {\n        userId,\n        roleId,\n        assignedBy,\n        assignedAt: new Date(),\n        expiresAt,\n        isActive: true,\n        conditions\n      };\n\n      const userRoles = this.userRoles.get(userId) || [];\n      \n      // Check if assignment already exists\n      const existingIndex = userRoles.findIndex(a => a.roleId === roleId && a.isActive);\n      if (existingIndex >= 0) {\n        userRoles[existingIndex] = assignment; // Update existing\n      } else {\n        userRoles.push(assignment); // Add new\n      }\n      \n      this.userRoles.set(userId, userRoles);\n      \n      // Clear permission cache\n      this.permissionCache.delete(userId);\n      \n      return true;\n    } catch (error) {\n      console.error('Error assigning role:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Remove role from user\n   */\n  async removeRole(userId: string, roleId: string): Promise<boolean> {\n    try {\n      const userRoles = this.userRoles.get(userId) || [];\n      const updatedRoles = userRoles.map(assignment => \n        assignment.roleId === roleId \n          ? { ...assignment, isActive: false }\n          : assignment\n      );\n      \n      this.userRoles.set(userId, updatedRoles);\n      \n      // Clear permission cache\n      this.permissionCache.delete(userId);\n      \n      return true;\n    } catch (error) {\n      console.error('Error removing role:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Create custom role\n   */\n  async createRole(role: Omit<GranularRole, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {\n    const roleId = `custom_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const now = new Date();\n    \n    const newRole: GranularRole = {\n      ...role,\n      id: roleId,\n      createdAt: now,\n      updatedAt: now\n    };\n    \n    this.roles.set(roleId, newRole);\n    return roleId;\n  }\n\n  /**\n   * Update role\n   */\n  async updateRole(roleId: string, updates: Partial<GranularRole>): Promise<boolean> {\n    try {\n      const role = this.roles.get(roleId);\n      if (!role) {\n        throw new Error('Role not found');\n      }\n      \n      if (role.isSystemRole && updates.permissions) {\n        throw new Error('Cannot modify permissions of system roles');\n      }\n      \n      const updatedRole: GranularRole = {\n        ...role,\n        ...updates,\n        id: roleId, // Ensure ID doesn't change\n        updatedAt: new Date()\n      };\n      \n      this.roles.set(roleId, updatedRole);\n      \n      // Clear all permission caches since role permissions changed\n      this.permissionCache.clear();\n      \n      return true;\n    } catch (error) {\n      console.error('Error updating role:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Check time restrictions\n   */\n  private checkTimeRestrictions(\n    restrictions: NonNullable<GranularPermission['timeRestrictions']>,\n    timestamp: Date\n  ): { allowed: boolean; reason?: string } {\n    const hour = timestamp.getHours();\n    const day = timestamp.getDay();\n    \n    // Check allowed hours\n    if (restrictions.allowedHours) {\n      const isAllowedHour = restrictions.allowedHours.some(range => \n        hour >= range.start && hour <= range.end\n      );\n      if (!isAllowedHour) {\n        return {\n          allowed: false,\n          reason: 'Access not allowed during current hours'\n        };\n      }\n    }\n    \n    // Check allowed days\n    if (restrictions.allowedDays && !restrictions.allowedDays.includes(day)) {\n      return {\n        allowed: false,\n        reason: 'Access not allowed on current day'\n      };\n    }\n    \n    return { allowed: true };\n  }\n\n  /**\n   * Check IP restrictions\n   */\n  private checkIPRestrictions(\n    restrictions: NonNullable<GranularPermission['ipRestrictions']>,\n    ipAddress: string,\n    location?: AccessContext['location']\n  ): { allowed: boolean; reason?: string } {\n    // Check blocked IPs\n    if (restrictions.blockedIPs?.includes(ipAddress)) {\n      return {\n        allowed: false,\n        reason: 'IP address is blocked'\n      };\n    }\n    \n    // Check allowed IPs\n    if (restrictions.allowedIPs && !restrictions.allowedIPs.includes(ipAddress)) {\n      return {\n        allowed: false,\n        reason: 'IP address not in allowed list'\n      };\n    }\n    \n    // Check country restrictions\n    if (location?.country) {\n      if (restrictions.blockedCountries?.includes(location.country)) {\n        return {\n          allowed: false,\n          reason: 'Access blocked from current country'\n        };\n      }\n      \n      if (restrictions.allowedCountries && !restrictions.allowedCountries.includes(location.country)) {\n        return {\n          allowed: false,\n          reason: 'Country not in allowed list'\n        };\n      }\n    }\n    \n    return { allowed: true };\n  }\n\n  /**\n   * Check data conditions\n   */\n  private checkConditions(\n    conditions: GranularPermission['conditions'],\n    data: any\n  ): { allowed: boolean; reason?: string } {\n    if (!conditions) return { allowed: true };\n    \n    for (const condition of conditions) {\n      const fieldValue = data[condition.field || ''];\n      const conditionValue = condition.value;\n      \n      let conditionMet = false;\n      \n      switch (condition.operator) {\n        case 'equals':\n          conditionMet = fieldValue === conditionValue;\n          break;\n        case 'not_equals':\n          conditionMet = fieldValue !== conditionValue;\n          break;\n        case 'contains':\n          conditionMet = String(fieldValue).includes(String(conditionValue));\n          break;\n        case 'not_contains':\n          conditionMet = !String(fieldValue).includes(String(conditionValue));\n          break;\n        case 'greater_than':\n          conditionMet = Number(fieldValue) > Number(conditionValue);\n          break;\n        case 'less_than':\n          conditionMet = Number(fieldValue) < Number(conditionValue);\n          break;\n        case 'in':\n          conditionMet = Array.isArray(conditionValue) && conditionValue.includes(fieldValue);\n          break;\n        case 'not_in':\n          conditionMet = Array.isArray(conditionValue) && !conditionValue.includes(fieldValue);\n          break;\n      }\n      \n      if (!conditionMet) {\n        return {\n          allowed: false,\n          reason: `Condition not met: ${condition.field} ${condition.operator} ${condition.value}`\n        };\n      }\n    }\n    \n    return { allowed: true };\n  }\n\n  /**\n   * Calculate access risk score\n   */\n  private calculateAccessRiskScore(\n    permission: GranularPermission,\n    context: AccessContext,\n    data?: any\n  ): number {\n    let score = 0;\n    \n    // Base score by action sensitivity\n    const actionScores = {\n      'delete': 0.8,\n      'admin': 0.9,\n      'create': 0.4,\n      'update': 0.5,\n      'read': 0.1\n    };\n    \n    score += actionScores[permission.action as keyof typeof actionScores] || 0.3;\n    \n    // Scope multiplier\n    const scopeMultipliers = {\n      'global': 1.0,\n      'organization': 0.8,\n      'team': 0.6,\n      'personal': 0.4\n    };\n    \n    score *= scopeMultipliers[permission.scope || 'team'];\n    \n    // Time-based risk\n    const hour = context.timestamp.getHours();\n    if (hour < 6 || hour > 22) {\n      score += 0.2; // Off-hours access\n    }\n    \n    // Weekend access\n    const day = context.timestamp.getDay();\n    if (day === 0 || day === 6) {\n      score += 0.1;\n    }\n    \n    return Math.min(Math.max(score, 0), 1);\n  }\n\n  /**\n   * Get user roles\n   */\n  getUserRoles(userId: string): UserRoleAssignment[] {\n    return this.userRoles.get(userId) || [];\n  }\n\n  /**\n   * Get all roles\n   */\n  getAllRoles(): GranularRole[] {\n    return Array.from(this.roles.values());\n  }\n\n  /**\n   * Get all permissions\n   */\n  getAllPermissions(): GranularPermission[] {\n    return Array.from(this.permissions.values());\n  }\n\n  /**\n   * Clear permission cache for user\n   */\n  clearUserCache(userId: string): void {\n    this.permissionCache.delete(userId);\n  }\n\n  /**\n   * Clear all permission caches\n   */\n  clearAllCaches(): void {\n    this.permissionCache.clear();\n  }\n}\n\nexport const granularRBACService = new GranularRBACService();\nexport default granularRBACService;"],"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","ignoreList":[]}