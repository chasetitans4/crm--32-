12dfede14399f18a2c1fd0bbfa4499c0
/**
 * Advanced Key Management System
 * Provides secure key generation, rotation, storage, and lifecycle management
 */"use strict";

/* istanbul ignore next */
function cov_2bza9p17a4() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\keyManagement.ts";
  var hash = "1a8e9d7cdf343ae935b6e3f54890202d45b82720";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\keyManagement.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 7,
          column: 3
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "2": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 12,
          column: 7
        }
      },
      "3": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 39,
          column: 3
        }
      },
      "4": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 26
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 30
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 33
        }
      },
      "7": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 28
        }
      },
      "8": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 34
        }
      },
      "9": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 26
        }
      },
      "10": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 35
        }
      },
      "11": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 25
        }
      },
      "12": {
        start: {
          line: 40,
          column: 20
        },
        end: {
          line: 40,
          column: 43
        }
      },
      "13": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 31
        }
      },
      "14": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 41
        }
      },
      "15": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 50,
          column: 10
        }
      },
      "16": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "17": {
        start: {
          line: 56,
          column: 26
        },
        end: {
          line: 56,
          column: 46
        }
      },
      "18": {
        start: {
          line: 57,
          column: 24
        },
        end: {
          line: 57,
          column: 54
        }
      },
      "19": {
        start: {
          line: 58,
          column: 29
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "20": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 54
        }
      },
      "21": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 64
        }
      },
      "22": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 25
        }
      },
      "23": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 67
        }
      },
      "24": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 60
        }
      },
      "25": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "26": {
        start: {
          line: 81,
          column: 32
        },
        end: {
          line: 81,
          column: 64
        }
      },
      "27": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 84,
          column: 13
        }
      },
      "28": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 58
        }
      },
      "29": {
        start: {
          line: 86,
          column: 29
        },
        end: {
          line: 86,
          column: 49
        }
      },
      "30": {
        start: {
          line: 87,
          column: 27
        },
        end: {
          line: 87,
          column: 57
        }
      },
      "31": {
        start: {
          line: 88,
          column: 32
        },
        end: {
          line: 96,
          column: 13
        }
      },
      "32": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 63
        }
      },
      "33": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 46
        }
      },
      "34": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 61
        }
      },
      "35": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 64
        }
      },
      "36": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 28
        }
      },
      "37": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 67
        }
      },
      "38": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 64
        }
      },
      "39": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "40": {
        start: {
          line: 113,
          column: 25
        },
        end: {
          line: 113,
          column: 48
        }
      },
      "41": {
        start: {
          line: 114,
          column: 30
        },
        end: {
          line: 114,
          column: 116
        }
      },
      "42": {
        start: {
          line: 114,
          column: 47
        },
        end: {
          line: 114,
          column: 115
        }
      },
      "43": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "44": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 57
        }
      },
      "45": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 88
        }
      },
      "46": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 37
        }
      },
      "47": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 24
        }
      },
      "48": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 77
        }
      },
      "49": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 24
        }
      },
      "50": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "51": {
        start: {
          line: 131,
          column: 29
        },
        end: {
          line: 131,
          column: 61
        }
      },
      "52": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 40
        }
      },
      "53": {
        start: {
          line: 132,
          column: 27
        },
        end: {
          line: 132,
          column: 40
        }
      },
      "54": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 54
        }
      },
      "55": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 82
        }
      },
      "56": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 25
        }
      },
      "57": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "58": {
        start: {
          line: 143,
          column: 25
        },
        end: {
          line: 143,
          column: 48
        }
      },
      "59": {
        start: {
          line: 144,
          column: 28
        },
        end: {
          line: 144,
          column: 122
        }
      },
      "60": {
        start: {
          line: 144,
          column: 47
        },
        end: {
          line: 144,
          column: 121
        }
      },
      "61": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 151,
          column: 13
        }
      },
      "62": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 150,
          column: 17
        }
      },
      "63": {
        start: {
          line: 147,
          column: 20
        },
        end: {
          line: 147,
          column: 62
        }
      },
      "64": {
        start: {
          line: 149,
          column: 20
        },
        end: {
          line: 149,
          column: 97
        }
      },
      "65": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 80
        }
      },
      "66": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 66
        }
      },
      "67": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "68": {
        start: {
          line: 161,
          column: 25
        },
        end: {
          line: 161,
          column: 48
        }
      },
      "69": {
        start: {
          line: 162,
          column: 31
        },
        end: {
          line: 162,
          column: 97
        }
      },
      "70": {
        start: {
          line: 163,
          column: 33
        },
        end: {
          line: 163,
          column: 167
        }
      },
      "71": {
        start: {
          line: 163,
          column: 52
        },
        end: {
          line: 163,
          column: 166
        }
      },
      "72": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 166,
          column: 13
        }
      },
      "73": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 58
        }
      },
      "74": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 72
        }
      },
      "75": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 56
        }
      },
      "76": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "77": {
        start: {
          line: 176,
          column: 25
        },
        end: {
          line: 176,
          column: 48
        }
      },
      "78": {
        start: {
          line: 177,
          column: 24
        },
        end: {
          line: 177,
          column: 34
        }
      },
      "79": {
        start: {
          line: 178,
          column: 31
        },
        end: {
          line: 178,
          column: 100
        }
      },
      "80": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 186,
          column: 14
        }
      },
      "81": {
        start: {
          line: 181,
          column: 45
        },
        end: {
          line: 181,
          column: 75
        }
      },
      "82": {
        start: {
          line: 182,
          column: 49
        },
        end: {
          line: 182,
          column: 83
        }
      },
      "83": {
        start: {
          line: 183,
          column: 46
        },
        end: {
          line: 183,
          column: 77
        }
      },
      "84": {
        start: {
          line: 184,
          column: 46
        },
        end: {
          line: 184,
          column: 109
        }
      },
      "85": {
        start: {
          line: 185,
          column: 42
        },
        end: {
          line: 185,
          column: 75
        }
      },
      "86": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 69
        }
      },
      "87": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 196,
          column: 14
        }
      },
      "88": {
        start: {
          line: 201,
          column: 26
        },
        end: {
          line: 201,
          column: 49
        }
      },
      "89": {
        start: {
          line: 202,
          column: 23
        },
        end: {
          line: 202,
          column: 65
        }
      },
      "90": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 44
        }
      },
      "91": {
        start: {
          line: 207,
          column: 20
        },
        end: {
          line: 207,
          column: 38
        }
      },
      "92": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 208,
          column: 36
        }
      },
      "93": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 84
        }
      },
      "94": {
        start: {
          line: 209,
          column: 39
        },
        end: {
          line: 209,
          column: 73
        }
      },
      "95": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 219,
          column: 9
        }
      },
      "96": {
        start: {
          line: 214,
          column: 33
        },
        end: {
          line: 214,
          column: 82
        }
      },
      "97": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 71
        }
      },
      "98": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 88
        }
      },
      "99": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 70
        }
      },
      "100": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "101": {
        start: {
          line: 223,
          column: 32
        },
        end: {
          line: 223,
          column: 81
        }
      },
      "102": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 42
        }
      },
      "103": {
        start: {
          line: 224,
          column: 30
        },
        end: {
          line: 224,
          column: 42
        }
      },
      "104": {
        start: {
          line: 225,
          column: 29
        },
        end: {
          line: 225,
          column: 52
        }
      },
      "105": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 62
        }
      },
      "106": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 60
        }
      },
      "107": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 66
        }
      },
      "108": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 28
        }
      },
      "109": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 232,
          column: 77
        }
      },
      "110": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 24
        }
      },
      "111": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "112": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 88
        }
      },
      "113": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 84
        }
      },
      "114": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 267,
          column: 9
        }
      },
      "115": {
        start: {
          line: 245,
          column: 25
        },
        end: {
          line: 245,
          column: 27
        }
      },
      "116": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 262,
          column: 13
        }
      },
      "117": {
        start: {
          line: 246,
          column: 24
        },
        end: {
          line: 246,
          column: 25
        }
      },
      "118": {
        start: {
          line: 247,
          column: 35
        },
        end: {
          line: 247,
          column: 54
        }
      },
      "119": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 261,
          column: 17
        }
      },
      "120": {
        start: {
          line: 249,
          column: 34
        },
        end: {
          line: 249,
          column: 82
        }
      },
      "121": {
        start: {
          line: 250,
          column: 37
        },
        end: {
          line: 250,
          column: 69
        }
      },
      "122": {
        start: {
          line: 251,
          column: 20
        },
        end: {
          line: 260,
          column: 21
        }
      },
      "123": {
        start: {
          line: 252,
          column: 45
        },
        end: {
          line: 252,
          column: 89
        }
      },
      "124": {
        start: {
          line: 253,
          column: 24
        },
        end: {
          line: 259,
          column: 25
        }
      },
      "125": {
        start: {
          line: 254,
          column: 49
        },
        end: {
          line: 254,
          column: 107
        }
      },
      "126": {
        start: {
          line: 255,
          column: 28
        },
        end: {
          line: 258,
          column: 31
        }
      },
      "127": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 24
        }
      },
      "128": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 60
        }
      },
      "129": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 22
        }
      },
      "130": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "131": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 60
        }
      },
      "132": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 65
        }
      },
      "133": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 71
        }
      },
      "134": {
        start: {
          line: 278,
          column: 19
        },
        end: {
          line: 278,
          column: 35
        }
      },
      "135": {
        start: {
          line: 279,
          column: 26
        },
        end: {
          line: 279,
          column: 74
        }
      },
      "136": {
        start: {
          line: 279,
          column: 37
        },
        end: {
          line: 279,
          column: 74
        }
      },
      "137": {
        start: {
          line: 280,
          column: 18
        },
        end: {
          line: 280,
          column: 54
        }
      },
      "138": {
        start: {
          line: 280,
          column: 27
        },
        end: {
          line: 280,
          column: 54
        }
      },
      "139": {
        start: {
          line: 281,
          column: 21
        },
        end: {
          line: 281,
          column: 64
        }
      },
      "140": {
        start: {
          line: 281,
          column: 32
        },
        end: {
          line: 281,
          column: 64
        }
      },
      "141": {
        start: {
          line: 282,
          column: 28
        },
        end: {
          line: 282,
          column: 64
        }
      },
      "142": {
        start: {
          line: 282,
          column: 32
        },
        end: {
          line: 282,
          column: 64
        }
      },
      "143": {
        start: {
          line: 283,
          column: 23
        },
        end: {
          line: 283,
          column: 54
        }
      },
      "144": {
        start: {
          line: 283,
          column: 27
        },
        end: {
          line: 283,
          column: 54
        }
      },
      "145": {
        start: {
          line: 284,
          column: 27
        },
        end: {
          line: 284,
          column: 62
        }
      },
      "146": {
        start: {
          line: 284,
          column: 31
        },
        end: {
          line: 284,
          column: 62
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 16
          }
        },
        loc: {
          start: {
            line: 8,
            column: 30
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 22
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 26
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 29
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 24
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 30
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 22
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 31
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 21
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 36
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 28
          },
          end: {
            line: 51,
            column: 5
          }
        },
        line: 42
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 54,
            column: 6
          },
          end: {
            line: 54,
            column: 7
          }
        },
        loc: {
          start: {
            line: 54,
            column: 54
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 54
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 79,
            column: 6
          },
          end: {
            line: 79,
            column: 7
          }
        },
        loc: {
          start: {
            line: 79,
            column: 29
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 79
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 111,
            column: 6
          },
          end: {
            line: 111,
            column: 7
          }
        },
        loc: {
          start: {
            line: 111,
            column: 49
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 111
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 114,
            column: 40
          },
          end: {
            line: 114,
            column: 41
          }
        },
        loc: {
          start: {
            line: 114,
            column: 47
          },
          end: {
            line: 114,
            column: 115
          }
        },
        line: 114
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 129,
            column: 6
          },
          end: {
            line: 129,
            column: 7
          }
        },
        loc: {
          start: {
            line: 129,
            column: 33
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 129
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 141,
            column: 6
          },
          end: {
            line: 141,
            column: 7
          }
        },
        loc: {
          start: {
            line: 141,
            column: 34
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 141
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 144,
            column: 40
          },
          end: {
            line: 144,
            column: 41
          }
        },
        loc: {
          start: {
            line: 144,
            column: 47
          },
          end: {
            line: 144,
            column: 121
          }
        },
        line: 144
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 159,
            column: 6
          },
          end: {
            line: 159,
            column: 7
          }
        },
        loc: {
          start: {
            line: 159,
            column: 29
          },
          end: {
            line: 171,
            column: 5
          }
        },
        line: 159
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 163,
            column: 45
          },
          end: {
            line: 163,
            column: 46
          }
        },
        loc: {
          start: {
            line: 163,
            column: 52
          },
          end: {
            line: 163,
            column: 166
          }
        },
        line: 163
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 174,
            column: 6
          },
          end: {
            line: 174,
            column: 7
          }
        },
        loc: {
          start: {
            line: 174,
            column: 33
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 174
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 181,
            column: 40
          },
          end: {
            line: 181,
            column: 41
          }
        },
        loc: {
          start: {
            line: 181,
            column: 45
          },
          end: {
            line: 181,
            column: 75
          }
        },
        line: 181
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 182,
            column: 44
          },
          end: {
            line: 182,
            column: 45
          }
        },
        loc: {
          start: {
            line: 182,
            column: 49
          },
          end: {
            line: 182,
            column: 83
          }
        },
        line: 182
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 183,
            column: 41
          },
          end: {
            line: 183,
            column: 42
          }
        },
        loc: {
          start: {
            line: 183,
            column: 46
          },
          end: {
            line: 183,
            column: 77
          }
        },
        line: 183
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 184,
            column: 41
          },
          end: {
            line: 184,
            column: 42
          }
        },
        loc: {
          start: {
            line: 184,
            column: 46
          },
          end: {
            line: 184,
            column: 109
          }
        },
        line: 184
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 185,
            column: 37
          },
          end: {
            line: 185,
            column: 38
          }
        },
        loc: {
          start: {
            line: 185,
            column: 42
          },
          end: {
            line: 185,
            column: 75
          }
        },
        line: 185
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 200,
            column: 5
          }
        },
        loc: {
          start: {
            line: 200,
            column: 20
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 200
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 205,
            column: 5
          }
        },
        loc: {
          start: {
            line: 205,
            column: 30
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 205
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 209,
            column: 31
          },
          end: {
            line: 209,
            column: 32
          }
        },
        loc: {
          start: {
            line: 209,
            column: 39
          },
          end: {
            line: 209,
            column: 73
          }
        },
        line: 209
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 211,
            column: 4
          },
          end: {
            line: 211,
            column: 5
          }
        },
        loc: {
          start: {
            line: 211,
            column: 41
          },
          end: {
            line: 220,
            column: 5
          }
        },
        line: 211
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 221,
            column: 4
          },
          end: {
            line: 221,
            column: 5
          }
        },
        loc: {
          start: {
            line: 221,
            column: 32
          },
          end: {
            line: 235,
            column: 5
          }
        },
        line: 221
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 236,
            column: 4
          },
          end: {
            line: 236,
            column: 5
          }
        },
        loc: {
          start: {
            line: 236,
            column: 45
          },
          end: {
            line: 242,
            column: 5
          }
        },
        line: 236
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 243,
            column: 5
          }
        },
        loc: {
          start: {
            line: 243,
            column: 23
          },
          end: {
            line: 268,
            column: 5
          }
        },
        line: 243
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 269,
            column: 4
          },
          end: {
            line: 269,
            column: 5
          }
        },
        loc: {
          start: {
            line: 269,
            column: 27
          },
          end: {
            line: 276,
            column: 5
          }
        },
        line: 269
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 279,
            column: 26
          },
          end: {
            line: 279,
            column: 27
          }
        },
        loc: {
          start: {
            line: 279,
            column: 37
          },
          end: {
            line: 279,
            column: 74
          }
        },
        line: 279
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 280,
            column: 18
          },
          end: {
            line: 280,
            column: 19
          }
        },
        loc: {
          start: {
            line: 280,
            column: 27
          },
          end: {
            line: 280,
            column: 54
          }
        },
        line: 280
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 281,
            column: 21
          },
          end: {
            line: 281,
            column: 22
          }
        },
        loc: {
          start: {
            line: 281,
            column: 32
          },
          end: {
            line: 281,
            column: 64
          }
        },
        line: 281
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 282,
            column: 28
          },
          end: {
            line: 282,
            column: 29
          }
        },
        loc: {
          start: {
            line: 282,
            column: 32
          },
          end: {
            line: 282,
            column: 64
          }
        },
        line: 282
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 283,
            column: 23
          },
          end: {
            line: 283,
            column: 24
          }
        },
        loc: {
          start: {
            line: 283,
            column: 27
          },
          end: {
            line: 283,
            column: 54
          }
        },
        line: 283
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 284,
            column: 27
          },
          end: {
            line: 284,
            column: 28
          }
        },
        loc: {
          start: {
            line: 284,
            column: 31
          },
          end: {
            line: 284,
            column: 62
          }
        },
        line: 284
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 42,
            column: 16
          },
          end: {
            line: 42,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 42,
            column: 25
          },
          end: {
            line: 42,
            column: 27
          }
        }],
        line: 42
      },
      "1": {
        loc: {
          start: {
            line: 54,
            column: 30
          },
          end: {
            line: 54,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 54,
            column: 40
          },
          end: {
            line: 54,
            column: 52
          }
        }],
        line: 54
      },
      "2": {
        loc: {
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "3": {
        loc: {
          start: {
            line: 111,
            column: 25
          },
          end: {
            line: 111,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 111,
            column: 35
          },
          end: {
            line: 111,
            column: 47
          }
        }],
        line: 111
      },
      "4": {
        loc: {
          start: {
            line: 114,
            column: 47
          },
          end: {
            line: 114,
            column: 115
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 47
          },
          end: {
            line: 114,
            column: 79
          }
        }, {
          start: {
            line: 114,
            column: 83
          },
          end: {
            line: 114,
            column: 115
          }
        }],
        line: 114
      },
      "5": {
        loc: {
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "6": {
        loc: {
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 132,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 132,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "7": {
        loc: {
          start: {
            line: 144,
            column: 47
          },
          end: {
            line: 144,
            column: 121
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 47
          },
          end: {
            line: 144,
            column: 79
          }
        }, {
          start: {
            line: 144,
            column: 83
          },
          end: {
            line: 144,
            column: 121
          }
        }],
        line: 144
      },
      "8": {
        loc: {
          start: {
            line: 163,
            column: 52
          },
          end: {
            line: 163,
            column: 166
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 163,
            column: 53
          },
          end: {
            line: 163,
            column: 89
          }
        }, {
          start: {
            line: 163,
            column: 93
          },
          end: {
            line: 163,
            column: 126
          }
        }, {
          start: {
            line: 163,
            column: 131
          },
          end: {
            line: 163,
            column: 166
          }
        }],
        line: 163
      },
      "9": {
        loc: {
          start: {
            line: 184,
            column: 46
          },
          end: {
            line: 184,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 184,
            column: 46
          },
          end: {
            line: 184,
            column: 76
          }
        }, {
          start: {
            line: 184,
            column: 80
          },
          end: {
            line: 184,
            column: 109
          }
        }],
        line: 184
      },
      "10": {
        loc: {
          start: {
            line: 224,
            column: 12
          },
          end: {
            line: 224,
            column: 42
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 12
          },
          end: {
            line: 224,
            column: 42
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "11": {
        loc: {
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 261,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 261,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "12": {
        loc: {
          start: {
            line: 251,
            column: 20
          },
          end: {
            line: 260,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 20
          },
          end: {
            line: 260,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "13": {
        loc: {
          start: {
            line: 253,
            column: 24
          },
          end: {
            line: 259,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 253,
            column: 24
          },
          end: {
            line: 259,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 253
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\keyManagement.ts"],
      sourcesContent: ["/**\n * Advanced Key Management System\n * Provides secure key generation, rotation, storage, and lifecycle management\n */\n\nimport { advancedEncryption } from './encryption'\n\ninterface KeyMetadata {\n  id: string\n  version: number\n  createdAt: Date\n  lastUsed: Date\n  rotationDue: Date\n  algorithm: string\n  purpose: string\n  status: 'active' | 'deprecated' | 'revoked'\n}\n\ninterface MasterKeyConfig {\n  rotationIntervalDays: number\n  maxKeyAge: number\n  backupCount: number\n}\n\nclass KeyManager {\n  private readonly config: MasterKeyConfig\n  private readonly keyPrefix = 'km_'\n  private readonly metadataPrefix = 'km_meta_'\n  \n  constructor(config: Partial<MasterKeyConfig> = {}) {\n    this.config = {\n      rotationIntervalDays: 90, // Rotate keys every 90 days\n      maxKeyAge: 365, // Maximum key age in days\n      backupCount: 3, // Keep 3 backup keys\n      ...config\n    }\n  }\n\n  /**\n   * Generate a new master key with metadata\n   */\n  async generateMasterKey(purpose: string = 'encryption'): Promise<string> {\n    try {\n      const keyId = this.generateKeyId()\n      const key = await this.generateSecureKey()\n      \n      const metadata: KeyMetadata = {\n        id: keyId,\n        version: 1,\n        createdAt: new Date(),\n        lastUsed: new Date(),\n        rotationDue: new Date(Date.now() + this.config.rotationIntervalDays * 24 * 60 * 60 * 1000),\n        algorithm: 'AES-256-GCM',\n        purpose,\n        status: 'active'\n      }\n\n      // Store encrypted key and metadata\n      await this.storeKey(keyId, key, metadata)\n      \n      console.log(`\u2705 Generated new master key: ${keyId}`)\n      return keyId\n    } catch (error) {\n      console.error('Failed to generate master key:', error)\n      throw new Error('Master key generation failed')\n    }\n  }\n\n  /**\n   * Rotate an existing key\n   */\n  async rotateKey(keyId: string): Promise<string> {\n    try {\n      const oldMetadata = await this.getKeyMetadata(keyId)\n      if (!oldMetadata) {\n        throw new Error(`Key ${keyId} not found`)\n      }\n\n      // Generate new key\n      const newKeyId = this.generateKeyId()\n      const newKey = await this.generateSecureKey()\n      \n      const newMetadata: KeyMetadata = {\n        ...oldMetadata,\n        id: newKeyId,\n        version: oldMetadata.version + 1,\n        createdAt: new Date(),\n        lastUsed: new Date(),\n        rotationDue: new Date(Date.now() + this.config.rotationIntervalDays * 24 * 60 * 60 * 1000),\n        status: 'active'\n      }\n\n      // Store new key\n      await this.storeKey(newKeyId, newKey, newMetadata)\n      \n      // Mark old key as deprecated\n      oldMetadata.status = 'deprecated'\n      await this.updateKeyMetadata(keyId, oldMetadata)\n      \n      console.log(`\u2705 Rotated key ${keyId} \u2192 ${newKeyId}`)\n      return newKeyId\n    } catch (error) {\n      console.error(`Failed to rotate key ${keyId}:`, error)\n      throw new Error(`Key rotation failed for ${keyId}`)\n    }\n  }\n\n  /**\n   * Get active key for a purpose\n   */\n  async getActiveKey(purpose: string = 'encryption'): Promise<string | null> {\n    try {\n      const keys = await this.getAllKeys()\n      const activeKey = keys.find(key => \n        key.metadata.purpose === purpose && \n        key.metadata.status === 'active'\n      )\n      \n      if (activeKey) {\n        // Update last used timestamp\n        activeKey.metadata.lastUsed = new Date()\n        await this.updateKeyMetadata(activeKey.metadata.id, activeKey.metadata)\n        return activeKey.key\n      }\n      \n      return null\n    } catch (error) {\n      console.error(`Failed to get active key for ${purpose}:`, error)\n      return null\n    }\n  }\n\n  /**\n   * Check if key rotation is due\n   */\n  async isRotationDue(keyId: string): Promise<boolean> {\n    try {\n      const metadata = await this.getKeyMetadata(keyId)\n      if (!metadata) return false\n      \n      return new Date() >= metadata.rotationDue\n    } catch (error) {\n      console.error(`Failed to check rotation status for ${keyId}:`, error)\n      return false\n    }\n  }\n\n  /**\n   * Perform automatic key rotation for all due keys\n   */\n  async performAutoRotation(): Promise<void> {\n    try {\n      const keys = await this.getAllKeys()\n      const dueKeys = keys.filter(key => \n        key.metadata.status === 'active' && \n        new Date() >= key.metadata.rotationDue\n      )\n\n      for (const keyInfo of dueKeys) {\n        try {\n          await this.rotateKey(keyInfo.metadata.id)\n        } catch (error) {\n          console.error(`Auto-rotation failed for key ${keyInfo.metadata.id}:`, error)\n        }\n      }\n\n      console.log(`\u2705 Auto-rotation completed for ${dueKeys.length} keys`)\n    } catch (error) {\n      console.error('Auto-rotation process failed:', error)\n    }\n  }\n\n  /**\n   * Cleanup old and revoked keys\n   */\n  async cleanupOldKeys(): Promise<void> {\n    try {\n      const keys = await this.getAllKeys()\n      const cutoffDate = new Date(Date.now() - this.config.maxKeyAge * 24 * 60 * 60 * 1000)\n      \n      const keysToRemove = keys.filter(key => \n        (key.metadata.status === 'deprecated' || key.metadata.status === 'revoked') &&\n        key.metadata.createdAt < cutoffDate\n      )\n\n      for (const keyInfo of keysToRemove) {\n        await this.deleteKey(keyInfo.metadata.id)\n      }\n\n      console.log(`\u2705 Cleaned up ${keysToRemove.length} old keys`)\n    } catch (error) {\n      console.error('Key cleanup failed:', error)\n    }\n  }\n\n  /**\n   * Get key health status\n   */\n  async getKeyHealthStatus(): Promise<{\n    totalKeys: number\n    activeKeys: number\n    deprecatedKeys: number\n    revokedKeys: number\n    rotationDue: number\n    oldKeys: number\n  }> {\n    try {\n      const keys = await this.getAllKeys()\n      const now = new Date()\n      const cutoffDate = new Date(now.getTime() - this.config.maxKeyAge * 24 * 60 * 60 * 1000)\n\n      return {\n        totalKeys: keys.length,\n        activeKeys: keys.filter(k => k.metadata.status === 'active').length,\n        deprecatedKeys: keys.filter(k => k.metadata.status === 'deprecated').length,\n        revokedKeys: keys.filter(k => k.metadata.status === 'revoked').length,\n        rotationDue: keys.filter(k => k.metadata.status === 'active' && now >= k.metadata.rotationDue).length,\n        oldKeys: keys.filter(k => k.metadata.createdAt < cutoffDate).length\n      }\n    } catch (error) {\n      console.error('Failed to get key health status:', error)\n      return {\n        totalKeys: 0,\n        activeKeys: 0,\n        deprecatedKeys: 0,\n        revokedKeys: 0,\n        rotationDue: 0,\n        oldKeys: 0\n      }\n    }\n  }\n\n  // Private helper methods\n\n  private generateKeyId(): string {\n    const timestamp = Date.now().toString(36)\n    const random = Math.random().toString(36).substring(2, 8)\n    return `key_${timestamp}_${random}`\n  }\n\n  private async generateSecureKey(): Promise<string> {\n    // Generate a 256-bit (32 byte) key\n    const key = new Uint8Array(32)\n    crypto.getRandomValues(key)\n    return Array.from(key, byte => byte.toString(16).padStart(2, '0')).join('')\n  }\n\n  private async storeKey(keyId: string, key: string, metadata: KeyMetadata): Promise<void> {\n    try {\n      // Encrypt the key before storage\n      const encryptedKey = await advancedEncryption.encrypt(key)\n      localStorage.setItem(this.keyPrefix + keyId, encryptedKey)\n      localStorage.setItem(this.metadataPrefix + keyId, JSON.stringify(metadata))\n    } catch (error) {\n      throw new Error(`Failed to store key ${keyId}: ${error}`)\n    }\n  }\n\n  private async getKeyMetadata(keyId: string): Promise<KeyMetadata | null> {\n    try {\n      const metadataStr = localStorage.getItem(this.metadataPrefix + keyId)\n      if (!metadataStr) return null\n      \n      const metadata = JSON.parse(metadataStr) as KeyMetadata\n      // Convert date strings back to Date objects\n      metadata.createdAt = new Date(metadata.createdAt)\n      metadata.lastUsed = new Date(metadata.lastUsed)\n      metadata.rotationDue = new Date(metadata.rotationDue)\n      \n      return metadata\n    } catch (error) {\n      console.error(`Failed to get metadata for key ${keyId}:`, error)\n      return null\n    }\n  }\n\n  private async updateKeyMetadata(keyId: string, metadata: KeyMetadata): Promise<void> {\n    try {\n      localStorage.setItem(this.metadataPrefix + keyId, JSON.stringify(metadata))\n    } catch (error) {\n      throw new Error(`Failed to update metadata for key ${keyId}: ${error}`)\n    }\n  }\n\n  private async getAllKeys(): Promise<Array<{key: string, metadata: KeyMetadata}>> {\n    try {\n      const keys: Array<{key: string, metadata: KeyMetadata}> = []\n      \n      for (let i = 0; i < localStorage.length; i++) {\n        const storageKey = localStorage.key(i)\n        if (storageKey?.startsWith(this.metadataPrefix)) {\n          const keyId = storageKey.substring(this.metadataPrefix.length)\n          const metadata = await this.getKeyMetadata(keyId)\n          \n          if (metadata) {\n            const encryptedKey = localStorage.getItem(this.keyPrefix + keyId)\n            if (encryptedKey) {\n              const decryptedKey = await advancedEncryption.decrypt(encryptedKey)\n              keys.push({ key: decryptedKey, metadata })\n            }\n          }\n        }\n      }\n      \n      return keys\n    } catch (error) {\n      console.error('Failed to get all keys:', error)\n      return []\n    }\n  }\n\n  private async deleteKey(keyId: string): Promise<void> {\n    try {\n      localStorage.removeItem(this.keyPrefix + keyId)\n      localStorage.removeItem(this.metadataPrefix + keyId)\n    } catch (error) {\n      throw new Error(`Failed to delete key ${keyId}: ${error}`)\n    }\n  }\n}\n\n// Create singleton instance\nexport const keyManager = new KeyManager()\n\n// Export types and class\nexport { KeyManager }\nexport type { KeyMetadata, MasterKeyConfig }\n\n// Convenience functions\nexport const generateMasterKey = (purpose?: string) => keyManager.generateMasterKey(purpose)\nexport const rotateKey = (keyId: string) => keyManager.rotateKey(keyId)\nexport const getActiveKey = (purpose?: string) => keyManager.getActiveKey(purpose)\nexport const performAutoRotation = () => keyManager.performAutoRotation()\nexport const cleanupOldKeys = () => keyManager.cleanupOldKeys()\nexport const getKeyHealthStatus = () => keyManager.getKeyHealthStatus()"],
      names: ["KeyManager", "cleanupOldKeys", "generateMasterKey", "getActiveKey", "getKeyHealthStatus", "keyManager", "performAutoRotation", "rotateKey", "config", "keyPrefix", "metadataPrefix", "rotationIntervalDays", "maxKeyAge", "backupCount", "purpose", "keyId", "generateKeyId", "key", "generateSecureKey", "metadata", "id", "version", "createdAt", "Date", "lastUsed", "rotationDue", "now", "algorithm", "status", "storeKey", "console", "log", "error", "Error", "oldMetadata", "getKeyMetadata", "newKeyId", "newKey", "newMetadata", "updateKeyMetadata", "keys", "getAllKeys", "activeKey", "find", "isRotationDue", "dueKeys", "filter", "keyInfo", "length", "cutoffDate", "keysToRemove", "deleteKey", "getTime", "totalKeys", "activeKeys", "k", "deprecatedKeys", "revokedKeys", "oldKeys", "timestamp", "toString", "random", "Math", "substring", "Uint8Array", "crypto", "getRandomValues", "Array", "from", "byte", "padStart", "join", "encryptedKey", "advancedEncryption", "encrypt", "localStorage", "setItem", "JSON", "stringify", "metadataStr", "getItem", "parse", "i", "storageKey", "startsWith", "decryptedKey", "decrypt", "push", "removeItem"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1a8e9d7cdf343ae935b6e3f54890202d45b82720"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2bza9p17a4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2bza9p17a4();
cov_2bza9p17a4().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2bza9p17a4().f[0]++;
  cov_2bza9p17a4().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2bza9p17a4().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2bza9p17a4().s[3]++;
_export(exports, {
  get KeyManager() {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[1]++;
    cov_2bza9p17a4().s[4]++;
    return KeyManager;
  },
  get cleanupOldKeys() {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[2]++;
    cov_2bza9p17a4().s[5]++;
    return cleanupOldKeys;
  },
  get generateMasterKey() {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[3]++;
    cov_2bza9p17a4().s[6]++;
    return generateMasterKey;
  },
  get getActiveKey() {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[4]++;
    cov_2bza9p17a4().s[7]++;
    return getActiveKey;
  },
  get getKeyHealthStatus() {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[5]++;
    cov_2bza9p17a4().s[8]++;
    return getKeyHealthStatus;
  },
  get keyManager() {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[6]++;
    cov_2bza9p17a4().s[9]++;
    return keyManager;
  },
  get performAutoRotation() {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[7]++;
    cov_2bza9p17a4().s[10]++;
    return performAutoRotation;
  },
  get rotateKey() {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[8]++;
    cov_2bza9p17a4().s[11]++;
    return rotateKey;
  }
});
const _encryption =
/* istanbul ignore next */
(cov_2bza9p17a4().s[12]++, require("./encryption"));
class KeyManager {
  constructor(config =
  /* istanbul ignore next */
  (cov_2bza9p17a4().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[9]++;
    cov_2bza9p17a4().s[13]++;
    this.keyPrefix = 'km_';
    /* istanbul ignore next */
    cov_2bza9p17a4().s[14]++;
    this.metadataPrefix = 'km_meta_';
    /* istanbul ignore next */
    cov_2bza9p17a4().s[15]++;
    this.config = {
      rotationIntervalDays: 90,
      maxKeyAge: 365,
      backupCount: 3,
      ...config
    };
  }
  /**
  * Generate a new master key with metadata
  */
  async generateMasterKey(purpose =
  /* istanbul ignore next */
  (cov_2bza9p17a4().b[1][0]++, 'encryption')) {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[10]++;
    cov_2bza9p17a4().s[16]++;
    try {
      const keyId =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[17]++, this.generateKeyId());
      const key =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[18]++, await this.generateSecureKey());
      const metadata =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[19]++, {
        id: keyId,
        version: 1,
        createdAt: new Date(),
        lastUsed: new Date(),
        rotationDue: new Date(Date.now() + this.config.rotationIntervalDays * 24 * 60 * 60 * 1000),
        algorithm: 'AES-256-GCM',
        purpose,
        status: 'active'
      });
      // Store encrypted key and metadata
      /* istanbul ignore next */
      cov_2bza9p17a4().s[20]++;
      await this.storeKey(keyId, key, metadata);
      /* istanbul ignore next */
      cov_2bza9p17a4().s[21]++;
      console.log(`✅ Generated new master key: ${keyId}`);
      /* istanbul ignore next */
      cov_2bza9p17a4().s[22]++;
      return keyId;
    } catch (error) {
      /* istanbul ignore next */
      cov_2bza9p17a4().s[23]++;
      console.error('Failed to generate master key:', error);
      /* istanbul ignore next */
      cov_2bza9p17a4().s[24]++;
      throw new Error('Master key generation failed');
    }
  }
  /**
  * Rotate an existing key
  */
  async rotateKey(keyId) {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[11]++;
    cov_2bza9p17a4().s[25]++;
    try {
      const oldMetadata =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[26]++, await this.getKeyMetadata(keyId));
      /* istanbul ignore next */
      cov_2bza9p17a4().s[27]++;
      if (!oldMetadata) {
        /* istanbul ignore next */
        cov_2bza9p17a4().b[2][0]++;
        cov_2bza9p17a4().s[28]++;
        throw new Error(`Key ${keyId} not found`);
      } else
      /* istanbul ignore next */
      {
        cov_2bza9p17a4().b[2][1]++;
      }
      // Generate new key
      const newKeyId =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[29]++, this.generateKeyId());
      const newKey =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[30]++, await this.generateSecureKey());
      const newMetadata =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[31]++, {
        ...oldMetadata,
        id: newKeyId,
        version: oldMetadata.version + 1,
        createdAt: new Date(),
        lastUsed: new Date(),
        rotationDue: new Date(Date.now() + this.config.rotationIntervalDays * 24 * 60 * 60 * 1000),
        status: 'active'
      });
      // Store new key
      /* istanbul ignore next */
      cov_2bza9p17a4().s[32]++;
      await this.storeKey(newKeyId, newKey, newMetadata);
      // Mark old key as deprecated
      /* istanbul ignore next */
      cov_2bza9p17a4().s[33]++;
      oldMetadata.status = 'deprecated';
      /* istanbul ignore next */
      cov_2bza9p17a4().s[34]++;
      await this.updateKeyMetadata(keyId, oldMetadata);
      /* istanbul ignore next */
      cov_2bza9p17a4().s[35]++;
      console.log(`✅ Rotated key ${keyId} → ${newKeyId}`);
      /* istanbul ignore next */
      cov_2bza9p17a4().s[36]++;
      return newKeyId;
    } catch (error) {
      /* istanbul ignore next */
      cov_2bza9p17a4().s[37]++;
      console.error(`Failed to rotate key ${keyId}:`, error);
      /* istanbul ignore next */
      cov_2bza9p17a4().s[38]++;
      throw new Error(`Key rotation failed for ${keyId}`);
    }
  }
  /**
  * Get active key for a purpose
  */
  async getActiveKey(purpose =
  /* istanbul ignore next */
  (cov_2bza9p17a4().b[3][0]++, 'encryption')) {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[12]++;
    cov_2bza9p17a4().s[39]++;
    try {
      const keys =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[40]++, await this.getAllKeys());
      const activeKey =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[41]++, keys.find(key => {
        /* istanbul ignore next */
        cov_2bza9p17a4().f[13]++;
        cov_2bza9p17a4().s[42]++;
        return /* istanbul ignore next */(cov_2bza9p17a4().b[4][0]++, key.metadata.purpose === purpose) &&
        /* istanbul ignore next */
        (cov_2bza9p17a4().b[4][1]++, key.metadata.status === 'active');
      }));
      /* istanbul ignore next */
      cov_2bza9p17a4().s[43]++;
      if (activeKey) {
        /* istanbul ignore next */
        cov_2bza9p17a4().b[5][0]++;
        cov_2bza9p17a4().s[44]++;
        // Update last used timestamp
        activeKey.metadata.lastUsed = new Date();
        /* istanbul ignore next */
        cov_2bza9p17a4().s[45]++;
        await this.updateKeyMetadata(activeKey.metadata.id, activeKey.metadata);
        /* istanbul ignore next */
        cov_2bza9p17a4().s[46]++;
        return activeKey.key;
      } else
      /* istanbul ignore next */
      {
        cov_2bza9p17a4().b[5][1]++;
      }
      cov_2bza9p17a4().s[47]++;
      return null;
    } catch (error) {
      /* istanbul ignore next */
      cov_2bza9p17a4().s[48]++;
      console.error(`Failed to get active key for ${purpose}:`, error);
      /* istanbul ignore next */
      cov_2bza9p17a4().s[49]++;
      return null;
    }
  }
  /**
  * Check if key rotation is due
  */
  async isRotationDue(keyId) {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[14]++;
    cov_2bza9p17a4().s[50]++;
    try {
      const metadata =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[51]++, await this.getKeyMetadata(keyId));
      /* istanbul ignore next */
      cov_2bza9p17a4().s[52]++;
      if (!metadata) {
        /* istanbul ignore next */
        cov_2bza9p17a4().b[6][0]++;
        cov_2bza9p17a4().s[53]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_2bza9p17a4().b[6][1]++;
      }
      cov_2bza9p17a4().s[54]++;
      return new Date() >= metadata.rotationDue;
    } catch (error) {
      /* istanbul ignore next */
      cov_2bza9p17a4().s[55]++;
      console.error(`Failed to check rotation status for ${keyId}:`, error);
      /* istanbul ignore next */
      cov_2bza9p17a4().s[56]++;
      return false;
    }
  }
  /**
  * Perform automatic key rotation for all due keys
  */
  async performAutoRotation() {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[15]++;
    cov_2bza9p17a4().s[57]++;
    try {
      const keys =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[58]++, await this.getAllKeys());
      const dueKeys =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[59]++, keys.filter(key => {
        /* istanbul ignore next */
        cov_2bza9p17a4().f[16]++;
        cov_2bza9p17a4().s[60]++;
        return /* istanbul ignore next */(cov_2bza9p17a4().b[7][0]++, key.metadata.status === 'active') &&
        /* istanbul ignore next */
        (cov_2bza9p17a4().b[7][1]++, new Date() >= key.metadata.rotationDue);
      }));
      /* istanbul ignore next */
      cov_2bza9p17a4().s[61]++;
      for (const keyInfo of dueKeys) {
        /* istanbul ignore next */
        cov_2bza9p17a4().s[62]++;
        try {
          /* istanbul ignore next */
          cov_2bza9p17a4().s[63]++;
          await this.rotateKey(keyInfo.metadata.id);
        } catch (error) {
          /* istanbul ignore next */
          cov_2bza9p17a4().s[64]++;
          console.error(`Auto-rotation failed for key ${keyInfo.metadata.id}:`, error);
        }
      }
      /* istanbul ignore next */
      cov_2bza9p17a4().s[65]++;
      console.log(`✅ Auto-rotation completed for ${dueKeys.length} keys`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2bza9p17a4().s[66]++;
      console.error('Auto-rotation process failed:', error);
    }
  }
  /**
  * Cleanup old and revoked keys
  */
  async cleanupOldKeys() {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[17]++;
    cov_2bza9p17a4().s[67]++;
    try {
      const keys =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[68]++, await this.getAllKeys());
      const cutoffDate =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[69]++, new Date(Date.now() - this.config.maxKeyAge * 24 * 60 * 60 * 1000));
      const keysToRemove =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[70]++, keys.filter(key => {
        /* istanbul ignore next */
        cov_2bza9p17a4().f[18]++;
        cov_2bza9p17a4().s[71]++;
        return (
        /* istanbul ignore next */
        (cov_2bza9p17a4().b[8][0]++, key.metadata.status === 'deprecated') ||
        /* istanbul ignore next */
        (cov_2bza9p17a4().b[8][1]++, key.metadata.status === 'revoked')) &&
        /* istanbul ignore next */
        (cov_2bza9p17a4().b[8][2]++, key.metadata.createdAt < cutoffDate);
      }));
      /* istanbul ignore next */
      cov_2bza9p17a4().s[72]++;
      for (const keyInfo of keysToRemove) {
        /* istanbul ignore next */
        cov_2bza9p17a4().s[73]++;
        await this.deleteKey(keyInfo.metadata.id);
      }
      /* istanbul ignore next */
      cov_2bza9p17a4().s[74]++;
      console.log(`✅ Cleaned up ${keysToRemove.length} old keys`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2bza9p17a4().s[75]++;
      console.error('Key cleanup failed:', error);
    }
  }
  /**
  * Get key health status
  */
  async getKeyHealthStatus() {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[19]++;
    cov_2bza9p17a4().s[76]++;
    try {
      const keys =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[77]++, await this.getAllKeys());
      const now =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[78]++, new Date());
      const cutoffDate =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[79]++, new Date(now.getTime() - this.config.maxKeyAge * 24 * 60 * 60 * 1000));
      /* istanbul ignore next */
      cov_2bza9p17a4().s[80]++;
      return {
        totalKeys: keys.length,
        activeKeys: keys.filter(k => {
          /* istanbul ignore next */
          cov_2bza9p17a4().f[20]++;
          cov_2bza9p17a4().s[81]++;
          return k.metadata.status === 'active';
        }).length,
        deprecatedKeys: keys.filter(k => {
          /* istanbul ignore next */
          cov_2bza9p17a4().f[21]++;
          cov_2bza9p17a4().s[82]++;
          return k.metadata.status === 'deprecated';
        }).length,
        revokedKeys: keys.filter(k => {
          /* istanbul ignore next */
          cov_2bza9p17a4().f[22]++;
          cov_2bza9p17a4().s[83]++;
          return k.metadata.status === 'revoked';
        }).length,
        rotationDue: keys.filter(k => {
          /* istanbul ignore next */
          cov_2bza9p17a4().f[23]++;
          cov_2bza9p17a4().s[84]++;
          return /* istanbul ignore next */(cov_2bza9p17a4().b[9][0]++, k.metadata.status === 'active') &&
          /* istanbul ignore next */
          (cov_2bza9p17a4().b[9][1]++, now >= k.metadata.rotationDue);
        }).length,
        oldKeys: keys.filter(k => {
          /* istanbul ignore next */
          cov_2bza9p17a4().f[24]++;
          cov_2bza9p17a4().s[85]++;
          return k.metadata.createdAt < cutoffDate;
        }).length
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2bza9p17a4().s[86]++;
      console.error('Failed to get key health status:', error);
      /* istanbul ignore next */
      cov_2bza9p17a4().s[87]++;
      return {
        totalKeys: 0,
        activeKeys: 0,
        deprecatedKeys: 0,
        revokedKeys: 0,
        rotationDue: 0,
        oldKeys: 0
      };
    }
  }
  // Private helper methods
  generateKeyId() {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[25]++;
    const timestamp =
    /* istanbul ignore next */
    (cov_2bza9p17a4().s[88]++, Date.now().toString(36));
    const random =
    /* istanbul ignore next */
    (cov_2bza9p17a4().s[89]++, Math.random().toString(36).substring(2, 8));
    /* istanbul ignore next */
    cov_2bza9p17a4().s[90]++;
    return `key_${timestamp}_${random}`;
  }
  async generateSecureKey() {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[26]++;
    // Generate a 256-bit (32 byte) key
    const key =
    /* istanbul ignore next */
    (cov_2bza9p17a4().s[91]++, new Uint8Array(32));
    /* istanbul ignore next */
    cov_2bza9p17a4().s[92]++;
    crypto.getRandomValues(key);
    /* istanbul ignore next */
    cov_2bza9p17a4().s[93]++;
    return Array.from(key, byte => {
      /* istanbul ignore next */
      cov_2bza9p17a4().f[27]++;
      cov_2bza9p17a4().s[94]++;
      return byte.toString(16).padStart(2, '0');
    }).join('');
  }
  async storeKey(keyId, key, metadata) {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[28]++;
    cov_2bza9p17a4().s[95]++;
    try {
      // Encrypt the key before storage
      const encryptedKey =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[96]++, await _encryption.advancedEncryption.encrypt(key));
      /* istanbul ignore next */
      cov_2bza9p17a4().s[97]++;
      localStorage.setItem(this.keyPrefix + keyId, encryptedKey);
      /* istanbul ignore next */
      cov_2bza9p17a4().s[98]++;
      localStorage.setItem(this.metadataPrefix + keyId, JSON.stringify(metadata));
    } catch (error) {
      /* istanbul ignore next */
      cov_2bza9p17a4().s[99]++;
      throw new Error(`Failed to store key ${keyId}: ${error}`);
    }
  }
  async getKeyMetadata(keyId) {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[29]++;
    cov_2bza9p17a4().s[100]++;
    try {
      const metadataStr =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[101]++, localStorage.getItem(this.metadataPrefix + keyId));
      /* istanbul ignore next */
      cov_2bza9p17a4().s[102]++;
      if (!metadataStr) {
        /* istanbul ignore next */
        cov_2bza9p17a4().b[10][0]++;
        cov_2bza9p17a4().s[103]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2bza9p17a4().b[10][1]++;
      }
      const metadata =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[104]++, JSON.parse(metadataStr));
      // Convert date strings back to Date objects
      /* istanbul ignore next */
      cov_2bza9p17a4().s[105]++;
      metadata.createdAt = new Date(metadata.createdAt);
      /* istanbul ignore next */
      cov_2bza9p17a4().s[106]++;
      metadata.lastUsed = new Date(metadata.lastUsed);
      /* istanbul ignore next */
      cov_2bza9p17a4().s[107]++;
      metadata.rotationDue = new Date(metadata.rotationDue);
      /* istanbul ignore next */
      cov_2bza9p17a4().s[108]++;
      return metadata;
    } catch (error) {
      /* istanbul ignore next */
      cov_2bza9p17a4().s[109]++;
      console.error(`Failed to get metadata for key ${keyId}:`, error);
      /* istanbul ignore next */
      cov_2bza9p17a4().s[110]++;
      return null;
    }
  }
  async updateKeyMetadata(keyId, metadata) {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[30]++;
    cov_2bza9p17a4().s[111]++;
    try {
      /* istanbul ignore next */
      cov_2bza9p17a4().s[112]++;
      localStorage.setItem(this.metadataPrefix + keyId, JSON.stringify(metadata));
    } catch (error) {
      /* istanbul ignore next */
      cov_2bza9p17a4().s[113]++;
      throw new Error(`Failed to update metadata for key ${keyId}: ${error}`);
    }
  }
  async getAllKeys() {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[31]++;
    cov_2bza9p17a4().s[114]++;
    try {
      const keys =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[115]++, []);
      /* istanbul ignore next */
      cov_2bza9p17a4().s[116]++;
      for (let i =
      /* istanbul ignore next */
      (cov_2bza9p17a4().s[117]++, 0); i < localStorage.length; i++) {
        const storageKey =
        /* istanbul ignore next */
        (cov_2bza9p17a4().s[118]++, localStorage.key(i));
        /* istanbul ignore next */
        cov_2bza9p17a4().s[119]++;
        if (storageKey?.startsWith(this.metadataPrefix)) {
          /* istanbul ignore next */
          cov_2bza9p17a4().b[11][0]++;
          const keyId =
          /* istanbul ignore next */
          (cov_2bza9p17a4().s[120]++, storageKey.substring(this.metadataPrefix.length));
          const metadata =
          /* istanbul ignore next */
          (cov_2bza9p17a4().s[121]++, await this.getKeyMetadata(keyId));
          /* istanbul ignore next */
          cov_2bza9p17a4().s[122]++;
          if (metadata) {
            /* istanbul ignore next */
            cov_2bza9p17a4().b[12][0]++;
            const encryptedKey =
            /* istanbul ignore next */
            (cov_2bza9p17a4().s[123]++, localStorage.getItem(this.keyPrefix + keyId));
            /* istanbul ignore next */
            cov_2bza9p17a4().s[124]++;
            if (encryptedKey) {
              /* istanbul ignore next */
              cov_2bza9p17a4().b[13][0]++;
              const decryptedKey =
              /* istanbul ignore next */
              (cov_2bza9p17a4().s[125]++, await _encryption.advancedEncryption.decrypt(encryptedKey));
              /* istanbul ignore next */
              cov_2bza9p17a4().s[126]++;
              keys.push({
                key: decryptedKey,
                metadata
              });
            } else
            /* istanbul ignore next */
            {
              cov_2bza9p17a4().b[13][1]++;
            }
          } else
          /* istanbul ignore next */
          {
            cov_2bza9p17a4().b[12][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_2bza9p17a4().b[11][1]++;
        }
      }
      /* istanbul ignore next */
      cov_2bza9p17a4().s[127]++;
      return keys;
    } catch (error) {
      /* istanbul ignore next */
      cov_2bza9p17a4().s[128]++;
      console.error('Failed to get all keys:', error);
      /* istanbul ignore next */
      cov_2bza9p17a4().s[129]++;
      return [];
    }
  }
  async deleteKey(keyId) {
    /* istanbul ignore next */
    cov_2bza9p17a4().f[32]++;
    cov_2bza9p17a4().s[130]++;
    try {
      /* istanbul ignore next */
      cov_2bza9p17a4().s[131]++;
      localStorage.removeItem(this.keyPrefix + keyId);
      /* istanbul ignore next */
      cov_2bza9p17a4().s[132]++;
      localStorage.removeItem(this.metadataPrefix + keyId);
    } catch (error) {
      /* istanbul ignore next */
      cov_2bza9p17a4().s[133]++;
      throw new Error(`Failed to delete key ${keyId}: ${error}`);
    }
  }
}
const keyManager =
/* istanbul ignore next */
(cov_2bza9p17a4().s[134]++, new KeyManager());
/* istanbul ignore next */
cov_2bza9p17a4().s[135]++;
const generateMasterKey = purpose => {
  /* istanbul ignore next */
  cov_2bza9p17a4().f[33]++;
  cov_2bza9p17a4().s[136]++;
  return keyManager.generateMasterKey(purpose);
};
/* istanbul ignore next */
cov_2bza9p17a4().s[137]++;
const rotateKey = keyId => {
  /* istanbul ignore next */
  cov_2bza9p17a4().f[34]++;
  cov_2bza9p17a4().s[138]++;
  return keyManager.rotateKey(keyId);
};
/* istanbul ignore next */
cov_2bza9p17a4().s[139]++;
const getActiveKey = purpose => {
  /* istanbul ignore next */
  cov_2bza9p17a4().f[35]++;
  cov_2bza9p17a4().s[140]++;
  return keyManager.getActiveKey(purpose);
};
/* istanbul ignore next */
cov_2bza9p17a4().s[141]++;
const performAutoRotation = () => {
  /* istanbul ignore next */
  cov_2bza9p17a4().f[36]++;
  cov_2bza9p17a4().s[142]++;
  return keyManager.performAutoRotation();
};
/* istanbul ignore next */
cov_2bza9p17a4().s[143]++;
const cleanupOldKeys = () => {
  /* istanbul ignore next */
  cov_2bza9p17a4().f[37]++;
  cov_2bza9p17a4().s[144]++;
  return keyManager.cleanupOldKeys();
};
/* istanbul ignore next */
cov_2bza9p17a4().s[145]++;
const getKeyHealthStatus = () => {
  /* istanbul ignore next */
  cov_2bza9p17a4().f[38]++;
  cov_2bza9p17a4().s[146]++;
  return keyManager.getKeyHealthStatus();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,