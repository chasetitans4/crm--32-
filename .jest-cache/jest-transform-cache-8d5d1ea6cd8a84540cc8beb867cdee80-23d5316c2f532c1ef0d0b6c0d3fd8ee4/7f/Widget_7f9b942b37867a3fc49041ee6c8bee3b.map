{"version":3,"names":["_default","COLORS","cov_clkpzzh0z","s","Widget","widget","data","f","BarChart","LineChart","PieChart","ResponsiveContainer","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Bar","Line","Pie","Cell","_dynamicImports","LazyRechartsComponents","renderContent","type","b","_jsxruntime","jsx","width","height","jsxs","map","d","i","name","labels","value","strokeDasharray","dataKey","fill","monthly","stroke","pieData","Object","entries","stages","key","cx","cy","labelLine","outerRadius","entry","index","length","_card","Card","CardHeader","CardTitle","title","CardContent"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\components\\Dashboard\\Widget.tsx"],"sourcesContent":["\"use client\";\n\nimport React from 'react';\nimport { LazyRechartsComponents } from '@/utils/dynamicImports';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\n\ninterface WidgetProps {\n  widget: {\n    id: string;\n    type: 'kpi' | 'bar' | 'line' | 'pie';\n    metric: string;\n    title: string;\n  };\n  data: any;\n}\n\nconst Widget: React.FC<WidgetProps> = ({ widget, data }) => {\n  const { BarChart, LineChart, PieChart, ResponsiveContainer, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Bar, Line, Pie, Cell } = LazyRechartsComponents;\n  \n  const renderContent = () => {\n    switch (widget.type) {\n      case 'bar':\n        return (\n          <ResponsiveContainer width=\"100%\" height={200}>\n            <BarChart data={data?.data?.map((d: number, i: number) => ({ name: data.labels[i], value: d }))}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"value\" fill=\"#8884d8\" />\n            </BarChart>\n          </ResponsiveContainer>\n        );\n      case 'line':\n        return (\n          <ResponsiveContainer width=\"100%\" height={200}>\n            <LineChart data={data?.monthly?.map((d: number, i: number) => ({ name: `Month ${i + 1}`, value: d }))}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" />\n            </LineChart>\n          </ResponsiveContainer>\n        );\n      case 'pie':\n        const pieData = Object.entries(data?.stages || {}).map(([key, value]) => ({ name: key, value }));\n        return (\n          <ResponsiveContainer width=\"100%\" height={200}>\n            <PieChart>\n              <Pie data={pieData} cx=\"50%\" cy=\"50%\" labelLine={false} outerRadius={80} fill=\"#8884d8\" dataKey=\"value\">\n                {pieData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                ))}\n              </Pie>\n              <Tooltip />\n            </PieChart>\n          </ResponsiveContainer>\n        );\n      default:\n        return <div>Unsupported widget type</div>;\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>{widget.title}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {renderContent()}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Widget;"],"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","ignoreList":[]}