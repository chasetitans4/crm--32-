{"version":3,"names":["cov_22w7pabrah","actualCoverage","s","authService","AuthService","signUp","email","password","userData","f","loading","error","notifySubscribers","user","id","Math","random","toString","substr","name","b","split","role","createdAt","Date","toISOString","tokens","accessToken","generateSecureToken","refreshToken","expiresAt","now","tokenType","_secureStorage","setSecureJSON","setSecureItemAdvanced","Error","message","signIn","lastLogin","signOut","removeSecureItem","resetPassword","updatePassword","newPassword","updateProfile","updates","updatedUser","uploadAvatar","file","avatarUrl","URL","createObjectURL","avatar","isAuthenticated","hasRole","rolesHierarchy","admin","agent","userRoles","includes","getAccessToken","getCurrentUser","getState","subscribe","callback","subscribers","push","filter","sub","state","forEach","array","Uint8Array","crypto","getRandomValues","Array","from","byte","padStart","join","init","storedUser","getSecureJSON","storedTokens","legacyUser","legacyError","window","catch","console"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\auth.ts"],"sourcesContent":["// Authentication Service\n\"use client\"\n\nimport { setSecureJSON, getSecureJSON, setSecureItem, getSecureItem, removeSecureItem, setSecureItemAdvanced } from \"../utils/secureStorage\"\nimport { advancedEncryption } from \"../utils/encryption\"\n\nexport interface AuthUser {\n  id: string\n  email: string\n  name?: string\n  role: string\n  avatar?: string\n  createdAt: string\n  lastLogin?: string\n}\n\nexport interface AuthTokens {\n  accessToken: string\n  refreshToken?: string\n  expiresAt: string\n  tokenType: string\n}\n\nexport interface AuthState {\n  user: AuthUser | null\n  loading: boolean\n  error: string | null\n}\n\nclass AuthService {\n  private user: AuthUser | null = null\n  private tokens: AuthTokens | null = null\n  private loading = false\n  private error: string | null = null\n  private subscribers: ((state: AuthState) => void)[] = []\n\n  async signUp(email: string, password: string, userData?: { name?: string }): Promise<AuthUser> {\n    this.loading = true\n    this.error = null\n    this.notifySubscribers()\n\n    try {\n      // Mock implementation - replace with actual auth service\n      const user: AuthUser = {\n        id: Math.random().toString(36).substr(2, 9),\n        email,\n        name: userData?.name || email.split(\"@\")[0],\n        role: \"user\",\n        createdAt: new Date().toISOString(),\n      }\n\n      // Generate secure tokens\n      const tokens: AuthTokens = {\n        accessToken: this.generateSecureToken(),\n        refreshToken: this.generateSecureToken(),\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // 24 hours\n        tokenType: \"Bearer\"\n      }\n\n      this.user = user\n      this.tokens = tokens\n\n      // Store user data and tokens securely using advanced encryption\n      await setSecureJSON(\"auth_user\", user)\n      await setSecureJSON(\"auth_tokens\", tokens)\n      await setSecureItemAdvanced(\"auth_token\", tokens.accessToken)\n\n      this.notifySubscribers()\n      return user\n    } catch (error) {\n      this.error = error instanceof Error ? error.message : \"Sign up failed\"\n      this.notifySubscribers()\n      throw error\n    } finally {\n      this.loading = false\n      this.notifySubscribers()\n    }\n  }\n\n  async signIn(email: string, password: string): Promise<AuthUser> {\n    this.loading = true\n    this.error = null\n    this.notifySubscribers()\n\n    try {\n      // Mock implementation - replace with actual auth service\n      const user: AuthUser = {\n        id: Math.random().toString(36).substr(2, 9),\n        email,\n        name: email.split(\"@\")[0],\n        role: \"user\",\n        createdAt: new Date().toISOString(),\n        lastLogin: new Date().toISOString(),\n      }\n\n      // Generate secure tokens\n      const tokens: AuthTokens = {\n        accessToken: this.generateSecureToken(),\n        refreshToken: this.generateSecureToken(),\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // 24 hours\n        tokenType: \"Bearer\"\n      }\n\n      this.user = user\n      this.tokens = tokens\n\n      // Store user data and tokens securely using advanced encryption\n      await setSecureJSON(\"auth_user\", user)\n      await setSecureJSON(\"auth_tokens\", tokens)\n      await setSecureItemAdvanced(\"auth_token\", tokens.accessToken)\n\n      this.notifySubscribers()\n      return user\n    } catch (error) {\n      this.error = error instanceof Error ? error.message : \"Sign in failed\"\n      this.notifySubscribers()\n      throw error\n    } finally {\n      this.loading = false\n      this.notifySubscribers()\n    }\n  }\n\n  async signOut(): Promise<void> {\n    this.user = null\n    this.tokens = null\n    this.error = null\n    \n    // Clear all authentication data from secure storage\n    removeSecureItem(\"auth_user\")\n    removeSecureItem(\"auth_tokens\")\n    removeSecureItem(\"auth_token\")\n    \n    this.notifySubscribers()\n  }\n\n  async resetPassword(email: string): Promise<void> {\n    this.loading = true\n    this.error = null\n    this.notifySubscribers()\n\n    try {\n      // Mock implementation\n      // Silent logging - Password reset email sent\n    } catch (error) {\n      this.error = error instanceof Error ? error.message : \"Password reset failed\"\n      this.notifySubscribers()\n      throw error\n    } finally {\n      this.loading = false\n      this.notifySubscribers()\n    }\n  }\n\n  async updatePassword(newPassword: string): Promise<void> {\n    this.loading = true\n    this.error = null\n    this.notifySubscribers()\n\n    try {\n      // Mock implementation\n      // Silent logging - Password updated\n    } catch (error) {\n      this.error = error instanceof Error ? error.message : \"Password update failed\"\n      this.notifySubscribers()\n      throw error\n    } finally {\n      this.loading = false\n      this.notifySubscribers()\n    }\n  }\n\n  async updateProfile(updates: Partial<AuthUser>): Promise<AuthUser> {\n    if (!this.user) {\n      throw new Error(\"No authenticated user\")\n    }\n\n    this.loading = true\n    this.error = null\n    this.notifySubscribers()\n\n    try {\n      const updatedUser = { ...this.user, ...updates }\n      this.user = updatedUser\n      \n      // Store updated user data securely using advanced encryption\n      await setSecureJSON(\"auth_user\", updatedUser)\n      \n      this.notifySubscribers()\n      return updatedUser\n    } catch (error) {\n      this.error = error instanceof Error ? error.message : \"Profile update failed\"\n      this.notifySubscribers()\n      throw error\n    } finally {\n      this.loading = false\n      this.notifySubscribers()\n    }\n  }\n\n  async uploadAvatar(file: File): Promise<string> {\n    this.loading = true\n    this.error = null\n    this.notifySubscribers()\n\n    try {\n      // Mock implementation - return a placeholder URL\n      const avatarUrl = URL.createObjectURL(file)\n\n      if (this.user) {\n        await this.updateProfile({ avatar: avatarUrl })\n      }\n\n      return avatarUrl\n    } catch (error) {\n      this.error = error instanceof Error ? error.message : \"Avatar upload failed\"\n      this.notifySubscribers()\n      throw error\n    } finally {\n      this.loading = false\n      this.notifySubscribers()\n    }\n  }\n\n  isAuthenticated(): boolean {\n    return this.user !== null\n  }\n\n  hasRole(role: string): boolean {\n    if (!this.user) return false;\n    const rolesHierarchy = {\n      admin: ['admin', 'agent', 'user'],\n      agent: ['agent', 'user'],\n      user: ['user'],\n    };\n    const userRoles = rolesHierarchy[this.user.role as keyof typeof rolesHierarchy] || [];\n    return userRoles.includes(role);\n  }\n\n  getAccessToken(): string | null {\n    if (!this.user || !this.tokens) return null\n    \n    // Check if token is expired\n    if (new Date() > new Date(this.tokens.expiresAt)) {\n      // Token expired, clear auth state\n      this.signOut()\n      return null\n    }\n    \n    return this.tokens.accessToken\n  }\n\n  getCurrentUser(): AuthUser | null {\n    return this.user\n  }\n\n  getState(): AuthState {\n    return {\n      user: this.user,\n      loading: this.loading,\n      error: this.error,\n    }\n  }\n\n  // Subscribe to auth state changes\n  subscribe(callback: (state: AuthState) => void): () => void {\n    this.subscribers.push(callback)\n    return () => {\n      this.subscribers = this.subscribers.filter((sub) => sub !== callback)\n    }\n  }\n\n  private notifySubscribers(): void {\n    const state = this.getState()\n    this.subscribers.forEach((callback) => callback(state))\n  }\n\n  private generateSecureToken(): string {\n    // Generate a cryptographically secure token\n    const array = new Uint8Array(32)\n    crypto.getRandomValues(array)\n    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('')\n  }\n\n  // Initialize from secure storage\n  async init(): Promise<void> {\n    try {\n      // Try to load user data using advanced encryption first\n      const storedUser = await getSecureJSON(\"auth_user\")\n      const storedTokens = await getSecureJSON(\"auth_tokens\")\n      \n      if (storedUser && typeof storedUser === 'object' && 'id' in storedUser && 'email' in storedUser) {\n        this.user = storedUser as AuthUser\n        \n        if (storedTokens && typeof storedTokens === 'object' && 'accessToken' in storedTokens) {\n          this.tokens = storedTokens as AuthTokens\n          \n          // Check if token is expired\n          if (new Date() > new Date(this.tokens.expiresAt)) {\n            // Token expired, clear auth state\n            await this.signOut()\n            return\n          }\n        }\n        \n        this.notifySubscribers()\n      }\n    } catch (error) {\n      // Try legacy storage as fallback\n      try {\n        const legacyUser = getSecureJSON(\"auth_user\")\n        if (legacyUser && typeof legacyUser === 'object' && 'id' in legacyUser && 'email' in legacyUser) {\n          this.user = legacyUser as AuthUser\n          // Migrate to advanced encryption\n          await setSecureJSON(\"auth_user\", this.user)\n          this.notifySubscribers()\n        }\n      } catch (legacyError) {\n        // Silent error handling - Failed to load user from storage\n      }\n    }\n  }\n}\n\nexport const authService = new AuthService()\n\n// Initialize on import\nif (typeof window !== \"undefined\") {\n  authService.init().catch(error => {\n    console.error(\"Failed to initialize auth service:\", error)\n  })\n}\n"],"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","ignoreList":[]}