{"version":3,"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\components\\__tests__\\Pipeline.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport '@testing-library/jest-dom'\nimport Pipeline from '../Pipeline'\nimport { AppProvider } from '../../context/AppContext'\nimport type { Client } from '../../types'\n\n// Mock the hooks\njest.mock('../../hooks/useClientActions', () => ({\n  useClientActions: () => ({\n    updateClientStage: jest.fn(),\n    addClient: jest.fn(),\n    updateClient: jest.fn(),\n    deleteClient: jest.fn(),\n  })\n}))\n\n// Mock framer-motion\njest.mock('framer-motion', () => ({\n  motion: {\n    div: ({ children, ...props }: any) => <div {...props}>{children}</div>,\n    button: ({ children, ...props }: any) => <button {...props}>{children}</button>,\n  },\n  AnimatePresence: ({ children }: any) => children,\n}))\n\n// Mock the Pipeline sub-components\njest.mock('../Pipeline/PipelineMetricsView', () => {\n  return function MockPipelineMetricsView() {\n    return <div data-testid=\"pipeline-metrics-view\">Pipeline Metrics View</div>\n  }\n})\n\njest.mock('../Pipeline/PipelineCardsView', () => {\n  return function MockPipelineCardsView() {\n    return <div data-testid=\"pipeline-cards-view\">Pipeline Cards View</div>\n  }\n})\n\nconst mockClients: Client[] = [\n  {\n    id: '1',\n    name: 'John Doe',\n    email: 'john@example.com',\n    phone: '+1 (555) 123-4567',\n    company: 'Acme Corp',\n    stage: 'lead',\n    value: 50000,\n    lastContact: '2024-01-15',\n    notes: [],\n    projects: [],\n    tags: ['enterprise'],\n    priority: 'high',\n    source: 'website',\n    assignedTo: 'sales-rep-1'\n  },\n  {\n    id: '2',\n    name: 'Jane Smith',\n    email: 'jane@example.com',\n    phone: '+1 (555) 987-6543',\n    company: 'Tech Solutions',\n    stage: 'qualified',\n    value: 75000,\n    lastContact: '2024-01-10',\n    notes: [],\n    projects: [],\n    tags: ['tech'],\n    priority: 'medium',\n    source: 'referral',\n    assignedTo: 'sales-rep-2'\n  },\n  {\n    id: '3',\n    name: 'Bob Wilson',\n    email: 'bob@example.com',\n    phone: '+1 (555) 456-7890',\n    company: 'StartupXYZ',\n    stage: 'proposal',\n    value: 25000,\n    lastContact: '2024-01-05',\n    notes: [],\n    projects: [],\n    tags: ['startup'],\n    priority: 'low',\n    source: 'cold-call',\n    assignedTo: 'sales-rep-1'\n  },\n  {\n    id: '4',\n    name: 'Alice Johnson',\n    email: 'alice@example.com',\n    phone: '+1 (555) 321-0987',\n    company: 'Enterprise Inc',\n    stage: 'closed',\n    value: 100000,\n    lastContact: '2024-01-01',\n    notes: [],\n    projects: [],\n    tags: ['enterprise', 'vip'],\n    priority: 'high',\n    source: 'referral',\n    assignedTo: 'sales-rep-1'\n  }\n]\n\nconst mockSalesStages = [\n  { id: 'lead', name: 'Lead', color: '#3B82F6' },\n  { id: 'qualified', name: 'Qualified', color: '#10B981' },\n  { id: 'proposal', name: 'Proposal', color: '#F59E0B' },\n  { id: 'closed', name: 'Closed', color: '#EF4444' }\n]\n\nconst mockInitialState = {\n  clients: mockClients,\n  salesStages: mockSalesStages,\n  contracts: [],\n  invoices: [],\n  tasks: [],\n  projects: [],\n  reports: [],\n  settings: {\n    currency: 'USD',\n    dateFormat: 'MM/DD/YYYY',\n    timezone: 'UTC'\n  }\n}\n\nconst renderWithProvider = (component: React.ReactElement) => {\n  return render(\n    <AppProvider initialState={mockInitialState}>\n      {component}\n    </AppProvider>\n  )\n}\n\ndescribe('Pipeline Component', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  test('renders pipeline component', () => {\n    renderWithProvider(<Pipeline />)\n    expect(screen.getByText('Sales Pipeline')).toBeInTheDocument()\n  })\n\n  test('displays all sales stages', () => {\n    renderWithProvider(<Pipeline />)\n    \n    expect(screen.getByText('Lead')).toBeInTheDocument()\n    expect(screen.getByText('Qualified')).toBeInTheDocument()\n    expect(screen.getByText('Proposal')).toBeInTheDocument()\n    expect(screen.getByText('Closed')).toBeInTheDocument()\n  })\n\n  test('shows clients in correct stages', () => {\n    renderWithProvider(<Pipeline />)\n    \n    // Check that clients appear in their respective stages\n    expect(screen.getByText('John Doe')).toBeInTheDocument()\n    expect(screen.getByText('Jane Smith')).toBeInTheDocument()\n    expect(screen.getByText('Bob Wilson')).toBeInTheDocument()\n    expect(screen.getByText('Alice Johnson')).toBeInTheDocument()\n  })\n\n  test('displays client values correctly', () => {\n    renderWithProvider(<Pipeline />)\n    \n    expect(screen.getByText('$50,000')).toBeInTheDocument()\n    expect(screen.getByText('$75,000')).toBeInTheDocument()\n    expect(screen.getByText('$25,000')).toBeInTheDocument()\n    expect(screen.getByText('$100,000')).toBeInTheDocument()\n  })\n\n  test('calculates stage totals correctly', () => {\n    renderWithProvider(<Pipeline />)\n    \n    // Lead stage: $50,000\n    // Qualified stage: $75,000\n    // Proposal stage: $25,000\n    // Closed stage: $100,000\n    \n    const leadTotal = mockClients.filter(c => c.stage === 'lead').reduce((sum, c) => sum + c.value, 0)\n    const qualifiedTotal = mockClients.filter(c => c.stage === 'qualified').reduce((sum, c) => sum + c.value, 0)\n    const proposalTotal = mockClients.filter(c => c.stage === 'proposal').reduce((sum, c) => sum + c.value, 0)\n    const closedTotal = mockClients.filter(c => c.stage === 'closed').reduce((sum, c) => sum + c.value, 0)\n    \n    expect(leadTotal).toBe(50000)\n    expect(qualifiedTotal).toBe(75000)\n    expect(proposalTotal).toBe(25000)\n    expect(closedTotal).toBe(100000)\n  })\n\n  test('view mode switching works', async () => {\n    const user = userEvent.setup()\n    renderWithProvider(<Pipeline />)\n    \n    // Test switching to metrics view\n    const metricsButton = screen.getByText('Metrics')\n    await user.click(metricsButton)\n    \n    expect(screen.getByTestId('pipeline-metrics-view')).toBeInTheDocument()\n  })\n\n  test('search functionality filters clients', async () => {\n    const user = userEvent.setup()\n    renderWithProvider(<Pipeline />)\n    \n    const searchInput = screen.getByPlaceholderText(/search clients/i)\n    await user.type(searchInput, 'John')\n    \n    expect(screen.getByText('John Doe')).toBeInTheDocument()\n    expect(screen.queryByText('Jane Smith')).not.toBeInTheDocument()\n  })\n\n  test('filter by value range works', async () => {\n    const user = userEvent.setup()\n    renderWithProvider(<Pipeline />)\n    \n    // Open filters\n    const filterButton = screen.getByText('Filters')\n    await user.click(filterButton)\n    \n    // Set minimum value filter\n    const minValueInput = screen.getByLabelText(/minimum value/i)\n    await user.clear(minValueInput)\n    await user.type(minValueInput, '60000')\n    \n    // Should show only clients with value >= 60000\n    expect(screen.getByText('Jane Smith')).toBeInTheDocument() // $75,000\n    expect(screen.getByText('Alice Johnson')).toBeInTheDocument() // $100,000\n    expect(screen.queryByText('John Doe')).not.toBeInTheDocument() // $50,000\n    expect(screen.queryByText('Bob Wilson')).not.toBeInTheDocument() // $25,000\n  })\n\n  test('displays stage metrics correctly', () => {\n    renderWithProvider(<Pipeline />)\n    \n    // Check client count per stage\n    const leadCount = mockClients.filter(c => c.stage === 'lead').length\n    const qualifiedCount = mockClients.filter(c => c.stage === 'qualified').length\n    const proposalCount = mockClients.filter(c => c.stage === 'proposal').length\n    const closedCount = mockClients.filter(c => c.stage === 'closed').length\n    \n    expect(leadCount).toBe(1)\n    expect(qualifiedCount).toBe(1)\n    expect(proposalCount).toBe(1)\n    expect(closedCount).toBe(1)\n  })\n\n  test('handles drag and drop functionality', async () => {\n    const user = userEvent.setup()\n    renderWithProvider(<Pipeline />)\n    \n    // Find a client card\n    const clientCard = screen.getByText('John Doe').closest('[draggable]')\n    \n    if (clientCard) {\n      // Simulate drag start\n      fireEvent.dragStart(clientCard)\n      \n      // Find a drop zone (different stage)\n      const qualifiedStage = screen.getByText('Qualified').closest('.stage-column')\n      \n      if (qualifiedStage) {\n        // Simulate drop\n        fireEvent.dragOver(qualifiedStage)\n        fireEvent.drop(qualifiedStage)\n        \n        // Verify that updateClientStage was called\n        // Note: This would require mocking the hook properly\n      }\n    }\n  })\n\n  test('shows client priority indicators', () => {\n    renderWithProvider(<Pipeline />)\n    \n    // Check for priority indicators\n    const highPriorityElements = screen.getAllByText(/high/i)\n    const mediumPriorityElements = screen.getAllByText(/medium/i)\n    const lowPriorityElements = screen.getAllByText(/low/i)\n    \n    expect(highPriorityElements.length).toBeGreaterThan(0)\n    expect(mediumPriorityElements.length).toBeGreaterThan(0)\n    expect(lowPriorityElements.length).toBeGreaterThan(0)\n  })\n\n  test('displays client tags', () => {\n    renderWithProvider(<Pipeline />)\n    \n    expect(screen.getByText('enterprise')).toBeInTheDocument()\n    expect(screen.getByText('tech')).toBeInTheDocument()\n    expect(screen.getByText('startup')).toBeInTheDocument()\n    expect(screen.getByText('vip')).toBeInTheDocument()\n  })\n\n  test('handles empty pipeline gracefully', () => {\n    const emptyState = {\n      ...mockInitialState,\n      clients: []\n    }\n    \n    render(\n      <AppProvider initialState={emptyState}>\n        <Pipeline />\n      </AppProvider>\n    )\n    \n    expect(screen.getByText('Sales Pipeline')).toBeInTheDocument()\n    expect(screen.getByText(/no clients in pipeline/i)).toBeInTheDocument()\n  })\n\n  test('calculates conversion rates correctly', () => {\n    renderWithProvider(<Pipeline />)\n    \n    const totalClients = mockClients.length\n    const closedClients = mockClients.filter(c => c.stage === 'closed').length\n    const conversionRate = Math.round((closedClients / totalClients) * 100)\n    \n    expect(conversionRate).toBe(25) // 1 out of 4 clients closed\n  })\n\n  test('shows pipeline velocity metrics', () => {\n    renderWithProvider(<Pipeline />)\n    \n    // Switch to metrics view to see velocity\n    const metricsButton = screen.getByText('Metrics')\n    fireEvent.click(metricsButton)\n    \n    expect(screen.getByTestId('pipeline-metrics-view')).toBeInTheDocument()\n  })\n\n  test('bulk actions work correctly', async () => {\n    const user = userEvent.setup()\n    renderWithProvider(<Pipeline />)\n    \n    // Select multiple clients\n    const checkboxes = screen.getAllByRole('checkbox')\n    \n    if (checkboxes.length > 0) {\n      await user.click(checkboxes[0])\n      await user.click(checkboxes[1])\n      \n      // Check that bulk actions become available\n      expect(screen.getByText('Bulk Actions')).toBeInTheDocument()\n    }\n  })\n\n  test('export functionality works', async () => {\n    const user = userEvent.setup()\n    renderWithProvider(<Pipeline />)\n    \n    const exportButton = screen.getByText('Export')\n    await user.click(exportButton)\n    \n    // Should show export options\n    expect(screen.getByText('Export Pipeline Data')).toBeInTheDocument()\n  })\n\n  test('responsive design adapts to screen size', () => {\n    // Mock window.innerWidth\n    Object.defineProperty(window, 'innerWidth', {\n      writable: true,\n      configurable: true,\n      value: 768,\n    })\n    \n    renderWithProvider(<Pipeline />)\n    \n    // Check that mobile view is rendered\n    const pipelineContainer = screen.getByText('Sales Pipeline').closest('div')\n    expect(pipelineContainer).toBeInTheDocument()\n  })\n})"],"names":["jest","mock","useClientActions","updateClientStage","fn","addClient","updateClient","deleteClient","motion","div","children","props","button","AnimatePresence","MockPipelineMetricsView","data-testid","MockPipelineCardsView","mockClients","id","name","email","phone","company","stage","value","lastContact","notes","projects","tags","priority","source","assignedTo","mockSalesStages","color","mockInitialState","clients","salesStages","contracts","invoices","tasks","reports","settings","currency","dateFormat","timezone","renderWithProvider","component","render","AppProvider","initialState","describe","beforeEach","clearAllMocks","test","Pipeline","expect","screen","getByText","toBeInTheDocument","leadTotal","filter","c","reduce","sum","qualifiedTotal","proposalTotal","closedTotal","toBe","user","userEvent","setup","metricsButton","click","getByTestId","searchInput","getByPlaceholderText","type","queryByText","not","filterButton","minValueInput","getByLabelText","clear","leadCount","length","qualifiedCount","proposalCount","closedCount","clientCard","closest","fireEvent","dragStart","qualifiedStage","dragOver","drop","highPriorityElements","getAllByText","mediumPriorityElements","lowPriorityElements","toBeGreaterThan","emptyState","totalClients","closedClients","conversionRate","Math","round","checkboxes","getAllByRole","exportButton","Object","defineProperty","window","writable","configurable","pipelineContainer"],"mappings":"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"}