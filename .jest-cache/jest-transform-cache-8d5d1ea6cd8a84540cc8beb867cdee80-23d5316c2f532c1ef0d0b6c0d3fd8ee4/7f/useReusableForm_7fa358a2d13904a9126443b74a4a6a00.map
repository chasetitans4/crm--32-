{"version":3,"names":["cov_npbpm9dqa","actualCoverage","s","commonSchemas","f","createFormHook","default","_default","useReusableForm","options","initialValues","validationSchema","onSubmit","resetOnSubmit","b","validateOnChange","validateOnBlur","values","setValuesState","_react","useState","errors","setErrorsState","touched","setTouchedState","isSubmitting","setIsSubmitting","isValid","Object","keys","length","isDirty","JSON","stringify","hasUnsavedChanges","validateField","useCallback","name","fieldSchema","shape","parseAsync","prev","newErrors","error","_zod","z","ZodError","fieldError","message","validateForm","forEach","err","path","setFieldValue","value","setTimeout","setFieldError","setFieldTouched","isTouched","setValues","newValues","setErrors","resetForm","clearErrors","getFieldProps","onChange","onBlur","handleSubmit","e","preventDefault","allTouched","key","isFormValid","console","useEffect","email","string","phone","regex","required","min","optionalString","optional","positiveNumber","number","positive","currency","date","required_error","url","clientInfo","object","company","projectInfo","title","description","budget","deadline","defaultValues","schema","overrides"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\useReusableForm.ts"],"sourcesContent":["\"use client\"\n\nimport { useState, useCallback, useEffect } from \"react\"\nimport { z } from \"zod\"\n\nexport interface UseReusableFormOptions<T> {\n  initialValues: T\n  validationSchema?: z.ZodSchema<T>\n  onSubmit?: (values: T) => Promise<void> | void\n  resetOnSubmit?: boolean\n  validateOnChange?: boolean\n  validateOnBlur?: boolean\n}\n\nexport interface FormField {\n  value: any\n  error?: string\n  touched: boolean\n  onChange: (value: any) => void\n  onBlur: () => void\n}\n\nexport interface UseReusableFormReturn<T> {\n  values: T\n  errors: Partial<Record<keyof T, string>>\n  touched: Partial<Record<keyof T, boolean>>\n  isValid: boolean\n  isSubmitting: boolean\n  isDirty: boolean\n  hasUnsavedChanges: boolean\n  getFieldProps: (name: keyof T) => FormField\n  setFieldValue: (name: keyof T, value: any) => void\n  setFieldError: (name: keyof T, error: string) => void\n  setFieldTouched: (name: keyof T, touched?: boolean) => void\n  setValues: (values: Partial<T>) => void\n  setErrors: (errors: Partial<Record<keyof T, string>>) => void\n  resetForm: () => void\n  validateField: (name: keyof T) => Promise<boolean>\n  validateForm: () => Promise<boolean>\n  handleSubmit: (e?: React.FormEvent) => Promise<void>\n  clearErrors: () => void\n}\n\nexport function useReusableForm<T extends Record<string, any>>(\n  options: UseReusableFormOptions<T>\n): UseReusableFormReturn<T> {\n  const {\n    initialValues,\n    validationSchema,\n    onSubmit,\n    resetOnSubmit = false,\n    validateOnChange = true,\n    validateOnBlur = true\n  } = options\n\n  const [values, setValuesState] = useState<T>(initialValues)\n  const [errors, setErrorsState] = useState<Partial<Record<keyof T, string>>>({})\n  const [touched, setTouchedState] = useState<Partial<Record<keyof T, boolean>>>({})\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  // Calculate derived state\n  const isValid = Object.keys(errors).length === 0\n  const isDirty = JSON.stringify(values) !== JSON.stringify(initialValues)\n  const hasUnsavedChanges = isDirty && !isSubmitting\n\n  // Validate a single field\n  const validateField = useCallback(async (name: keyof T): Promise<boolean> => {\n    if (!validationSchema) return true\n\n    try {\n      // Check if the schema is a ZodObject and has shape property\n      if ('shape' in validationSchema) {\n        const fieldSchema = (validationSchema as any).shape[name as string]\n        if (fieldSchema) {\n          await fieldSchema.parseAsync(values[name])\n          setErrorsState(prev => {\n            const newErrors = { ...prev }\n            delete newErrors[name]\n            return newErrors\n          })\n          return true\n        }\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        const fieldError = error.errors[0]?.message || \"Invalid value\"\n        setErrorsState(prev => ({ ...prev, [name]: fieldError }))\n        return false\n      }\n    }\n    return true\n  }, [validationSchema, values])\n\n  // Validate entire form\n  const validateForm = useCallback(async (): Promise<boolean> => {\n    if (!validationSchema) return true\n\n    try {\n      await validationSchema.parseAsync(values)\n      setErrorsState({})\n      return true\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        const newErrors: Partial<Record<keyof T, string>> = {}\n        error.errors.forEach(err => {\n          const path = err.path[0] as keyof T\n          if (path) {\n            newErrors[path] = err.message\n          }\n        })\n        setErrorsState(newErrors)\n        return false\n      }\n    }\n    return false\n  }, [validationSchema, values])\n\n  // Set field value\n  const setFieldValue = useCallback((name: keyof T, value: any) => {\n    setValuesState(prev => ({ ...prev, [name]: value }))\n    \n    if (validateOnChange) {\n      // Debounce validation to avoid excessive calls\n      setTimeout(() => validateField(name), 100)\n    }\n  }, [validateOnChange, validateField])\n\n  // Set field error\n  const setFieldError = useCallback((name: keyof T, error: string) => {\n    setErrorsState(prev => ({ ...prev, [name]: error }))\n  }, [])\n\n  // Set field touched\n  const setFieldTouched = useCallback((name: keyof T, isTouched = true) => {\n    setTouchedState(prev => ({ ...prev, [name]: isTouched }))\n    \n    if (isTouched && validateOnBlur) {\n      validateField(name)\n    }\n  }, [validateOnBlur, validateField])\n\n  // Set multiple values\n  const setValues = useCallback((newValues: Partial<T>) => {\n    setValuesState(prev => ({ ...prev, ...newValues }))\n  }, [])\n\n  // Set multiple errors\n  const setErrors = useCallback((newErrors: Partial<Record<keyof T, string>>) => {\n    setErrorsState(prev => ({ ...prev, ...newErrors }))\n  }, [])\n\n  // Reset form\n  const resetForm = useCallback(() => {\n    setValuesState(initialValues)\n    setErrorsState({})\n    setTouchedState({})\n    setIsSubmitting(false)\n  }, [initialValues])\n\n  // Clear all errors\n  const clearErrors = useCallback(() => {\n    setErrorsState({})\n  }, [])\n\n  // Get field props for easy binding\n  const getFieldProps = useCallback((name: keyof T): FormField => {\n    return {\n      value: values[name],\n      error: errors[name],\n      touched: touched[name] || false,\n      onChange: (value: any) => setFieldValue(name, value),\n      onBlur: () => setFieldTouched(name, true)\n    }\n  }, [values, errors, touched, setFieldValue, setFieldTouched])\n\n  // Handle form submission\n  const handleSubmit = useCallback(async (e?: React.FormEvent) => {\n    if (e) {\n      e.preventDefault()\n    }\n\n    setIsSubmitting(true)\n\n    try {\n      // Mark all fields as touched\n      const allTouched: Partial<Record<keyof T, boolean>> = {}\n      Object.keys(values).forEach(key => {\n        allTouched[key as keyof T] = true\n      })\n      setTouchedState(allTouched)\n\n      // Validate form\n      const isFormValid = await validateForm()\n      \n      if (!isFormValid) {\n        setIsSubmitting(false)\n        return\n      }\n\n      // Submit form\n      if (onSubmit) {\n        await onSubmit(values)\n      }\n\n      // Reset form if requested\n      if (resetOnSubmit) {\n        resetForm()\n      }\n    } catch (error) {\n      console.error('Form submission error:', error)\n      // You might want to set a general form error here\n    } finally {\n      setIsSubmitting(false)\n    }\n  }, [values, validateForm, onSubmit, resetOnSubmit, resetForm])\n\n  // Update values when initialValues change\n  useEffect(() => {\n    setValuesState(initialValues)\n  }, [initialValues])\n\n  return {\n    values,\n    errors,\n    touched,\n    isValid,\n    isSubmitting,\n    isDirty,\n    hasUnsavedChanges,\n    getFieldProps,\n    setFieldValue,\n    setFieldError,\n    setFieldTouched,\n    setValues,\n    setErrors,\n    resetForm,\n    validateField,\n    validateForm,\n    handleSubmit,\n    clearErrors\n  }\n}\n\n// Common validation schemas\nexport const commonSchemas = {\n  email: z.string().email(\"Please enter a valid email address\"),\n  phone: z.string().regex(/^[\\+]?[1-9][\\d]{0,15}$/, \"Please enter a valid phone number\"),\n  required: z.string().min(1, \"This field is required\"),\n  optionalString: z.string().optional(),\n  positiveNumber: z.number().positive(\"Must be a positive number\"),\n  currency: z.number().min(0, \"Amount must be non-negative\"),\n  date: z.date({ required_error: \"Date is required\" }),\n  url: z.string().url(\"Please enter a valid URL\"),\n  \n  // Common composite schemas\n  clientInfo: z.object({\n    name: z.string().min(1, \"Name is required\"),\n    email: z.string().email(\"Please enter a valid email address\"),\n    phone: z.string().regex(/^[\\+]?[1-9][\\d]{0,15}$/, \"Please enter a valid phone number\").optional(),\n    company: z.string().optional()\n  }),\n  \n  projectInfo: z.object({\n    title: z.string().min(1, \"Project title is required\"),\n    description: z.string().min(10, \"Description must be at least 10 characters\"),\n    budget: z.number().min(0, \"Budget must be non-negative\"),\n    deadline: z.date({ required_error: \"Deadline is required\" })\n  })\n}\n\n// Utility function to create form with common patterns\nexport function createFormHook<T extends Record<string, any>>(\n  defaultValues: T,\n  schema?: z.ZodSchema<T>\n) {\n  return (overrides?: Partial<UseReusableFormOptions<T>>) => {\n    return useReusableForm({\n      initialValues: defaultValues,\n      validationSchema: schema,\n      validateOnChange: true,\n      validateOnBlur: true,\n      ...overrides\n    })\n  }\n}\n\nexport default useReusableForm"],"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","ignoreList":[]}