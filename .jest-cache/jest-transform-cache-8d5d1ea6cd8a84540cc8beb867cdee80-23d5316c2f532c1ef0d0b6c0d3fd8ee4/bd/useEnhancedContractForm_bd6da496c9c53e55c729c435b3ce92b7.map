{"version":3,"names":["useEnhancedContractForm","initialState","cov_sr24h3cd5","s","contract","isLoading","isSaving","isValid","isDirty","errors","warnings","activeSection","expandedSections","revisionHistory","hasUnsavedChanges","previewMode","exportFormat","approvalStatus","signatureStatus","clientSigned","vendorSigned","pendingSignatures","contractFormReducer","state","action","f","type","b","payload","field","value","path","pathParts","split","updatedContract","current","i","length","section","isExpanded","includes","filter","status","initialFormData","clientInfo","name","email","phone","company","address","projectDetails","title","description","contractTitle","clientName","clientEmail","startDate","_dateUtils","getCurrentDateISO","endDate","addDaysToDate","terms","totalAmount","paymentSchedule","scopeOfWork","priority","initialData","onSubmit","onAutoSave","toast","_usetoast","useToast","setState","_react","useState","data","isSubmitting","lastSaved","autoSaveEnabled","debouncedValidation","useMemo","_debounce","default","result","_enhancedValidation","EnhancedValidator","validateContract","forEach","error","message","warning","prev","debouncedAutoSave","success","Date","console","updateNestedField","useCallback","obj","keys","key","calculateMilestoneAmounts","milestones","map","milestone","amount","Math","round","percentage","actions","updateField","newData","dateFields","normalizeDateFields","newState","updateClientInfo","updateProjectDetails","updateContractTerms","addMilestone","warn","removeMilestone","id","updateMilestone","validateForm","validateField","submitForm","validation","variant","saveAsDraft","resetForm","loadContract","normalizedContract","toggleAutoSave","calculateTotals","useEffect","cancel"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\useEnhancedContractForm.ts"],"sourcesContent":["\"use client\"\n\nimport { useState, useCallback, useReducer, useMemo, useEffect } from 'react'\nimport type { EnhancedContract, PaymentMilestone } from '../services/EnhancedContractTemplateService'\nimport type { Contract } from '../schemas/contractInvoiceSchemas'\nimport { debounce } from 'lodash'\nimport { EnhancedValidator, ValidationResult } from '../utils/enhancedValidation'\nimport { useToast } from '../components/ui/use-toast'\nimport { getCurrentDateISO, addDaysToDate, normalizeDateFields } from '../utils/dateUtils'\n\n// Contract revision interface\nexport interface ContractRevision {\n  id: string\n  contractId: string\n  version: number\n  changes: Record<string, unknown>\n  comments?: string\n  createdBy: string\n  createdAt: string\n  previousVersion?: number\n}\n\n// Contract form state interface\nexport interface ContractFormState {\n  // Form data\n  contract: Partial<EnhancedContract>\n  \n  // Form status\n  isLoading: boolean\n  isSaving: boolean\n  isValid: boolean\n  isDirty: boolean\n  \n  // Validation\n  errors: Record<string, string>\n  warnings: Record<string, string>\n  \n  // UI state\n  activeSection: string\n  expandedSections: string[]\n  \n  // History and revisions\n  revisionHistory: ContractRevision[]\n  hasUnsavedChanges: boolean\n  \n  // Preview and export\n  previewMode: boolean\n  exportFormat: 'pdf' | 'docx' | 'html'\n  \n  // Approval workflow\n  approvalStatus: 'draft' | 'pending' | 'approved' | 'rejected'\n  currentApprover?: string\n  \n  // Digital signature\n  signatureStatus: {\n    clientSigned: boolean\n    vendorSigned: boolean\n    pendingSignatures: string[]\n  }\n}\n\n// Contract form actions interface\nexport interface ContractFormActions {\n  // Basic form actions\n  updateField: (field: string, value: unknown) => void\n  updateNestedField: (path: string, value: unknown) => void\n  resetForm: () => void\n  loadContract: (contract: EnhancedContract) => void\n  \n  // Validation\n  validateForm: () => boolean\n  validateField: (field: string) => boolean\n  clearErrors: () => void\n  \n  // Section management\n  setActiveSection: (section: string) => void\n  toggleSection: (section: string) => void\n  expandAllSections: () => void\n  collapseAllSections: () => void\n  \n  // Payment milestones\n  addPaymentMilestone: () => void\n  updatePaymentMilestone: (index: number, milestone: Partial<PaymentMilestone>) => void\n  removePaymentMilestone: (index: number) => void\n  reorderPaymentMilestones: (fromIndex: number, toIndex: number) => void\n  \n  // Contract operations\n  saveContract: () => Promise<boolean>\n  saveAsDraft: () => Promise<boolean>\n  submitForApproval: () => Promise<boolean>\n  approveContract: (comments?: string) => Promise<boolean>\n  rejectContract: (reason: string) => Promise<boolean>\n  \n  // Revisions\n  createRevision: (changes: Record<string, unknown>, comments?: string) => void\n  revertToRevision: (revisionId: string) => void\n  compareRevisions: (revisionId1: string, revisionId2: string) => Record<string, unknown>\n  \n  // Export and preview\n  togglePreviewMode: () => void\n  exportContract: (format: 'pdf' | 'docx' | 'html') => Promise<void>\n  generatePreview: () => string\n  \n  // Digital signature\n  requestSignature: (signerEmail: string, signerType: 'client' | 'vendor') => Promise<boolean>\n  checkSignatureStatus: () => Promise<void>\n  \n  // Templates\n  applyTemplate: (templateId: string) => void\n  saveAsTemplate: (templateName: string) => Promise<boolean>\n}\n\n// Form reducer action types\ntype ContractFormAction =\n  | { type: 'SET_LOADING'; payload: boolean }\n  | { type: 'SET_SAVING'; payload: boolean }\n  | { type: 'UPDATE_FIELD'; payload: { field: string; value: unknown } }\n  | { type: 'UPDATE_NESTED_FIELD'; payload: { path: string; value: unknown } }\n  | { type: 'SET_ERRORS'; payload: Record<string, string> }\n  | { type: 'CLEAR_ERRORS' }\n  | { type: 'SET_WARNINGS'; payload: Record<string, string> }\n  | { type: 'SET_ACTIVE_SECTION'; payload: string }\n  | { type: 'TOGGLE_SECTION'; payload: string }\n  | { type: 'SET_EXPANDED_SECTIONS'; payload: string[] }\n  | { type: 'LOAD_CONTRACT'; payload: EnhancedContract }\n  | { type: 'RESET_FORM' }\n  | { type: 'SET_DIRTY'; payload: boolean }\n  | { type: 'SET_VALID'; payload: boolean }\n  | { type: 'ADD_REVISION'; payload: ContractRevision }\n  | { type: 'SET_PREVIEW_MODE'; payload: boolean }\n  | { type: 'SET_APPROVAL_STATUS'; payload: ContractFormState['approvalStatus'] }\n  | { type: 'UPDATE_SIGNATURE_STATUS'; payload: Partial<ContractFormState['signatureStatus']> }\n\n// Initial form state\nconst initialState: ContractFormState = {\n  contract: {},\n  isLoading: false,\n  isSaving: false,\n  isValid: false,\n  isDirty: false,\n  errors: {},\n  warnings: {},\n  activeSection: 'basic-info',\n  expandedSections: ['basic-info'],\n  revisionHistory: [],\n  hasUnsavedChanges: false,\n  previewMode: false,\n  exportFormat: 'pdf',\n  approvalStatus: 'draft',\n  signatureStatus: {\n    clientSigned: false,\n    vendorSigned: false,\n    pendingSignatures: []\n  }\n}\n\n// Form reducer\nfunction contractFormReducer(state: ContractFormState, action: ContractFormAction): ContractFormState {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return { ...state, isLoading: action.payload }\n    \n    case 'SET_SAVING':\n      return { ...state, isSaving: action.payload }\n    \n    case 'UPDATE_FIELD':\n      return {\n        ...state,\n        contract: {\n          ...state.contract,\n          [action.payload.field]: action.payload.value\n        },\n        isDirty: true,\n        hasUnsavedChanges: true\n      }\n    \n    case 'UPDATE_NESTED_FIELD': {\n      const { path, value } = action.payload\n      const pathParts = path.split('.')\n      const updatedContract = { ...state.contract }\n      \n      let current: Record<string, unknown> = updatedContract as Record<string, unknown>\n      for (let i = 0; i < pathParts.length - 1; i++) {\n        if (!current[pathParts[i]]) {\n          current[pathParts[i]] = {}\n        }\n        current = current[pathParts[i]] as Record<string, unknown>\n      }\n      current[pathParts[pathParts.length - 1]] = value\n      \n      return {\n        ...state,\n        contract: updatedContract,\n        isDirty: true,\n        hasUnsavedChanges: true\n      }\n    }\n    \n    case 'SET_ERRORS':\n      return { ...state, errors: action.payload }\n    \n    case 'CLEAR_ERRORS':\n      return { ...state, errors: {} }\n    \n    case 'SET_WARNINGS':\n      return { ...state, warnings: action.payload }\n    \n    case 'SET_ACTIVE_SECTION':\n      return { ...state, activeSection: action.payload }\n    \n    case 'TOGGLE_SECTION': {\n      const section = action.payload\n      const isExpanded = state.expandedSections.includes(section)\n      const expandedSections = isExpanded\n        ? state.expandedSections.filter(s => s !== section)\n        : [...state.expandedSections, section]\n      \n      return { ...state, expandedSections }\n    }\n    \n    case 'SET_EXPANDED_SECTIONS':\n      return { ...state, expandedSections: action.payload }\n    \n    case 'LOAD_CONTRACT':\n      return {\n        ...state,\n        contract: action.payload,\n        revisionHistory: [],\n        approvalStatus: action.payload.status === 'signed' || action.payload.status === 'active' ? 'approved' : 'draft',\n        signatureStatus: {\n          clientSigned: false,\n          vendorSigned: false,\n          pendingSignatures: []\n        },\n        isDirty: false,\n        hasUnsavedChanges: false\n      }\n    \n    case 'RESET_FORM':\n      return initialState\n    \n    case 'SET_DIRTY':\n      return { ...state, isDirty: action.payload }\n    \n    case 'SET_VALID':\n      return { ...state, isValid: action.payload }\n    \n    case 'ADD_REVISION':\n      return {\n        ...state,\n        revisionHistory: [...state.revisionHistory, action.payload]\n      }\n    \n    case 'SET_PREVIEW_MODE':\n      return { ...state, previewMode: action.payload }\n    \n    case 'SET_APPROVAL_STATUS':\n      return { ...state, approvalStatus: action.payload }\n    \n    case 'UPDATE_SIGNATURE_STATUS':\n      return {\n        ...state,\n        signatureStatus: {\n          ...state.signatureStatus,\n          ...action.payload\n        }\n      }\n    \n    default:\n      return state\n  }\n}\n\nexport interface EnhancedContractFormState {\n  data: Partial<Contract>\n  errors: Record<string, string>\n  warnings: Record<string, string>\n  isValid: boolean\n  isSubmitting: boolean\n  isDirty: boolean\n  lastSaved: Date | null\n  autoSaveEnabled: boolean\n}\n\nexport interface EnhancedContractFormActions {\n  updateField: (path: string, value: any) => void\n  updateClientInfo: (field: string, value: any) => void\n  updateProjectDetails: (field: string, value: any) => void\n  updateContractTerms: (field: string, value: any) => void\n  addMilestone: () => void\n  removeMilestone: (id: string) => void\n  updateMilestone: (id: string, field: string, value: any) => void\n  validateForm: () => ValidationResult\n  validateField: (path: string) => void\n  submitForm: () => Promise<boolean>\n  saveAsDraft: () => Promise<boolean>\n  resetForm: () => void\n  loadContract: (contract: Partial<Contract>) => void\n  toggleAutoSave: () => void\n  calculateTotals: () => void\n}\n\nconst initialFormData: Partial<Contract> = {\n  clientInfo: {\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    company: \"\",\n    address: \"\", // Contract schema expects string, not object\n  },\n  projectDetails: {\n    title: \"\",\n    description: \"\",\n    // Removed scope, deliverables, timeline as they don't exist in Contract schema\n  },\n  contractTitle: \"\",\n  clientName: \"\",\n  clientEmail: \"\",\n  startDate: getCurrentDateISO(),\n  endDate: addDaysToDate(getCurrentDateISO(), 30),\n  terms: \"\",\n  totalAmount: 0,\n  paymentSchedule: \"\",\n  scopeOfWork: \"\",\n  status: \"draft\",\n  priority: \"medium\",\n}\n\nexport const useEnhancedContractForm = (\n  initialData?: Partial<Contract>,\n  onSubmit?: (data: Contract) => Promise<boolean>,\n  onAutoSave?: (data: Partial<Contract>) => Promise<boolean>,\n): [EnhancedContractFormState, EnhancedContractFormActions] => {\n  const { toast } = useToast()\n\n  const [state, setState] = useState<EnhancedContractFormState>({\n    data: initialData || initialFormData,\n    errors: {},\n    warnings: {},\n    isValid: false,\n    isSubmitting: false,\n    isDirty: false,\n    lastSaved: null,\n    autoSaveEnabled: true,\n  })\n\n  // Debounced validation\n  const debouncedValidation = useMemo(\n    () =>\n      debounce((data: Partial<Contract>) => {\n        const result = EnhancedValidator.validateContract(data)\n\n        const errors: Record<string, string> = {}\n        const warnings: Record<string, string> = {}\n\n        result.errors.forEach((error: any) => {\n          errors[error.field] = error.message\n        })\n\n        result.warnings.forEach((warning: any) => {\n          warnings[warning.field] = warning.message\n        })\n\n        setState((prev) => ({\n          ...prev,\n          errors,\n          warnings,\n          isValid: result.isValid,\n        }))\n      }, 300),\n    [],\n  )\n\n  // Debounced auto-save\n  const debouncedAutoSave = useMemo(\n    () =>\n      debounce(async (data: Partial<Contract>) => {\n        if (onAutoSave && state.autoSaveEnabled && state.isDirty) {\n          try {\n            const success = await onAutoSave(data)\n            if (success) {\n              setState((prev) => ({\n                ...prev,\n                lastSaved: new Date(),\n                isDirty: false,\n              }))\n              toast({ type: \"success\", title: \"Auto-save\", description: \"Draft saved automatically\" })\n            }\n          } catch (error) {\n            console.error(\"Auto-save failed:\", error)\n          }\n        }\n      }, 2000),\n    [onAutoSave, state.autoSaveEnabled, state.isDirty, toast],\n  )\n\n  // Update field helper\n  const updateNestedField = useCallback((obj: any, path: string, value: any) => {\n    const keys = path.split(\".\")\n    const result = { ...obj }\n    let current = result\n\n    for (let i = 0; i < keys.length - 1; i++) {\n      const key = keys[i]\n      if (!(key in current) || typeof current[key] !== \"object\") {\n        current[key] = {}\n      } else {\n        current[key] = { ...current[key] }\n      }\n      current = current[key]\n    }\n\n    current[keys[keys.length - 1]] = value\n    return result\n  }, [])\n\n  // Calculate milestone amounts based on percentages\n  const calculateMilestoneAmounts = useCallback((milestones: PaymentMilestone[], totalAmount: number) => {\n    return milestones.map((milestone) => ({\n      ...milestone,\n      amount: Math.round((milestone.percentage / 100) * totalAmount * 100) / 100,\n    }))\n  }, [])\n\n  // Actions\n  const actions: EnhancedContractFormActions = {\n    updateField: useCallback(\n      (path: string, value: any) => {\n        setState((prev) => {\n          let newData = updateNestedField(prev.data, path, value)\n\n          // Normalize date fields for consistent storage\n          const dateFields = ['startDate', 'endDate', 'createdAt', 'updatedAt']\n          newData = normalizeDateFields(newData, dateFields)\n\n          // For basic Contract schema, no complex milestone calculations needed\n\n          const newState = {\n            ...prev,\n            data: newData,\n            isDirty: true,\n          }\n\n          // Trigger validation and auto-save\n          debouncedValidation(newData)\n          debouncedAutoSave(newData)\n\n          return newState\n        })\n      },\n      [updateNestedField, calculateMilestoneAmounts, debouncedValidation, debouncedAutoSave],\n    ),\n\n    updateClientInfo: useCallback((field: string, value: any) => {\n      actions.updateField(`clientInfo.${field}`, value)\n    }, []),\n\n    updateProjectDetails: useCallback((field: string, value: any) => {\n      actions.updateField(`projectDetails.${field}`, value)\n    }, []),\n\n    updateContractTerms: useCallback((field: string, value: any) => {\n      actions.updateField(field, value)\n    }, []),\n\n    addMilestone: useCallback(() => {\n      // Basic Contract schema doesn't support complex milestones\n      // This is a placeholder for compatibility\n      console.warn('addMilestone not supported in basic Contract schema')\n    }, []),\n\n    removeMilestone: useCallback(\n      (id: string) => {\n        // Basic Contract schema doesn't support complex milestones\n        console.warn('removeMilestone not supported in basic Contract schema')\n      },\n      [],\n    ),\n\n    updateMilestone: useCallback(\n      (id: string, field: string, value: any) => {\n        // Basic Contract schema doesn't support complex milestones\n        console.warn('updateMilestone not supported in basic Contract schema')\n      },\n      [],\n    ),\n\n    validateForm: useCallback(() => {\n      return EnhancedValidator.validateContract(state.data)\n    }, [state.data]),\n\n    validateField: useCallback(\n      (path: string) => {\n        // Simplified field validation for basic Contract schema\n        // Field-specific validation would go here\n        debouncedValidation(state.data)\n      },\n      [state.data, debouncedValidation],\n    ),\n\n    submitForm: useCallback(async () => {\n      if (!onSubmit) return false\n\n      setState((prev) => ({ ...prev, isSubmitting: true }))\n\n      try {\n        const validation = EnhancedValidator.validateContract(state.data)\n\n        if (!validation.isValid) {\n          toast({ type: \"error\", title: \"Validation Error\", description: \"Please fix validation errors before submitting\", variant: \"destructive\" })\n          return false\n        }\n\n        const success = await onSubmit(state.data as Contract)\n\n        if (success) {\n          setState((prev) => ({\n            ...prev,\n            isDirty: false,\n            lastSaved: new Date(),\n          }))\n          toast({ type: \"success\", title: \"Success\", description: \"Contract submitted successfully\" })\n        }\n\n        return success\n      } catch (error) {\n        console.error(\"Form submission failed:\", error)\n        toast({ type: \"error\", title: \"Error\", description: \"Failed to submit contract\", variant: \"destructive\" })\n        return false\n      } finally {\n        setState((prev) => ({ ...prev, isSubmitting: false }))\n      }\n    }, [onSubmit, state.data, toast]),\n\n    saveAsDraft: useCallback(async () => {\n      if (!onAutoSave) return false\n\n      try {\n        const success = await onAutoSave(state.data)\n\n        if (success) {\n          setState((prev) => ({\n            ...prev,\n            isDirty: false,\n            lastSaved: new Date(),\n          }))\n          toast({ type: \"success\", title: \"Success\", description: \"Draft saved successfully\" })\n        }\n\n        return success\n      } catch (error) {\n        console.error(\"Save draft failed:\", error)\n        toast({ type: \"error\", title: \"Error\", description: \"Failed to save draft\", variant: \"destructive\" })\n        return false\n      }\n    }, [onAutoSave, state.data, toast]),\n\n    resetForm: useCallback(() => {\n      setState({\n        data: initialData || initialFormData,\n        errors: {},\n        warnings: {},\n        isValid: false,\n        isSubmitting: false,\n        isDirty: false,\n        lastSaved: null,\n        autoSaveEnabled: true,\n      })\n    }, [initialData]),\n\n    loadContract: useCallback(\n      (contract: Partial<Contract>) => {\n        // Normalize date fields when loading contract data\n        const dateFields = ['startDate', 'endDate', 'createdAt', 'updatedAt']\n        const normalizedContract = normalizeDateFields(contract, dateFields)\n        \n        setState((prev) => ({\n          ...prev,\n          data: normalizedContract,\n          isDirty: false,\n          lastSaved: new Date(),\n        }))\n\n        debouncedValidation(normalizedContract)\n      },\n      [debouncedValidation],\n    ),\n\n    toggleAutoSave: useCallback(() => {\n      setState((prev) => ({\n        ...prev,\n        autoSaveEnabled: !prev.autoSaveEnabled,\n      }))\n    }, []),\n\n    calculateTotals: useCallback(() => {\n      // For the basic Contract schema, we don't have complex milestone structures\n      // This is a simplified version that just updates the total amount\n      setState((prev) => {\n        return {\n          ...prev,\n          isDirty: true,\n        }\n      })\n    }, []),\n  }\n\n  // Initial validation\n  useEffect(() => {\n    debouncedValidation(state.data)\n  }, [debouncedValidation, state.data])\n\n  // Cleanup\n  useEffect(() => {\n    return () => {\n      debouncedValidation.cancel()\n      debouncedAutoSave.cancel()\n    }\n  }, [debouncedValidation, debouncedAutoSave])\n\n  return [state, actions]\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BAwUa;;;;;;WAAAA,uBAAA;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","ignoreList":[]}