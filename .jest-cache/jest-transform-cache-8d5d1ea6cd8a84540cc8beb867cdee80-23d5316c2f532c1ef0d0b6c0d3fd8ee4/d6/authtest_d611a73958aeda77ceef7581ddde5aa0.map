{"version":3,"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\__tests__\\auth.test.ts"],"sourcesContent":["import { authService, AuthUser } from '../auth'\nimport { secureStorage } from '../../utils/secureStorage'\n\n// Mock secureStorage\njest.mock('../../utils/secureStorage', () => ({\n  secureStorage: {\n    setJSON: jest.fn(),\n    getJSON: jest.fn(),\n    removeItem: jest.fn(),\n  },\n}))\n\nconst mockSecureStorage = secureStorage as jest.Mocked<typeof secureStorage>\n\ndescribe('AuthService', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    // Reset auth service state\n    authService.signOut()\n  })\n\n  describe('signUp', () => {\n    it('should create a new user account', async () => {\n      const email = 'test@example.com'\n      const password = 'password123'\n      const userData = { name: 'Test User' }\n\n      const user = await authService.signUp(email, password, userData)\n\n      expect(user).toMatchObject({\n        email,\n        name: 'Test User',\n        role: 'user',\n      })\n      expect(user.id).toBeDefined()\n      expect(user.createdAt).toBeDefined()\n      expect(mockSecureStorage.setJSON).toHaveBeenCalledWith('auth_user', user)\n    })\n\n    it('should use email prefix as name when name not provided', async () => {\n      const email = 'john.doe@example.com'\n      const password = 'password123'\n\n      const user = await authService.signUp(email, password)\n\n      expect(user.name).toBe('john.doe')\n    })\n\n    it('should handle signup errors', async () => {\n      mockSecureStorage.setJSON.mockImplementation(() => {\n        throw new Error('Storage error')\n      })\n\n      await expect(\n        authService.signUp('test@example.com', 'password123')\n      ).rejects.toThrow('Storage error')\n    })\n  })\n\n  describe('signIn', () => {\n    it('should authenticate user with valid credentials', async () => {\n      const email = 'test@example.com'\n      const password = 'password123'\n\n      const user = await authService.signIn(email, password)\n\n      expect(user).toMatchObject({\n        email,\n        name: 'test',\n        role: 'user',\n      })\n      expect(user.lastLogin).toBeDefined()\n      expect(authService.isAuthenticated()).toBe(true)\n    })\n\n    it('should handle signin errors', async () => {\n      // Mock localStorage to throw error\n      const originalSetItem = Storage.prototype.setItem\n      Storage.prototype.setItem = jest.fn(() => {\n        throw new Error('Storage error')\n      })\n\n      await expect(\n        authService.signIn('test@example.com', 'password123')\n      ).rejects.toThrow('Storage error')\n\n      Storage.prototype.setItem = originalSetItem\n    })\n  })\n\n  describe('signOut', () => {\n    it('should clear user session', async () => {\n      // First sign in\n      await authService.signIn('test@example.com', 'password123')\n      expect(authService.isAuthenticated()).toBe(true)\n\n      // Then sign out\n      await authService.signOut()\n\n      expect(authService.isAuthenticated()).toBe(false)\n      expect(authService.getCurrentUser()).toBeNull()\n      expect(mockSecureStorage.removeItem).toHaveBeenCalledWith('auth_user')\n    })\n  })\n\n  describe('updateProfile', () => {\n    it('should update user profile when authenticated', async () => {\n      // First sign in\n      await authService.signIn('test@example.com', 'password123')\n\n      const updates = { name: 'Updated Name', role: 'admin' }\n      const updatedUser = await authService.updateProfile(updates)\n\n      expect(updatedUser.name).toBe('Updated Name')\n      expect(updatedUser.role).toBe('admin')\n      expect(mockSecureStorage.setJSON).toHaveBeenCalledWith('auth_user', updatedUser)\n    })\n\n    it('should throw error when not authenticated', async () => {\n      const updates = { name: 'Updated Name' }\n\n      await expect(\n        authService.updateProfile(updates)\n      ).rejects.toThrow('No authenticated user')\n    })\n  })\n\n  describe('hasRole', () => {\n    it('should validate admin role hierarchy', async () => {\n      const adminUser: AuthUser = {\n        id: '1',\n        email: 'admin@example.com',\n        name: 'Admin User',\n        role: 'admin',\n        createdAt: new Date().toISOString(),\n      }\n\n      // Mock the user\n      mockSecureStorage.getJSON.mockReturnValue(adminUser)\n      authService.init()\n\n      expect(authService.hasRole('admin')).toBe(true)\n      expect(authService.hasRole('agent')).toBe(true)\n      expect(authService.hasRole('user')).toBe(true)\n    })\n\n    it('should validate agent role hierarchy', async () => {\n      await authService.signIn('agent@example.com', 'password123')\n      await authService.updateProfile({ role: 'agent' })\n\n      expect(authService.hasRole('admin')).toBe(false)\n      expect(authService.hasRole('agent')).toBe(true)\n      expect(authService.hasRole('user')).toBe(true)\n    })\n\n    it('should validate user role hierarchy', async () => {\n      await authService.signIn('user@example.com', 'password123')\n\n      expect(authService.hasRole('admin')).toBe(false)\n      expect(authService.hasRole('agent')).toBe(false)\n      expect(authService.hasRole('user')).toBe(true)\n    })\n\n    it('should return false when not authenticated', () => {\n      expect(authService.hasRole('user')).toBe(false)\n    })\n  })\n\n  describe('getAccessToken', () => {\n    it('should return token when authenticated', async () => {\n      await authService.signIn('test@example.com', 'password123')\n\n      const token = authService.getAccessToken()\n      expect(token).toBe('mock_access_token')\n    })\n\n    it('should return null when not authenticated', () => {\n      const token = authService.getAccessToken()\n      expect(token).toBeNull()\n    })\n  })\n\n  describe('state management', () => {\n    it('should notify subscribers of state changes', async () => {\n      const mockCallback = jest.fn()\n      const unsubscribe = authService.subscribe(mockCallback)\n\n      await authService.signIn('test@example.com', 'password123')\n\n      expect(mockCallback).toHaveBeenCalled()\n      const lastCall = mockCallback.mock.calls[mockCallback.mock.calls.length - 1][0]\n      expect(lastCall.user).toBeDefined()\n      expect(lastCall.loading).toBe(false)\n      expect(lastCall.error).toBeNull()\n\n      unsubscribe()\n    })\n\n    it('should handle subscription cleanup', () => {\n      const mockCallback = jest.fn()\n      const unsubscribe = authService.subscribe(mockCallback)\n\n      unsubscribe()\n\n      // State change should not trigger callback after unsubscribe\n      authService.signIn('test@example.com', 'password123')\n      expect(mockCallback).not.toHaveBeenCalled()\n    })\n  })\n\n  describe('initialization', () => {\n    it('should load user from storage on init', () => {\n      const storedUser: AuthUser = {\n        id: '1',\n        email: 'stored@example.com',\n        name: 'Stored User',\n        role: 'user',\n        createdAt: new Date().toISOString(),\n      }\n\n      mockSecureStorage.getJSON.mockReturnValue(storedUser)\n\n      authService.init()\n\n      expect(authService.getCurrentUser()).toEqual(storedUser)\n      expect(authService.isAuthenticated()).toBe(true)\n    })\n\n    it('should handle invalid stored data gracefully', () => {\n      mockSecureStorage.getJSON.mockReturnValue('invalid-data')\n\n      authService.init()\n\n      expect(authService.getCurrentUser()).toBeNull()\n      expect(authService.isAuthenticated()).toBe(false)\n    })\n\n    it('should handle storage errors gracefully', () => {\n      mockSecureStorage.getJSON.mockImplementation(() => {\n        throw new Error('Storage error')\n      })\n\n      expect(() => authService.init()).not.toThrow()\n      expect(authService.getCurrentUser()).toBeNull()\n    })\n  })\n})"],"names":["jest","mock","secureStorage","setJSON","fn","getJSON","removeItem","mockSecureStorage","describe","beforeEach","clearAllMocks","authService","signOut","it","email","password","userData","name","user","signUp","expect","toMatchObject","role","id","toBeDefined","createdAt","toHaveBeenCalledWith","toBe","mockImplementation","Error","rejects","toThrow","signIn","lastLogin","isAuthenticated","originalSetItem","Storage","prototype","setItem","getCurrentUser","toBeNull","updates","updatedUser","updateProfile","adminUser","Date","toISOString","mockReturnValue","init","hasRole","token","getAccessToken","mockCallback","unsubscribe","subscribe","toHaveBeenCalled","lastCall","calls","length","loading","error","not","storedUser","toEqual"],"mappings":"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"}