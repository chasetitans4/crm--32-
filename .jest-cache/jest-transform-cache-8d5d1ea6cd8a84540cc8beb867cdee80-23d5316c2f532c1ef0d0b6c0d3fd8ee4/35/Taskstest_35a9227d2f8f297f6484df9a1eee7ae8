dfb2ca25631a983f9aa7956b0936b6fa
"use strict";
// Mock framer-motion
jest.mock('framer-motion', ()=>({
        motion: {
            div: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    ...props,
                    children: children
                }),
            button: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    ...props,
                    children: children
                }),
            li: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("li", {
                    ...props,
                    children: children
                })
        },
        AnimatePresence: ({ children })=>children
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
const _Tasks = /*#__PURE__*/ _interop_require_default(require("../Tasks"));
const _AppContext = require("../../context/AppContext");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockTasks = [
    {
        id: '1',
        title: 'Follow up with John Doe',
        description: 'Schedule demo call and send proposal',
        dueDate: '2024-01-20',
        priority: 'high',
        status: 'pending',
        assignedTo: 'sales-rep-1',
        clientId: '1',
        createdAt: '2024-01-15',
        updatedAt: '2024-01-15'
    },
    {
        id: '2',
        title: 'Prepare proposal for Jane Smith',
        description: 'Create detailed technical proposal',
        dueDate: '2024-01-18',
        priority: 'medium',
        status: 'in-progress',
        assignedTo: 'sales-rep-2',
        clientId: '2',
        createdAt: '2024-01-10',
        updatedAt: '2024-01-12'
    },
    {
        id: '3',
        title: 'Contract review',
        description: 'Review and finalize contract terms',
        dueDate: '2024-01-25',
        priority: 'low',
        status: 'completed',
        assignedTo: 'sales-rep-1',
        clientId: '3',
        createdAt: '2024-01-05',
        updatedAt: '2024-01-15'
    },
    {
        id: '4',
        title: 'Client onboarding',
        description: 'Setup new client account and training',
        dueDate: '2024-01-22',
        priority: 'high',
        status: 'overdue',
        assignedTo: 'sales-rep-2',
        clientId: '4',
        createdAt: '2024-01-01',
        updatedAt: '2024-01-10'
    }
];
const mockClients = [
    {
        id: '1',
        name: 'John Doe',
        email: 'john@example.com',
        phone: '+1 (555) 123-4567',
        company: 'Acme Corp',
        stage: 'lead',
        value: 50000,
        lastContact: '2024-01-15',
        notes: [],
        projects: [],
        tags: [
            'enterprise'
        ],
        priority: 'high',
        source: 'website',
        assignedTo: 'sales-rep-1'
    },
    {
        id: '2',
        name: 'Jane Smith',
        email: 'jane@example.com',
        phone: '+1 (555) 987-6543',
        company: 'Tech Solutions',
        stage: 'qualified',
        value: 75000,
        lastContact: '2024-01-10',
        notes: [],
        projects: [],
        tags: [
            'tech'
        ],
        priority: 'medium',
        source: 'referral',
        assignedTo: 'sales-rep-2'
    }
];
const mockInitialState = {
    clients: mockClients,
    salesStages: [],
    contracts: [],
    invoices: [],
    tasks: mockTasks,
    projects: [],
    reports: [],
    settings: {
        currency: 'USD',
        dateFormat: 'MM/DD/YYYY',
        timezone: 'UTC'
    }
};
const renderWithProvider = (component)=>{
    return (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppContext.AppProvider, {
        initialState: mockInitialState,
        children: component
    }));
};
describe('Tasks Component', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    test('renders tasks component', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        expect(_react1.screen.getByText('Tasks')).toBeInTheDocument();
    });
    test('displays all tasks', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        expect(_react1.screen.getByText('Follow up with John Doe')).toBeInTheDocument();
        expect(_react1.screen.getByText('Prepare proposal for Jane Smith')).toBeInTheDocument();
        expect(_react1.screen.getByText('Contract review')).toBeInTheDocument();
        expect(_react1.screen.getByText('Client onboarding')).toBeInTheDocument();
    });
    test('shows task descriptions', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        expect(_react1.screen.getByText('Schedule demo call and send proposal')).toBeInTheDocument();
        expect(_react1.screen.getByText('Create detailed technical proposal')).toBeInTheDocument();
        expect(_react1.screen.getByText('Review and finalize contract terms')).toBeInTheDocument();
        expect(_react1.screen.getByText('Setup new client account and training')).toBeInTheDocument();
    });
    test('displays task priorities correctly', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        const highPriorityTasks = _react1.screen.getAllByText('High');
        const mediumPriorityTasks = _react1.screen.getAllByText('Medium');
        const lowPriorityTasks = _react1.screen.getAllByText('Low');
        expect(highPriorityTasks.length).toBe(2); // 2 high priority tasks
        expect(mediumPriorityTasks.length).toBe(1); // 1 medium priority task
        expect(lowPriorityTasks.length).toBe(1); // 1 low priority task
    });
    test('shows task statuses correctly', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        expect(_react1.screen.getByText('Pending')).toBeInTheDocument();
        expect(_react1.screen.getByText('In Progress')).toBeInTheDocument();
        expect(_react1.screen.getByText('Completed')).toBeInTheDocument();
        expect(_react1.screen.getByText('Overdue')).toBeInTheDocument();
    });
    test('displays due dates', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        expect(_react1.screen.getByText('2024-01-20')).toBeInTheDocument();
        expect(_react1.screen.getByText('2024-01-18')).toBeInTheDocument();
        expect(_react1.screen.getByText('2024-01-25')).toBeInTheDocument();
        expect(_react1.screen.getByText('2024-01-22')).toBeInTheDocument();
    });
    test('shows assigned users', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        expect(_react1.screen.getByText('sales-rep-1')).toBeInTheDocument();
        expect(_react1.screen.getByText('sales-rep-2')).toBeInTheDocument();
    });
    test('filter by status works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        // Filter by pending status
        const statusFilter = _react1.screen.getByText('All Status');
        await user.click(statusFilter);
        const pendingOption = _react1.screen.getByText('Pending');
        await user.click(pendingOption);
        expect(_react1.screen.getByText('Follow up with John Doe')).toBeInTheDocument();
        expect(_react1.screen.queryByText('Prepare proposal for Jane Smith')).not.toBeInTheDocument();
    });
    test('filter by priority works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        // Filter by high priority
        const priorityFilter = _react1.screen.getByText('All Priorities');
        await user.click(priorityFilter);
        const highOption = _react1.screen.getByText('High');
        await user.click(highOption);
        expect(_react1.screen.getByText('Follow up with John Doe')).toBeInTheDocument();
        expect(_react1.screen.getByText('Client onboarding')).toBeInTheDocument();
        expect(_react1.screen.queryByText('Prepare proposal for Jane Smith')).not.toBeInTheDocument();
    });
    test('search functionality works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        const searchInput = _react1.screen.getByPlaceholderText(/search tasks/i);
        await user.type(searchInput, 'proposal');
        expect(_react1.screen.getByText('Prepare proposal for Jane Smith')).toBeInTheDocument();
        expect(_react1.screen.queryByText('Follow up with John Doe')).not.toBeInTheDocument();
    });
    test('opens add task modal', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        const addButton = _react1.screen.getByText('Add Task');
        await user.click(addButton);
        expect(_react1.screen.getByText('Create New Task')).toBeInTheDocument();
    });
    test('task completion toggle works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        // Find a pending task checkbox
        const taskCheckbox = _react1.screen.getByLabelText('Mark Follow up with John Doe as complete');
        await user.click(taskCheckbox);
        // Task should be marked as completed
        expect(taskCheckbox).toBeChecked();
    });
    test('displays overdue tasks with warning', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        // Overdue tasks should have warning styling
        const overdueTask = _react1.screen.getByText('Client onboarding');
        const taskCard = overdueTask.closest('.task-card');
        expect(taskCard).toHaveClass('overdue'); // Assuming overdue class exists
    });
    test('shows task count by status', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        const pendingCount = mockTasks.filter((t)=>t.status === 'pending').length;
        const inProgressCount = mockTasks.filter((t)=>t.status === 'in-progress').length;
        const completedCount = mockTasks.filter((t)=>t.status === 'completed').length;
        const overdueCount = mockTasks.filter((t)=>t.status === 'overdue').length;
        expect(pendingCount).toBe(1);
        expect(inProgressCount).toBe(1);
        expect(completedCount).toBe(1);
        expect(overdueCount).toBe(1);
    });
    test('sort by due date works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        const sortButton = _react1.screen.getByText('Sort by Due Date');
        await user.click(sortButton);
        // Tasks should be sorted by due date
        const taskTitles = _react1.screen.getAllByRole('heading', {
            level: 3
        });
        expect(taskTitles[0]).toHaveTextContent('Prepare proposal for Jane Smith'); // 2024-01-18
    });
    test('sort by priority works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        const sortButton = _react1.screen.getByText('Sort by Priority');
        await user.click(sortButton);
        // High priority tasks should appear first
        const taskTitles = _react1.screen.getAllByRole('heading', {
            level: 3
        });
        expect(taskTitles[0]).toHaveTextContent('Follow up with John Doe'); // High priority
    });
    test('task details modal opens', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        const taskTitle = _react1.screen.getByText('Follow up with John Doe');
        await user.click(taskTitle);
        expect(_react1.screen.getByText('Task Details')).toBeInTheDocument();
    });
    test('edit task functionality works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        // Find edit button for a task
        const editButton = _react1.screen.getByLabelText('Edit Follow up with John Doe');
        await user.click(editButton);
        expect(_react1.screen.getByText('Edit Task')).toBeInTheDocument();
    });
    test('delete task functionality works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        // Find delete button for a task
        const deleteButton = _react1.screen.getByLabelText('Delete Follow up with John Doe');
        await user.click(deleteButton);
        expect(_react1.screen.getByText('Confirm Delete')).toBeInTheDocument();
    });
    test('handles empty tasks list', ()=>{
        const emptyState = {
            ...mockInitialState,
            tasks: []
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppContext.AppProvider, {
            initialState: emptyState,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {})
        }));
        expect(_react1.screen.getByText(/no tasks found/i)).toBeInTheDocument();
    });
    test('displays client names for tasks', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        // Tasks should show associated client names
        expect(_react1.screen.getByText('John Doe')).toBeInTheDocument();
        expect(_react1.screen.getByText('Jane Smith')).toBeInTheDocument();
    });
    test('bulk task actions work', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        // Select multiple tasks
        const checkboxes = _react1.screen.getAllByRole('checkbox');
        if (checkboxes.length > 1) {
            await user.click(checkboxes[0]);
            await user.click(checkboxes[1]);
            // Bulk actions should become available
            expect(_react1.screen.getByText('Bulk Actions')).toBeInTheDocument();
        }
    });
    test('task calendar view works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        const calendarViewButton = _react1.screen.getByText('Calendar View');
        await user.click(calendarViewButton);
        expect(_react1.screen.getByText('Task Calendar')).toBeInTheDocument();
    });
    test('task kanban view works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        const kanbanViewButton = _react1.screen.getByText('Kanban View');
        await user.click(kanbanViewButton);
        expect(_react1.screen.getByText('Task Board')).toBeInTheDocument();
    });
    test('task export functionality works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        const exportButton = _react1.screen.getByText('Export Tasks');
        await user.click(exportButton);
        expect(_react1.screen.getByText('Export Options')).toBeInTheDocument();
    });
    test('responsive design adapts correctly', ()=>{
        // Mock mobile viewport
        Object.defineProperty(window, 'innerWidth', {
            writable: true,
            configurable: true,
            value: 768
        });
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Tasks.default, {}));
        const tasksContainer = _react1.screen.getByText('Tasks').closest('div');
        expect(tasksContainer).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,