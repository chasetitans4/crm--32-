{"version":3,"names":["cov_2bpw0u269o","actualCoverage","s","LazyCompanies","f","LazyContacts","LazyDashboard","LazyDeals","LazyPerformanceDashboard","LazyPerformanceMonitor","LazyQuotes","LazyReports","LazySecurityDashboard","LazySettings","default","OptimizedLayout","useLayoutPerformance","LazyHeader","_LazyWrapper","createLazyComponent","Promise","resolve","then","_interop_require_wildcard","require","preload","LazySidebar","LazyFooter","HeaderSkeleton","_jsxruntime","jsx","className","jsxs","_skeleton","Skeleton","SidebarSkeleton","Array","from","length","map","_","i","FooterSkeleton","ROUTE_COMPONENTS","children","showSidebar","b","showHeader","showFooter","pathname","_navigation","usePathname","isClient","setIsClient","_react","useState","activeTab","setActiveTab","layoutMetrics","setLayoutMetrics","renderTime","componentCount","memoryUsage","useEffect","startTime","performance","now","observer","PerformanceObserver","list","entries","getEntries","forEach","entry","entryType","name","includes","prev","duration","observe","entryTypes","mark","measure","disconnect","endTime","console","log","timestamp","Date","preloadRoutes","getPreloadRoutes","route","Component","setTimeout","createElement","currentPath","preloadMap","renderRouteComponent","RouteComponent","LazyWrapper","skeleton","onLoad","criticalCSS","_performanceOptimization","performanceOptimizationService","inlineCriticalCSS","fallback","process","env","NODE_ENV","toFixed","PerformanceOverlay","metrics","isVisible","setIsVisible","handleKeyPress","e","ctrlKey","shiftKey","key","window","addEventListener","removeEventListener","onClick","title","_lucidereact","Loader2","_card","Card","CardHeader","CardContent","setMetrics","hydrationTime","hydrationObserver"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\components\\layout\\OptimizedLayout.tsx"],"sourcesContent":["'use client'\n\nimport React, { Suspense, lazy, useEffect, useState } from 'react'\nimport { usePathname } from 'next/navigation'\nimport { LazyWrapper, createLazyComponent } from '@/components/ui/LazyWrapper'\nimport { performanceOptimizationService } from '@/services/performanceOptimization'\nimport { Skeleton } from '../../../components/ui/skeleton'\nimport { Card, CardContent, CardHeader } from '@/components/ui/card'\nimport { Loader2 } from 'lucide-react'\n\n// Lazy load components for better performance\nconst LazyHeader = createLazyComponent(\n  () => import('@/components/layout/Header'),\n  { preload: true }\n)\n\nconst LazySidebar = createLazyComponent(\n  () => import('@/components/Sidebar'),\n  { preload: true }\n)\n\nconst LazyFooter = createLazyComponent(\n  () => import('@/components/layout/Footer'),\n  { preload: false }\n)\n\n// Route-based lazy components\nconst LazyDashboard = createLazyComponent(\n  () => import('@/components/Dashboard')\n)\n\nconst LazyContacts = createLazyComponent(\n  () => import('@/components/Clients')\n)\n\nconst LazyDeals = createLazyComponent(\n  () => import('@/components/Pipeline')\n)\n\nconst LazyCompanies = createLazyComponent(\n  () => import('@/components/Company')\n)\n\nconst LazyQuotes = createLazyComponent(\n  () => import('@/components/ProposalBuilder')\n)\n\nconst LazyReports = createLazyComponent(\n  () => import('@/components/Reports')\n)\n\nconst LazySettings = createLazyComponent(\n  () => import('@/components/Settings')\n)\n\nconst LazySecurityDashboard = createLazyComponent(\n  () => import('@/components/security/SecurityDashboard')\n)\n\nconst LazyPerformanceDashboard = createLazyComponent(\n  () => import('@/components/performance/PerformanceDashboard')\n)\n\nconst LazyPerformanceMonitor = createLazyComponent(\n  () => import('@/components/performance/PerformanceMonitor')\n)\n\ninterface OptimizedLayoutProps {\n  children: React.ReactNode\n  showSidebar?: boolean\n  showHeader?: boolean\n  showFooter?: boolean\n  className?: string\n}\n\n// Loading skeletons for different sections\nconst HeaderSkeleton = () => (\n  <div className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n    <div className=\"container flex h-14 items-center\">\n      <Skeleton className=\"h-6 w-32\" />\n      <div className=\"ml-auto flex items-center space-x-4\">\n        <Skeleton className=\"h-8 w-8 rounded-full\" />\n        <Skeleton className=\"h-8 w-8 rounded-full\" />\n        <Skeleton className=\"h-8 w-8 rounded-full\" />\n      </div>\n    </div>\n  </div>\n)\n\nconst SidebarSkeleton = () => (\n  <div className=\"w-64 border-r bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n    <div className=\"space-y-4 py-4\">\n      <div className=\"px-3 py-2\">\n        <Skeleton className=\"h-6 w-20 mb-2\" />\n        <div className=\"space-y-1\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <Skeleton key={i} className=\"h-8 w-full\" />\n          ))}\n        </div>\n      </div>\n    </div>\n  </div>\n)\n\nconst FooterSkeleton = () => (\n  <footer className=\"border-t bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n    <div className=\"container flex h-14 items-center justify-between\">\n      <Skeleton className=\"h-4 w-48\" />\n      <div className=\"flex items-center space-x-4\">\n        <Skeleton className=\"h-4 w-16\" />\n        <Skeleton className=\"h-4 w-16\" />\n        <Skeleton className=\"h-4 w-16\" />\n      </div>\n    </div>\n  </footer>\n)\n\n// Route component mapping for dynamic loading\nconst ROUTE_COMPONENTS: Record<string, React.ComponentType> = {\n  '/dashboard': LazyDashboard,\n  '/contacts': LazyContacts,\n  '/deals': LazyDeals,\n  '/companies': LazyCompanies,\n  '/quotes': LazyQuotes,\n  '/reports': LazyReports,\n  '/settings': LazySettings,\n  '/security': LazySecurityDashboard,\n  '/performance': LazyPerformanceDashboard,\n  '/performance/monitor': LazyPerformanceMonitor\n}\n\nexport default function OptimizedLayout({\n  children,\n  showSidebar = true,\n  showHeader = true,\n  showFooter = true,\n  className = ''\n}: OptimizedLayoutProps) {\n  const pathname = usePathname()\n  const [isClient, setIsClient] = useState(false)\n  const [activeTab, setActiveTab] = useState('dashboard')\n  const [layoutMetrics, setLayoutMetrics] = useState({\n    renderTime: 0,\n    componentCount: 0,\n    memoryUsage: 0\n  })\n\n  // Track client-side hydration\n  useEffect(() => {\n    setIsClient(true)\n    \n    // Performance monitoring\n    const startTime = performance.now()\n    \n    // Track layout render performance\n    const observer = new PerformanceObserver((list) => {\n      const entries = list.getEntries()\n      entries.forEach((entry) => {\n        if (entry.entryType === 'measure' && entry.name.includes('layout')) {\n          setLayoutMetrics(prev => ({\n            ...prev,\n            renderTime: entry.duration\n          }))\n        }\n      })\n    })\n    \n    observer.observe({ entryTypes: ['measure'] })\n    \n    // Measure layout render time\n    performance.mark('layout-start')\n    \n    return () => {\n      performance.mark('layout-end')\n      performance.measure('layout-render', 'layout-start', 'layout-end')\n      observer.disconnect()\n      \n      // Log layout performance\n      const endTime = performance.now()\n      console.log('Layout render performance:', {\n        renderTime: endTime - startTime,\n        pathname,\n        timestamp: Date.now()\n      })\n    }\n  }, [pathname])\n\n  // Preload route components based on current path\n  useEffect(() => {\n    if (!isClient) return\n    \n    // Preload likely next routes based on current route\n    const preloadRoutes = getPreloadRoutes(pathname)\n    \n    preloadRoutes.forEach(route => {\n      const Component = ROUTE_COMPONENTS[route]\n      if (Component) {\n        // Preload component after a short delay\n        setTimeout(() => {\n          // This will trigger the lazy loading\n          React.createElement(Component)\n        }, 1000)\n      }\n    })\n  }, [pathname, isClient])\n\n  // Get routes to preload based on current route\n  const getPreloadRoutes = (currentPath: string): string[] => {\n    const preloadMap: Record<string, string[]> = {\n      '/dashboard': ['/contacts', '/deals', '/reports'],\n      '/contacts': ['/deals', '/companies', '/dashboard'],\n      '/deals': ['/contacts', '/quotes', '/companies'],\n      '/companies': ['/contacts', '/deals'],\n      '/quotes': ['/deals', '/contacts'],\n      '/reports': ['/dashboard', '/deals', '/contacts'],\n      '/settings': ['/security', '/performance']\n    }\n    \n    return preloadMap[currentPath] || []\n  }\n\n  // Dynamic route component rendering\n  const renderRouteComponent = () => {\n    const RouteComponent = ROUTE_COMPONENTS[pathname]\n    \n    if (RouteComponent) {\n      return (\n        <LazyWrapper\n          skeleton=\"dashboard\"\n          className=\"flex-1\"\n          onLoad={() => {\n            console.log('Route load performance:', {\n              route: pathname,\n              timestamp: Date.now()\n            })\n          }}\n        >\n          <RouteComponent />\n        </LazyWrapper>\n      )\n    }\n    \n    return children\n  }\n\n  // Critical CSS inlining for above-the-fold content\n  useEffect(() => {\n    if (isClient) {\n      // Inline critical CSS for above-the-fold content\n      const criticalCSS = `\n        .layout-critical {\n          display: flex;\n          min-height: 100vh;\n          background: var(--background);\n        }\n      `\n      performanceOptimizationService.inlineCriticalCSS(criticalCSS)\n    }\n  }, [isClient])\n\n  return (\n    <div className={`min-h-screen bg-background ${className}`}>\n      {/* Header */}\n      {showHeader && (\n        <LazyWrapper\n          fallback={<HeaderSkeleton />}\n          skeleton=\"custom\"\n          className=\"sticky top-0 z-50\"\n        >\n          <LazyHeader />\n        </LazyWrapper>\n      )}\n      \n      <div className=\"flex flex-1\">\n        {/* Sidebar */}\n        {showSidebar && (\n          <LazyWrapper\n            fallback={<SidebarSkeleton />}\n            skeleton=\"custom\"\n            className=\"hidden md:block\"\n          >\n            <LazySidebar activeTab={activeTab} setActiveTab={setActiveTab} />\n          </LazyWrapper>\n        )}\n        \n        {/* Main Content */}\n        <main className=\"flex-1 overflow-hidden\">\n          <div className=\"container mx-auto p-6\">\n            {/* Performance monitoring in development */}\n            {process.env.NODE_ENV === 'development' && (\n              <div className=\"mb-4 p-2 bg-muted rounded text-xs text-muted-foreground\">\n                Layout Render: {layoutMetrics.renderTime.toFixed(2)}ms | \n                Route: {pathname} | \n                Hydrated: {isClient ? 'Yes' : 'No'}\n              </div>\n            )}\n            \n            {/* Route-based content or children */}\n            {renderRouteComponent()}\n          </div>\n        </main>\n      </div>\n      \n      {/* Footer */}\n      {showFooter && (\n        <LazyWrapper\n          fallback={<FooterSkeleton />}\n          skeleton=\"custom\"\n        >\n          <LazyFooter />\n        </LazyWrapper>\n      )}\n      \n      {/* Performance monitoring overlay (development only) */}\n      {process.env.NODE_ENV === 'development' && (\n        <PerformanceOverlay metrics={layoutMetrics} />\n      )}\n    </div>\n  )\n}\n\n// Performance metrics interface\ninterface PerformanceMetrics {\n  renderTime: number\n  componentCount: number\n  memoryUsage: number\n}\n\n// Development performance overlay\nfunction PerformanceOverlay({ metrics }: { metrics: PerformanceMetrics }) {\n  const [isVisible, setIsVisible] = useState(false)\n  \n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.key === 'P') {\n        setIsVisible(!isVisible)\n      }\n    }\n    \n    window.addEventListener('keydown', handleKeyPress)\n    return () => window.removeEventListener('keydown', handleKeyPress)\n  }, [isVisible])\n  \n  if (!isVisible) {\n    return (\n      <div className=\"fixed bottom-4 right-4 z-50\">\n        <button\n          onClick={() => setIsVisible(true)}\n          className=\"bg-blue-500 text-white p-2 rounded-full shadow-lg hover:bg-blue-600 transition-colors\"\n          title=\"Show Performance Metrics (Ctrl+Shift+P)\"\n        >\n          <Loader2 className=\"h-4 w-4\" />\n        </button>\n      </div>\n    )\n  }\n  \n  return (\n    <div className=\"fixed bottom-4 right-4 z-50 w-80\">\n      <Card>\n        <CardHeader className=\"pb-2\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-sm font-medium\">Performance Metrics</h3>\n            <button\n              onClick={() => setIsVisible(false)}\n              className=\"text-muted-foreground hover:text-foreground\"\n            >\n              ×\n            </button>\n          </div>\n        </CardHeader>\n        <CardContent className=\"text-xs space-y-2\">\n          <div className=\"flex justify-between\">\n            <span>Render Time:</span>\n            <span>{metrics.renderTime.toFixed(2)}ms</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>Components:</span>\n            <span>{metrics.componentCount}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>Memory:</span>\n            <span>{(metrics.memoryUsage / 1024 / 1024).toFixed(2)}MB</span>\n          </div>\n          <div className=\"text-xs text-muted-foreground mt-2\">\n            Press Ctrl+Shift+P to toggle\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\n// Hook for layout performance monitoring\nexport function useLayoutPerformance() {\n  const [metrics, setMetrics] = useState({\n    renderTime: 0,\n    hydrationTime: 0,\n    componentCount: 0\n  })\n  \n  useEffect(() => {\n    const startTime = performance.now()\n    \n    // Track hydration time\n    const hydrationObserver = new PerformanceObserver((list) => {\n      const entries = list.getEntries()\n      entries.forEach((entry) => {\n        if (entry.name === 'Next.js-hydration') {\n          setMetrics(prev => ({\n            ...prev,\n            hydrationTime: entry.duration\n          }))\n        }\n      })\n    })\n    \n    hydrationObserver.observe({ entryTypes: ['measure'] })\n    \n    return () => {\n      const endTime = performance.now()\n      setMetrics(prev => ({\n        ...prev,\n        renderTime: endTime - startTime\n      }))\n      hydrationObserver.disconnect()\n    }\n  }, [])\n  \n  return metrics\n}\n\n// Export route components for external use\nexport {\n  LazyDashboard,\n  LazyContacts,\n  LazyDeals,\n  LazyCompanies,\n  LazyQuotes,\n  LazyReports,\n  LazySettings,\n  LazySecurityDashboard,\n  LazyPerformanceDashboard,\n  LazyPerformanceMonitor\n}"],"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","ignoreList":[]}