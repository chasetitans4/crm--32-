{"version":3,"names":["EnhancedQuoteConverter","cov_293a9yu732","f","s","default","_default","DEFAULT_TAX_RATE","DEFAULT_PAYMENT_TERMS","convertQuoteToContractAndInvoices","quote","options","b","contract","generateEnhancedContract","invoices","generateUnifiedInvoices","paymentSchedule","paymentStructure","schedule","summary","totalAmount","numberOfInvoices","length","firstInvoiceAmount","estimatedCompletionDate","projectDetails","endDate","preservedQuoteData","templateId","_EnhancedContractTemplateService","EnhancedContractTemplateService","generateContractFromQuote","type","customMilestones","generateCustomPaymentSchedule","generatePaymentScheduleByType","paymentTerms","userId","createdBy","lastModifiedBy","taxRate","forEach","milestone","index","invoice","generateInvoiceFromMilestone","push","invoiceNumber","Date","getFullYear","String","now","slice","invoiceType","percentage","items","generateInvoiceItems","includeDetailedItems","subtotal","reduce","sum","item","total","tax","id","contractId","quoteId","clientId","clientName","businessName","clientEmail","clientAddress","milestoneNumber","totalMilestones","progressPercentage","amountPaid","amountDue","status","autoGenerateInvoices","issueDate","dueDate","originalQuoteData","industry","pageCount","features","timeline","budget","finalPrice","totalHours","requirements","additionalNotes","contractData","projectTitle","title","projectDescription","description","serviceType","startDate","deliveryDate","milestones","notes","generateInvoiceNotes","internalNotes","generateInternalNotes","currency","createdAt","toISOString","updatedAt","includeDetailed","baseAmount","amount","featureAmount","amountPerFeature","name","quantity","unitPrice","category","hoursAllocated","milestonePhase","taxable","feature","categorizeFeature","relatedFeatures","featureLower","toLowerCase","includes","timelineWeeks","Number","parseInt","split","getTime","deliverables","setDate","getDate","Math","floor","monthlyPayments","ceil","percentagePerMonth","i","setMonth","getMonth","map","dependencies","deliverable","contractNumber","join","validateConversionOptions","errors","totalPercentage","abs","isValid","generateConversionSummary","result","summaryText","toLocaleString","toLocaleDateString"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\enhanced-quote-converter.tsx"],"sourcesContent":["import {\n  EnhancedContractTemplateService,\n  type EnhancedContract,\n  type PaymentMilestone,\n} from \"../services/EnhancedContractTemplateService\"\nimport type { Quote, Invoice } from \"../schemas/contractInvoiceSchemas\"\n\n// Enhanced interfaces for unified conversion\nexport interface UnifiedInvoiceItem {\n  id: string\n  description: string\n  quantity: number\n  unitPrice: number\n  total: number\n\n  // Enhanced properties for quote data preservation\n  category?: \"design\" | \"development\" | \"content\" | \"seo\" | \"maintenance\" | \"custom\"\n  hoursAllocated?: number\n  relatedFeatures?: string[]\n  milestonePhase?: string\n\n  // Tax and pricing\n  taxable: boolean\n  taxRate: number\n  discountPercentage?: number\n  discountAmount?: number\n}\n\nexport interface UnifiedInvoice {\n  // Core invoice data\n  id: string\n  invoiceNumber: string\n  contractId?: string\n  quoteId?: string\n  clientId?: string\n  clientName: string\n  clientEmail: string\n  clientAddress: string\n\n  // Dynamic invoice properties\n  invoiceType: \"deposit\" | \"milestone\" | \"final\" | \"progress\" | \"custom\"\n  milestoneNumber?: number\n  totalMilestones?: number\n  progressPercentage?: number\n\n  // Enhanced items with quote data preservation\n  items: UnifiedInvoiceItem[]\n\n  // Financial details\n  subtotal: number\n  tax: number\n  totalAmount: number\n  amountPaid: number\n  amountDue: number\n\n  // Status and dates\n  status: \"Draft\" | \"Sent\" | \"Paid\" | \"Overdue\" | \"draft\" | \"sent\" | \"viewed\" | \"paid\" | \"overdue\" | \"cancelled\"\n  issueDate: Date\n  dueDate: Date\n  paidDate?: string\n\n  // Quote data preservation\n  originalQuoteData?: {\n    businessName: string\n    industry: string\n    pageCount: number\n    features: string[]\n    timeline: string\n    budget: string\n    finalPrice: number\n    totalHours: number\n    requirements?: string\n    additionalNotes?: string\n  }\n\n  // Contract data preservation\n  contractData?: {\n    projectTitle: string\n    projectDescription: string\n    serviceType: string\n    timeline: string\n    startDate: string\n    deliveryDate: string\n    milestones?: PaymentMilestone[]\n  }\n\n  // Payment and terms\n  paymentTerms: string\n  notes?: string\n  internalNotes?: string\n  currency: string\n\n  // Metadata\n  createdAt: string\n  updatedAt: string\n  createdBy?: string\n  lastModifiedBy?: string\n}\n\n// Conversion options\nexport interface ConversionOptions {\n  templateId?: string\n  paymentStructure?: \"single\" | \"deposit_final\" | \"milestone\" | \"progress\"\n  customMilestones?: Partial<PaymentMilestone>[]\n  taxRate?: number\n  paymentTerms?: string\n  includeDetailedItems?: boolean\n  autoGenerateInvoices?: boolean\n  userId?: string\n}\n\n// Conversion result\nexport interface ConversionResult {\n  contract: EnhancedContract\n  invoices: UnifiedInvoice[]\n  paymentSchedule: PaymentMilestone[]\n  summary: {\n    totalAmount: number\n    numberOfInvoices: number\n    firstInvoiceAmount: number\n    estimatedCompletionDate: string\n    preservedQuoteData: boolean\n  }\n}\n\n// Enhanced Quote to Contract Converter\nexport class EnhancedQuoteConverter {\n  private static readonly DEFAULT_TAX_RATE = 0.0875 // 8.75%\n  private static readonly DEFAULT_PAYMENT_TERMS = \"Net 30\"\n\n  /**\n   * Convert quote to contract and generate unified invoices\n   */\n  static convertQuoteToContractAndInvoices(quote: Quote, options: ConversionOptions = {}): ConversionResult {\n    // Generate enhanced contract\n    const contract = this.generateEnhancedContract(quote, options)\n\n    // Generate unified invoices based on payment structure\n    const invoices = this.generateUnifiedInvoices(quote, contract, options)\n\n    // Extract payment schedule\n    const paymentSchedule = contract.paymentStructure.schedule\n\n    // Calculate summary\n    const summary = {\n      totalAmount: contract.paymentStructure.totalAmount,\n      numberOfInvoices: invoices.length,\n      firstInvoiceAmount: invoices[0]?.totalAmount || 0,\n      estimatedCompletionDate: contract.projectDetails.endDate,\n      preservedQuoteData: true,\n    }\n\n    return {\n      contract,\n      invoices,\n      paymentSchedule,\n      summary,\n    }\n  }\n\n  /**\n   * Generate enhanced contract from quote\n   */\n  private static generateEnhancedContract(quote: Quote, options: ConversionOptions): EnhancedContract {\n    const templateId = options.templateId || \"web-design-template\"\n    const contract = EnhancedContractTemplateService.generateContractFromQuote(quote, templateId)\n\n    // Apply custom payment structure if provided\n    if (options.paymentStructure) {\n      contract.paymentStructure.type = options.paymentStructure\n\n      // Regenerate schedule based on custom structure\n      if (options.customMilestones && options.customMilestones.length > 0) {\n        contract.paymentStructure.schedule = this.generateCustomPaymentSchedule(quote, options.customMilestones)\n      } else {\n        contract.paymentStructure.schedule = this.generatePaymentScheduleByType(quote, options.paymentStructure)\n      }\n    }\n\n    // Apply custom payment terms\n    if (options.paymentTerms) {\n      contract.paymentStructure.paymentTerms = options.paymentTerms\n    }\n\n    // Add user metadata\n    if (options.userId) {\n      contract.createdBy = options.userId\n      contract.lastModifiedBy = options.userId\n    }\n\n    return contract\n  }\n\n  /**\n   * Generate unified invoices from contract\n   */\n  private static generateUnifiedInvoices(\n    quote: Quote,\n    contract: EnhancedContract,\n    options: ConversionOptions,\n  ): UnifiedInvoice[] {\n    const invoices: UnifiedInvoice[] = []\n    const taxRate = options.taxRate || this.DEFAULT_TAX_RATE\n\n    // Generate invoice for each milestone\n    contract.paymentStructure.schedule.forEach((milestone, index) => {\n      const invoice = this.generateInvoiceFromMilestone(quote, contract, milestone, index, taxRate, options)\n      invoices.push(invoice)\n    })\n\n    return invoices\n  }\n\n  /**\n   * Generate invoice from milestone\n   */\n  private static generateInvoiceFromMilestone(\n    quote: Quote,\n    contract: EnhancedContract,\n    milestone: PaymentMilestone,\n    index: number,\n    taxRate: number,\n    options: ConversionOptions,\n  ): UnifiedInvoice {\n    const invoiceNumber = `INV-${new Date().getFullYear()}-${String(Date.now() + index).slice(-6)}`\n\n    // Determine invoice type\n    let invoiceType: UnifiedInvoice[\"invoiceType\"] = \"milestone\"\n    if (contract.paymentStructure.schedule.length === 1) {\n      invoiceType = \"custom\"\n    } else if (index === 0 && milestone.percentage >= 40) {\n      invoiceType = \"deposit\"\n    } else if (index === contract.paymentStructure.schedule.length - 1) {\n      invoiceType = \"final\"\n    }\n\n    // Generate invoice items\n    const items = this.generateInvoiceItems(quote, contract, milestone, options.includeDetailedItems || false)\n\n    const subtotal = items.reduce((sum, item) => sum + item.total, 0)\n    const tax = subtotal * taxRate\n    const totalAmount = subtotal + tax\n\n    const invoice: UnifiedInvoice = {\n      id: `invoice-${Date.now()}-${index}`,\n      invoiceNumber,\n      contractId: contract.id,\n      quoteId: quote.id,\n      clientId: quote.clientId,\n      clientName: quote.clientName || quote.businessName,\n      clientEmail: quote.clientEmail || '',\n      clientAddress: quote.clientAddress || '',\n\n      invoiceType,\n      milestoneNumber: milestone.milestoneNumber,\n      totalMilestones: contract.paymentStructure.schedule.length,\n      progressPercentage: milestone.percentage,\n\n      items,\n      subtotal,\n      tax,\n      totalAmount,\n      amountPaid: 0,\n      amountDue: totalAmount,\n\n      status: options.autoGenerateInvoices ? \"draft\" : \"draft\",\n      issueDate: new Date(),\n      dueDate: new Date(milestone.dueDate),\n\n      originalQuoteData: {\n        businessName: quote.businessName,\n        industry: quote.industry,\n        pageCount: quote.pageCount,\n        features: quote.features,\n        timeline: quote.timeline,\n        budget: quote.budget || '',\n        finalPrice: quote.finalPrice,\n        totalHours: quote.totalHours || 0,\n        requirements: quote.requirements,\n        additionalNotes: quote.additionalNotes,\n      },\n\n      contractData: {\n        projectTitle: contract.projectDetails.title,\n        projectDescription: contract.projectDetails.description,\n        serviceType: \"Web Design & Development\",\n        timeline: contract.projectDetails.timeline,\n        startDate: contract.projectDetails.startDate,\n        deliveryDate: contract.projectDetails.endDate,\n        milestones: contract.paymentStructure.schedule,\n      },\n\n      paymentTerms: contract.paymentStructure.paymentTerms,\n      notes: this.generateInvoiceNotes(quote, milestone, invoiceType),\n      internalNotes: this.generateInternalNotes(quote, contract, milestone),\n      currency: contract.paymentStructure.currency,\n\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      createdBy: options.userId,\n      lastModifiedBy: options.userId,\n    }\n\n    return invoice\n  }\n\n  /**\n   * Generate detailed invoice items\n   */\n  private static generateInvoiceItems(\n    quote: Quote,\n    contract: EnhancedContract,\n    milestone: PaymentMilestone,\n    includeDetailed: boolean,\n  ): UnifiedInvoiceItem[] {\n    const items: UnifiedInvoiceItem[] = []\n\n    if (includeDetailed && quote.features.length > 1) {\n      // Generate detailed items based on features\n      const baseAmount = milestone.amount * 0.3 // 30% for base services\n      const featureAmount = milestone.amount * 0.7 // 70% for features\n      const amountPerFeature = featureAmount / quote.features.length\n\n      // Base service item\n      items.push({\n        id: `item-base-${Date.now()}`,\n        description: `${milestone.name} - Base Web Design Services`,\n        quantity: 1,\n        unitPrice: baseAmount,\n        total: baseAmount,\n        category: \"design\",\n        hoursAllocated: (quote.totalHours || 0) * 0.3 * (milestone.percentage / 100),\n        milestonePhase: milestone.name,\n        taxable: true,\n        taxRate: 0,\n      })\n\n      // Feature-specific items\n      quote.features.forEach((feature: string, index: number) => {\n        items.push({\n          id: `item-feature-${Date.now()}-${index}`,\n          description: `${milestone.name} - ${feature}`,\n          quantity: 1,\n          unitPrice: amountPerFeature,\n          total: amountPerFeature,\n          category: this.categorizeFeature(feature),\n          hoursAllocated: ((quote.totalHours || 0) * 0.7 * (milestone.percentage / 100)) / quote.features.length,\n          relatedFeatures: [feature],\n          milestonePhase: milestone.name,\n          taxable: true,\n          taxRate: 0,\n        })\n      })\n    } else {\n      // Single consolidated item\n      items.push({\n        id: `item-${Date.now()}`,\n        description: `${milestone.name} - ${contract.projectDetails.title}`,\n        quantity: 1,\n        unitPrice: milestone.amount,\n        total: milestone.amount,\n        category: \"custom\",\n        hoursAllocated: (quote.totalHours || 0) * (milestone.percentage / 100),\n        relatedFeatures: quote.features,\n        milestonePhase: milestone.name,\n        taxable: true,\n        taxRate: 0,\n      })\n    }\n\n    return items\n  }\n\n  /**\n   * Categorize feature for invoice items\n   */\n  private static categorizeFeature(feature: string): UnifiedInvoiceItem[\"category\"] {\n    const featureLower = feature.toLowerCase()\n\n    if (featureLower.includes(\"design\") || featureLower.includes(\"ui\") || featureLower.includes(\"ux\")) {\n      return \"design\"\n    } else if (featureLower.includes(\"seo\") || featureLower.includes(\"optimization\")) {\n      return \"seo\"\n    } else if (featureLower.includes(\"content\") || featureLower.includes(\"cms\")) {\n      return \"content\"\n    } else if (featureLower.includes(\"maintenance\") || featureLower.includes(\"support\")) {\n      return \"maintenance\"\n    } else {\n      return \"development\"\n    }\n  }\n\n  /**\n   * Generate payment schedule by type\n   */\n  private static generatePaymentScheduleByType(\n    quote: Quote,\n    type: \"single\" | \"deposit_final\" | \"milestone\" | \"progress\",\n  ): PaymentMilestone[] {\n    const baseAmount = quote.finalPrice\n    const schedule: PaymentMilestone[] = []\n    const startDate = new Date()\n\n    // Calculate timeline\n    const timelineWeeks = quote.timeline.includes(\"week\")\n      ? Number.parseInt(quote.timeline.split(\"-\")[0]) || 4\n      : quote.timeline.includes(\"month\")\n        ? (Number.parseInt(quote.timeline.split(\"-\")[0]) || 2) * 4\n        : 8\n\n    switch (type) {\n      case \"single\":\n        schedule.push({\n          id: `milestone-${Date.now()}`,\n          milestoneNumber: 1,\n          name: \"Full Payment\",\n          description: \"Complete project payment\",\n          percentage: 100,\n          amount: baseAmount,\n          dueDate: new Date(startDate.getTime() + timelineWeeks * 7 * 24 * 60 * 60 * 1000).toISOString().split(\"T\")[0],\n          deliverables: [\"Complete website\", \"All features implemented\", \"Testing completed\", \"Launch and training\"],\n          status: \"pending\",\n        })\n        break\n\n      case \"deposit_final\":\n        schedule.push(\n          {\n            id: `milestone-${Date.now()}-1`,\n            milestoneNumber: 1,\n            name: \"Project Deposit\",\n            description: \"Initial deposit to begin project\",\n            percentage: 50,\n            amount: baseAmount * 0.5,\n            dueDate: startDate.toISOString().split(\"T\")[0],\n            deliverables: [\"Project kickoff\", \"Requirements gathering\", \"Initial designs\"],\n            status: \"pending\",\n          },\n          {\n            id: `milestone-${Date.now()}-2`,\n            milestoneNumber: 2,\n            name: \"Final Payment\",\n            description: \"Final payment upon project completion\",\n            percentage: 50,\n            amount: baseAmount * 0.5,\n            dueDate: new Date(startDate.getTime() + timelineWeeks * 7 * 24 * 60 * 60 * 1000)\n              .toISOString()\n              .split(\"T\")[0],\n            deliverables: [\"Complete website\", \"Testing\", \"Launch\", \"Training\"],\n            status: \"pending\",\n          },\n        )\n        break\n\n      case \"milestone\":\n        if (baseAmount < 5000) {\n          return this.generatePaymentScheduleByType(quote, \"deposit_final\")\n        } else if (baseAmount < 15000) {\n          // 3-milestone schedule\n          const milestones = [\n            {\n              name: \"Project Start & Deposit\",\n              percentage: 40,\n              deliverables: [\"Project kickoff\", \"Requirements\", \"Wireframes\"],\n            },\n            {\n              name: \"Design Approval\",\n              percentage: 30,\n              deliverables: [\"Visual designs\", \"Content integration\", \"Development start\"],\n            },\n            { name: \"Project Completion\", percentage: 30, deliverables: [\"Final development\", \"Testing\", \"Launch\"] },\n          ]\n\n          milestones.forEach((milestone, index) => {\n            const dueDate = new Date(startDate)\n            dueDate.setDate(startDate.getDate() + (index + 1) * Math.floor((timelineWeeks * 7) / milestones.length))\n\n            schedule.push({\n              id: `milestone-${Date.now()}-${index + 1}`,\n              milestoneNumber: index + 1,\n              name: milestone.name,\n              description: `${milestone.name} for ${quote.businessName}`,\n              percentage: milestone.percentage,\n              amount: baseAmount * (milestone.percentage / 100),\n              dueDate: dueDate.toISOString().split(\"T\")[0],\n              deliverables: milestone.deliverables,\n              status: \"pending\",\n            })\n          })\n        } else {\n          // 4-milestone schedule for larger projects\n          const milestones = [\n            {\n              name: \"Project Start & Deposit\",\n              percentage: 30,\n              deliverables: [\"Project kickoff\", \"Requirements\", \"Wireframes\"],\n            },\n            {\n              name: \"Design Phase\",\n              percentage: 25,\n              deliverables: [\"Visual designs\", \"Design system\", \"Client approval\"],\n            },\n            {\n              name: \"Development Phase\",\n              percentage: 25,\n              deliverables: [\"Frontend development\", \"Backend integration\", \"Content management\"],\n            },\n            {\n              name: \"Launch & Completion\",\n              percentage: 20,\n              deliverables: [\"Testing\", \"Launch\", \"Training\", \"Documentation\"],\n            },\n          ]\n\n          milestones.forEach((milestone, index) => {\n            const dueDate = new Date(startDate)\n            dueDate.setDate(startDate.getDate() + (index + 1) * Math.floor((timelineWeeks * 7) / milestones.length))\n\n            schedule.push({\n              id: `milestone-${Date.now()}-${index + 1}`,\n              milestoneNumber: index + 1,\n              name: milestone.name,\n              description: `${milestone.name} for ${quote.businessName}`,\n              percentage: milestone.percentage,\n              amount: baseAmount * (milestone.percentage / 100),\n              dueDate: dueDate.toISOString().split(\"T\")[0],\n              deliverables: milestone.deliverables,\n              status: \"pending\",\n            })\n          })\n        }\n        break\n\n      case \"progress\":\n        // Monthly progress payments\n        const monthlyPayments = Math.ceil(timelineWeeks / 4)\n        const percentagePerMonth = 100 / monthlyPayments\n\n        for (let i = 0; i < monthlyPayments; i++) {\n          const dueDate = new Date(startDate)\n          dueDate.setMonth(startDate.getMonth() + i + 1)\n\n          schedule.push({\n            id: `milestone-${Date.now()}-${i + 1}`,\n            milestoneNumber: i + 1,\n            name: `Progress Payment ${i + 1}`,\n            description: `Monthly progress payment ${i + 1} of ${monthlyPayments}`,\n            percentage: percentagePerMonth,\n            amount: baseAmount * (percentagePerMonth / 100),\n            dueDate: dueDate.toISOString().split(\"T\")[0],\n            deliverables: [`Month ${i + 1} deliverables`, \"Progress review\", \"Client approval\"],\n            status: \"pending\",\n          })\n        }\n        break\n    }\n\n    return schedule\n  }\n\n  /**\n   * Generate custom payment schedule\n   */\n  private static generateCustomPaymentSchedule(\n    quote: Quote,\n    customMilestones: Partial<PaymentMilestone>[],\n  ): PaymentMilestone[] {\n    const baseAmount = quote.finalPrice\n    const startDate = new Date()\n\n    return customMilestones.map((milestone, index) => ({\n      id: milestone.id || `milestone-${Date.now()}-${index}`,\n      milestoneNumber: milestone.milestoneNumber || index + 1,\n      name: milestone.name || `Milestone ${index + 1}`,\n      description: milestone.description || `Custom milestone ${index + 1}`,\n      percentage: milestone.percentage || 0,\n      amount: milestone.amount || baseAmount * ((milestone.percentage || 0) / 100),\n      dueDate:\n        milestone.dueDate ||\n        new Date(startDate.getTime() + (index + 1) * 30 * 24 * 60 * 60 * 1000).toISOString().split(\"T\")[0],\n      deliverables: milestone.deliverables || [`Milestone ${index + 1} deliverables`],\n      dependencies: milestone.dependencies,\n      status: \"pending\",\n    }))\n  }\n\n  /**\n   * Generate invoice notes\n   */\n  private static generateInvoiceNotes(\n    quote: Quote,\n    milestone: PaymentMilestone,\n    invoiceType: UnifiedInvoice[\"invoiceType\"],\n  ): string {\n    let notes = `${milestone.name} for ${quote.businessName}\\n\\n`\n    notes += `Project Details:\\n`\n    notes += `• ${quote.pageCount} pages\\n`\n    notes += `• Industry: ${quote.industry}\\n`\n    notes += `• Timeline: ${quote.timeline}\\n\\n`\n    notes += `Milestone Deliverables:\\n`\n    milestone.deliverables.forEach((deliverable) => {\n      notes += `• ${deliverable}\\n`\n    })\n\n    if (invoiceType === \"deposit\") {\n      notes += `\\nThis is the initial deposit to begin your project. Work will commence upon receipt of payment.`\n    } else if (invoiceType === \"final\") {\n      notes += `\\nThis is the final payment for your project. All deliverables will be completed upon receipt.`\n    }\n\n    return notes\n  }\n\n  /**\n   * Generate internal notes\n   */\n  private static generateInternalNotes(quote: Quote, contract: EnhancedContract, milestone: PaymentMilestone): string {\n    let notes = `Auto-generated from Quote ${quote.id} via Contract ${contract.contractNumber}\\n\\n`\n    notes += `Original Quote Data:\\n`\n    notes += `• Budget: ${quote.budget}\\n`\n    notes += `• Total Hours: ${quote.totalHours}\\n`\n    notes += `• Features: ${quote.features.join(\", \")}\\n\\n`\n    notes += `Milestone: ${milestone.milestoneNumber} of ${contract.paymentStructure.schedule.length}\\n`\n    notes += `Percentage: ${milestone.percentage}%\\n`\n\n    if (milestone.dependencies && milestone.dependencies.length > 0) {\n      notes += `Dependencies: ${milestone.dependencies.join(\", \")}\\n`\n    }\n\n    return notes\n  }\n\n  /**\n   * Validate conversion options\n   */\n  static validateConversionOptions(options: ConversionOptions): { isValid: boolean; errors: string[] } {\n    const errors: string[] = []\n\n    if (options.customMilestones && options.customMilestones.length > 0) {\n      const totalPercentage = options.customMilestones.reduce((sum, milestone) => sum + (milestone.percentage || 0), 0)\n      if (Math.abs(totalPercentage - 100) > 0.01) {\n        errors.push(\"Custom milestones must total 100%\")\n      }\n\n      options.customMilestones.forEach((milestone, index) => {\n        if (!milestone.name) errors.push(`Milestone ${index + 1} name is required`)\n        if (!milestone.percentage || milestone.percentage <= 0)\n          errors.push(`Milestone ${index + 1} percentage must be greater than 0`)\n      })\n    }\n\n    if (options.taxRate && (options.taxRate < 0 || options.taxRate > 1)) {\n      errors.push(\"Tax rate must be between 0 and 1\")\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n    }\n  }\n\n  /**\n   * Generate conversion summary\n   */\n  static generateConversionSummary(result: ConversionResult): string {\n    const { contract, invoices, summary } = result\n\n    let summaryText = `Conversion Summary\\n`\n    summaryText += `================\\n\\n`\n    summaryText += `Contract: ${contract.contractNumber}\\n`\n    summaryText += `Client: ${contract.clientName}\\n`\n    summaryText += `Project: ${contract.projectDetails.title}\\n`\n    summaryText += `Total Amount: ${contract.paymentStructure.currency} ${summary.totalAmount.toLocaleString()}\\n`\n    summaryText += `Payment Structure: ${contract.paymentStructure.type}\\n`\n    summaryText += `Number of Invoices: ${summary.numberOfInvoices}\\n`\n    summaryText += `Estimated Completion: ${new Date(summary.estimatedCompletionDate).toLocaleDateString()}\\n\\n`\n\n    summaryText += `Invoice Schedule:\\n`\n    invoices.forEach((invoice, index) => {\n      summaryText += `${index + 1}. ${invoice.invoiceNumber} - ${invoice.invoiceType} - ${invoice.currency} ${invoice.totalAmount.toLocaleString()} (Due: ${new Date(invoice.dueDate).toLocaleDateString()})\\n`\n    })\n\n    summaryText += `\\nQuote Data Preserved: ${summary.preservedQuoteData ? \"Yes\" : \"No\"}\\n`\n\n    return summaryText\n  }\n}\n\nexport default EnhancedQuoteConverter\n"],"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","ignoreList":[]}