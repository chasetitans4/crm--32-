{"version":3,"names":["cov_23xihl15ux","actualCoverage","s","apiCache","f","cacheUtils","memoryCache","staticAssetCache","AdvancedCache","constructor","config","b","cache","Map","ttl","maxSize","strategy","set","key","data","size","evict","entry","timestamp","Date","now","accessCount","lastAccessed","get","delete","has","clear","keyToEvict","findLRU","findLFU","keys","next","value","oldestKey","oldestTime","Array","from","entries","forEach","leastUsedKey","leastCount","Infinity","getStats","hitRate","calculateHitRate","averageAge","reduce","sum","length","totalAccesses","APICache","pendingRequests","fetcher","cached","pending","request","then","catch","error","invalidate","pattern","regex","RegExp","test","StaticAssetCache","url","window","caches","open","cacheName","add","response","match","date","headers","getTime","maxAge","preloadAssets","urls","addAll","clearExpired","requests","MemoryCache","firstKey","expiry","defaultTTL","cleanup","generateKey","params","paramString","JSON","stringify","invalidateAll","getAllStats","api","memory","preloadCriticalData","criticalAssets","console","log","setInterval"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\cache.ts"],"sourcesContent":["// Advanced caching mechanisms for API responses and static assets\n\ninterface CacheConfig {\n  ttl: number; // Time to live in milliseconds\n  maxSize: number; // Maximum number of entries\n  strategy: 'lru' | 'fifo' | 'lfu'; // Cache eviction strategy\n}\n\ninterface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n  accessCount: number;\n  lastAccessed: number;\n}\n\nclass AdvancedCache<T> {\n  private cache = new Map<string, CacheEntry<T>>();\n  private config: CacheConfig;\n\n  constructor(config: Partial<CacheConfig> = {}) {\n    this.config = {\n      ttl: 5 * 60 * 1000, // 5 minutes default\n      maxSize: 100,\n      strategy: 'lru',\n      ...config\n    };\n  }\n\n  set(key: string, data: T): void {\n    // Check if we need to evict entries\n    if (this.cache.size >= this.config.maxSize) {\n      this.evict();\n    }\n\n    const entry: CacheEntry<T> = {\n      data,\n      timestamp: Date.now(),\n      accessCount: 0,\n      lastAccessed: Date.now()\n    };\n\n    this.cache.set(key, entry);\n  }\n\n  get(key: string): T | null {\n    const entry = this.cache.get(key);\n    \n    if (!entry) {\n      return null;\n    }\n\n    // Check if entry has expired\n    if (Date.now() - entry.timestamp > this.config.ttl) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    // Update access statistics\n    entry.accessCount++;\n    entry.lastAccessed = Date.now();\n    \n    return entry.data;\n  }\n\n  has(key: string): boolean {\n    const entry = this.cache.get(key);\n    if (!entry) return false;\n    \n    // Check if expired\n    if (Date.now() - entry.timestamp > this.config.ttl) {\n      this.cache.delete(key);\n      return false;\n    }\n    \n    return true;\n  }\n\n  delete(key: string): boolean {\n    return this.cache.delete(key);\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  size(): number {\n    return this.cache.size;\n  }\n\n  private evict(): void {\n    if (this.cache.size === 0) return;\n\n    let keyToEvict: string;\n\n    switch (this.config.strategy) {\n      case 'lru': // Least Recently Used\n        keyToEvict = this.findLRU();\n        break;\n      case 'lfu': // Least Frequently Used\n        keyToEvict = this.findLFU();\n        break;\n      case 'fifo': // First In, First Out\n      default:\n        keyToEvict = this.cache.keys().next().value;\n        break;\n    }\n\n    this.cache.delete(keyToEvict);\n  }\n\n  private findLRU(): string {\n    let oldestKey = '';\n    let oldestTime = Date.now();\n\n    Array.from(this.cache.entries()).forEach(([key, entry]) => {\n      if (entry.lastAccessed < oldestTime) {\n        oldestTime = entry.lastAccessed;\n        oldestKey = key;\n      }\n    });\n\n    return oldestKey;\n  }\n\n  private findLFU(): string {\n    let leastUsedKey = '';\n    let leastCount = Infinity;\n\n    Array.from(this.cache.entries()).forEach(([key, entry]) => {\n      if (entry.accessCount < leastCount) {\n        leastCount = entry.accessCount;\n        leastUsedKey = key;\n      }\n    });\n\n    return leastUsedKey;\n  }\n\n  // Get cache statistics\n  getStats() {\n    const entries = Array.from(this.cache.entries());\n    const now = Date.now();\n    \n    return {\n      size: this.cache.size,\n      maxSize: this.config.maxSize,\n      hitRate: this.calculateHitRate(),\n      averageAge: entries.reduce((sum, [, entry]) => sum + (now - entry.timestamp), 0) / entries.length || 0,\n      totalAccesses: entries.reduce((sum, [, entry]) => sum + entry.accessCount, 0)\n    };\n  }\n\n  private calculateHitRate(): number {\n    // This would need to be tracked separately in a real implementation\n    return 0.85; // Placeholder\n  }\n}\n\n// API Response Cache\nclass APICache {\n  private cache: AdvancedCache<any>;\n  private pendingRequests = new Map<string, Promise<any>>();\n\n  constructor() {\n    this.cache = new AdvancedCache({\n      ttl: 5 * 60 * 1000, // 5 minutes for API responses\n      maxSize: 200,\n      strategy: 'lru'\n    });\n  }\n\n  async get<T>(key: string, fetcher: () => Promise<T>): Promise<T> {\n    // Check cache first\n    const cached = this.cache.get(key);\n    if (cached) {\n      return cached;\n    }\n\n    // Check if request is already pending\n    const pending = this.pendingRequests.get(key);\n    if (pending) {\n      return pending;\n    }\n\n    // Make new request\n    const request = fetcher().then(data => {\n      this.cache.set(key, data);\n      this.pendingRequests.delete(key);\n      return data;\n    }).catch(error => {\n      this.pendingRequests.delete(key);\n      throw error;\n    });\n\n    this.pendingRequests.set(key, request);\n    return request;\n  }\n\n  invalidate(pattern?: string): void {\n    if (!pattern) {\n      this.cache.clear();\n      return;\n    }\n\n    // Invalidate keys matching pattern\n    const regex = new RegExp(pattern);\n    Array.from(this.cache['cache'].entries()).forEach(([key]) => {\n      if (regex.test(key)) {\n        this.cache.delete(key);\n      }\n    });\n  }\n\n  getStats() {\n    return {\n      ...this.cache.getStats(),\n      pendingRequests: this.pendingRequests.size\n    };\n  }\n}\n\n// Static Asset Cache using Service Worker\nclass StaticAssetCache {\n  private cacheName = 'crm-static-assets-v1';\n  private maxAge = 24 * 60 * 60 * 1000; // 24 hours\n\n  async cache(url: string): Promise<void> {\n    if ('caches' in window) {\n      const cache = await caches.open(this.cacheName);\n      await cache.add(url);\n    }\n  }\n\n  async get(url: string): Promise<Response | null> {\n    if ('caches' in window) {\n      const cache = await caches.open(this.cacheName);\n      const response = await cache.match(url);\n      \n      if (response) {\n        const date = response.headers.get('date');\n        if (date && Date.now() - new Date(date).getTime() > this.maxAge) {\n          await cache.delete(url);\n          return null;\n        }\n        return response;\n      }\n    }\n    return null;\n  }\n\n  async preloadAssets(urls: string[]): Promise<void> {\n    if ('caches' in window) {\n      const cache = await caches.open(this.cacheName);\n      await cache.addAll(urls);\n    }\n  }\n\n  async clearExpired(): Promise<void> {\n    if ('caches' in window) {\n      const cache = await caches.open(this.cacheName);\n      const requests = await cache.keys();\n      \n      for (const request of requests) {\n        const response = await cache.match(request);\n        if (response) {\n          const date = response.headers.get('date');\n          if (date && Date.now() - new Date(date).getTime() > this.maxAge) {\n            await cache.delete(request);\n          }\n        }\n      }\n    }\n  }\n}\n\n// Memory Cache for frequently accessed data\nclass MemoryCache {\n  private cache = new Map<string, { data: any; expiry: number }>();\n  private maxSize = 50;\n  private defaultTTL = 2 * 60 * 1000; // 2 minutes\n\n  set(key: string, data: any, ttl?: number): void {\n    if (this.cache.size >= this.maxSize) {\n      const firstKey = this.cache.keys().next().value;\n      this.cache.delete(firstKey);\n    }\n\n    this.cache.set(key, {\n      data,\n      expiry: Date.now() + (ttl || this.defaultTTL)\n    });\n  }\n\n  get(key: string): any | null {\n    const entry = this.cache.get(key);\n    \n    if (!entry) return null;\n    \n    if (Date.now() > entry.expiry) {\n      this.cache.delete(key);\n      return null;\n    }\n    \n    return entry.data;\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  cleanup(): void {\n    const now = Date.now();\n    Array.from(this.cache.entries()).forEach(([key, entry]) => {\n      if (now > entry.expiry) {\n        this.cache.delete(key);\n      }\n    });\n  }\n}\n\n// Cache instances\nexport const apiCache = new APICache();\nexport const staticAssetCache = new StaticAssetCache();\nexport const memoryCache = new MemoryCache();\n\n// Cache utilities\nexport const cacheUtils = {\n  // Generate cache key from URL and params\n  generateKey: (url: string, params?: Record<string, any>): string => {\n    const paramString = params ? JSON.stringify(params) : '';\n    return `${url}:${paramString}`;\n  },\n\n  // Batch invalidation\n  invalidateAll: (): void => {\n    apiCache.invalidate();\n    memoryCache.clear();\n  },\n\n  // Get comprehensive cache stats\n  getAllStats: () => ({\n    api: apiCache.getStats(),\n    memory: {\n      size: memoryCache['cache'].size,\n      maxSize: memoryCache['maxSize']\n    }\n  }),\n\n  // Preload critical data\n  preloadCriticalData: async (): Promise<void> => {\n    const criticalAssets = [\n      '/api/dashboard/summary',\n      '/api/clients/recent',\n      '/api/pipeline/overview'\n    ];\n\n    // This would be implemented with actual API calls\n    console.log('Preloading critical data:', criticalAssets);\n  }\n};\n\n// Cleanup expired entries periodically\nif (typeof window !== 'undefined') {\n  setInterval(() => {\n    memoryCache.cleanup();\n    staticAssetCache.clearExpired();\n  }, 5 * 60 * 1000); // Every 5 minutes\n}"],"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","ignoreList":[]}