{"version":3,"names":["exportClientsToCSV","cov_1492w1pvej","f","s","exportEventsToCSV","exportTasksToCSV","exportToCSV","data","filename","headers","Object","keys","csvRows","join","map","row","header","cell","value","b","JSON","stringify","replace","csvString","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","clients","flattenedData","client","id","name","contact","email","phone","stage","lastContact","nextFollowup","status","source","projectCount","projects","length","noteCount","notes","tasks","task","title","assignee","assigned_to","dueDate","due_date","priority","relatedToType","relatedTo","relatedToId","events","event","date","time"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\exportData.ts"],"sourcesContent":["import type { Client, Task, Event } from \"../types\"\n\nexport const exportToCSV = (data: Record<string, unknown>[], filename: string) => {\n  // Convert data to CSV format\n  const headers = Object.keys(data[0])\n  const csvRows = [\n    headers.join(\",\"),\n    ...data.map((row) =>\n      headers\n        .map((header) => {\n          const cell = row[header]\n          // Handle special cases like objects, arrays, etc.\n          const value = typeof cell === \"object\" && cell !== null ? JSON.stringify(cell).replace(/\"/g, '\"\"') : cell\n          return `\"${value}\"`\n        })\n        .join(\",\"),\n    ),\n  ]\n\n  const csvString = csvRows.join(\"\\n\")\n  const blob = new Blob([csvString], { type: \"text/csv;charset=utf-8;\" })\n\n  // Create download link\n  const link = document.createElement(\"a\")\n  const url = URL.createObjectURL(blob)\n  link.setAttribute(\"href\", url)\n  link.setAttribute(\"download\", `${filename}.csv`)\n  link.style.visibility = \"hidden\"\n  document.body.appendChild(link)\n  link.click()\n  document.body.removeChild(link)\n}\n\nexport const exportClientsToCSV = (clients: Client[]) => {\n  // Flatten client data for CSV export\n  const flattenedData = clients.map((client) => ({\n    id: client.id,\n    name: client.name,\n    contact: 'No contact info',\n    email: client.email,\n    phone: client.phone,\n    stage: client.stage,\n    value: client.value,\n    lastContact: 'Never',\n    nextFollowup: 'Not scheduled',\n    status: client.status,\n    source: client.source,\n    projectCount: client.projects.length,\n    noteCount: client.notes.length,\n  }))\n\n  exportToCSV(flattenedData, \"clients-export\")\n}\n\nexport const exportTasksToCSV = (tasks: Task[]) => {\n  // Flatten task data for CSV export\n  const flattenedData = tasks.map((task) => ({\n    id: task.id,\n    title: task.title,\n    assignee: task.assigned_to || 'Unassigned',\n    dueDate: task.due_date || 'No due date',\n    status: task.status,\n    priority: task.priority,\n    relatedToType: (task as any).relatedTo?.type || \"none\",\n    relatedToId: (task as any).relatedTo?.id || \"\",\n  }))\n\n  exportToCSV(flattenedData, \"tasks-export\")\n}\n\nexport const exportEventsToCSV = (events: Event[]) => {\n  // Flatten event data for CSV export\n  const flattenedData = events.map((event) => ({\n    id: event.id,\n    title: event.title,\n    date: event.date,\n    time: event.time,\n    type: event.type,\n    relatedToType: event.relatedTo?.type || \"none\",\n    relatedToId: event.relatedTo?.id || \"\",\n  }))\n\n  exportToCSV(flattenedData, \"events-export\")\n}\n"],"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","ignoreList":[]}