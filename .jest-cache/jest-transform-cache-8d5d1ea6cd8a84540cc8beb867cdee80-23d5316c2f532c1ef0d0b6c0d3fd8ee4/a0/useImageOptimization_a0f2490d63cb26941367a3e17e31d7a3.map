{"version":3,"names":["cov_1c1flok0ss","actualCoverage","s","useImageCache","f","useImageGallery","useImageMetrics","useImageOptimization","useLazyLoading","useProgressiveLoading","src","options","b","state","setState","_react","useState","isLoading","metadata","error","dominantColor","blurDataURL","responsiveSet","optimizedUrl","loadStartTime","useRef","loadTime","setLoadTime","useCallback","_imageOptimization","optimizeImage","generateResponsiveImages","loadImageData","prev","current","performance","now","responsiveImages","Promise","all","getImageMetadata","extractDominantColor","generateBlurPlaceholder","loadEndTime","Error","message","preload","preloadImage","console","warn","useEffect","preloadCritical","reload","images","loadedImages","setLoadedImages","Set","failedImages","setFailedImages","isPreloading","setIsPreloading","preloadAll","allSettled","map","add","length","progress","total","loaded","size","failed","percentage","metrics","setMetrics","totalImages","averageLoadTime","cacheHitRate","totalBandwidthSaved","loadTimes","cacheStats","hits","misses","recordImageLoad","fromCache","push","reduce","a","recordImageFailure","getCacheStats","stats","getImageCacheStats","clearMetrics","threshold","rootMargin","isInView","setIsInView","hasLoaded","setHasLoaded","elementRef","element","observer","IntersectionObserver","entry","isIntersecting","unobserve","observe","currentSrc","setCurrentSrc","setIsLoading","loadingStage","setLoadingStage","loadProgressive","lowQualitySrc","quality","width","Math","min","highQualitySrc","img","Image","onload","onerror","isLowQuality","isHighQuality","cacheSize","setCacheSize","cacheEntries","setCacheEntries","updateCacheStats","cachedImages","clearCache","clearImageCache"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\useImageOptimization.ts"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport {\n  imageOptimizer,\n  optimizeImage,\n  generateResponsiveImages,\n  getImageMetadata,\n  preloadImage,\n  generateBlurPlaceholder,\n  extractDominantColor,\n  getImageCacheStats,\n  clearImageCache,\n  type ImageOptimizationOptions,\n  type ImageMetadata,\n  type ResponsiveImageSet\n} from '@/utils/imageOptimization';\n\ninterface UseImageOptimizationOptions {\n  preloadCritical?: boolean;\n  enableMetrics?: boolean;\n  cacheStrategy?: 'aggressive' | 'conservative' | 'minimal';\n  quality?: number;\n  format?: 'webp' | 'avif' | 'jpeg' | 'png' | 'auto';\n}\n\ninterface ImageOptimizationState {\n  isLoading: boolean;\n  metadata: ImageMetadata | null;\n  error: string | null;\n  dominantColor: string | null;\n  blurDataURL: string | null;\n  responsiveSet: ResponsiveImageSet | null;\n  optimizedUrl: string | null;\n}\n\ninterface ImageMetrics {\n  totalImages: number;\n  loadedImages: number;\n  failedImages: number;\n  averageLoadTime: number;\n  cacheHitRate: number;\n  totalBandwidthSaved: number;\n}\n\n// Hook for individual image optimization\nexport function useImageOptimization(\n  src: string,\n  options: ImageOptimizationOptions & UseImageOptimizationOptions = {}\n) {\n  const [state, setState] = useState<ImageOptimizationState>({\n    isLoading: false,\n    metadata: null,\n    error: null,\n    dominantColor: null,\n    blurDataURL: null,\n    responsiveSet: null,\n    optimizedUrl: null\n  });\n\n  const loadStartTime = useRef<number>(0);\n  const [loadTime, setLoadTime] = useState<number>(0);\n\n  // Generate optimized URL\n  const optimizedUrl = useCallback(() => {\n    if (!src) return null;\n    return optimizeImage(src, options);\n  }, [src, options]);\n\n  // Generate responsive image set\n  const responsiveSet = useCallback(() => {\n    if (!src) return null;\n    return generateResponsiveImages(src, options);\n  }, [src, options]);\n\n  // Load image metadata and enhancements\n  const loadImageData = useCallback(async () => {\n    if (!src) return;\n\n    setState(prev => ({ ...prev, isLoading: true, error: null }));\n    loadStartTime.current = performance.now();\n\n    try {\n      const [metadata, dominantColor, blurDataURL, responsiveImages] = await Promise.all([\n        getImageMetadata(src),\n        extractDominantColor(src),\n        generateBlurPlaceholder(src),\n        generateResponsiveImages(src, options)\n      ]);\n\n      const loadEndTime = performance.now();\n      setLoadTime(loadEndTime - loadStartTime.current);\n\n      setState({\n        isLoading: false,\n        metadata,\n        error: null,\n        dominantColor,\n        blurDataURL,\n        responsiveSet: responsiveImages,\n        optimizedUrl: optimizeImage(src, options)\n      });\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error instanceof Error ? error.message : 'Failed to load image data'\n      }));\n    }\n  }, [src, options]);\n\n  // Preload image\n  const preload = useCallback(async () => {\n    if (!src) return;\n    \n    try {\n      await preloadImage(src, options);\n    } catch (error) {\n      console.warn('Image preload failed:', error);\n    }\n  }, [src, options]);\n\n  // Load data on mount or when src changes\n  useEffect(() => {\n    if (src) {\n      loadImageData();\n      \n      if (options.preloadCritical) {\n        preload();\n      }\n    }\n  }, [src, loadImageData, preload, options.preloadCritical]);\n\n  return {\n    ...state,\n    loadTime,\n    optimizedUrl: state.optimizedUrl || optimizedUrl(),\n    responsiveSet: state.responsiveSet || responsiveSet(),\n    preload,\n    reload: loadImageData\n  };\n}\n\n// Hook for managing multiple images\nexport function useImageGallery(images: string[], options: UseImageOptimizationOptions = {}) {\n  const [loadedImages, setLoadedImages] = useState<Set<string>>(new Set());\n  const [failedImages, setFailedImages] = useState<Set<string>>(new Set());\n  const [isPreloading, setIsPreloading] = useState(false);\n\n  // Preload all images\n  const preloadAll = useCallback(async () => {\n    if (isPreloading) return;\n    \n    setIsPreloading(true);\n    \n    try {\n      await Promise.allSettled(\n        images.map(async (src) => {\n          try {\n            await preloadImage(src, options);\n            setLoadedImages(prev => new Set(prev).add(src));\n          } catch (error) {\n            setFailedImages(prev => new Set(prev).add(src));\n          }\n        })\n      );\n    } finally {\n      setIsPreloading(false);\n    }\n  }, [images, options, isPreloading]);\n\n  // Preload critical images on mount\n  useEffect(() => {\n    if (options.preloadCritical && images.length > 0) {\n      preloadAll();\n    }\n  }, [images, options.preloadCritical, preloadAll]);\n\n  return {\n    loadedImages,\n    failedImages,\n    isPreloading,\n    preloadAll,\n    progress: {\n      total: images.length,\n      loaded: loadedImages.size,\n      failed: failedImages.size,\n      percentage: images.length > 0 ? (loadedImages.size / images.length) * 100 : 0\n    }\n  };\n}\n\n// Hook for image performance monitoring\nexport function useImageMetrics() {\n  const [metrics, setMetrics] = useState<ImageMetrics>({\n    totalImages: 0,\n    loadedImages: 0,\n    failedImages: 0,\n    averageLoadTime: 0,\n    cacheHitRate: 0,\n    totalBandwidthSaved: 0\n  });\n\n  const loadTimes = useRef<number[]>([]);\n  const cacheStats = useRef({ hits: 0, misses: 0 });\n\n  // Record image load\n  const recordImageLoad = useCallback((loadTime: number, fromCache: boolean = false) => {\n    loadTimes.current.push(loadTime);\n    \n    if (fromCache) {\n      cacheStats.current.hits++;\n    } else {\n      cacheStats.current.misses++;\n    }\n\n    setMetrics(prev => ({\n      ...prev,\n      totalImages: prev.totalImages + 1,\n      loadedImages: prev.loadedImages + 1,\n      averageLoadTime: loadTimes.current.reduce((a, b) => a + b, 0) / loadTimes.current.length,\n      cacheHitRate: cacheStats.current.hits / (cacheStats.current.hits + cacheStats.current.misses) * 100\n    }));\n  }, []);\n\n  // Record image failure\n  const recordImageFailure = useCallback(() => {\n    setMetrics(prev => ({\n      ...prev,\n      totalImages: prev.totalImages + 1,\n      failedImages: prev.failedImages + 1\n    }));\n  }, []);\n\n  // Get cache statistics\n  const getCacheStats = useCallback(async () => {\n    try {\n      const stats = getImageCacheStats();\n      return stats;\n    } catch (error) {\n      console.warn('Failed to get cache stats:', error);\n      return null;\n    }\n  }, []);\n\n  // Clear metrics\n  const clearMetrics = useCallback(() => {\n    loadTimes.current = [];\n    cacheStats.current = { hits: 0, misses: 0 };\n    setMetrics({\n      totalImages: 0,\n      loadedImages: 0,\n      failedImages: 0,\n      averageLoadTime: 0,\n      cacheHitRate: 0,\n      totalBandwidthSaved: 0\n    });\n  }, []);\n\n  return {\n    metrics,\n    recordImageLoad,\n    recordImageFailure,\n    getCacheStats,\n    clearMetrics\n  };\n}\n\n// Hook for lazy loading with intersection observer\nexport function useLazyLoading(threshold: number = 0.1, rootMargin: string = '50px') {\n  const [isInView, setIsInView] = useState(false);\n  const [hasLoaded, setHasLoaded] = useState(false);\n  const elementRef = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    const element = elementRef.current;\n    if (!element) return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting && !hasLoaded) {\n          setIsInView(true);\n          setHasLoaded(true);\n          observer.unobserve(element);\n        }\n      },\n      {\n        threshold,\n        rootMargin\n      }\n    );\n\n    observer.observe(element);\n\n    return () => {\n      observer.unobserve(element);\n    };\n  }, [threshold, rootMargin, hasLoaded]);\n\n  return {\n    elementRef,\n    isInView,\n    hasLoaded\n  };\n}\n\n// Hook for progressive image loading\nexport function useProgressiveLoading(src: string, options: ImageOptimizationOptions = {}) {\n  const [currentSrc, setCurrentSrc] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadingStage, setLoadingStage] = useState<'placeholder' | 'lowQuality' | 'highQuality'>('placeholder');\n\n  useEffect(() => {\n    if (!src) return;\n\n    const loadProgressive = async () => {\n      setIsLoading(true);\n      setLoadingStage('placeholder');\n\n      try {\n        // Stage 1: Load low quality placeholder\n        const lowQualitySrc = optimizeImage(src, {\n          ...options,\n          quality: 10,\n          width: Math.min(options.width || 100, 100)\n        });\n\n        setCurrentSrc(lowQualitySrc);\n        setLoadingStage('lowQuality');\n\n        // Stage 2: Load high quality image\n        const highQualitySrc = optimizeImage(src, options);\n        \n        const img = new Image();\n        img.onload = () => {\n          setCurrentSrc(highQualitySrc);\n          setLoadingStage('highQuality');\n          setIsLoading(false);\n        };\n        img.onerror = () => {\n          setIsLoading(false);\n        };\n        img.src = highQualitySrc;\n      } catch (error) {\n        console.warn('Progressive loading failed:', error);\n        setCurrentSrc(src);\n        setIsLoading(false);\n      }\n    };\n\n    loadProgressive();\n  }, [src, options]);\n\n  return {\n    currentSrc,\n    isLoading,\n    loadingStage,\n    isLowQuality: loadingStage === 'lowQuality',\n    isHighQuality: loadingStage === 'highQuality'\n  };\n}\n\n// Hook for image cache management\nexport function useImageCache() {\n  const [cacheSize, setCacheSize] = useState(0);\n  const [cacheEntries, setCacheEntries] = useState(0);\n\n  // Update cache stats\n  const updateCacheStats = useCallback(async () => {\n    try {\n      const stats = getImageCacheStats();\n      setCacheEntries(stats.cachedImages);\n      // Cache size would need to be calculated differently\n    } catch (error) {\n      console.warn('Failed to update cache stats:', error);\n    }\n  }, []);\n\n  // Clear cache\n  const clearCache = useCallback(async () => {\n    try {\n      clearImageCache();\n      await updateCacheStats();\n    } catch (error) {\n      console.warn('Failed to clear cache:', error);\n    }\n  }, [updateCacheStats]);\n\n  // Update stats on mount\n  useEffect(() => {\n    updateCacheStats();\n  }, [updateCacheStats]);\n\n  return {\n    cacheSize,\n    cacheEntries,\n    updateCacheStats,\n    clearCache\n  };\n}\n\n// Export types\nexport type {\n  UseImageOptimizationOptions,\n  ImageOptimizationState,\n  ImageMetrics\n};"],"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","ignoreList":[]}