{"version":3,"names":["cov_2prumf8984","actualCoverage","s","ImageGallery","f","OptimizedAvatar","default","_default","OptimizedImage","_react","forwardRef","src","alt","width","height","quality","b","priority","placeholder","blurDataURL","sizes","fill","objectFit","objectPosition","loading","progressive","responsive","fallback","onLoad","onError","className","containerClassName","overlayClassName","showLoadingState","enableDominantColor","optimizationOptions","props","ref","state","setState","useState","isLoading","isLoaded","hasError","imgRef","useRef","containerRef","isInView","setIsInView","combinedRef","node","current","useEffect","observer","IntersectionObserver","entry","isIntersecting","disconnect","rootMargin","threshold","observe","loadEnhancements","metadata","_imageOptimization","getImageMetadata","updates","dominantColor","extractDominantColor","generateBlurPlaceholder","prev","error","console","warn","getOptimizedProps","options","responsiveSet","generateResponsiveImages","srcSet","optimizeImage","handleLoad","handleError","loadProgressively","renderPlaceholder","_jsxruntime","jsx","_skeleton","Skeleton","_utils","cn","style","backgroundColor","backgroundImage","renderError","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","containerStyle","position","jsxs","_image","undefined","displayName","images","columns","gap","aspectRatio","imageProps","gridTemplateColumns","map","image","index","caption","size","fallbackText","sizeClasses","sm","md","lg","xl","sizePx","btoa","charAt","toUpperCase"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\components\\OptimizedImage.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useRef, useEffect, forwardRef } from 'react';\nimport Image from 'next/image';\nimport { cn } from '@/lib/utils';\nimport {\n  optimizeImage,\n  generateResponsiveImages,\n  getImageMetadata,\n  generateBlurPlaceholder,\n  extractDominantColor,\n  lazyLoadImage,\n  loadProgressively,\n  type ImageOptimizationOptions,\n  type ImageMetadata\n} from '@/utils/imageOptimization';\nimport { Skeleton } from '@/components/ui/skeleton';\n\ninterface OptimizedImageProps extends Omit<React.ImgHTMLAttributes<HTMLImageElement>, 'src' | 'loading'> {\n  src: string;\n  alt: string;\n  width?: number;\n  height?: number;\n  quality?: number;\n  priority?: boolean;\n  placeholder?: 'blur' | 'empty' | 'skeleton';\n  blurDataURL?: string;\n  sizes?: string;\n  fill?: boolean;\n  objectFit?: 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';\n  objectPosition?: string;\n  loading?: 'lazy' | 'eager';\n  progressive?: boolean;\n  responsive?: boolean;\n  fallback?: string;\n  onLoad?: () => void;\n  onError?: () => void;\n  className?: string;\n  containerClassName?: string;\n  overlayClassName?: string;\n  showLoadingState?: boolean;\n  enableDominantColor?: boolean;\n  optimizationOptions?: ImageOptimizationOptions;\n}\n\ninterface ImageState {\n  isLoading: boolean;\n  isLoaded: boolean;\n  hasError: boolean;\n  metadata?: ImageMetadata;\n  dominantColor?: string;\n  blurDataURL?: string;\n}\n\nconst OptimizedImage = forwardRef<HTMLImageElement, OptimizedImageProps>((\n  {\n    src,\n    alt,\n    width,\n    height,\n    quality = 80,\n    priority = false,\n    placeholder = 'skeleton',\n    blurDataURL,\n    sizes,\n    fill = false,\n    objectFit = 'cover',\n    objectPosition = 'center',\n    loading = 'lazy',\n    progressive = false,\n    responsive = true,\n    fallback,\n    onLoad,\n    onError,\n    className,\n    containerClassName,\n    overlayClassName,\n    showLoadingState = true,\n    enableDominantColor = false,\n    optimizationOptions = {},\n    ...props\n  },\n  ref\n) => {\n  const [state, setState] = useState<ImageState>({\n    isLoading: true,\n    isLoaded: false,\n    hasError: false\n  });\n  \n  const imgRef = useRef<HTMLImageElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isInView, setIsInView] = useState(priority || loading === 'eager');\n\n  // Combine refs\n  const combinedRef = (node: HTMLImageElement) => {\n    imgRef.current = node;\n    if (typeof ref === 'function') {\n      ref(node);\n    } else if (ref) {\n      ref.current = node;\n    }\n  };\n\n  // Intersection Observer for lazy loading\n  useEffect(() => {\n    if (priority || loading === 'eager') return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setIsInView(true);\n          observer.disconnect();\n        }\n      },\n      {\n        rootMargin: '50px 0px',\n        threshold: 0.01\n      }\n    );\n\n    if (containerRef.current) {\n      observer.observe(containerRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, [priority, loading]);\n\n  // Load image metadata and enhancements\n  useEffect(() => {\n    if (!isInView) return;\n\n    const loadEnhancements = async () => {\n      try {\n        const metadata = await getImageMetadata(src);\n        const updates: Partial<ImageState> = { metadata };\n\n        if (enableDominantColor && !state.dominantColor) {\n          updates.dominantColor = await extractDominantColor(src);\n        }\n\n        if (placeholder === 'blur' && !blurDataURL && !state.blurDataURL) {\n          updates.blurDataURL = await generateBlurPlaceholder(src);\n        }\n\n        setState(prev => ({ ...prev, ...updates }));\n      } catch (error) {\n        console.warn('Failed to load image enhancements:', error);\n      }\n    };\n\n    loadEnhancements();\n  }, [isInView, src, placeholder, blurDataURL, enableDominantColor, state.dominantColor, state.blurDataURL]);\n\n  // Generate optimized image props\n  const getOptimizedProps = () => {\n    const options: ImageOptimizationOptions = {\n      quality,\n      width,\n      height,\n      priority,\n      ...optimizationOptions\n    };\n\n    if (responsive && !fill) {\n      const responsiveSet = generateResponsiveImages(src, options);\n      return {\n        src: responsiveSet.src,\n        srcSet: responsiveSet.srcSet,\n        sizes: sizes || responsiveSet.sizes\n      };\n    }\n\n    return {\n      src: optimizeImage(src, options)\n    };\n  };\n\n  // Handle image load\n  const handleLoad = () => {\n    setState(prev => ({ ...prev, isLoading: false, isLoaded: true }));\n    onLoad?.();\n  };\n\n  // Handle image error\n  const handleError = () => {\n    setState(prev => ({ ...prev, isLoading: false, hasError: true }));\n    onError?.();\n  };\n\n  // Progressive loading effect\n  useEffect(() => {\n    if (progressive && imgRef.current && isInView && !state.isLoaded) {\n      loadProgressively(imgRef.current, src, {\n        quality,\n        width,\n        height,\n        ...optimizationOptions\n      });\n    }\n  }, [progressive, isInView, src, quality, width, height, optimizationOptions, state.isLoaded]);\n\n  // Render placeholder\n  const renderPlaceholder = () => {\n    if (placeholder === 'empty') return null;\n\n    if (placeholder === 'skeleton') {\n      return (\n        <Skeleton \n          className={cn(\n            'absolute inset-0 rounded-md',\n            !state.isLoaded && 'animate-pulse'\n          )}\n          style={{\n            backgroundColor: state.dominantColor || '#f3f4f6'\n          }}\n        />\n      );\n    }\n\n    if (placeholder === 'blur' && (blurDataURL || state.blurDataURL)) {\n      return (\n        <div\n          className=\"absolute inset-0 bg-cover bg-center filter blur-sm scale-110\"\n          style={{\n            backgroundImage: `url(${blurDataURL || state.blurDataURL})`,\n            backgroundColor: state.dominantColor || '#f3f4f6'\n          }}\n        />\n      );\n    }\n\n    return (\n      <div \n        className=\"absolute inset-0 bg-gray-200 animate-pulse\"\n        style={{\n          backgroundColor: state.dominantColor || '#f3f4f6'\n        }}\n      />\n    );\n  };\n\n  // Render error fallback\n  const renderError = () => {\n    if (fallback) {\n      return (\n        <img\n          src={fallback}\n          alt={alt}\n          className={cn('object-cover', className)}\n          {...props}\n        />\n      );\n    }\n\n    return (\n      <div className={cn(\n        'flex items-center justify-center bg-gray-100 text-gray-400',\n        className\n      )}>\n        <svg\n          className=\"w-8 h-8\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\n          />\n        </svg>\n      </div>\n    );\n  };\n\n  // Container styles\n  const containerStyle = {\n    backgroundColor: state.dominantColor || 'transparent'\n  };\n\n  if (state.hasError) {\n    return (\n      <div \n        ref={containerRef}\n        className={cn('relative overflow-hidden', containerClassName)}\n        style={fill ? { position: 'relative' } : { width, height }}\n      >\n        {renderError()}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        'relative overflow-hidden',\n        containerClassName\n      )}\n      style={fill ? { position: 'relative', ...containerStyle } : { width, height, ...containerStyle }}\n    >\n      {/* Placeholder */}\n      {(state.isLoading || !isInView) && showLoadingState && renderPlaceholder()}\n      \n      {/* Overlay */}\n      {overlayClassName && (\n        <div className={cn('absolute inset-0 z-10', overlayClassName)} />\n      )}\n\n      {/* Main image */}\n      {isInView && (\n        <Image\n          ref={combinedRef}\n          alt={alt}\n          fill={fill}\n          width={!fill ? width : undefined}\n          height={!fill ? height : undefined}\n          priority={priority}\n          quality={quality}\n          sizes={sizes}\n          placeholder={placeholder === 'blur' && (blurDataURL || state.blurDataURL) ? 'blur' : 'empty'}\n          blurDataURL={blurDataURL || state.blurDataURL}\n          onLoad={handleLoad}\n          onError={handleError}\n          className={cn(\n            'transition-opacity duration-300',\n            state.isLoaded ? 'opacity-100' : 'opacity-0',\n            fill && `object-${objectFit}`,\n            className\n          )}\n          style={{\n            objectPosition: fill ? objectPosition : undefined,\n            ...(!fill && { objectFit, objectPosition })\n          }}\n          {...getOptimizedProps()}\n          {...props}\n        />\n      )}\n\n      {/* Loading indicator */}\n      {state.isLoading && showLoadingState && (\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"w-6 h-6 border-2 border-gray-300 border-t-blue-600 rounded-full animate-spin\" />\n        </div>\n      )}\n    </div>\n  );\n});\n\nOptimizedImage.displayName = 'OptimizedImage';\n\n// Gallery component for multiple images\ninterface ImageGalleryProps {\n  images: Array<{\n    src: string;\n    alt: string;\n    caption?: string;\n  }>;\n  columns?: number;\n  gap?: number;\n  aspectRatio?: string;\n  className?: string;\n  imageProps?: Partial<OptimizedImageProps>;\n}\n\nexport function ImageGallery({\n  images,\n  columns = 3,\n  gap = 4,\n  aspectRatio = '1/1',\n  className,\n  imageProps = {}\n}: ImageGalleryProps) {\n  return (\n    <div \n      className={cn(\n        'grid auto-rows-fr',\n        className\n      )}\n      style={{\n        gridTemplateColumns: `repeat(${columns}, 1fr)`,\n        gap: `${gap * 0.25}rem`\n      }}\n    >\n      {images.map((image, index) => (\n        <div key={index} className=\"relative group\">\n          <OptimizedImage\n            src={image.src}\n            alt={image.alt}\n            fill\n            className=\"rounded-lg transition-transform group-hover:scale-105\"\n            containerClassName=\"relative overflow-hidden rounded-lg\"\n            style={{ aspectRatio }}\n            {...imageProps}\n          />\n          {image.caption && (\n            <div className=\"absolute bottom-0 left-0 right-0 bg-black/50 text-white p-2 text-sm\">\n              {image.caption}\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n\n// Avatar component with optimized images\ninterface OptimizedAvatarProps extends OptimizedImageProps {\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  fallbackText?: string;\n}\n\nexport function OptimizedAvatar({\n  size = 'md',\n  fallbackText,\n  className,\n  ...props\n}: OptimizedAvatarProps) {\n  const sizeClasses = {\n    sm: 'w-8 h-8',\n    md: 'w-12 h-12',\n    lg: 'w-16 h-16',\n    xl: 'w-24 h-24'\n  };\n\n  const sizePx = {\n    sm: 32,\n    md: 48,\n    lg: 64,\n    xl: 96\n  };\n\n  return (\n    <OptimizedImage\n      width={sizePx[size]}\n      height={sizePx[size]}\n      className={cn(\n        'rounded-full',\n        sizeClasses[size],\n        className\n      )}\n      objectFit=\"cover\"\n      fallback={fallbackText ? `data:image/svg+xml;base64,${btoa(\n        `<svg width=\"${sizePx[size]}\" height=\"${sizePx[size]}\" xmlns=\"http://www.w3.org/2000/svg\">\n          <rect width=\"100%\" height=\"100%\" fill=\"#f3f4f6\"/>\n          <text x=\"50%\" y=\"50%\" text-anchor=\"middle\" dy=\"0.3em\" font-family=\"Arial\" font-size=\"${sizePx[size] * 0.4}\" fill=\"#9ca3af\">\n            ${fallbackText.charAt(0).toUpperCase()}\n          </text>\n        </svg>`\n      )}` : undefined}\n      {...props}\n    />\n  );\n}\n\nexport default OptimizedImage;\nexport type { OptimizedImageProps, ImageGalleryProps, OptimizedAvatarProps };"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}