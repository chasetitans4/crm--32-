0ccadc2fcf85e7eb6944b9460e7cf404
"use strict";

/* istanbul ignore next */
function cov_18iwb0zfcp() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\email.ts";
  var hash = "401680cad92ff44df634049c2652a375465d8dd4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\email.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 24
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 28
        }
      },
      "6": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 19,
          column: 44
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 29
        }
      },
      "8": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "9": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 40
        }
      },
      "10": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 36
        }
      },
      "11": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 38,
          column: 15
        }
      },
      "12": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 29
        }
      },
      "13": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 35
        }
      },
      "14": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 37
        }
      },
      "15": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 75
        }
      },
      "16": {
        start: {
          line: 48,
          column: 22
        },
        end: {
          line: 48,
          column: 53
        }
      },
      "17": {
        start: {
          line: 50,
          column: 22
        },
        end: {
          line: 50,
          column: 47
        }
      },
      "18": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "19": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 32
        }
      },
      "20": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 40
        }
      },
      "21": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 54
        }
      },
      "22": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "23": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 62,
          column: 14
        }
      },
      "24": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "25": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 70,
          column: 14
        }
      },
      "26": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 75,
          column: 10
        }
      },
      "27": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "28": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 63
        }
      },
      "29": {
        start: {
          line: 81,
          column: 32
        },
        end: {
          line: 81,
          column: 120
        }
      },
      "30": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "31": {
        start: {
          line: 84,
          column: 33
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "32": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 94,
          column: 13
        }
      },
      "33": {
        start: {
          line: 93,
          column: 16
        },
        end: {
          line: 93,
          column: 67
        }
      },
      "34": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 105,
          column: 15
        }
      },
      "35": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 32
        }
      },
      "36": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 118,
          column: 10
        }
      },
      "37": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "38": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 63
        }
      },
      "39": {
        start: {
          line: 124,
          column: 39
        },
        end: {
          line: 129,
          column: 32
        }
      },
      "40": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "41": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 83
        }
      },
      "42": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "43": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 52
        }
      },
      "44": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "45": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 148,
          column: 13
        }
      },
      "46": {
        start: {
          line: 141,
          column: 20
        },
        end: {
          line: 141,
          column: 62
        }
      },
      "47": {
        start: {
          line: 143,
          column: 20
        },
        end: {
          line: 143,
          column: 62
        }
      },
      "48": {
        start: {
          line: 145,
          column: 20
        },
        end: {
          line: 145,
          column: 59
        }
      },
      "49": {
        start: {
          line: 147,
          column: 20
        },
        end: {
          line: 147,
          column: 66
        }
      },
      "50": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 25
        }
      },
      "51": {
        start: {
          line: 155,
          column: 25
        },
        end: {
          line: 159,
          column: 10
        }
      },
      "52": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 27
        }
      },
      "53": {
        start: {
          line: 163,
          column: 25
        },
        end: {
          line: 167,
          column: 10
        }
      },
      "54": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 27
        }
      },
      "55": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 20
        }
      },
      "56": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "57": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 59
        }
      },
      "58": {
        start: {
          line: 179,
          column: 27
        },
        end: {
          line: 179,
          column: 61
        }
      },
      "59": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "60": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 47
        }
      },
      "61": {
        start: {
          line: 183,
          column: 29
        },
        end: {
          line: 213,
          column: 9
        }
      },
      "62": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 257,
          column: 9
        }
      },
      "63": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 53
        }
      },
      "64": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 44
        }
      },
      "65": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 46
        }
      },
      "66": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 65
        }
      },
      "67": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 223,
          column: 13
        }
      },
      "68": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 222,
          column: 67
        }
      },
      "69": {
        start: {
          line: 224,
          column: 43
        },
        end: {
          line: 249,
          column: 14
        }
      },
      "70": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 252,
          column: 13
        }
      },
      "71": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 80
        }
      },
      "72": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 32
        }
      },
      "73": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 43
        }
      },
      "74": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 70
        }
      },
      "75": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "76": {
        start: {
          line: 262,
          column: 16
        },
        end: {
          line: 262,
          column: 51
        }
      },
      "77": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 263,
          column: 22
        }
      },
      "78": {
        start: {
          line: 265,
          column: 16
        },
        end: {
          line: 265,
          column: 51
        }
      },
      "79": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 266,
          column: 22
        }
      },
      "80": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 268,
          column: 48
        }
      },
      "81": {
        start: {
          line: 269,
          column: 16
        },
        end: {
          line: 269,
          column: 22
        }
      },
      "82": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 271,
          column: 62
        }
      },
      "83": {
        start: {
          line: 275,
          column: 22
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "84": {
        start: {
          line: 282,
          column: 49
        },
        end: {
          line: 284,
          column: 25
        }
      },
      "85": {
        start: {
          line: 285,
          column: 50
        },
        end: {
          line: 287,
          column: 25
        }
      },
      "86": {
        start: {
          line: 288,
          column: 52
        },
        end: {
          line: 290,
          column: 25
        }
      },
      "87": {
        start: {
          line: 297,
          column: 25
        },
        end: {
          line: 304,
          column: 10
        }
      },
      "88": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "89": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 73
        }
      },
      "90": {
        start: {
          line: 310,
          column: 22
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "91": {
        start: {
          line: 316,
          column: 51
        },
        end: {
          line: 320,
          column: 17
        }
      },
      "92": {
        start: {
          line: 321,
          column: 52
        },
        end: {
          line: 325,
          column: 17
        }
      },
      "93": {
        start: {
          line: 326,
          column: 54
        },
        end: {
          line: 330,
          column: 17
        }
      },
      "94": {
        start: {
          line: 333,
          column: 25
        },
        end: {
          line: 342,
          column: 10
        }
      },
      "95": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 345,
          column: 9
        }
      },
      "96": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 73
        }
      },
      "97": {
        start: {
          line: 352,
          column: 20
        },
        end: {
          line: 352,
          column: 30
        }
      },
      "98": {
        start: {
          line: 353,
          column: 25
        },
        end: {
          line: 353,
          column: 38
        }
      },
      "99": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 354,
          column: 49
        }
      },
      "100": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 355,
          column: 38
        }
      },
      "101": {
        start: {
          line: 356,
          column: 32
        },
        end: {
          line: 356,
          column: 66
        }
      },
      "102": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 360,
          column: 28
        }
      },
      "103": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 358,
          column: 30
        }
      },
      "104": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 359,
          column: 68
        }
      },
      "105": {
        start: {
          line: 359,
          column: 28
        },
        end: {
          line: 359,
          column: 45
        }
      },
      "106": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 369,
          column: 9
        }
      },
      "107": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 365,
          column: 42
        }
      },
      "108": {
        start: {
          line: 372,
          column: 23
        },
        end: {
          line: 372,
          column: 33
        }
      },
      "109": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 373,
          column: 47
        }
      },
      "110": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 374,
          column: 96
        }
      },
      "111": {
        start: {
          line: 378,
          column: 28
        },
        end: {
          line: 384,
          column: 9
        }
      },
      "112": {
        start: {
          line: 385,
          column: 26
        },
        end: {
          line: 398,
          column: 10
        }
      },
      "113": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 401,
          column: 9
        }
      },
      "114": {
        start: {
          line: 400,
          column: 12
        },
        end: {
          line: 400,
          column: 75
        }
      },
      "115": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 402,
          column: 27
        }
      },
      "116": {
        start: {
          line: 405,
          column: 20
        },
        end: {
          line: 405,
          column: 110
        }
      },
      "117": {
        start: {
          line: 406,
          column: 8
        },
        end: {
          line: 408,
          column: 9
        }
      },
      "118": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 407,
          column: 51
        }
      },
      "119": {
        start: {
          line: 409,
          column: 32
        },
        end: {
          line: 409,
          column: 43
        }
      },
      "120": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 412,
          column: 9
        }
      },
      "121": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 411,
          column: 73
        }
      },
      "122": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 426,
          column: 16
        }
      },
      "123": {
        start: {
          line: 413,
          column: 45
        },
        end: {
          line: 426,
          column: 13
        }
      },
      "124": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 432,
          column: 9
        }
      },
      "125": {
        start: {
          line: 431,
          column: 12
        },
        end: {
          line: 431,
          column: 45
        }
      },
      "126": {
        start: {
          line: 433,
          column: 8
        },
        end: {
          line: 435,
          column: 26
        }
      },
      "127": {
        start: {
          line: 434,
          column: 12
        },
        end: {
          line: 434,
          column: 30
        }
      },
      "128": {
        start: {
          line: 438,
          column: 8
        },
        end: {
          line: 438,
          column: 38
        }
      },
      "129": {
        start: {
          line: 438,
          column: 31
        },
        end: {
          line: 438,
          column: 38
        }
      },
      "130": {
        start: {
          line: 439,
          column: 8
        },
        end: {
          line: 447,
          column: 9
        }
      },
      "131": {
        start: {
          line: 440,
          column: 12
        },
        end: {
          line: 444,
          column: 13
        }
      },
      "132": {
        start: {
          line: 442,
          column: 20
        },
        end: {
          line: 442,
          column: 51
        }
      },
      "133": {
        start: {
          line: 443,
          column: 20
        },
        end: {
          line: 443,
          column: 26
        }
      },
      "134": {
        start: {
          line: 454,
          column: 20
        },
        end: {
          line: 454,
          column: 89
        }
      },
      "135": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 457,
          column: 9
        }
      },
      "136": {
        start: {
          line: 456,
          column: 12
        },
        end: {
          line: 456,
          column: 122
        }
      },
      "137": {
        start: {
          line: 458,
          column: 32
        },
        end: {
          line: 458,
          column: 43
        }
      },
      "138": {
        start: {
          line: 459,
          column: 8
        },
        end: {
          line: 461,
          column: 9
        }
      },
      "139": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 460,
          column: 73
        }
      },
      "140": {
        start: {
          line: 462,
          column: 23
        },
        end: {
          line: 462,
          column: 33
        }
      },
      "141": {
        start: {
          line: 463,
          column: 21
        },
        end: {
          line: 463,
          column: 67
        }
      },
      "142": {
        start: {
          line: 463,
          column: 40
        },
        end: {
          line: 463,
          column: 59
        }
      },
      "143": {
        start: {
          line: 464,
          column: 23
        },
        end: {
          line: 464,
          column: 59
        }
      },
      "144": {
        start: {
          line: 464,
          column: 42
        },
        end: {
          line: 464,
          column: 51
        }
      },
      "145": {
        start: {
          line: 465,
          column: 24
        },
        end: {
          line: 465,
          column: 70
        }
      },
      "146": {
        start: {
          line: 465,
          column: 43
        },
        end: {
          line: 465,
          column: 62
        }
      },
      "147": {
        start: {
          line: 466,
          column: 24
        },
        end: {
          line: 466,
          column: 70
        }
      },
      "148": {
        start: {
          line: 466,
          column: 43
        },
        end: {
          line: 466,
          column: 62
        }
      },
      "149": {
        start: {
          line: 467,
          column: 24
        },
        end: {
          line: 467,
          column: 72
        }
      },
      "150": {
        start: {
          line: 467,
          column: 43
        },
        end: {
          line: 467,
          column: 64
        }
      },
      "151": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 480,
          column: 10
        }
      },
      "152": {
        start: {
          line: 484,
          column: 22
        },
        end: {
          line: 484,
          column: 53
        }
      },
      "153": {
        start: {
          line: 485,
          column: 8
        },
        end: {
          line: 501,
          column: 10
        }
      },
      "154": {
        start: {
          line: 505,
          column: 8
        },
        end: {
          line: 507,
          column: 9
        }
      },
      "155": {
        start: {
          line: 506,
          column: 12
        },
        end: {
          line: 506,
          column: 45
        }
      },
      "156": {
        start: {
          line: 510,
          column: 8
        },
        end: {
          line: 510,
          column: 27
        }
      },
      "157": {
        start: {
          line: 511,
          column: 8
        },
        end: {
          line: 511,
          column: 33
        }
      },
      "158": {
        start: {
          line: 512,
          column: 8
        },
        end: {
          line: 512,
          column: 33
        }
      },
      "159": {
        start: {
          line: 514,
          column: 8
        },
        end: {
          line: 519,
          column: 10
        }
      },
      "160": {
        start: {
          line: 522,
          column: 21
        },
        end: {
          line: 522,
          column: 39
        }
      },
      "161": {
        start: {
          line: 523,
          column: 17
        },
        end: {
          line: 523,
          column: 29
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 19
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 24
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 28
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 22
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 34
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 47
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        loc: {
          start: {
            line: 77,
            column: 31
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 77
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 41
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 120
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 27
          },
          end: {
            line: 153,
            column: 5
          }
        },
        line: 134
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 154,
            column: 4
          },
          end: {
            line: 154,
            column: 5
          }
        },
        loc: {
          start: {
            line: 154,
            column: 34
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 154
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 162,
            column: 4
          },
          end: {
            line: 162,
            column: 5
          }
        },
        loc: {
          start: {
            line: 162,
            column: 34
          },
          end: {
            line: 169,
            column: 5
          }
        },
        line: 162
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 170,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        },
        loc: {
          start: {
            line: 170,
            column: 31
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 170
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 174,
            column: 5
          }
        },
        loc: {
          start: {
            line: 174,
            column: 37
          },
          end: {
            line: 258,
            column: 5
          }
        },
        line: 174
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 259,
            column: 4
          },
          end: {
            line: 259,
            column: 5
          }
        },
        loc: {
          start: {
            line: 259,
            column: 35
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 259
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 274,
            column: 5
          }
        },
        loc: {
          start: {
            line: 274,
            column: 34
          },
          end: {
            line: 308,
            column: 5
          }
        },
        line: 274
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 282,
            column: 39
          },
          end: {
            line: 282,
            column: 40
          }
        },
        loc: {
          start: {
            line: 282,
            column: 49
          },
          end: {
            line: 284,
            column: 25
          }
        },
        line: 282
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 285,
            column: 40
          },
          end: {
            line: 285,
            column: 41
          }
        },
        loc: {
          start: {
            line: 285,
            column: 50
          },
          end: {
            line: 287,
            column: 25
          }
        },
        line: 285
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 288,
            column: 42
          },
          end: {
            line: 288,
            column: 43
          }
        },
        loc: {
          start: {
            line: 288,
            column: 52
          },
          end: {
            line: 290,
            column: 25
          }
        },
        line: 288
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 309,
            column: 4
          },
          end: {
            line: 309,
            column: 5
          }
        },
        loc: {
          start: {
            line: 309,
            column: 34
          },
          end: {
            line: 346,
            column: 5
          }
        },
        line: 309
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 316,
            column: 41
          },
          end: {
            line: 316,
            column: 42
          }
        },
        loc: {
          start: {
            line: 316,
            column: 51
          },
          end: {
            line: 320,
            column: 17
          }
        },
        line: 316
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 321,
            column: 42
          },
          end: {
            line: 321,
            column: 43
          }
        },
        loc: {
          start: {
            line: 321,
            column: 52
          },
          end: {
            line: 325,
            column: 17
          }
        },
        line: 321
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 326,
            column: 44
          },
          end: {
            line: 326,
            column: 45
          }
        },
        loc: {
          start: {
            line: 326,
            column: 54
          },
          end: {
            line: 330,
            column: 17
          }
        },
        line: 326
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 347,
            column: 4
          },
          end: {
            line: 347,
            column: 5
          }
        },
        loc: {
          start: {
            line: 347,
            column: 31
          },
          end: {
            line: 349,
            column: 5
          }
        },
        line: 347
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 351,
            column: 5
          }
        },
        loc: {
          start: {
            line: 351,
            column: 22
          },
          end: {
            line: 361,
            column: 5
          }
        },
        line: 351
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 357,
            column: 19
          },
          end: {
            line: 357,
            column: 20
          }
        },
        loc: {
          start: {
            line: 357,
            column: 23
          },
          end: {
            line: 360,
            column: 9
          }
        },
        line: 357
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 359,
            column: 24
          },
          end: {
            line: 359,
            column: 25
          }
        },
        loc: {
          start: {
            line: 359,
            column: 28
          },
          end: {
            line: 359,
            column: 45
          }
        },
        line: 359
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 362,
            column: 4
          },
          end: {
            line: 362,
            column: 5
          }
        },
        loc: {
          start: {
            line: 362,
            column: 23
          },
          end: {
            line: 370,
            column: 5
          }
        },
        line: 362
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 371,
            column: 4
          },
          end: {
            line: 371,
            column: 5
          }
        },
        loc: {
          start: {
            line: 371,
            column: 29
          },
          end: {
            line: 375,
            column: 5
          }
        },
        line: 371
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 377,
            column: 4
          },
          end: {
            line: 377,
            column: 5
          }
        },
        loc: {
          start: {
            line: 377,
            column: 35
          },
          end: {
            line: 403,
            column: 5
          }
        },
        line: 377
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 404,
            column: 4
          },
          end: {
            line: 404,
            column: 5
          }
        },
        loc: {
          start: {
            line: 404,
            column: 33
          },
          end: {
            line: 427,
            column: 5
          }
        },
        line: 404
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 413,
            column: 32
          },
          end: {
            line: 413,
            column: 33
          }
        },
        loc: {
          start: {
            line: 413,
            column: 45
          },
          end: {
            line: 426,
            column: 13
          }
        },
        line: 413
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 429,
            column: 4
          },
          end: {
            line: 429,
            column: 5
          }
        },
        loc: {
          start: {
            line: 429,
            column: 16
          },
          end: {
            line: 436,
            column: 5
          }
        },
        line: 429
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 433,
            column: 40
          },
          end: {
            line: 433,
            column: 41
          }
        },
        loc: {
          start: {
            line: 433,
            column: 44
          },
          end: {
            line: 435,
            column: 9
          }
        },
        line: 433
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 437,
            column: 4
          },
          end: {
            line: 437,
            column: 5
          }
        },
        loc: {
          start: {
            line: 437,
            column: 23
          },
          end: {
            line: 448,
            column: 5
          }
        },
        line: 437
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 449,
            column: 4
          },
          end: {
            line: 449,
            column: 5
          }
        },
        loc: {
          start: {
            line: 449,
            column: 30
          },
          end: {
            line: 451,
            column: 5
          }
        },
        line: 449
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 453,
            column: 4
          },
          end: {
            line: 453,
            column: 5
          }
        },
        loc: {
          start: {
            line: 453,
            column: 34
          },
          end: {
            line: 481,
            column: 5
          }
        },
        line: 453
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 463,
            column: 35
          },
          end: {
            line: 463,
            column: 36
          }
        },
        loc: {
          start: {
            line: 463,
            column: 40
          },
          end: {
            line: 463,
            column: 59
          }
        },
        line: 463
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 464,
            column: 37
          },
          end: {
            line: 464,
            column: 38
          }
        },
        loc: {
          start: {
            line: 464,
            column: 42
          },
          end: {
            line: 464,
            column: 51
          }
        },
        line: 464
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 465,
            column: 38
          },
          end: {
            line: 465,
            column: 39
          }
        },
        loc: {
          start: {
            line: 465,
            column: 43
          },
          end: {
            line: 465,
            column: 62
          }
        },
        line: 465
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 466,
            column: 38
          },
          end: {
            line: 466,
            column: 39
          }
        },
        loc: {
          start: {
            line: 466,
            column: 43
          },
          end: {
            line: 466,
            column: 62
          }
        },
        line: 466
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 467,
            column: 38
          },
          end: {
            line: 467,
            column: 39
          }
        },
        loc: {
          start: {
            line: 467,
            column: 43
          },
          end: {
            line: 467,
            column: 64
          }
        },
        line: 467
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 483,
            column: 4
          },
          end: {
            line: 483,
            column: 5
          }
        },
        loc: {
          start: {
            line: 483,
            column: 33
          },
          end: {
            line: 502,
            column: 5
          }
        },
        line: 483
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 504,
            column: 4
          },
          end: {
            line: 504,
            column: 5
          }
        },
        loc: {
          start: {
            line: 504,
            column: 14
          },
          end: {
            line: 508,
            column: 5
          }
        },
        line: 504
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 509,
            column: 4
          },
          end: {
            line: 509,
            column: 5
          }
        },
        loc: {
          start: {
            line: 509,
            column: 17
          },
          end: {
            line: 520,
            column: 5
          }
        },
        line: 509
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "1": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "2": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "3": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "4": {
        loc: {
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "5": {
        loc: {
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 82,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 82,
            column: 17
          }
        }, {
          start: {
            line: 82,
            column: 21
          },
          end: {
            line: 82,
            column: 26
          }
        }],
        line: 82
      },
      "6": {
        loc: {
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "7": {
        loc: {
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "8": {
        loc: {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "9": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "10": {
        loc: {
          start: {
            line: 139,
            column: 12
          },
          end: {
            line: 148,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 140,
            column: 16
          },
          end: {
            line: 141,
            column: 62
          }
        }, {
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 143,
            column: 62
          }
        }, {
          start: {
            line: 144,
            column: 16
          },
          end: {
            line: 145,
            column: 59
          }
        }, {
          start: {
            line: 146,
            column: 16
          },
          end: {
            line: 147,
            column: 66
          }
        }],
        line: 139
      },
      "11": {
        loc: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "12": {
        loc: {
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "13": {
        loc: {
          start: {
            line: 185,
            column: 18
          },
          end: {
            line: 185,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 18
          },
          end: {
            line: 185,
            column: 39
          }
        }, {
          start: {
            line: 185,
            column: 43
          },
          end: {
            line: 185,
            column: 45
          }
        }],
        line: 185
      },
      "14": {
        loc: {
          start: {
            line: 186,
            column: 16
          },
          end: {
            line: 186,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 186,
            column: 16
          },
          end: {
            line: 186,
            column: 26
          }
        }, {
          start: {
            line: 186,
            column: 30
          },
          end: {
            line: 186,
            column: 32
          }
        }],
        line: 186
      },
      "15": {
        loc: {
          start: {
            line: 189,
            column: 21
          },
          end: {
            line: 189,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 21
          },
          end: {
            line: 189,
            column: 36
          }
        }, {
          start: {
            line: 189,
            column: 40
          },
          end: {
            line: 189,
            column: 42
          }
        }],
        line: 189
      },
      "16": {
        loc: {
          start: {
            line: 190,
            column: 18
          },
          end: {
            line: 190,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 190,
            column: 18
          },
          end: {
            line: 190,
            column: 30
          }
        }, {
          start: {
            line: 190,
            column: 34
          },
          end: {
            line: 190,
            column: 36
          }
        }],
        line: 190
      },
      "17": {
        loc: {
          start: {
            line: 191,
            column: 22
          },
          end: {
            line: 191,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 22
          },
          end: {
            line: 191,
            column: 38
          }
        }, {
          start: {
            line: 191,
            column: 42
          },
          end: {
            line: 191,
            column: 48
          }
        }],
        line: 191
      },
      "18": {
        loc: {
          start: {
            line: 193,
            column: 22
          },
          end: {
            line: 193,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 193,
            column: 22
          },
          end: {
            line: 193,
            column: 38
          }
        }, {
          start: {
            line: 193,
            column: 42
          },
          end: {
            line: 193,
            column: 50
          }
        }],
        line: 193
      },
      "19": {
        loc: {
          start: {
            line: 202,
            column: 20
          },
          end: {
            line: 202,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 202,
            column: 20
          },
          end: {
            line: 202,
            column: 34
          }
        }, {
          start: {
            line: 202,
            column: 38
          },
          end: {
            line: 202,
            column: 40
          }
        }],
        line: 202
      },
      "20": {
        loc: {
          start: {
            line: 221,
            column: 12
          },
          end: {
            line: 223,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 12
          },
          end: {
            line: 223,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "21": {
        loc: {
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 250
      },
      "22": {
        loc: {
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 261,
            column: 12
          },
          end: {
            line: 263,
            column: 22
          }
        }, {
          start: {
            line: 264,
            column: 12
          },
          end: {
            line: 266,
            column: 22
          }
        }, {
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 269,
            column: 22
          }
        }, {
          start: {
            line: 270,
            column: 12
          },
          end: {
            line: 271,
            column: 62
          }
        }],
        line: 260
      },
      "23": {
        loc: {
          start: {
            line: 279,
            column: 31
          },
          end: {
            line: 279,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 279,
            column: 31
          },
          end: {
            line: 279,
            column: 52
          }
        }, {
          start: {
            line: 279,
            column: 56
          },
          end: {
            line: 279,
            column: 58
          }
        }],
        line: 279
      },
      "24": {
        loc: {
          start: {
            line: 285,
            column: 24
          },
          end: {
            line: 287,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 285,
            column: 24
          },
          end: {
            line: 287,
            column: 27
          }
        }, {
          start: {
            line: 287,
            column: 31
          },
          end: {
            line: 287,
            column: 33
          }
        }],
        line: 285
      },
      "25": {
        loc: {
          start: {
            line: 288,
            column: 25
          },
          end: {
            line: 290,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 288,
            column: 25
          },
          end: {
            line: 290,
            column: 27
          }
        }, {
          start: {
            line: 290,
            column: 31
          },
          end: {
            line: 290,
            column: 33
          }
        }],
        line: 288
      },
      "26": {
        loc: {
          start: {
            line: 292,
            column: 30
          },
          end: {
            line: 292,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 292,
            column: 60
          },
          end: {
            line: 292,
            column: 72
          }
        }, {
          start: {
            line: 292,
            column: 75
          },
          end: {
            line: 292,
            column: 84
          }
        }],
        line: 292
      },
      "27": {
        loc: {
          start: {
            line: 293,
            column: 30
          },
          end: {
            line: 293,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 293,
            column: 60
          },
          end: {
            line: 293,
            column: 72
          }
        }, {
          start: {
            line: 293,
            column: 75
          },
          end: {
            line: 293,
            column: 84
          }
        }],
        line: 293
      },
      "28": {
        loc: {
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 305
      },
      "29": {
        loc: {
          start: {
            line: 313,
            column: 29
          },
          end: {
            line: 313,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 313,
            column: 59
          },
          end: {
            line: 313,
            column: 65
          }
        }, {
          start: {
            line: 313,
            column: 68
          },
          end: {
            line: 313,
            column: 74
          }
        }],
        line: 313
      },
      "30": {
        loc: {
          start: {
            line: 321,
            column: 26
          },
          end: {
            line: 325,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 321,
            column: 26
          },
          end: {
            line: 325,
            column: 19
          }
        }, {
          start: {
            line: 325,
            column: 23
          },
          end: {
            line: 325,
            column: 25
          }
        }],
        line: 321
      },
      "31": {
        loc: {
          start: {
            line: 326,
            column: 27
          },
          end: {
            line: 330,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 326,
            column: 27
          },
          end: {
            line: 330,
            column: 19
          }
        }, {
          start: {
            line: 330,
            column: 23
          },
          end: {
            line: 330,
            column: 25
          }
        }],
        line: 326
      },
      "32": {
        loc: {
          start: {
            line: 331,
            column: 24
          },
          end: {
            line: 331,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 331,
            column: 54
          },
          end: {
            line: 331,
            column: 60
          }
        }, {
          start: {
            line: 331,
            column: 63
          },
          end: {
            line: 331,
            column: 108
          }
        }],
        line: 331
      },
      "33": {
        loc: {
          start: {
            line: 331,
            column: 63
          },
          end: {
            line: 331,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 331,
            column: 92
          },
          end: {
            line: 331,
            column: 97
          }
        }, {
          start: {
            line: 331,
            column: 100
          },
          end: {
            line: 331,
            column: 108
          }
        }],
        line: 331
      },
      "34": {
        loc: {
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "35": {
        loc: {
          start: {
            line: 399,
            column: 8
          },
          end: {
            line: 401,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 399,
            column: 8
          },
          end: {
            line: 401,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 399
      },
      "36": {
        loc: {
          start: {
            line: 406,
            column: 8
          },
          end: {
            line: 408,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 406,
            column: 8
          },
          end: {
            line: 408,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 406
      },
      "37": {
        loc: {
          start: {
            line: 410,
            column: 8
          },
          end: {
            line: 412,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 410,
            column: 8
          },
          end: {
            line: 412,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 410
      },
      "38": {
        loc: {
          start: {
            line: 413,
            column: 16
          },
          end: {
            line: 413,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 413,
            column: 16
          },
          end: {
            line: 413,
            column: 20
          }
        }, {
          start: {
            line: 413,
            column: 24
          },
          end: {
            line: 413,
            column: 26
          }
        }],
        line: 413
      },
      "39": {
        loc: {
          start: {
            line: 420,
            column: 27
          },
          end: {
            line: 420,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 420,
            column: 27
          },
          end: {
            line: 420,
            column: 45
          }
        }, {
          start: {
            line: 420,
            column: 49
          },
          end: {
            line: 420,
            column: 51
          }
        }],
        line: 420
      },
      "40": {
        loc: {
          start: {
            line: 430,
            column: 8
          },
          end: {
            line: 432,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 430,
            column: 8
          },
          end: {
            line: 432,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 430
      },
      "41": {
        loc: {
          start: {
            line: 438,
            column: 8
          },
          end: {
            line: 438,
            column: 38
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 438,
            column: 8
          },
          end: {
            line: 438,
            column: 38
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 438
      },
      "42": {
        loc: {
          start: {
            line: 440,
            column: 12
          },
          end: {
            line: 444,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 441,
            column: 16
          },
          end: {
            line: 443,
            column: 26
          }
        }],
        line: 440
      },
      "43": {
        loc: {
          start: {
            line: 455,
            column: 8
          },
          end: {
            line: 457,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 455,
            column: 8
          },
          end: {
            line: 457,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 455
      },
      "44": {
        loc: {
          start: {
            line: 459,
            column: 8
          },
          end: {
            line: 461,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 459,
            column: 8
          },
          end: {
            line: 461,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 459
      },
      "45": {
        loc: {
          start: {
            line: 462,
            column: 23
          },
          end: {
            line: 462,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 462,
            column: 23
          },
          end: {
            line: 462,
            column: 27
          }
        }, {
          start: {
            line: 462,
            column: 31
          },
          end: {
            line: 462,
            column: 33
          }
        }],
        line: 462
      },
      "46": {
        loc: {
          start: {
            line: 476,
            column: 22
          },
          end: {
            line: 476,
            column: 56
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 476,
            column: 33
          },
          end: {
            line: 476,
            column: 52
          }
        }, {
          start: {
            line: 476,
            column: 55
          },
          end: {
            line: 476,
            column: 56
          }
        }],
        line: 476
      },
      "47": {
        loc: {
          start: {
            line: 477,
            column: 23
          },
          end: {
            line: 477,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 477,
            column: 36
          },
          end: {
            line: 477,
            column: 58
          }
        }, {
          start: {
            line: 477,
            column: 61
          },
          end: {
            line: 477,
            column: 62
          }
        }],
        line: 477
      },
      "48": {
        loc: {
          start: {
            line: 478,
            column: 23
          },
          end: {
            line: 478,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 478,
            column: 34
          },
          end: {
            line: 478,
            column: 54
          }
        }, {
          start: {
            line: 478,
            column: 57
          },
          end: {
            line: 478,
            column: 58
          }
        }],
        line: 478
      },
      "49": {
        loc: {
          start: {
            line: 479,
            column: 24
          },
          end: {
            line: 479,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 479,
            column: 35
          },
          end: {
            line: 479,
            column: 55
          }
        }, {
          start: {
            line: 479,
            column: 58
          },
          end: {
            line: 479,
            column: 59
          }
        }],
        line: 479
      },
      "50": {
        loc: {
          start: {
            line: 505,
            column: 8
          },
          end: {
            line: 507,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 505,
            column: 8
          },
          end: {
            line: 507,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 505
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0, 0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\email.ts"],
      sourcesContent: ["import { supabase } from \"../lib/supabase\"\nimport type { Database } from \"../lib/supabase\"\n\ntype EmailQuotaRow = Database[\"public\"][\"Tables\"][\"email_quotas\"][\"Row\"]\ntype EmailRow = Database[\"public\"][\"Tables\"][\"emails\"][\"Row\"]\n\nexport interface EmailConfig {\n  provider: \"mailjet\" | \"outlook\" | \"smtp\"\n  smtpHost?: string\n  smtpPort?: number\n  smtpSecure?: boolean\n  username: string\n  password?: string\n  accessToken?: string\n  refreshToken?: string\n  clientId?: string\n  clientSecret?: string\n}\n\nexport interface EmailMessage {\n  id: string\n  from: string\n  to: string[]\n  cc?: string[]\n  bcc?: string[]\n  subject: string\n  body: string\n  bodyType: \"text\" | \"html\"\n  attachments?: EmailAttachment[]\n  priority: \"low\" | \"normal\" | \"high\"\n  readReceipt?: boolean\n  deliveryReceipt?: boolean\n  scheduledAt?: string\n  sentAt?: string\n  status: \"draft\" | \"scheduled\" | \"sent\" | \"failed\" | \"delivered\" | \"read\"\n  threadId?: string\n  inReplyTo?: string\n  references?: string[]\n  labels?: string[]\n  folder: string\n  isRead: boolean\n  isStarred: boolean\n  isImportant: boolean\n  clientId?: string\n  projectId?: string\n  taskId?: string\n  metadata?: Record<string, any>\n  created_at: string\n  updated_at: string\n}\n\nexport interface EmailAttachment {\n  id: string\n  filename: string\n  contentType: string\n  size: number\n  data?: string // base64 encoded\n  url?: string\n  cid?: string // for inline attachments\n}\n\nexport interface EmailTemplate {\n  id: string\n  name: string\n  subject: string\n  body: string\n  bodyType: \"text\" | \"html\"\n  category: string\n  variables: string[]\n  isActive: boolean\n  usage_count: number\n  created_by: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface EmailQuota {\n  userId: string\n  dailyLimit: number\n  monthlyLimit: number\n  dailySent: number\n  monthlySent: number\n  lastResetDate: string\n  attachmentSizeLimit: number // in MB\n  storageUsed: number // in MB\n  storageLimit: number // in MB\n}\n\nexport interface EmailAnalytics {\n  sent: number\n  received: number\n  opened: number\n  clicked: number\n  replied: number\n  bounced: number\n  unsubscribed: number\n  openRate: number\n  clickRate: number\n  replyRate: number\n  bounceRate: number\n}\n\nclass EmailService {\n  private config: EmailConfig | null = null\n  private isConnected = false\n  private syncInterval: NodeJS.Timeout | null = null\n\n  // Email quotas - moderate limits\n  private readonly DEFAULT_QUOTAS = {\n    dailyLimit: 100,\n    monthlyLimit: 2000,\n    attachmentSizeLimit: 10, // 10MB per attachment\n    storageLimit: 500, // 500MB total storage per user\n  }\n\n  // Configuration\n  async configure(config: EmailConfig): Promise<void> {\n    this.config = config\n\n    try {\n      await this.testConnection()\n      this.isConnected = true\n\n      // Save configuration\n      await (supabase as any).from(\"email_configs\").upsert({\n        provider: config.provider,\n        username: config.username,\n        smtp_host: config.smtpHost,\n        smtp_port: config.smtpPort,\n        smtp_secure: config.smtpSecure,\n        access_token: config.accessToken,\n        refresh_token: config.refreshToken,\n        client_id: config.clientId,\n        updated_at: new Date().toISOString(),\n      } as any)\n\n      this.startSync()\n      this.startCleanupJob()\n    } catch (error: any) {\n      this.isConnected = false\n      throw new Error(`Failed to configure email: ${error.message}`)\n    }\n  }\n\n  // Quota Management\n  async checkEmailQuota(userId: string): Promise<{ canSend: boolean; reason?: string; quota: EmailQuota }> {\n    const quota = await this.getUserQuota(userId)\n\n    // Reset daily counter if needed\n    const today = new Date().toDateString()\n    if (quota.lastResetDate !== today) {\n      quota.dailySent = 0\n      quota.lastResetDate = today\n      await this.updateUserQuota(userId, quota)\n    }\n\n    // Check daily limit\n    if (quota.dailySent >= quota.dailyLimit) {\n      return {\n        canSend: false,\n        reason: `Daily email limit reached (${quota.dailyLimit}). Resets tomorrow.`,\n        quota,\n      }\n    }\n\n    // Check monthly limit\n    if (quota.monthlySent >= quota.monthlyLimit) {\n      return {\n        canSend: false,\n        reason: `Monthly email limit reached (${quota.monthlyLimit}). Resets next month.`,\n        quota,\n      }\n    }\n\n    return { canSend: true, quota }\n  }\n\n  async getUserQuota(userId: string): Promise<EmailQuota> {\n    if (!supabase) {\n      throw new Error(\"Supabase client not initialized\")\n    }\n    const { data, error } = await (supabase as any).from(\"email_quotas\").select(\"*\").eq(\"user_id\", userId).single() as { data: EmailQuotaRow | null, error: any }\n\n    if (error || !data) {\n      // Create default quota for new user\n      const defaultQuota: EmailQuota = {\n        userId,\n        ...this.DEFAULT_QUOTAS,\n        dailySent: 0,\n        monthlySent: 0,\n        lastResetDate: new Date().toDateString(),\n        storageUsed: 0,\n      }\n\n      if (!supabase) {\n        throw new Error(\"Supabase client not initialized\")\n      }\n      await (supabase as any).from(\"email_quotas\").insert({\n        user_id: userId,\n        daily_limit: defaultQuota.dailyLimit,\n        monthly_limit: defaultQuota.monthlyLimit,\n        daily_sent: defaultQuota.dailySent,\n        monthly_sent: defaultQuota.monthlySent,\n        last_reset_date: defaultQuota.lastResetDate,\n        attachment_size_limit: defaultQuota.attachmentSizeLimit,\n        storage_used: defaultQuota.storageUsed,\n        storage_limit: defaultQuota.storageLimit,\n      } as any)\n\n      return defaultQuota\n    }\n\n    return {\n      userId: data.user_id,\n      dailyLimit: data.daily_limit,\n      monthlyLimit: data.monthly_limit,\n      dailySent: data.daily_sent,\n      monthlySent: data.monthly_sent,\n      lastResetDate: data.last_reset_date,\n      attachmentSizeLimit: data.attachment_size_limit,\n      storageUsed: data.storage_used,\n      storageLimit: data.storage_limit,\n    }\n  }\n\n  async updateUserQuota(userId: string, quota: EmailQuota): Promise<void> {\n    if (!supabase) {\n      throw new Error(\"Supabase client not initialized\")\n    }\n    const { error: updateError } = await (supabase as any)\n      .from(\"email_quotas\")\n      .update({\n        daily_sent: quota.dailySent,\n        monthly_sent: quota.monthlySent,\n        last_reset_date: quota.lastResetDate,\n        storage_used: quota.storageUsed,\n      } as any)\n      .eq(\"user_id\", userId)\n\n    if (updateError) {\n      throw new Error(`Failed to update user quota: ${updateError.message}`)\n    }\n  }\n\n  async testConnection(): Promise<boolean> {\n    if (!this.config) {\n      throw new Error(\"Email not configured\")\n    }\n\n    try {\n      switch (this.config.provider) {\n        case \"mailjet\":\n          return await this.testMailjetConnection()\n        case \"outlook\":\n          return await this.testOutlookConnection()\n        case \"smtp\":\n          return await this.testSmtpConnection()\n        default:\n          throw new Error(\"Unsupported email provider\")\n      }\n    } catch (error) {\n      // Silent error handling - Email connection test failed\n      return false\n    }\n  }\n\n  private async testMailjetConnection(): Promise<boolean> {\n    const response = await fetch(\"https://api.mailjet.com/v3/REST/contact\", {\n      headers: {\n        Authorization: `Basic ${btoa(`${this.config?.clientId}:${this.config?.clientSecret}`)}`,\n      },\n    })\n    return response.ok\n  }\n\n  private async testOutlookConnection(): Promise<boolean> {\n    const response = await fetch(\"https://graph.microsoft.com/v1.0/me\", {\n      headers: {\n        Authorization: `Bearer ${this.config?.accessToken}`,\n      },\n    })\n    return response.ok\n  }\n\n  private async testSmtpConnection(): Promise<boolean> {\n    return true\n  }\n\n  // Email Operations with Quota Checks\n  async sendEmail(message: Partial<EmailMessage>, userId: string): Promise<EmailMessage> {\n    if (!this.isConnected) {\n      throw new Error(\"Email service not connected\")\n    }\n\n    // Check quota\n    const quotaCheck = await this.checkEmailQuota(userId)\n    if (!quotaCheck.canSend) {\n      throw new Error(quotaCheck.reason)\n    }\n\n    const emailMessage: EmailMessage = {\n      id: crypto.randomUUID(),\n      from: this.config?.username || \"\",\n      to: message.to || [],\n      cc: message.cc,\n      bcc: message.bcc,\n      subject: message.subject || \"\",\n      body: message.body || \"\",\n      bodyType: message.bodyType || \"html\",\n      attachments: message.attachments,\n      priority: message.priority || \"normal\",\n      readReceipt: message.readReceipt,\n      deliveryReceipt: message.deliveryReceipt,\n      scheduledAt: message.scheduledAt,\n      sentAt: new Date().toISOString(),\n      status: \"sent\",\n      threadId: message.threadId,\n      inReplyTo: message.inReplyTo,\n      references: message.references,\n      labels: message.labels || [],\n      folder: \"sent\",\n      isRead: true,\n      isStarred: false,\n      isImportant: false,\n      clientId: message.clientId,\n      projectId: message.projectId,\n      taskId: message.taskId,\n      metadata: message.metadata,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n    }\n\n    try {\n      await this.sendViaProvider(emailMessage)\n\n      // Update quota\n      quotaCheck.quota.dailySent += 1\n      quotaCheck.quota.monthlySent += 1\n      await this.updateUserQuota(userId, quotaCheck.quota)\n\n      // Save to database\n      if (!supabase) {\n        throw new Error(\"Supabase client not initialized\")\n      }\n      const { error: insertError } = await (supabase as any).from(\"emails\").insert({\n        id: emailMessage.id,\n        from_email: emailMessage.from,\n        to_email: emailMessage.to,\n        cc_email: emailMessage.cc,\n        bcc_email: emailMessage.bcc,\n        subject: emailMessage.subject,\n        body: emailMessage.body,\n        body_type: emailMessage.bodyType,\n        attachments: emailMessage.attachments,\n        priority: emailMessage.priority,\n        status: emailMessage.status,\n        thread_id: emailMessage.threadId,\n        folder: emailMessage.folder,\n        is_read: emailMessage.isRead,\n        is_starred: emailMessage.isStarred,\n        is_important: emailMessage.isImportant,\n        client_id: emailMessage.clientId,\n        project_id: emailMessage.projectId,\n        task_id: emailMessage.taskId,\n        metadata: emailMessage.metadata,\n        sent_at: emailMessage.sentAt,\n        created_at: emailMessage.created_at,\n        updated_at: emailMessage.updated_at,\n        user_id: userId,\n      } as any)\n\n      if (insertError) {\n        throw new Error(`Failed to save email: ${insertError.message}`)\n      }\n\n      return emailMessage\n    } catch (error: any) {\n      emailMessage.status = \"failed\"\n      throw new Error(`Failed to send email: ${error.message}`)\n    }\n  }\n\n  private async sendViaProvider(message: EmailMessage): Promise<void> {\n    switch (this.config?.provider) {\n      case \"mailjet\":\n        await this.sendViaMailjet(message)\n        break\n      case \"outlook\":\n        await this.sendViaOutlook(message)\n        break\n      case \"smtp\":\n        await this.sendViaSmtp(message)\n        break\n      default:\n        throw new Error(\"Unsupported email provider\")\n    }\n  }\n\n  private async sendViaMailjet(message: EmailMessage): Promise<void> {\n    const email = {\n      Messages: [\n        {\n          From: {\n            Email: this.config?.username || \"\",\n            Name: \"CRM System\",\n          },\n          To: message.to.map((email) => ({ Email: email })),\n          Cc: message.cc?.map((email) => ({ Email: email })) || [],\n          Bcc: message.bcc?.map((email) => ({ Email: email })) || [],\n          Subject: message.subject,\n          HTMLPart: message.bodyType === \"html\" ? message.body : undefined,\n          TextPart: message.bodyType === \"text\" ? message.body : undefined,\n        },\n      ],\n    }\n\n    const response = await fetch(\"https://api.mailjet.com/v3.1/send\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Basic ${btoa(`${this.config?.clientId}:${this.config?.clientSecret}`)}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(email),\n    })\n\n    if (!response.ok) {\n      throw new Error(`Mailjet API error: ${response.statusText}`)\n    }\n  }\n\n  private async sendViaOutlook(message: EmailMessage): Promise<void> {\n    const email = {\n      subject: message.subject,\n      body: {\n        contentType: message.bodyType === \"html\" ? \"HTML\" : \"Text\",\n        content: message.body,\n      },\n      toRecipients: message.to.map((email) => ({ emailAddress: { address: email } })),\n      ccRecipients: message.cc?.map((email) => ({ emailAddress: { address: email } })) || [],\n      bccRecipients: message.bcc?.map((email) => ({ emailAddress: { address: email } })) || [],\n      importance: message.priority === \"high\" ? \"high\" : message.priority === \"low\" ? \"low\" : \"normal\",\n    }\n\n    const response = await fetch(\"https://graph.microsoft.com/v1.0/me/sendMail\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${this.config?.accessToken}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ message: email }),\n    })\n\n    if (!response.ok) {\n      throw new Error(`Outlook API error: ${response.statusText}`)\n    }\n  }\n\n  private async sendViaSmtp(message: EmailMessage): Promise<void> {\n    // Silent logging - Sending via SMTP\n  }\n\n  // Cleanup and Retention\n  private startCleanupJob(): void {\n    const now = new Date()\n    const tomorrow = new Date(now)\n    tomorrow.setDate(tomorrow.getDate() + 1)\n    tomorrow.setHours(2, 0, 0, 0)\n\n    const msUntilTomorrow = tomorrow.getTime() - now.getTime()\n\n    setTimeout(() => {\n      this.runCleanup()\n      setInterval(() => this.runCleanup(), 24 * 60 * 60 * 1000)\n    }, msUntilTomorrow)\n  }\n\n  private async runCleanup(): Promise<void> {\n    try {\n      // Silent logging - Starting email cleanup job\n      await this.cleanupOldEmails()\n      // Silent logging - Email cleanup job completed\n    } catch (error) {\n      // Silent error handling - Email cleanup job failed\n    }\n  }\n\n  private async cleanupOldEmails(): Promise<void> {\n    const cutoff = new Date()\n    cutoff.setDate(cutoff.getDate() - 365) // 1 year retention\n\n    await (supabase as any).from(\"emails\").delete().lt(\"created_at\", cutoff.toISOString())\n  }\n\n  // Email Templates\n  async createTemplate(\n    template: Omit<EmailTemplate, \"id\" | \"usage_count\" | \"created_at\" | \"updated_at\">,\n  ): Promise<EmailTemplate> {\n    const newTemplate: EmailTemplate = {\n      id: crypto.randomUUID(),\n      usage_count: 0,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      ...template,\n    }\n\n    const { error } = await (supabase as any).from(\"email_templates\").insert({\n      id: newTemplate.id,\n      name: newTemplate.name,\n      subject: newTemplate.subject,\n      body: newTemplate.body,\n      body_type: newTemplate.bodyType,\n      category: newTemplate.category,\n      variables: newTemplate.variables,\n      is_active: newTemplate.isActive,\n      usage_count: newTemplate.usage_count,\n      created_by: newTemplate.created_by,\n      created_at: newTemplate.created_at,\n      updated_at: newTemplate.updated_at,\n    } as any)\n\n    if (error) {\n      throw new Error(`Failed to create template: ${error.message}`)\n    }\n\n    return newTemplate\n  }\n\n  async getTemplates(category?: string): Promise<EmailTemplate[]> {\n    let query = (supabase as any).from(\"email_templates\").select(\"*\").eq(\"is_active\", true).order(\"name\")\n\n    if (category) {\n      query = query.eq(\"category\", category)\n    }\n\n    const { data, error } = await query\n\n    if (error) {\n      throw new Error(`Failed to get templates: ${error.message}`)\n    }\n\n    return (data || []).map((template: any) => ({\n      id: template.id,\n      name: template.name,\n      subject: template.subject,\n      body: template.body,\n      bodyType: template.body_type,\n      category: template.category,\n      variables: template.variables || [],\n      isActive: template.is_active,\n      usage_count: template.usage_count,\n      created_by: template.created_by,\n      created_at: template.created_at,\n      updated_at: template.updated_at,\n    }))\n  }\n\n  // Email Sync\n  private startSync(): void {\n    if (this.syncInterval) {\n      clearInterval(this.syncInterval)\n    }\n\n    this.syncInterval = setInterval(\n      () => {\n        this.syncEmails()\n      },\n      5 * 60 * 1000,\n    ) // Sync every 5 minutes\n  }\n\n  private async syncEmails(): Promise<void> {\n    if (!this.isConnected) return\n\n    try {\n      switch (this.config?.provider) {\n        case \"outlook\":\n          await this.syncOutlookEmails()\n          break\n      }\n    } catch (error) {\n      // Silent error handling - Email sync failed\n    }\n  }\n\n  private async syncOutlookEmails(): Promise<void> {\n    // Silent logging - Syncing Outlook emails\n  }\n\n  // Analytics\n  async getAnalytics(dateRange?: { start: Date; end: Date }): Promise<EmailAnalytics> {\n    let query = (supabase as any).from(\"emails\").select(\"status, is_read, metadata\")\n\n    if (dateRange) {\n      query = query.gte(\"created_at\", dateRange.start.toISOString()).lte(\"created_at\", dateRange.end.toISOString())\n    }\n\n    const { data, error } = await query\n\n    if (error) {\n      throw new Error(`Failed to get analytics: ${error.message}`)\n    }\n\n    const emails: EmailRow[] = data || []\n    const sent = emails.filter((e: EmailRow) => e.status === \"sent\").length\n    const opened = emails.filter((e: EmailRow) => e.is_read).length\n    const clicked = emails.filter((e: EmailRow) => e.metadata?.clicked).length\n    const replied = emails.filter((e: EmailRow) => e.metadata?.replied).length\n    const bounced = emails.filter((e: EmailRow) => e.status === \"failed\").length\n\n    return {\n      sent,\n      received: emails.length - sent,\n      opened,\n      clicked,\n      replied,\n      bounced,\n      unsubscribed: 0,\n      openRate: sent > 0 ? (opened / sent) * 100 : 0,\n      clickRate: opened > 0 ? (clicked / opened) * 100 : 0,\n      replyRate: sent > 0 ? (replied / sent) * 100 : 0,\n      bounceRate: sent > 0 ? (bounced / sent) * 100 : 0,\n    }\n  }\n\n  // Quota Management Methods\n  async getQuotaStatus(userId: string): Promise<{\n    daily: { used: number; limit: number; remaining: number }\n    monthly: { used: number; limit: number; remaining: number }\n    storage: { used: number; limit: number; remaining: number }\n  }> {\n    const quota = await this.getUserQuota(userId)\n\n    return {\n      daily: {\n        used: quota.dailySent,\n        limit: quota.dailyLimit,\n        remaining: quota.dailyLimit - quota.dailySent,\n      },\n      monthly: {\n        used: quota.monthlySent,\n        limit: quota.monthlyLimit,\n        remaining: quota.monthlyLimit - quota.monthlySent,\n      },\n      storage: {\n        used: quota.storageUsed,\n        limit: quota.storageLimit,\n        remaining: quota.storageLimit - quota.storageUsed,\n      },\n    }\n  }\n\n  // Cleanup\n  destroy(): void {\n    if (this.syncInterval) {\n      clearInterval(this.syncInterval)\n    }\n  }\n}\n\nexport const emailService = new EmailService()\nexport default emailService\n"],
      names: ["emailService", "EmailService", "configure", "config", "testConnection", "isConnected", "supabase", "from", "upsert", "provider", "username", "smtp_host", "smtpHost", "smtp_port", "smtpPort", "smtp_secure", "smtpSecure", "access_token", "accessToken", "refresh_token", "refreshToken", "client_id", "clientId", "updated_at", "Date", "toISOString", "startSync", "startCleanupJob", "error", "Error", "message", "checkEmailQuota", "userId", "quota", "getUserQuota", "today", "toDateString", "lastResetDate", "dailySent", "updateUserQuota", "dailyLimit", "canSend", "reason", "monthlySent", "monthlyLimit", "data", "select", "eq", "single", "defaultQuota", "DEFAULT_QUOTAS", "storageUsed", "insert", "user_id", "daily_limit", "monthly_limit", "daily_sent", "monthly_sent", "last_reset_date", "attachment_size_limit", "attachmentSizeLimit", "storage_used", "storage_limit", "storageLimit", "updateError", "update", "testMailjetConnection", "testOutlookConnection", "testSmtpConnection", "response", "fetch", "headers", "Authorization", "btoa", "clientSecret", "ok", "sendEmail", "quotaCheck", "emailMessage", "id", "crypto", "randomUUID", "to", "cc", "bcc", "subject", "body", "bodyType", "attachments", "priority", "readReceipt", "deliveryReceipt", "scheduledAt", "sentAt", "status", "threadId", "inReplyTo", "references", "labels", "folder", "isRead", "isStarred", "isImportant", "projectId", "taskId", "metadata", "created_at", "sendViaProvider", "insertError", "from_email", "to_email", "cc_email", "bcc_email", "body_type", "thread_id", "is_read", "is_starred", "is_important", "project_id", "task_id", "sent_at", "sendViaMailjet", "sendViaOutlook", "sendViaSmtp", "email", "Messages", "From", "Email", "Name", "To", "map", "Cc", "Bcc", "Subject", "HTMLPart", "undefined", "TextPart", "method", "JSON", "stringify", "statusText", "contentType", "content", "toRecipients", "emailAddress", "address", "ccRecipients", "bccRecipients", "importance", "now", "tomorrow", "setDate", "getDate", "setHours", "msUntilTomorrow", "getTime", "setTimeout", "runCleanup", "setInterval", "cleanupOldEmails", "cutoff", "delete", "lt", "createTemplate", "template", "newTemplate", "usage_count", "name", "category", "variables", "is_active", "isActive", "created_by", "getTemplates", "query", "order", "syncInterval", "clearInterval", "syncEmails", "syncOutlookEmails", "getAnalytics", "dateRange", "gte", "start", "lte", "end", "emails", "sent", "filter", "e", "length", "opened", "clicked", "replied", "bounced", "received", "unsubscribed", "openRate", "clickRate", "replyRate", "bounceRate", "getQuotaStatus", "daily", "used", "limit", "remaining", "monthly", "storage", "destroy"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "401680cad92ff44df634049c2652a375465d8dd4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_18iwb0zfcp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_18iwb0zfcp();
cov_18iwb0zfcp().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_18iwb0zfcp().f[0]++;
  cov_18iwb0zfcp().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_18iwb0zfcp().s[3]++;
_export(exports, {
  get default() {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[1]++;
    cov_18iwb0zfcp().s[4]++;
    return _default;
  },
  get emailService() {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[2]++;
    cov_18iwb0zfcp().s[5]++;
    return emailService;
  }
});
const _supabase =
/* istanbul ignore next */
(cov_18iwb0zfcp().s[6]++, require("../lib/supabase"));
class EmailService {
  // Configuration
  async configure(config) {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[3]++;
    cov_18iwb0zfcp().s[7]++;
    this.config = config;
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[8]++;
    try {
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[9]++;
      await this.testConnection();
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[10]++;
      this.isConnected = true;
      // Save configuration
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[11]++;
      await _supabase.supabase.from("email_configs").upsert({
        provider: config.provider,
        username: config.username,
        smtp_host: config.smtpHost,
        smtp_port: config.smtpPort,
        smtp_secure: config.smtpSecure,
        access_token: config.accessToken,
        refresh_token: config.refreshToken,
        client_id: config.clientId,
        updated_at: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[12]++;
      this.startSync();
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[13]++;
      this.startCleanupJob();
    } catch (error) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[14]++;
      this.isConnected = false;
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[15]++;
      throw new Error(`Failed to configure email: ${error.message}`);
    }
  }
  // Quota Management
  async checkEmailQuota(userId) {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[4]++;
    const quota =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[16]++, await this.getUserQuota(userId));
    // Reset daily counter if needed
    const today =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[17]++, new Date().toDateString());
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[18]++;
    if (quota.lastResetDate !== today) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().b[0][0]++;
      cov_18iwb0zfcp().s[19]++;
      quota.dailySent = 0;
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[20]++;
      quota.lastResetDate = today;
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[21]++;
      await this.updateUserQuota(userId, quota);
    } else
    /* istanbul ignore next */
    {
      cov_18iwb0zfcp().b[0][1]++;
    }
    // Check daily limit
    cov_18iwb0zfcp().s[22]++;
    if (quota.dailySent >= quota.dailyLimit) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().b[1][0]++;
      cov_18iwb0zfcp().s[23]++;
      return {
        canSend: false,
        reason: `Daily email limit reached (${quota.dailyLimit}). Resets tomorrow.`,
        quota
      };
    } else
    /* istanbul ignore next */
    {
      cov_18iwb0zfcp().b[1][1]++;
    }
    // Check monthly limit
    cov_18iwb0zfcp().s[24]++;
    if (quota.monthlySent >= quota.monthlyLimit) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().b[2][0]++;
      cov_18iwb0zfcp().s[25]++;
      return {
        canSend: false,
        reason: `Monthly email limit reached (${quota.monthlyLimit}). Resets next month.`,
        quota
      };
    } else
    /* istanbul ignore next */
    {
      cov_18iwb0zfcp().b[2][1]++;
    }
    cov_18iwb0zfcp().s[26]++;
    return {
      canSend: true,
      quota
    };
  }
  async getUserQuota(userId) {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[5]++;
    cov_18iwb0zfcp().s[27]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().b[3][0]++;
      cov_18iwb0zfcp().s[28]++;
      throw new Error("Supabase client not initialized");
    } else
    /* istanbul ignore next */
    {
      cov_18iwb0zfcp().b[3][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[29]++, await _supabase.supabase.from("email_quotas").select("*").eq("user_id", userId).single());
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[30]++;
    if (
    /* istanbul ignore next */
    (cov_18iwb0zfcp().b[5][0]++, error) ||
    /* istanbul ignore next */
    (cov_18iwb0zfcp().b[5][1]++, !data)) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().b[4][0]++;
      // Create default quota for new user
      const defaultQuota =
      /* istanbul ignore next */
      (cov_18iwb0zfcp().s[31]++, {
        userId,
        ...this.DEFAULT_QUOTAS,
        dailySent: 0,
        monthlySent: 0,
        lastResetDate: new Date().toDateString(),
        storageUsed: 0
      });
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[32]++;
      if (!_supabase.supabase) {
        /* istanbul ignore next */
        cov_18iwb0zfcp().b[6][0]++;
        cov_18iwb0zfcp().s[33]++;
        throw new Error("Supabase client not initialized");
      } else
      /* istanbul ignore next */
      {
        cov_18iwb0zfcp().b[6][1]++;
      }
      cov_18iwb0zfcp().s[34]++;
      await _supabase.supabase.from("email_quotas").insert({
        user_id: userId,
        daily_limit: defaultQuota.dailyLimit,
        monthly_limit: defaultQuota.monthlyLimit,
        daily_sent: defaultQuota.dailySent,
        monthly_sent: defaultQuota.monthlySent,
        last_reset_date: defaultQuota.lastResetDate,
        attachment_size_limit: defaultQuota.attachmentSizeLimit,
        storage_used: defaultQuota.storageUsed,
        storage_limit: defaultQuota.storageLimit
      });
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[35]++;
      return defaultQuota;
    } else
    /* istanbul ignore next */
    {
      cov_18iwb0zfcp().b[4][1]++;
    }
    cov_18iwb0zfcp().s[36]++;
    return {
      userId: data.user_id,
      dailyLimit: data.daily_limit,
      monthlyLimit: data.monthly_limit,
      dailySent: data.daily_sent,
      monthlySent: data.monthly_sent,
      lastResetDate: data.last_reset_date,
      attachmentSizeLimit: data.attachment_size_limit,
      storageUsed: data.storage_used,
      storageLimit: data.storage_limit
    };
  }
  async updateUserQuota(userId, quota) {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[6]++;
    cov_18iwb0zfcp().s[37]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().b[7][0]++;
      cov_18iwb0zfcp().s[38]++;
      throw new Error("Supabase client not initialized");
    } else
    /* istanbul ignore next */
    {
      cov_18iwb0zfcp().b[7][1]++;
    }
    const {
      error: updateError
    } =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[39]++, await _supabase.supabase.from("email_quotas").update({
      daily_sent: quota.dailySent,
      monthly_sent: quota.monthlySent,
      last_reset_date: quota.lastResetDate,
      storage_used: quota.storageUsed
    }).eq("user_id", userId));
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[40]++;
    if (updateError) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().b[8][0]++;
      cov_18iwb0zfcp().s[41]++;
      throw new Error(`Failed to update user quota: ${updateError.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_18iwb0zfcp().b[8][1]++;
    }
  }
  async testConnection() {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[7]++;
    cov_18iwb0zfcp().s[42]++;
    if (!this.config) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().b[9][0]++;
      cov_18iwb0zfcp().s[43]++;
      throw new Error("Email not configured");
    } else
    /* istanbul ignore next */
    {
      cov_18iwb0zfcp().b[9][1]++;
    }
    cov_18iwb0zfcp().s[44]++;
    try {
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[45]++;
      switch (this.config.provider) {
        case "mailjet":
          /* istanbul ignore next */
          cov_18iwb0zfcp().b[10][0]++;
          cov_18iwb0zfcp().s[46]++;
          return await this.testMailjetConnection();
        case "outlook":
          /* istanbul ignore next */
          cov_18iwb0zfcp().b[10][1]++;
          cov_18iwb0zfcp().s[47]++;
          return await this.testOutlookConnection();
        case "smtp":
          /* istanbul ignore next */
          cov_18iwb0zfcp().b[10][2]++;
          cov_18iwb0zfcp().s[48]++;
          return await this.testSmtpConnection();
        default:
          /* istanbul ignore next */
          cov_18iwb0zfcp().b[10][3]++;
          cov_18iwb0zfcp().s[49]++;
          throw new Error("Unsupported email provider");
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[50]++;
      // Silent error handling - Email connection test failed
      return false;
    }
  }
  async testMailjetConnection() {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[8]++;
    const response =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[51]++, await fetch("https://api.mailjet.com/v3/REST/contact", {
      headers: {
        Authorization: `Basic ${btoa(`${this.config?.clientId}:${this.config?.clientSecret}`)}`
      }
    }));
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[52]++;
    return response.ok;
  }
  async testOutlookConnection() {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[9]++;
    const response =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[53]++, await fetch("https://graph.microsoft.com/v1.0/me", {
      headers: {
        Authorization: `Bearer ${this.config?.accessToken}`
      }
    }));
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[54]++;
    return response.ok;
  }
  async testSmtpConnection() {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[10]++;
    cov_18iwb0zfcp().s[55]++;
    return true;
  }
  // Email Operations with Quota Checks
  async sendEmail(message, userId) {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[11]++;
    cov_18iwb0zfcp().s[56]++;
    if (!this.isConnected) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().b[11][0]++;
      cov_18iwb0zfcp().s[57]++;
      throw new Error("Email service not connected");
    } else
    /* istanbul ignore next */
    {
      cov_18iwb0zfcp().b[11][1]++;
    }
    // Check quota
    const quotaCheck =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[58]++, await this.checkEmailQuota(userId));
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[59]++;
    if (!quotaCheck.canSend) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().b[12][0]++;
      cov_18iwb0zfcp().s[60]++;
      throw new Error(quotaCheck.reason);
    } else
    /* istanbul ignore next */
    {
      cov_18iwb0zfcp().b[12][1]++;
    }
    const emailMessage =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[61]++, {
      id: crypto.randomUUID(),
      from:
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[13][0]++, this.config?.username) ||
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[13][1]++, ""),
      to:
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[14][0]++, message.to) ||
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[14][1]++, []),
      cc: message.cc,
      bcc: message.bcc,
      subject:
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[15][0]++, message.subject) ||
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[15][1]++, ""),
      body:
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[16][0]++, message.body) ||
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[16][1]++, ""),
      bodyType:
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[17][0]++, message.bodyType) ||
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[17][1]++, "html"),
      attachments: message.attachments,
      priority:
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[18][0]++, message.priority) ||
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[18][1]++, "normal"),
      readReceipt: message.readReceipt,
      deliveryReceipt: message.deliveryReceipt,
      scheduledAt: message.scheduledAt,
      sentAt: new Date().toISOString(),
      status: "sent",
      threadId: message.threadId,
      inReplyTo: message.inReplyTo,
      references: message.references,
      labels:
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[19][0]++, message.labels) ||
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[19][1]++, []),
      folder: "sent",
      isRead: true,
      isStarred: false,
      isImportant: false,
      clientId: message.clientId,
      projectId: message.projectId,
      taskId: message.taskId,
      metadata: message.metadata,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[62]++;
    try {
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[63]++;
      await this.sendViaProvider(emailMessage);
      // Update quota
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[64]++;
      quotaCheck.quota.dailySent += 1;
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[65]++;
      quotaCheck.quota.monthlySent += 1;
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[66]++;
      await this.updateUserQuota(userId, quotaCheck.quota);
      // Save to database
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[67]++;
      if (!_supabase.supabase) {
        /* istanbul ignore next */
        cov_18iwb0zfcp().b[20][0]++;
        cov_18iwb0zfcp().s[68]++;
        throw new Error("Supabase client not initialized");
      } else
      /* istanbul ignore next */
      {
        cov_18iwb0zfcp().b[20][1]++;
      }
      const {
        error: insertError
      } =
      /* istanbul ignore next */
      (cov_18iwb0zfcp().s[69]++, await _supabase.supabase.from("emails").insert({
        id: emailMessage.id,
        from_email: emailMessage.from,
        to_email: emailMessage.to,
        cc_email: emailMessage.cc,
        bcc_email: emailMessage.bcc,
        subject: emailMessage.subject,
        body: emailMessage.body,
        body_type: emailMessage.bodyType,
        attachments: emailMessage.attachments,
        priority: emailMessage.priority,
        status: emailMessage.status,
        thread_id: emailMessage.threadId,
        folder: emailMessage.folder,
        is_read: emailMessage.isRead,
        is_starred: emailMessage.isStarred,
        is_important: emailMessage.isImportant,
        client_id: emailMessage.clientId,
        project_id: emailMessage.projectId,
        task_id: emailMessage.taskId,
        metadata: emailMessage.metadata,
        sent_at: emailMessage.sentAt,
        created_at: emailMessage.created_at,
        updated_at: emailMessage.updated_at,
        user_id: userId
      }));
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[70]++;
      if (insertError) {
        /* istanbul ignore next */
        cov_18iwb0zfcp().b[21][0]++;
        cov_18iwb0zfcp().s[71]++;
        throw new Error(`Failed to save email: ${insertError.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_18iwb0zfcp().b[21][1]++;
      }
      cov_18iwb0zfcp().s[72]++;
      return emailMessage;
    } catch (error) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[73]++;
      emailMessage.status = "failed";
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[74]++;
      throw new Error(`Failed to send email: ${error.message}`);
    }
  }
  async sendViaProvider(message) {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[12]++;
    cov_18iwb0zfcp().s[75]++;
    switch (this.config?.provider) {
      case "mailjet":
        /* istanbul ignore next */
        cov_18iwb0zfcp().b[22][0]++;
        cov_18iwb0zfcp().s[76]++;
        await this.sendViaMailjet(message);
        /* istanbul ignore next */
        cov_18iwb0zfcp().s[77]++;
        break;
      case "outlook":
        /* istanbul ignore next */
        cov_18iwb0zfcp().b[22][1]++;
        cov_18iwb0zfcp().s[78]++;
        await this.sendViaOutlook(message);
        /* istanbul ignore next */
        cov_18iwb0zfcp().s[79]++;
        break;
      case "smtp":
        /* istanbul ignore next */
        cov_18iwb0zfcp().b[22][2]++;
        cov_18iwb0zfcp().s[80]++;
        await this.sendViaSmtp(message);
        /* istanbul ignore next */
        cov_18iwb0zfcp().s[81]++;
        break;
      default:
        /* istanbul ignore next */
        cov_18iwb0zfcp().b[22][3]++;
        cov_18iwb0zfcp().s[82]++;
        throw new Error("Unsupported email provider");
    }
  }
  async sendViaMailjet(message) {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[13]++;
    const email =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[83]++, {
      Messages: [{
        From: {
          Email:
          /* istanbul ignore next */
          (cov_18iwb0zfcp().b[23][0]++, this.config?.username) ||
          /* istanbul ignore next */
          (cov_18iwb0zfcp().b[23][1]++, ""),
          Name: "CRM System"
        },
        To: message.to.map(email => {
          /* istanbul ignore next */
          cov_18iwb0zfcp().f[14]++;
          cov_18iwb0zfcp().s[84]++;
          return {
            Email: email
          };
        }),
        Cc:
        /* istanbul ignore next */
        (cov_18iwb0zfcp().b[24][0]++, message.cc?.map(email => {
          /* istanbul ignore next */
          cov_18iwb0zfcp().f[15]++;
          cov_18iwb0zfcp().s[85]++;
          return {
            Email: email
          };
        })) ||
        /* istanbul ignore next */
        (cov_18iwb0zfcp().b[24][1]++, []),
        Bcc:
        /* istanbul ignore next */
        (cov_18iwb0zfcp().b[25][0]++, message.bcc?.map(email => {
          /* istanbul ignore next */
          cov_18iwb0zfcp().f[16]++;
          cov_18iwb0zfcp().s[86]++;
          return {
            Email: email
          };
        })) ||
        /* istanbul ignore next */
        (cov_18iwb0zfcp().b[25][1]++, []),
        Subject: message.subject,
        HTMLPart: message.bodyType === "html" ?
        /* istanbul ignore next */
        (cov_18iwb0zfcp().b[26][0]++, message.body) :
        /* istanbul ignore next */
        (cov_18iwb0zfcp().b[26][1]++, undefined),
        TextPart: message.bodyType === "text" ?
        /* istanbul ignore next */
        (cov_18iwb0zfcp().b[27][0]++, message.body) :
        /* istanbul ignore next */
        (cov_18iwb0zfcp().b[27][1]++, undefined)
      }]
    });
    const response =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[87]++, await fetch("https://api.mailjet.com/v3.1/send", {
      method: "POST",
      headers: {
        Authorization: `Basic ${btoa(`${this.config?.clientId}:${this.config?.clientSecret}`)}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify(email)
    }));
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[88]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().b[28][0]++;
      cov_18iwb0zfcp().s[89]++;
      throw new Error(`Mailjet API error: ${response.statusText}`);
    } else
    /* istanbul ignore next */
    {
      cov_18iwb0zfcp().b[28][1]++;
    }
  }
  async sendViaOutlook(message) {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[17]++;
    const email =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[90]++, {
      subject: message.subject,
      body: {
        contentType: message.bodyType === "html" ?
        /* istanbul ignore next */
        (cov_18iwb0zfcp().b[29][0]++, "HTML") :
        /* istanbul ignore next */
        (cov_18iwb0zfcp().b[29][1]++, "Text"),
        content: message.body
      },
      toRecipients: message.to.map(email => {
        /* istanbul ignore next */
        cov_18iwb0zfcp().f[18]++;
        cov_18iwb0zfcp().s[91]++;
        return {
          emailAddress: {
            address: email
          }
        };
      }),
      ccRecipients:
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[30][0]++, message.cc?.map(email => {
        /* istanbul ignore next */
        cov_18iwb0zfcp().f[19]++;
        cov_18iwb0zfcp().s[92]++;
        return {
          emailAddress: {
            address: email
          }
        };
      })) ||
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[30][1]++, []),
      bccRecipients:
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[31][0]++, message.bcc?.map(email => {
        /* istanbul ignore next */
        cov_18iwb0zfcp().f[20]++;
        cov_18iwb0zfcp().s[93]++;
        return {
          emailAddress: {
            address: email
          }
        };
      })) ||
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[31][1]++, []),
      importance: message.priority === "high" ?
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[32][0]++, "high") :
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[32][1]++, message.priority === "low" ?
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[33][0]++, "low") :
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[33][1]++, "normal"))
    });
    const response =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[94]++, await fetch("https://graph.microsoft.com/v1.0/me/sendMail", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${this.config?.accessToken}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        message: email
      })
    }));
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[95]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().b[34][0]++;
      cov_18iwb0zfcp().s[96]++;
      throw new Error(`Outlook API error: ${response.statusText}`);
    } else
    /* istanbul ignore next */
    {
      cov_18iwb0zfcp().b[34][1]++;
    }
  }
  async sendViaSmtp(message) {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[21]++;
  } // Silent logging - Sending via SMTP
  // Cleanup and Retention
  startCleanupJob() {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[22]++;
    const now =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[97]++, new Date());
    const tomorrow =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[98]++, new Date(now));
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[99]++;
    tomorrow.setDate(tomorrow.getDate() + 1);
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[100]++;
    tomorrow.setHours(2, 0, 0, 0);
    const msUntilTomorrow =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[101]++, tomorrow.getTime() - now.getTime());
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[102]++;
    setTimeout(() => {
      /* istanbul ignore next */
      cov_18iwb0zfcp().f[23]++;
      cov_18iwb0zfcp().s[103]++;
      this.runCleanup();
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[104]++;
      setInterval(() => {
        /* istanbul ignore next */
        cov_18iwb0zfcp().f[24]++;
        cov_18iwb0zfcp().s[105]++;
        return this.runCleanup();
      }, 24 * 60 * 60 * 1000);
    }, msUntilTomorrow);
  }
  async runCleanup() {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[25]++;
    cov_18iwb0zfcp().s[106]++;
    try {
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[107]++;
      // Silent logging - Starting email cleanup job
      await this.cleanupOldEmails();
      // Silent logging - Email cleanup job completed
    } catch (error) {
      // Silent error handling - Email cleanup job failed
    }
  }
  async cleanupOldEmails() {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[26]++;
    const cutoff =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[108]++, new Date());
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[109]++;
    cutoff.setDate(cutoff.getDate() - 365); // 1 year retention
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[110]++;
    await _supabase.supabase.from("emails").delete().lt("created_at", cutoff.toISOString());
  }
  // Email Templates
  async createTemplate(template) {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[27]++;
    const newTemplate =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[111]++, {
      id: crypto.randomUUID(),
      usage_count: 0,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      ...template
    });
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[112]++, await _supabase.supabase.from("email_templates").insert({
      id: newTemplate.id,
      name: newTemplate.name,
      subject: newTemplate.subject,
      body: newTemplate.body,
      body_type: newTemplate.bodyType,
      category: newTemplate.category,
      variables: newTemplate.variables,
      is_active: newTemplate.isActive,
      usage_count: newTemplate.usage_count,
      created_by: newTemplate.created_by,
      created_at: newTemplate.created_at,
      updated_at: newTemplate.updated_at
    }));
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[113]++;
    if (error) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().b[35][0]++;
      cov_18iwb0zfcp().s[114]++;
      throw new Error(`Failed to create template: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_18iwb0zfcp().b[35][1]++;
    }
    cov_18iwb0zfcp().s[115]++;
    return newTemplate;
  }
  async getTemplates(category) {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[28]++;
    let query =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[116]++, _supabase.supabase.from("email_templates").select("*").eq("is_active", true).order("name"));
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[117]++;
    if (category) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().b[36][0]++;
      cov_18iwb0zfcp().s[118]++;
      query = query.eq("category", category);
    } else
    /* istanbul ignore next */
    {
      cov_18iwb0zfcp().b[36][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[119]++, await query);
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[120]++;
    if (error) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().b[37][0]++;
      cov_18iwb0zfcp().s[121]++;
      throw new Error(`Failed to get templates: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_18iwb0zfcp().b[37][1]++;
    }
    cov_18iwb0zfcp().s[122]++;
    return (
    /* istanbul ignore next */
    (cov_18iwb0zfcp().b[38][0]++, data) ||
    /* istanbul ignore next */
    (cov_18iwb0zfcp().b[38][1]++, [])).map(template => {
      /* istanbul ignore next */
      cov_18iwb0zfcp().f[29]++;
      cov_18iwb0zfcp().s[123]++;
      return {
        id: template.id,
        name: template.name,
        subject: template.subject,
        body: template.body,
        bodyType: template.body_type,
        category: template.category,
        variables:
        /* istanbul ignore next */
        (cov_18iwb0zfcp().b[39][0]++, template.variables) ||
        /* istanbul ignore next */
        (cov_18iwb0zfcp().b[39][1]++, []),
        isActive: template.is_active,
        usage_count: template.usage_count,
        created_by: template.created_by,
        created_at: template.created_at,
        updated_at: template.updated_at
      };
    });
  }
  // Email Sync
  startSync() {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[30]++;
    cov_18iwb0zfcp().s[124]++;
    if (this.syncInterval) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().b[40][0]++;
      cov_18iwb0zfcp().s[125]++;
      clearInterval(this.syncInterval);
    } else
    /* istanbul ignore next */
    {
      cov_18iwb0zfcp().b[40][1]++;
    }
    cov_18iwb0zfcp().s[126]++;
    this.syncInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_18iwb0zfcp().f[31]++;
      cov_18iwb0zfcp().s[127]++;
      this.syncEmails();
    }, 5 * 60 * 1000); // Sync every 5 minutes
  }
  async syncEmails() {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[32]++;
    cov_18iwb0zfcp().s[128]++;
    if (!this.isConnected) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().b[41][0]++;
      cov_18iwb0zfcp().s[129]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_18iwb0zfcp().b[41][1]++;
    }
    cov_18iwb0zfcp().s[130]++;
    try {
      /* istanbul ignore next */
      cov_18iwb0zfcp().s[131]++;
      switch (this.config?.provider) {
        case "outlook":
          /* istanbul ignore next */
          cov_18iwb0zfcp().b[42][0]++;
          cov_18iwb0zfcp().s[132]++;
          await this.syncOutlookEmails();
          /* istanbul ignore next */
          cov_18iwb0zfcp().s[133]++;
          break;
      }
    } catch (error) {
      // Silent error handling - Email sync failed
    }
  }
  async syncOutlookEmails() {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[33]++;
  } // Silent logging - Syncing Outlook emails
  // Analytics
  async getAnalytics(dateRange) {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[34]++;
    let query =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[134]++, _supabase.supabase.from("emails").select("status, is_read, metadata"));
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[135]++;
    if (dateRange) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().b[43][0]++;
      cov_18iwb0zfcp().s[136]++;
      query = query.gte("created_at", dateRange.start.toISOString()).lte("created_at", dateRange.end.toISOString());
    } else
    /* istanbul ignore next */
    {
      cov_18iwb0zfcp().b[43][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[137]++, await query);
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[138]++;
    if (error) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().b[44][0]++;
      cov_18iwb0zfcp().s[139]++;
      throw new Error(`Failed to get analytics: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_18iwb0zfcp().b[44][1]++;
    }
    const emails =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[140]++,
    /* istanbul ignore next */
    (cov_18iwb0zfcp().b[45][0]++, data) ||
    /* istanbul ignore next */
    (cov_18iwb0zfcp().b[45][1]++, []));
    const sent =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[141]++, emails.filter(e => {
      /* istanbul ignore next */
      cov_18iwb0zfcp().f[35]++;
      cov_18iwb0zfcp().s[142]++;
      return e.status === "sent";
    }).length);
    const opened =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[143]++, emails.filter(e => {
      /* istanbul ignore next */
      cov_18iwb0zfcp().f[36]++;
      cov_18iwb0zfcp().s[144]++;
      return e.is_read;
    }).length);
    const clicked =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[145]++, emails.filter(e => {
      /* istanbul ignore next */
      cov_18iwb0zfcp().f[37]++;
      cov_18iwb0zfcp().s[146]++;
      return e.metadata?.clicked;
    }).length);
    const replied =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[147]++, emails.filter(e => {
      /* istanbul ignore next */
      cov_18iwb0zfcp().f[38]++;
      cov_18iwb0zfcp().s[148]++;
      return e.metadata?.replied;
    }).length);
    const bounced =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[149]++, emails.filter(e => {
      /* istanbul ignore next */
      cov_18iwb0zfcp().f[39]++;
      cov_18iwb0zfcp().s[150]++;
      return e.status === "failed";
    }).length);
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[151]++;
    return {
      sent,
      received: emails.length - sent,
      opened,
      clicked,
      replied,
      bounced,
      unsubscribed: 0,
      openRate: sent > 0 ?
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[46][0]++, opened / sent * 100) :
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[46][1]++, 0),
      clickRate: opened > 0 ?
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[47][0]++, clicked / opened * 100) :
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[47][1]++, 0),
      replyRate: sent > 0 ?
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[48][0]++, replied / sent * 100) :
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[48][1]++, 0),
      bounceRate: sent > 0 ?
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[49][0]++, bounced / sent * 100) :
      /* istanbul ignore next */
      (cov_18iwb0zfcp().b[49][1]++, 0)
    };
  }
  // Quota Management Methods
  async getQuotaStatus(userId) {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[40]++;
    const quota =
    /* istanbul ignore next */
    (cov_18iwb0zfcp().s[152]++, await this.getUserQuota(userId));
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[153]++;
    return {
      daily: {
        used: quota.dailySent,
        limit: quota.dailyLimit,
        remaining: quota.dailyLimit - quota.dailySent
      },
      monthly: {
        used: quota.monthlySent,
        limit: quota.monthlyLimit,
        remaining: quota.monthlyLimit - quota.monthlySent
      },
      storage: {
        used: quota.storageUsed,
        limit: quota.storageLimit,
        remaining: quota.storageLimit - quota.storageUsed
      }
    };
  }
  // Cleanup
  destroy() {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[41]++;
    cov_18iwb0zfcp().s[154]++;
    if (this.syncInterval) {
      /* istanbul ignore next */
      cov_18iwb0zfcp().b[50][0]++;
      cov_18iwb0zfcp().s[155]++;
      clearInterval(this.syncInterval);
    } else
    /* istanbul ignore next */
    {
      cov_18iwb0zfcp().b[50][1]++;
    }
  }
  constructor() {
    /* istanbul ignore next */
    cov_18iwb0zfcp().f[42]++;
    cov_18iwb0zfcp().s[156]++;
    this.config = null;
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[157]++;
    this.isConnected = false;
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[158]++;
    this.syncInterval = null;
    // Email quotas - moderate limits
    /* istanbul ignore next */
    cov_18iwb0zfcp().s[159]++;
    this.DEFAULT_QUOTAS = {
      dailyLimit: 100,
      monthlyLimit: 2000,
      attachmentSizeLimit: 10,
      storageLimit: 500
    };
  }
}
const emailService =
/* istanbul ignore next */
(cov_18iwb0zfcp().s[160]++, new EmailService());
const _default =
/* istanbul ignore next */
(cov_18iwb0zfcp().s[161]++, emailService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,