{"version":3,"names":["cov_1mfw8nm532","actualCoverage","s","searchService","SearchServiceImpl","generateCacheKey","query","filters","options","f","btoa","JSON","stringify","isValidCache","cache","Date","now","timestamp","ttl","addToCache","key","results","size","MAX_CACHE_SIZE","b","oldestKey","keys","next","value","delete","set","CACHE_TTL","calculateRelevanceScore","item","queryLower","toLowerCase","score","title","includes","startsWith","description","daysSinceUpdate","updated_at","created_at","getTime","fuzzyMatch","text","textLower","maxErrors","Math","floor","length","errors","textIndex","i","found","j","mockSearchData","id","type","url","relevance","search","cacheKey","cached","get","currentCount","popularQueries","searchHistory","unshift","slice","Promise","resolve","setTimeout","mockData","trim","filter","matchesQuery","fuzzySearch","matchesType","types","map","highlights","sort","a","sortBy","dateA","dateB","sortOrder","limit","offset","searchWithSuggestions","suggestions","all","getSearchSuggestions","saveSearch","name","savedSearch","toString","user_id","is_public","toISOString","existing","parse","localStorage","getItem","push","setItem","getSavedSearches","userId","saved","deleteSavedSearch","filtered","historySuggestions","h","entitySuggestions","trackSearchAnalytics","analytics","fullAnalytics","getPopularSearches","Array","from","entries","clearCache","clear","Map"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\searchService.ts"],"sourcesContent":["import type { Database } from \"../lib/supabase\"\n\ntype Tables<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Row\"]\n\nexport interface SearchResult {\n  id: string\n  type: \"client\" | \"task\" | \"event\" | \"project\" | \"invoice\" | \"email\" | \"document\" | \"note\"\n  title: string\n  subtitle?: string\n  description?: string\n  url: string\n  relevance: number\n  metadata?: Record<string, unknown>\n  highlights?: string[]\n  created_at: string\n  updated_at: string\n}\n\nexport interface SearchFilters {\n  types?: SearchResult[\"type\"][]\n  dateRange?: {\n    start: Date\n    end: Date\n  }\n  status?: string[]\n  assignedTo?: string[]\n  tags?: string[]\n  priority?: string[]\n  clients?: string[]\n  projects?: string[]\n}\n\nexport interface SearchOptions {\n  limit?: number\n  offset?: number\n  sortBy?: \"relevance\" | \"date\" | \"title\"\n  sortOrder?: \"asc\" | \"desc\"\n  includeArchived?: boolean\n  fuzzySearch?: boolean\n}\n\nexport interface SavedSearch {\n  id: string\n  user_id: string\n  name: string\n  query: string\n  filters: SearchFilters\n  options: SearchOptions\n  is_public: boolean\n  created_at: string\n  updated_at: string\n}\n\nexport interface SearchAnalytics {\n  query: string\n  user_id: string\n  results_count: number\n  clicked_result_id?: string\n  search_time_ms: number\n  timestamp: string\n}\n\nexport interface SearchCache {\n  key: string\n  results: SearchResult[]\n  timestamp: number\n  ttl: number\n}\n\nexport interface SearchSuggestion {\n  text: string\n  type: 'query' | 'filter' | 'entity'\n  score: number\n  metadata?: Record<string, unknown>\n}\n\n// Enhanced search service with intelligent algorithms\nexport interface SearchService {\n  search: (query: string, filters?: SearchFilters, options?: SearchOptions) => Promise<SearchResult[]>\n  searchWithSuggestions: (query: string) => Promise<{ results: SearchResult[], suggestions: SearchSuggestion[] }>\n  saveSearch: (name: string, query: string, filters: SearchFilters, options?: SearchOptions) => Promise<SavedSearch>\n  getSavedSearches: (userId?: string) => Promise<SavedSearch[]>\n  deleteSavedSearch: (id: string) => Promise<void>\n  getSearchSuggestions: (query: string) => Promise<SearchSuggestion[]>\n  trackSearchAnalytics: (analytics: Omit<SearchAnalytics, 'timestamp'>) => Promise<void>\n  getPopularSearches: (limit?: number) => Promise<string[]>\n  clearCache: () => void\n}\n\nclass SearchServiceImpl implements SearchService {\n  private cache = new Map<string, SearchCache>()\n  private readonly CACHE_TTL = 5 * 60 * 1000 // 5 minutes\n  private readonly MAX_CACHE_SIZE = 100\n  private searchHistory: string[] = []\n  private popularQueries = new Map<string, number>()\n\n  private generateCacheKey(query: string, filters?: SearchFilters, options?: SearchOptions): string {\n    return btoa(JSON.stringify({ query, filters, options }))\n  }\n\n  private isValidCache(cache: SearchCache): boolean {\n    return Date.now() - cache.timestamp < cache.ttl\n  }\n\n  private addToCache(key: string, results: SearchResult[]): void {\n    if (this.cache.size >= this.MAX_CACHE_SIZE) {\n      const oldestKey = this.cache.keys().next().value\n      if (oldestKey) {\n        this.cache.delete(oldestKey)\n      }\n    }\n\n    this.cache.set(key, {\n      key,\n      results,\n      timestamp: Date.now(),\n      ttl: this.CACHE_TTL\n    })\n  }\n\n  private calculateRelevanceScore(item: any, query: string): number {\n    const queryLower = query.toLowerCase()\n    let score = 0\n\n    // Title match (highest weight)\n    if (item.title?.toLowerCase().includes(queryLower)) {\n      score += 10\n      if (item.title?.toLowerCase().startsWith(queryLower)) {\n        score += 5\n      }\n    }\n\n    // Description match\n    if (item.description?.toLowerCase().includes(queryLower)) {\n      score += 5\n    }\n\n    // Exact match bonus\n    if (item.title?.toLowerCase() === queryLower) {\n      score += 20\n    }\n\n    // Recent activity bonus\n    const daysSinceUpdate = (Date.now() - new Date(item.updated_at || item.created_at).getTime()) / (1000 * 60 * 60 * 24)\n    if (daysSinceUpdate < 7) {\n      score += 3\n    } else if (daysSinceUpdate < 30) {\n      score += 1\n    }\n\n    return score\n  }\n\n  private fuzzyMatch(text: string, query: string): boolean {\n    const textLower = text.toLowerCase()\n    const queryLower = query.toLowerCase()\n    \n    // Simple fuzzy matching - allows for 1 character difference per 4 characters\n    const maxErrors = Math.floor(queryLower.length / 4)\n    let errors = 0\n    let textIndex = 0\n    \n    for (let i = 0; i < queryLower.length; i++) {\n      let found = false\n      for (let j = textIndex; j < textLower.length && j < textIndex + 2; j++) {\n        if (textLower[j] === queryLower[i]) {\n          textIndex = j + 1\n          found = true\n          break\n        }\n      }\n      if (!found) {\n        errors++\n        if (errors > maxErrors) return false\n      }\n    }\n    \n    return true\n  }\n\n  private mockSearchData(): SearchResult[] {\n    return [\n      {\n        id: '1',\n        type: 'client',\n        title: 'Acme Corporation',\n        description: 'Large enterprise client with multiple projects',\n        url: '/clients/1',\n        relevance: 0.95,\n        created_at: '2024-01-15T10:00:00Z',\n        updated_at: '2024-01-20T15:30:00Z'\n      },\n      {\n        id: '2',\n        type: 'project',\n        title: 'Website Redesign',\n        description: 'Complete overhaul of company website with modern design',\n        url: '/projects/2',\n        relevance: 0.88,\n        created_at: '2024-01-10T09:00:00Z',\n        updated_at: '2024-01-25T11:45:00Z'\n      },\n      {\n        id: '3',\n        type: 'task',\n        title: 'Design Homepage Mockup',\n        description: 'Create initial design concepts for homepage',\n        url: '/tasks/3',\n        relevance: 0.82,\n        created_at: '2024-01-12T14:00:00Z',\n        updated_at: '2024-01-18T16:20:00Z'\n      }\n    ]\n  }\n\n  async search(query: string, filters?: SearchFilters, options?: SearchOptions): Promise<SearchResult[]> {\n    const cacheKey = this.generateCacheKey(query, filters, options)\n    const cached = this.cache.get(cacheKey)\n    \n    if (cached && this.isValidCache(cached)) {\n      return cached.results\n    }\n\n    // Track query popularity\n    const currentCount = this.popularQueries.get(query) || 0\n    this.popularQueries.set(query, currentCount + 1)\n    \n    // Add to search history\n    this.searchHistory.unshift(query)\n    if (this.searchHistory.length > 50) {\n      this.searchHistory = this.searchHistory.slice(0, 50)\n    }\n\n    // Simulate search delay\n    await new Promise(resolve => setTimeout(resolve, 100))\n\n    const mockData = this.mockSearchData()\n    let results: SearchResult[] = []\n\n    if (query.trim()) {\n      results = mockData\n        .filter(item => {\n          const matchesQuery = options?.fuzzySearch \n            ? this.fuzzyMatch(item.title + ' ' + (item.description || ''), query)\n            : (item.title?.toLowerCase().includes(query.toLowerCase()) || \n               item.description?.toLowerCase().includes(query.toLowerCase()))\n          \n          const matchesType = !filters?.types || filters.types.includes(item.type)\n          \n          return matchesQuery && matchesType\n        })\n        .map(item => ({\n          ...item,\n          url: `/${item.type}/${item.id}`,\n          relevance: this.calculateRelevanceScore(item, query),\n          highlights: [query]\n        }))\n        .sort((a, b) => {\n          if (options?.sortBy === 'date') {\n            const dateA = new Date(a.updated_at).getTime()\n            const dateB = new Date(b.updated_at).getTime()\n            return options.sortOrder === 'asc' ? dateA - dateB : dateB - dateA\n          }\n          return b.relevance - a.relevance\n        })\n    }\n\n    if (options?.limit) {\n      results = results.slice(options.offset || 0, (options.offset || 0) + options.limit)\n    }\n\n    this.addToCache(cacheKey, results)\n    return results\n  }\n\n  async searchWithSuggestions(query: string): Promise<{ results: SearchResult[], suggestions: SearchSuggestion[] }> {\n    const [results, suggestions] = await Promise.all([\n      this.search(query),\n      this.getSearchSuggestions(query)\n    ])\n\n    return { results, suggestions }\n  }\n\n  async saveSearch(name: string, query: string, filters: SearchFilters, options?: SearchOptions): Promise<SavedSearch> {\n    const savedSearch: SavedSearch = {\n      id: Date.now().toString(),\n      user_id: 'current-user',\n      name,\n      query,\n      filters,\n      options: options || {},\n      is_public: false,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    }\n\n    // In a real implementation, this would save to a database\n    const existing = JSON.parse(localStorage.getItem('savedSearches') || '[]')\n    existing.push(savedSearch)\n    localStorage.setItem('savedSearches', JSON.stringify(existing))\n\n    return savedSearch\n  }\n\n  async getSavedSearches(userId?: string): Promise<SavedSearch[]> {\n    // In a real implementation, this would fetch from a database\n    const saved = JSON.parse(localStorage.getItem('savedSearches') || '[]')\n    return userId ? saved.filter((s: SavedSearch) => s.user_id === userId) : saved\n  }\n\n  async deleteSavedSearch(id: string): Promise<void> {\n    const existing = JSON.parse(localStorage.getItem('savedSearches') || '[]')\n    const filtered = existing.filter((s: SavedSearch) => s.id !== id)\n    localStorage.setItem('savedSearches', JSON.stringify(filtered))\n  }\n\n  async getSearchSuggestions(query: string): Promise<SearchSuggestion[]> {\n    const suggestions: SearchSuggestion[] = []\n    \n    // Query suggestions from history\n    const historySuggestions = this.searchHistory\n      .filter(h => h.toLowerCase().includes(query.toLowerCase()) && h !== query)\n      .slice(0, 3)\n      .map(h => ({ text: h, type: 'query' as const, score: 0.8 }))\n    \n    suggestions.push(...historySuggestions)\n    \n    // Entity suggestions\n    const entitySuggestions = [\n      { text: 'clients', type: 'filter' as const, score: 0.6 },\n      { text: 'projects', type: 'filter' as const, score: 0.6 },\n      { text: 'tasks', type: 'filter' as const, score: 0.6 }\n    ].filter(s => s.text.includes(query.toLowerCase()))\n    \n    suggestions.push(...entitySuggestions)\n    \n    return suggestions.sort((a, b) => b.score - a.score).slice(0, 5)\n  }\n\n  async trackSearchAnalytics(analytics: Omit<SearchAnalytics, 'timestamp'>): Promise<void> {\n    const fullAnalytics: SearchAnalytics = {\n      ...analytics,\n      timestamp: new Date().toISOString()\n    }\n    \n    // In a real implementation, this would send to analytics service\n    // Silent logging - Search Analytics tracked\n  }\n\n  async getPopularSearches(limit = 10): Promise<string[]> {\n    return Array.from(this.popularQueries.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, limit)\n      .map(([query]) => query)\n  }\n\n  clearCache(): void {\n    this.cache.clear()\n  }\n}\n\nexport const searchService = new SearchServiceImpl()\n"],"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","ignoreList":[]}