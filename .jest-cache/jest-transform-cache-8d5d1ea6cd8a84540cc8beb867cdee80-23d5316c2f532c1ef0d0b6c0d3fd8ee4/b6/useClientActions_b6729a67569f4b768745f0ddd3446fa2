a05f5f8137272fd631883260f7a516d9
"use client";
"use strict";

/* istanbul ignore next */
function cov_1kq6b7eqw5() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\useClientActions.ts";
  var hash = "90c5c5276995fe28dc7c940e4d38317438ff8085";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\useClientActions.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 32
        }
      },
      "3": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 31
        }
      },
      "4": {
        start: {
          line: 13,
          column: 20
        },
        end: {
          line: 13,
          column: 52
        }
      },
      "5": {
        start: {
          line: 15,
          column: 32
        },
        end: {
          line: 15,
          column: 64
        }
      },
      "6": {
        start: {
          line: 16,
          column: 24
        },
        end: {
          line: 16,
          column: 29
        }
      },
      "7": {
        start: {
          line: 17,
          column: 22
        },
        end: {
          line: 38,
          column: 6
        }
      },
      "8": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "9": {
        start: {
          line: 22,
          column: 30
        },
        end: {
          line: 25,
          column: 13
        }
      },
      "10": {
        start: {
          line: 24,
          column: 53
        },
        end: {
          line: 24,
          column: 72
        }
      },
      "11": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 29,
          column: 15
        }
      },
      "12": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 29
        }
      },
      "13": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 24
        }
      },
      "14": {
        start: {
          line: 39,
          column: 25
        },
        end: {
          line: 56,
          column: 6
        }
      },
      "15": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "16": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 49,
          column: 15
        }
      },
      "17": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 24
        }
      },
      "18": {
        start: {
          line: 57,
          column: 20
        },
        end: {
          line: 78,
          column: 6
        }
      },
      "19": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "20": {
        start: {
          line: 61,
          column: 25
        },
        end: {
          line: 61,
          column: 63
        }
      },
      "21": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 71,
          column: 15
        }
      },
      "22": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 24
        }
      },
      "23": {
        start: {
          line: 79,
          column: 30
        },
        end: {
          line: 96,
          column: 6
        }
      },
      "24": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "25": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 89,
          column: 15
        }
      },
      "26": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 24
        }
      },
      "27": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 104,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 10
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "useClientActions",
        decl: {
          start: {
            line: 14,
            column: 9
          },
          end: {
            line: 14,
            column: 25
          }
        },
        loc: {
          start: {
            line: 14,
            column: 28
          },
          end: {
            line: 105,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 46
          },
          end: {
            line: 17,
            column: 47
          }
        },
        loc: {
          start: {
            line: 17,
            column: 62
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 17
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 24,
            column: 48
          },
          end: {
            line: 24,
            column: 49
          }
        },
        loc: {
          start: {
            line: 24,
            column: 53
          },
          end: {
            line: 24,
            column: 72
          }
        },
        line: 24
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 39,
            column: 49
          },
          end: {
            line: 39,
            column: 50
          }
        },
        loc: {
          start: {
            line: 39,
            column: 67
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 39
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 57,
            column: 44
          },
          end: {
            line: 57,
            column: 45
          }
        },
        loc: {
          start: {
            line: 57,
            column: 68
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 57
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 79,
            column: 54
          },
          end: {
            line: 79,
            column: 55
          }
        },
        loc: {
          start: {
            line: 79,
            column: 79
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 79
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 53
          },
          end: {
            line: 24,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 53
          },
          end: {
            line: 24,
            column: 67
          }
        }, {
          start: {
            line: 24,
            column: 71
          },
          end: {
            line: 24,
            column: 72
          }
        }],
        line: 24
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\useClientActions.ts"],
      sourcesContent: ["\"use client\"\n\nimport { useCallback } from \"react\"\nimport { useAppContext } from \"../context/AppContext\"\nimport type { Client } from \"../types\"\n\nexport function useClientActions() {\n  const { state, dispatch } = useAppContext()\n  const { clients } = state\n\n  const addClient = useCallback(\n    async (client: Omit<Client, \"id\">) => {\n      try {\n        // In a real app, this would call the API\n        // const newClient = await clientsApi.create(client);\n\n        // For now, simulate API call\n        const newClient: Client = {\n          ...client,\n          id: (Math.max(0, ...clients.map((c) => parseInt(c.id) || 0)) + 1).toString(),\n        }\n\n        dispatch({ type: \"ADD_CLIENT\", payload: newClient })\n        return newClient\n      } catch (error) {\n        // Error adding client - error handled silently\n        throw error\n      }\n    },\n    [clients, dispatch],\n  )\n\n  const updateClient = useCallback(\n    async (id: string, data: Partial<Client>) => {\n      try {\n        // In a real app, this would call the API\n        // await clientsApi.update(id, data);\n\n        dispatch({ type: \"UPDATE_CLIENT\", payload: { id, client: data } })\n      } catch (error) {\n        // Error updating client - error handled silently\n        throw error\n      }\n    },\n    [dispatch],\n  )\n\n  const addNote = useCallback(\n    async (clientId: string, note: { type: \"call\" | \"email\" | \"meeting\"; content: string }) => {\n      try {\n        // In a real app, this would call the API\n        // await clientsApi.addNote(clientId, note);\n\n        const date = new Date().toISOString().split(\"T\")[0]\n        dispatch({\n          type: \"ADD_CLIENT_NOTE\",\n          payload: {\n            clientId,\n            note: { ...note, date },\n          },\n        })\n      } catch (error) {\n        // Error adding note - error handled silently\n        throw error\n      }\n    },\n    [dispatch],\n  )\n\n  const updateClientStage = useCallback(\n    async (clientId: string, stage: string) => {\n      try {\n        // In a real app, this would call the API\n        // await clientsApi.updateStage(clientId, stage);\n\n        dispatch({ type: \"UPDATE_CLIENT_STAGE\", payload: { clientId, stage } })\n      } catch (error) {\n        // Error updating client stage - error handled silently\n        throw error\n      }\n    },\n    [dispatch],\n  )\n\n  // Additional actions can be added here\n\n  return {\n    clients,\n    addClient,\n    updateClient,\n    addNote,\n    updateClientStage,\n  }\n}\n"],
      names: ["useClientActions", "state", "dispatch", "useAppContext", "clients", "addClient", "useCallback", "client", "newClient", "id", "Math", "max", "map", "c", "parseInt", "toString", "type", "payload", "error", "updateClient", "data", "addNote", "clientId", "note", "date", "Date", "toISOString", "split", "updateClientStage", "stage"],
      mappings: "AAAA;;;;;+BAMgBA;;;eAAAA;;;uBAJY;4BACE;AAGvB,SAASA;IACd,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAE,GAAGC,IAAAA,yBAAa;IACzC,MAAM,EAAEC,OAAO,EAAE,GAAGH;IAEpB,MAAMI,YAAYC,IAAAA,kBAAW,EAC3B,OAAOC;QACL,IAAI;YACF,yCAAyC;YACzC,qDAAqD;YAErD,6BAA6B;YAC7B,MAAMC,YAAoB;gBACxB,GAAGD,MAAM;gBACTE,IAAI,AAACC,CAAAA,KAAKC,GAAG,CAAC,MAAMP,QAAQQ,GAAG,CAAC,CAACC,IAAMC,SAASD,EAAEJ,EAAE,KAAK,MAAM,CAAA,EAAGM,QAAQ;YAC5E;YAEAb,SAAS;gBAAEc,MAAM;gBAAcC,SAAST;YAAU;YAClD,OAAOA;QACT,EAAE,OAAOU,OAAO;YACd,+CAA+C;YAC/C,MAAMA;QACR;IACF,GACA;QAACd;QAASF;KAAS;IAGrB,MAAMiB,eAAeb,IAAAA,kBAAW,EAC9B,OAAOG,IAAYW;QACjB,IAAI;YACF,yCAAyC;YACzC,qCAAqC;YAErClB,SAAS;gBAAEc,MAAM;gBAAiBC,SAAS;oBAAER;oBAAIF,QAAQa;gBAAK;YAAE;QAClE,EAAE,OAAOF,OAAO;YACd,iDAAiD;YACjD,MAAMA;QACR;IACF,GACA;QAAChB;KAAS;IAGZ,MAAMmB,UAAUf,IAAAA,kBAAW,EACzB,OAAOgB,UAAkBC;QACvB,IAAI;YACF,yCAAyC;YACzC,4CAA4C;YAE5C,MAAMC,OAAO,IAAIC,OAAOC,WAAW,GAAGC,KAAK,CAAC,IAAI,CAAC,EAAE;YACnDzB,SAAS;gBACPc,MAAM;gBACNC,SAAS;oBACPK;oBACAC,MAAM;wBAAE,GAAGA,IAAI;wBAAEC;oBAAK;gBACxB;YACF;QACF,EAAE,OAAON,OAAO;YACd,6CAA6C;YAC7C,MAAMA;QACR;IACF,GACA;QAAChB;KAAS;IAGZ,MAAM0B,oBAAoBtB,IAAAA,kBAAW,EACnC,OAAOgB,UAAkBO;QACvB,IAAI;YACF,yCAAyC;YACzC,iDAAiD;YAEjD3B,SAAS;gBAAEc,MAAM;gBAAuBC,SAAS;oBAAEK;oBAAUO;gBAAM;YAAE;QACvE,EAAE,OAAOX,OAAO;YACd,uDAAuD;YACvD,MAAMA;QACR;IACF,GACA;QAAChB;KAAS;IAGZ,uCAAuC;IAEvC,OAAO;QACLE;QACAC;QACAc;QACAE;QACAO;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "90c5c5276995fe28dc7c940e4d38317438ff8085"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1kq6b7eqw5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1kq6b7eqw5();
cov_1kq6b7eqw5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1kq6b7eqw5().s[1]++;
Object.defineProperty(exports, "useClientActions", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1kq6b7eqw5().f[0]++;
    cov_1kq6b7eqw5().s[2]++;
    return useClientActions;
  }
});
const _react =
/* istanbul ignore next */
(cov_1kq6b7eqw5().s[3]++, require("react"));
const _AppContext =
/* istanbul ignore next */
(cov_1kq6b7eqw5().s[4]++, require("../context/AppContext"));
function useClientActions() {
  /* istanbul ignore next */
  cov_1kq6b7eqw5().f[1]++;
  const {
    state,
    dispatch
  } =
  /* istanbul ignore next */
  (cov_1kq6b7eqw5().s[5]++, (0, _AppContext.useAppContext)());
  const {
    clients
  } =
  /* istanbul ignore next */
  (cov_1kq6b7eqw5().s[6]++, state);
  const addClient =
  /* istanbul ignore next */
  (cov_1kq6b7eqw5().s[7]++, (0, _react.useCallback)(async client => {
    /* istanbul ignore next */
    cov_1kq6b7eqw5().f[2]++;
    cov_1kq6b7eqw5().s[8]++;
    try {
      // In a real app, this would call the API
      // const newClient = await clientsApi.create(client);
      // For now, simulate API call
      const newClient =
      /* istanbul ignore next */
      (cov_1kq6b7eqw5().s[9]++, {
        ...client,
        id: (Math.max(0, ...clients.map(c => {
          /* istanbul ignore next */
          cov_1kq6b7eqw5().f[3]++;
          cov_1kq6b7eqw5().s[10]++;
          return /* istanbul ignore next */(cov_1kq6b7eqw5().b[0][0]++, parseInt(c.id)) ||
          /* istanbul ignore next */
          (cov_1kq6b7eqw5().b[0][1]++, 0);
        })) + 1).toString()
      });
      /* istanbul ignore next */
      cov_1kq6b7eqw5().s[11]++;
      dispatch({
        type: "ADD_CLIENT",
        payload: newClient
      });
      /* istanbul ignore next */
      cov_1kq6b7eqw5().s[12]++;
      return newClient;
    } catch (error) {
      /* istanbul ignore next */
      cov_1kq6b7eqw5().s[13]++;
      // Error adding client - error handled silently
      throw error;
    }
  }, [clients, dispatch]));
  const updateClient =
  /* istanbul ignore next */
  (cov_1kq6b7eqw5().s[14]++, (0, _react.useCallback)(async (id, data) => {
    /* istanbul ignore next */
    cov_1kq6b7eqw5().f[4]++;
    cov_1kq6b7eqw5().s[15]++;
    try {
      /* istanbul ignore next */
      cov_1kq6b7eqw5().s[16]++;
      // In a real app, this would call the API
      // await clientsApi.update(id, data);
      dispatch({
        type: "UPDATE_CLIENT",
        payload: {
          id,
          client: data
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1kq6b7eqw5().s[17]++;
      // Error updating client - error handled silently
      throw error;
    }
  }, [dispatch]));
  const addNote =
  /* istanbul ignore next */
  (cov_1kq6b7eqw5().s[18]++, (0, _react.useCallback)(async (clientId, note) => {
    /* istanbul ignore next */
    cov_1kq6b7eqw5().f[5]++;
    cov_1kq6b7eqw5().s[19]++;
    try {
      // In a real app, this would call the API
      // await clientsApi.addNote(clientId, note);
      const date =
      /* istanbul ignore next */
      (cov_1kq6b7eqw5().s[20]++, new Date().toISOString().split("T")[0]);
      /* istanbul ignore next */
      cov_1kq6b7eqw5().s[21]++;
      dispatch({
        type: "ADD_CLIENT_NOTE",
        payload: {
          clientId,
          note: {
            ...note,
            date
          }
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1kq6b7eqw5().s[22]++;
      // Error adding note - error handled silently
      throw error;
    }
  }, [dispatch]));
  const updateClientStage =
  /* istanbul ignore next */
  (cov_1kq6b7eqw5().s[23]++, (0, _react.useCallback)(async (clientId, stage) => {
    /* istanbul ignore next */
    cov_1kq6b7eqw5().f[6]++;
    cov_1kq6b7eqw5().s[24]++;
    try {
      /* istanbul ignore next */
      cov_1kq6b7eqw5().s[25]++;
      // In a real app, this would call the API
      // await clientsApi.updateStage(clientId, stage);
      dispatch({
        type: "UPDATE_CLIENT_STAGE",
        payload: {
          clientId,
          stage
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1kq6b7eqw5().s[26]++;
      // Error updating client stage - error handled silently
      throw error;
    }
  }, [dispatch]));
  // Additional actions can be added here
  /* istanbul ignore next */
  cov_1kq6b7eqw5().s[27]++;
  return {
    clients,
    addClient,
    updateClient,
    addNote,
    updateClientStage
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWtxNmI3ZXF3NSIsImFjdHVhbENvdmVyYWdlIiwicyIsInVzZUNsaWVudEFjdGlvbnMiLCJmIiwic3RhdGUiLCJkaXNwYXRjaCIsIl9BcHBDb250ZXh0IiwidXNlQXBwQ29udGV4dCIsImNsaWVudHMiLCJhZGRDbGllbnQiLCJfcmVhY3QiLCJ1c2VDYWxsYmFjayIsImNsaWVudCIsIm5ld0NsaWVudCIsImlkIiwiTWF0aCIsIm1heCIsIm1hcCIsImMiLCJiIiwicGFyc2VJbnQiLCJ0b1N0cmluZyIsInR5cGUiLCJwYXlsb2FkIiwiZXJyb3IiLCJ1cGRhdGVDbGllbnQiLCJkYXRhIiwiYWRkTm90ZSIsImNsaWVudElkIiwibm90ZSIsImRhdGUiLCJEYXRlIiwidG9JU09TdHJpbmciLCJzcGxpdCIsInVwZGF0ZUNsaWVudFN0YWdlIiwic3RhZ2UiXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGNoYXNlXFxEb3dubG9hZHNcXGNybSAoMzIpXFxzcmNcXGhvb2tzXFx1c2VDbGllbnRBY3Rpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiXG5cbmltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IHVzZUFwcENvbnRleHQgfSBmcm9tIFwiLi4vY29udGV4dC9BcHBDb250ZXh0XCJcbmltcG9ydCB0eXBlIHsgQ2xpZW50IH0gZnJvbSBcIi4uL3R5cGVzXCJcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUNsaWVudEFjdGlvbnMoKSB7XG4gIGNvbnN0IHsgc3RhdGUsIGRpc3BhdGNoIH0gPSB1c2VBcHBDb250ZXh0KClcbiAgY29uc3QgeyBjbGllbnRzIH0gPSBzdGF0ZVxuXG4gIGNvbnN0IGFkZENsaWVudCA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jIChjbGllbnQ6IE9taXQ8Q2xpZW50LCBcImlkXCI+KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBJbiBhIHJlYWwgYXBwLCB0aGlzIHdvdWxkIGNhbGwgdGhlIEFQSVxuICAgICAgICAvLyBjb25zdCBuZXdDbGllbnQgPSBhd2FpdCBjbGllbnRzQXBpLmNyZWF0ZShjbGllbnQpO1xuXG4gICAgICAgIC8vIEZvciBub3csIHNpbXVsYXRlIEFQSSBjYWxsXG4gICAgICAgIGNvbnN0IG5ld0NsaWVudDogQ2xpZW50ID0ge1xuICAgICAgICAgIC4uLmNsaWVudCxcbiAgICAgICAgICBpZDogKE1hdGgubWF4KDAsIC4uLmNsaWVudHMubWFwKChjKSA9PiBwYXJzZUludChjLmlkKSB8fCAwKSkgKyAxKS50b1N0cmluZygpLFxuICAgICAgICB9XG5cbiAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiBcIkFERF9DTElFTlRcIiwgcGF5bG9hZDogbmV3Q2xpZW50IH0pXG4gICAgICAgIHJldHVybiBuZXdDbGllbnRcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIEVycm9yIGFkZGluZyBjbGllbnQgLSBlcnJvciBoYW5kbGVkIHNpbGVudGx5XG4gICAgICAgIHRocm93IGVycm9yXG4gICAgICB9XG4gICAgfSxcbiAgICBbY2xpZW50cywgZGlzcGF0Y2hdLFxuICApXG5cbiAgY29uc3QgdXBkYXRlQ2xpZW50ID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKGlkOiBzdHJpbmcsIGRhdGE6IFBhcnRpYWw8Q2xpZW50PikgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gSW4gYSByZWFsIGFwcCwgdGhpcyB3b3VsZCBjYWxsIHRoZSBBUElcbiAgICAgICAgLy8gYXdhaXQgY2xpZW50c0FwaS51cGRhdGUoaWQsIGRhdGEpO1xuXG4gICAgICAgIGRpc3BhdGNoKHsgdHlwZTogXCJVUERBVEVfQ0xJRU5UXCIsIHBheWxvYWQ6IHsgaWQsIGNsaWVudDogZGF0YSB9IH0pXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBFcnJvciB1cGRhdGluZyBjbGllbnQgLSBlcnJvciBoYW5kbGVkIHNpbGVudGx5XG4gICAgICAgIHRocm93IGVycm9yXG4gICAgICB9XG4gICAgfSxcbiAgICBbZGlzcGF0Y2hdLFxuICApXG5cbiAgY29uc3QgYWRkTm90ZSA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jIChjbGllbnRJZDogc3RyaW5nLCBub3RlOiB7IHR5cGU6IFwiY2FsbFwiIHwgXCJlbWFpbFwiIHwgXCJtZWV0aW5nXCI7IGNvbnRlbnQ6IHN0cmluZyB9KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBJbiBhIHJlYWwgYXBwLCB0aGlzIHdvdWxkIGNhbGwgdGhlIEFQSVxuICAgICAgICAvLyBhd2FpdCBjbGllbnRzQXBpLmFkZE5vdGUoY2xpZW50SWQsIG5vdGUpO1xuXG4gICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc3BsaXQoXCJUXCIpWzBdXG4gICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiBcIkFERF9DTElFTlRfTk9URVwiLFxuICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgIGNsaWVudElkLFxuICAgICAgICAgICAgbm90ZTogeyAuLi5ub3RlLCBkYXRlIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIEVycm9yIGFkZGluZyBub3RlIC0gZXJyb3IgaGFuZGxlZCBzaWxlbnRseVxuICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgfVxuICAgIH0sXG4gICAgW2Rpc3BhdGNoXSxcbiAgKVxuXG4gIGNvbnN0IHVwZGF0ZUNsaWVudFN0YWdlID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKGNsaWVudElkOiBzdHJpbmcsIHN0YWdlOiBzdHJpbmcpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIEluIGEgcmVhbCBhcHAsIHRoaXMgd291bGQgY2FsbCB0aGUgQVBJXG4gICAgICAgIC8vIGF3YWl0IGNsaWVudHNBcGkudXBkYXRlU3RhZ2UoY2xpZW50SWQsIHN0YWdlKTtcblxuICAgICAgICBkaXNwYXRjaCh7IHR5cGU6IFwiVVBEQVRFX0NMSUVOVF9TVEFHRVwiLCBwYXlsb2FkOiB7IGNsaWVudElkLCBzdGFnZSB9IH0pXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBFcnJvciB1cGRhdGluZyBjbGllbnQgc3RhZ2UgLSBlcnJvciBoYW5kbGVkIHNpbGVudGx5XG4gICAgICAgIHRocm93IGVycm9yXG4gICAgICB9XG4gICAgfSxcbiAgICBbZGlzcGF0Y2hdLFxuICApXG5cbiAgLy8gQWRkaXRpb25hbCBhY3Rpb25zIGNhbiBiZSBhZGRlZCBoZXJlXG5cbiAgcmV0dXJuIHtcbiAgICBjbGllbnRzLFxuICAgIGFkZENsaWVudCxcbiAgICB1cGRhdGVDbGllbnQsXG4gICAgYWRkTm90ZSxcbiAgICB1cGRhdGVDbGllbnRTdGFnZSxcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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