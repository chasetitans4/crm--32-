7e1d38ada9538a107e89eb4b38d93d1a
"use strict";
// Mock framer-motion
jest.mock('framer-motion', ()=>({
        motion: {
            div: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    ...props,
                    children: children
                }),
            button: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    ...props,
                    children: children
                })
        },
        AnimatePresence: ({ children })=>children
    }));
// Mock chart libraries
jest.mock('recharts', ()=>({
        BarChart: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "bar-chart",
                children: children
            }),
        LineChart: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "line-chart",
                children: children
            }),
        PieChart: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "pie-chart",
                children: children
            }),
        Bar: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "bar"
            }),
        Line: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "line"
            }),
        Pie: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "pie"
            }),
        XAxis: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "x-axis"
            }),
        YAxis: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "y-axis"
            }),
        CartesianGrid: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "cartesian-grid"
            }),
        Tooltip: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "tooltip"
            }),
        Legend: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "legend"
            }),
        ResponsiveContainer: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "responsive-container",
                children: children
            }),
        Cell: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "cell"
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
const _Reports = /*#__PURE__*/ _interop_require_default(require("../Reports"));
const _AppContext = require("../../context/AppContext");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockClients = [
    {
        id: '1',
        name: 'John Doe',
        email: 'john@example.com',
        phone: '+1 (555) 123-4567',
        company: 'Acme Corp',
        stage: 'lead',
        value: 50000,
        lastContact: '2024-01-15',
        notes: [],
        projects: [],
        tags: [
            'enterprise'
        ],
        priority: 'high',
        source: 'website',
        assignedTo: 'sales-rep-1'
    },
    {
        id: '2',
        name: 'Jane Smith',
        email: 'jane@example.com',
        phone: '+1 (555) 987-6543',
        company: 'Tech Solutions',
        stage: 'qualified',
        value: 75000,
        lastContact: '2024-01-10',
        notes: [],
        projects: [],
        tags: [
            'tech'
        ],
        priority: 'medium',
        source: 'referral',
        assignedTo: 'sales-rep-2'
    },
    {
        id: '3',
        name: 'Bob Wilson',
        email: 'bob@example.com',
        phone: '+1 (555) 456-7890',
        company: 'StartupXYZ',
        stage: 'closed',
        value: 25000,
        lastContact: '2024-01-05',
        notes: [],
        projects: [],
        tags: [
            'startup'
        ],
        priority: 'low',
        source: 'cold-call',
        assignedTo: 'sales-rep-1'
    }
];
const mockTasks = [
    {
        id: '1',
        title: 'Follow up with John Doe',
        description: 'Schedule demo call',
        dueDate: '2024-01-20',
        priority: 'high',
        status: 'pending',
        assignedTo: 'sales-rep-1',
        clientId: '1'
    },
    {
        id: '2',
        title: 'Prepare proposal',
        description: 'Create proposal',
        dueDate: '2024-01-18',
        priority: 'medium',
        status: 'completed',
        assignedTo: 'sales-rep-2',
        clientId: '2'
    }
];
const mockContracts = [
    {
        id: '1',
        clientId: '3',
        title: 'Software Development Contract',
        value: 25000,
        startDate: '2024-01-01',
        endDate: '2024-06-01',
        status: 'active',
        terms: 'Standard terms'
    }
];
const mockInvoices = [
    {
        id: '1',
        clientId: '3',
        contractId: '1',
        amount: 5000,
        dueDate: '2024-01-30',
        status: 'pending',
        items: []
    },
    {
        id: '2',
        clientId: '3',
        contractId: '1',
        amount: 3000,
        dueDate: '2024-02-15',
        status: 'paid',
        items: []
    }
];
const mockSalesStages = [
    {
        id: 'lead',
        name: 'Lead',
        color: '#3B82F6'
    },
    {
        id: 'qualified',
        name: 'Qualified',
        color: '#10B981'
    },
    {
        id: 'proposal',
        name: 'Proposal',
        color: '#F59E0B'
    },
    {
        id: 'closed',
        name: 'Closed',
        color: '#EF4444'
    }
];
const mockInitialState = {
    clients: mockClients,
    salesStages: mockSalesStages,
    contracts: mockContracts,
    invoices: mockInvoices,
    tasks: mockTasks,
    projects: [],
    reports: [],
    settings: {
        currency: 'USD',
        dateFormat: 'MM/DD/YYYY',
        timezone: 'UTC'
    }
};
const renderWithProvider = (component)=>{
    return (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppContext.AppProvider, {
        initialState: mockInitialState,
        children: component
    }));
};
describe('Reports Component', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    test('renders reports component', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        expect(_react1.screen.getByText('Reports & Analytics')).toBeInTheDocument();
    });
    test('displays sales overview metrics', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        expect(_react1.screen.getByText('Sales Overview')).toBeInTheDocument();
        expect(_react1.screen.getByText('Total Revenue')).toBeInTheDocument();
        expect(_react1.screen.getByText('Active Clients')).toBeInTheDocument();
        expect(_react1.screen.getByText('Conversion Rate')).toBeInTheDocument();
    });
    test('shows correct total revenue calculation', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        // Total revenue should be sum of all client values
        const totalRevenue = mockClients.reduce((sum, client)=>sum + client.value, 0);
        expect(_react1.screen.getByText(`$${totalRevenue.toLocaleString()}`)).toBeInTheDocument();
    });
    test('displays correct client count', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        expect(_react1.screen.getByText(mockClients.length.toString())).toBeInTheDocument();
    });
    test('calculates conversion rate correctly', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        const closedClients = mockClients.filter((c)=>c.stage === 'closed').length;
        const totalClients = mockClients.length;
        const conversionRate = Math.round(closedClients / totalClients * 100);
        expect(_react1.screen.getByText(`${conversionRate}%`)).toBeInTheDocument();
    });
    test('displays sales pipeline chart', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        expect(_react1.screen.getByText('Sales Pipeline')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('bar-chart')).toBeInTheDocument();
    });
    test('shows revenue trend chart', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        expect(_react1.screen.getByText('Revenue Trend')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('line-chart')).toBeInTheDocument();
    });
    test('displays client source distribution', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        expect(_react1.screen.getByText('Client Sources')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('pie-chart')).toBeInTheDocument();
    });
    test('shows task completion metrics', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        expect(_react1.screen.getByText('Task Performance')).toBeInTheDocument();
        const completedTasks = mockTasks.filter((t)=>t.status === 'completed').length;
        const totalTasks = mockTasks.length;
        const completionRate = Math.round(completedTasks / totalTasks * 100);
        expect(_react1.screen.getByText(`${completionRate}%`)).toBeInTheDocument();
    });
    test('displays invoice status breakdown', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        expect(_react1.screen.getByText('Invoice Status')).toBeInTheDocument();
        const pendingInvoices = mockInvoices.filter((i)=>i.status === 'pending').length;
        const paidInvoices = mockInvoices.filter((i)=>i.status === 'paid').length;
        expect(pendingInvoices).toBe(1);
        expect(paidInvoices).toBe(1);
    });
    test('shows contract performance metrics', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        expect(_react1.screen.getByText('Contract Performance')).toBeInTheDocument();
        expect(_react1.screen.getByText('Active Contracts')).toBeInTheDocument();
        expect(_react1.screen.getByText(mockContracts.length.toString())).toBeInTheDocument();
    });
    test('date range filter works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        const dateRangeButton = _react1.screen.getByText('Last 30 Days');
        await user.click(dateRangeButton);
        expect(_react1.screen.getByText('Last 7 Days')).toBeInTheDocument();
        expect(_react1.screen.getByText('Last 90 Days')).toBeInTheDocument();
        expect(_react1.screen.getByText('Custom Range')).toBeInTheDocument();
    });
    test('export report functionality works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        const exportButton = _react1.screen.getByText('Export Report');
        await user.click(exportButton);
        expect(_react1.screen.getByText('Export Options')).toBeInTheDocument();
        expect(_react1.screen.getByText('PDF')).toBeInTheDocument();
        expect(_react1.screen.getByText('Excel')).toBeInTheDocument();
        expect(_react1.screen.getByText('CSV')).toBeInTheDocument();
    });
    test('report type switching works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        const salesReportTab = _react1.screen.getByText('Sales Report');
        const performanceReportTab = _react1.screen.getByText('Performance Report');
        await user.click(performanceReportTab);
        expect(_react1.screen.getByText('Team Performance')).toBeInTheDocument();
        await user.click(salesReportTab);
        expect(_react1.screen.getByText('Sales Overview')).toBeInTheDocument();
    });
    test('displays sales rep performance', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        expect(_react1.screen.getByText('Sales Rep Performance')).toBeInTheDocument();
        expect(_react1.screen.getByText('sales-rep-1')).toBeInTheDocument();
        expect(_react1.screen.getByText('sales-rep-2')).toBeInTheDocument();
    });
    test('shows priority distribution', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        expect(_react1.screen.getByText('Priority Distribution')).toBeInTheDocument();
        const highPriorityCount = mockClients.filter((c)=>c.priority === 'high').length;
        const mediumPriorityCount = mockClients.filter((c)=>c.priority === 'medium').length;
        const lowPriorityCount = mockClients.filter((c)=>c.priority === 'low').length;
        expect(highPriorityCount).toBe(1);
        expect(mediumPriorityCount).toBe(1);
        expect(lowPriorityCount).toBe(1);
    });
    test('displays stage progression metrics', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        expect(_react1.screen.getByText('Stage Progression')).toBeInTheDocument();
        // Check stage distribution
        const leadCount = mockClients.filter((c)=>c.stage === 'lead').length;
        const qualifiedCount = mockClients.filter((c)=>c.stage === 'qualified').length;
        const closedCount = mockClients.filter((c)=>c.stage === 'closed').length;
        expect(leadCount).toBe(1);
        expect(qualifiedCount).toBe(1);
        expect(closedCount).toBe(1);
    });
    test('shows average deal size', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        expect(_react1.screen.getByText('Average Deal Size')).toBeInTheDocument();
        const totalValue = mockClients.reduce((sum, client)=>sum + client.value, 0);
        const averageValue = Math.round(totalValue / mockClients.length);
        expect(_react1.screen.getByText(`$${averageValue.toLocaleString()}`)).toBeInTheDocument();
    });
    test('displays monthly recurring revenue', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        expect(_react1.screen.getByText('Monthly Recurring Revenue')).toBeInTheDocument();
    });
    test('shows client acquisition cost', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        expect(_react1.screen.getByText('Client Acquisition Cost')).toBeInTheDocument();
    });
    test('displays sales velocity metrics', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        expect(_react1.screen.getByText('Sales Velocity')).toBeInTheDocument();
    });
    test('handles empty data gracefully', ()=>{
        const emptyState = {
            ...mockInitialState,
            clients: [],
            tasks: [],
            contracts: [],
            invoices: []
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppContext.AppProvider, {
            initialState: emptyState,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {})
        }));
        expect(_react1.screen.getByText('No data available')).toBeInTheDocument();
    });
    test('refresh data functionality works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        const refreshButton = _react1.screen.getByText('Refresh Data');
        await user.click(refreshButton);
        // Should show loading state
        expect(_react1.screen.getByText('Refreshing...')).toBeInTheDocument();
    });
    test('custom date range picker works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        const dateRangeButton = _react1.screen.getByText('Last 30 Days');
        await user.click(dateRangeButton);
        const customRangeOption = _react1.screen.getByText('Custom Range');
        await user.click(customRangeOption);
        expect(_react1.screen.getByText('Select Date Range')).toBeInTheDocument();
    });
    test('drill-down functionality works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        // Click on a chart element to drill down
        const chartElement = _react1.screen.getByTestId('bar-chart');
        await user.click(chartElement);
        expect(_react1.screen.getByText('Detailed View')).toBeInTheDocument();
    });
    test('report scheduling works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        const scheduleButton = _react1.screen.getByText('Schedule Report');
        await user.click(scheduleButton);
        expect(_react1.screen.getByText('Schedule Options')).toBeInTheDocument();
        expect(_react1.screen.getByText('Daily')).toBeInTheDocument();
        expect(_react1.screen.getByText('Weekly')).toBeInTheDocument();
        expect(_react1.screen.getByText('Monthly')).toBeInTheDocument();
    });
    test('responsive design works correctly', ()=>{
        // Mock mobile viewport
        Object.defineProperty(window, 'innerWidth', {
            writable: true,
            configurable: true,
            value: 768
        });
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        const reportsContainer = _react1.screen.getByText('Reports & Analytics').closest('div');
        expect(reportsContainer).toBeInTheDocument();
    });
    test('chart tooltips display correctly', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        const chartElement = _react1.screen.getByTestId('bar-chart');
        await user.hover(chartElement);
        expect(_react1.screen.getByTestId('tooltip')).toBeInTheDocument();
    });
    test('legend interactions work', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Reports.default, {}));
        const legendElement = _react1.screen.getByTestId('legend');
        await user.click(legendElement);
        // Should toggle data series visibility
        expect(legendElement).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,