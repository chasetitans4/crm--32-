fe1c47178cffda37872acc5bf280da68
"use strict";

/* istanbul ignore next */
function cov_jdujg0y4n() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\database.ts";
  var hash = "efa94cef76452f50ef15af155831e48496234cfb";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\database.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 31
        }
      },
      "3": {
        start: {
          line: 11,
          column: 18
        },
        end: {
          line: 11,
          column: 44
        }
      },
      "4": {
        start: {
          line: 12,
          column: 18
        },
        end: {
          line: 12,
          column: 46
        }
      },
      "5": {
        start: {
          line: 14,
          column: 33
        },
        end: {
          line: 18,
          column: 1
        }
      },
      "6": {
        start: {
          line: 15,
          column: 24
        },
        end: {
          line: 15,
          column: 60
        }
      },
      "7": {
        start: {
          line: 16,
          column: 24
        },
        end: {
          line: 16,
          column: 65
        }
      },
      "8": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 121
        }
      },
      "9": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "10": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 57,
          column: 14
        }
      },
      "11": {
        start: {
          line: 59,
          column: 32
        },
        end: {
          line: 61,
          column: 10
        }
      },
      "12": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 80
        }
      },
      "13": {
        start: {
          line: 62,
          column: 19
        },
        end: {
          line: 62,
          column: 80
        }
      },
      "14": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 26
        }
      },
      "15": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 77
        }
      },
      "16": {
        start: {
          line: 66,
          column: 33
        },
        end: {
          line: 66,
          column: 77
        }
      },
      "17": {
        start: {
          line: 67,
          column: 32
        },
        end: {
          line: 67,
          column: 106
        }
      },
      "18": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "19": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 72
        }
      },
      "20": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 20
        }
      },
      "21": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 77
        }
      },
      "22": {
        start: {
          line: 74,
          column: 33
        },
        end: {
          line: 74,
          column: 77
        }
      },
      "23": {
        start: {
          line: 75,
          column: 32
        },
        end: {
          line: 79,
          column: 28
        }
      },
      "24": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 80
        }
      },
      "25": {
        start: {
          line: 80,
          column: 19
        },
        end: {
          line: 80,
          column: 80
        }
      },
      "26": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 20
        }
      },
      "27": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 77
        }
      },
      "28": {
        start: {
          line: 84,
          column: 33
        },
        end: {
          line: 84,
          column: 77
        }
      },
      "29": {
        start: {
          line: 85,
          column: 32
        },
        end: {
          line: 88,
          column: 41
        }
      },
      "30": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 80
        }
      },
      "31": {
        start: {
          line: 89,
          column: 19
        },
        end: {
          line: 89,
          column: 80
        }
      },
      "32": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 20
        }
      },
      "33": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 77
        }
      },
      "34": {
        start: {
          line: 93,
          column: 33
        },
        end: {
          line: 93,
          column: 77
        }
      },
      "35": {
        start: {
          line: 94,
          column: 26
        },
        end: {
          line: 94,
          column: 88
        }
      },
      "36": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 80
        }
      },
      "37": {
        start: {
          line: 95,
          column: 19
        },
        end: {
          line: 95,
          column: 80
        }
      },
      "38": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 77
        }
      },
      "39": {
        start: {
          line: 98,
          column: 33
        },
        end: {
          line: 98,
          column: 77
        }
      },
      "40": {
        start: {
          line: 99,
          column: 31
        },
        end: {
          line: 99,
          column: 72
        }
      },
      "41": {
        start: {
          line: 100,
          column: 32
        },
        end: {
          line: 102,
          column: 10
        }
      },
      "42": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "43": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 59
        }
      },
      "44": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 56
        }
      },
      "45": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 26
        }
      },
      "46": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "47": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 150,
          column: 14
        }
      },
      "48": {
        start: {
          line: 152,
          column: 32
        },
        end: {
          line: 154,
          column: 10
        }
      },
      "49": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 78
        }
      },
      "50": {
        start: {
          line: 155,
          column: 19
        },
        end: {
          line: 155,
          column: 78
        }
      },
      "51": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 26
        }
      },
      "52": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 77
        }
      },
      "53": {
        start: {
          line: 159,
          column: 33
        },
        end: {
          line: 159,
          column: 77
        }
      },
      "54": {
        start: {
          line: 160,
          column: 32
        },
        end: {
          line: 160,
          column: 104
        }
      },
      "55": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "56": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 70
        }
      },
      "57": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 20
        }
      },
      "58": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 77
        }
      },
      "59": {
        start: {
          line: 167,
          column: 33
        },
        end: {
          line: 167,
          column: 77
        }
      },
      "60": {
        start: {
          line: 168,
          column: 32
        },
        end: {
          line: 172,
          column: 28
        }
      },
      "61": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 78
        }
      },
      "62": {
        start: {
          line: 173,
          column: 19
        },
        end: {
          line: 173,
          column: 78
        }
      },
      "63": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 20
        }
      },
      "64": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 77
        }
      },
      "65": {
        start: {
          line: 177,
          column: 33
        },
        end: {
          line: 177,
          column: 77
        }
      },
      "66": {
        start: {
          line: 178,
          column: 32
        },
        end: {
          line: 181,
          column: 41
        }
      },
      "67": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 78
        }
      },
      "68": {
        start: {
          line: 182,
          column: 19
        },
        end: {
          line: 182,
          column: 78
        }
      },
      "69": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 20
        }
      },
      "70": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 77
        }
      },
      "71": {
        start: {
          line: 186,
          column: 33
        },
        end: {
          line: 186,
          column: 77
        }
      },
      "72": {
        start: {
          line: 187,
          column: 26
        },
        end: {
          line: 187,
          column: 86
        }
      },
      "73": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 188,
          column: 78
        }
      },
      "74": {
        start: {
          line: 188,
          column: 19
        },
        end: {
          line: 188,
          column: 78
        }
      },
      "75": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 77
        }
      },
      "76": {
        start: {
          line: 191,
          column: 33
        },
        end: {
          line: 191,
          column: 77
        }
      },
      "77": {
        start: {
          line: 192,
          column: 32
        },
        end: {
          line: 194,
          column: 10
        }
      },
      "78": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 85
        }
      },
      "79": {
        start: {
          line: 195,
          column: 19
        },
        end: {
          line: 195,
          column: 85
        }
      },
      "80": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 26
        }
      },
      "81": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "82": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 234,
          column: 14
        }
      },
      "83": {
        start: {
          line: 236,
          column: 32
        },
        end: {
          line: 238,
          column: 10
        }
      },
      "84": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 239,
          column: 79
        }
      },
      "85": {
        start: {
          line: 239,
          column: 19
        },
        end: {
          line: 239,
          column: 79
        }
      },
      "86": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 26
        }
      },
      "87": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 243,
          column: 77
        }
      },
      "88": {
        start: {
          line: 243,
          column: 33
        },
        end: {
          line: 243,
          column: 77
        }
      },
      "89": {
        start: {
          line: 244,
          column: 32
        },
        end: {
          line: 244,
          column: 105
        }
      },
      "90": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "91": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 71
        }
      },
      "92": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 248,
          column: 20
        }
      },
      "93": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 77
        }
      },
      "94": {
        start: {
          line: 251,
          column: 33
        },
        end: {
          line: 251,
          column: 77
        }
      },
      "95": {
        start: {
          line: 252,
          column: 32
        },
        end: {
          line: 256,
          column: 28
        }
      },
      "96": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 257,
          column: 79
        }
      },
      "97": {
        start: {
          line: 257,
          column: 19
        },
        end: {
          line: 257,
          column: 79
        }
      },
      "98": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 258,
          column: 20
        }
      },
      "99": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 261,
          column: 77
        }
      },
      "100": {
        start: {
          line: 261,
          column: 33
        },
        end: {
          line: 261,
          column: 77
        }
      },
      "101": {
        start: {
          line: 262,
          column: 32
        },
        end: {
          line: 265,
          column: 41
        }
      },
      "102": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 79
        }
      },
      "103": {
        start: {
          line: 266,
          column: 19
        },
        end: {
          line: 266,
          column: 79
        }
      },
      "104": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 20
        }
      },
      "105": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 270,
          column: 77
        }
      },
      "106": {
        start: {
          line: 270,
          column: 33
        },
        end: {
          line: 270,
          column: 77
        }
      },
      "107": {
        start: {
          line: 271,
          column: 26
        },
        end: {
          line: 271,
          column: 87
        }
      },
      "108": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 272,
          column: 79
        }
      },
      "109": {
        start: {
          line: 272,
          column: 19
        },
        end: {
          line: 272,
          column: 79
        }
      },
      "110": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 275,
          column: 77
        }
      },
      "111": {
        start: {
          line: 275,
          column: 33
        },
        end: {
          line: 275,
          column: 77
        }
      },
      "112": {
        start: {
          line: 276,
          column: 32
        },
        end: {
          line: 278,
          column: 10
        }
      },
      "113": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 279,
          column: 93
        }
      },
      "114": {
        start: {
          line: 279,
          column: 19
        },
        end: {
          line: 279,
          column: 93
        }
      },
      "115": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 280,
          column: 26
        }
      },
      "116": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 284,
          column: 77
        }
      },
      "117": {
        start: {
          line: 284,
          column: 33
        },
        end: {
          line: 284,
          column: 77
        }
      },
      "118": {
        start: {
          line: 285,
          column: 32
        },
        end: {
          line: 287,
          column: 10
        }
      },
      "119": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 288,
          column: 78
        }
      },
      "120": {
        start: {
          line: 288,
          column: 19
        },
        end: {
          line: 288,
          column: 78
        }
      },
      "121": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 289,
          column: 26
        }
      },
      "122": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 292,
          column: 77
        }
      },
      "123": {
        start: {
          line: 292,
          column: 33
        },
        end: {
          line: 292,
          column: 77
        }
      },
      "124": {
        start: {
          line: 293,
          column: 32
        },
        end: {
          line: 293,
          column: 104
        }
      },
      "125": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "126": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 70
        }
      },
      "127": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 297,
          column: 20
        }
      },
      "128": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 300,
          column: 77
        }
      },
      "129": {
        start: {
          line: 300,
          column: 33
        },
        end: {
          line: 300,
          column: 77
        }
      },
      "130": {
        start: {
          line: 301,
          column: 32
        },
        end: {
          line: 305,
          column: 28
        }
      },
      "131": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 306,
          column: 78
        }
      },
      "132": {
        start: {
          line: 306,
          column: 19
        },
        end: {
          line: 306,
          column: 78
        }
      },
      "133": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 307,
          column: 20
        }
      },
      "134": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 310,
          column: 77
        }
      },
      "135": {
        start: {
          line: 310,
          column: 33
        },
        end: {
          line: 310,
          column: 77
        }
      },
      "136": {
        start: {
          line: 311,
          column: 32
        },
        end: {
          line: 314,
          column: 41
        }
      },
      "137": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 315,
          column: 78
        }
      },
      "138": {
        start: {
          line: 315,
          column: 19
        },
        end: {
          line: 315,
          column: 78
        }
      },
      "139": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 20
        }
      },
      "140": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 319,
          column: 77
        }
      },
      "141": {
        start: {
          line: 319,
          column: 33
        },
        end: {
          line: 319,
          column: 77
        }
      },
      "142": {
        start: {
          line: 320,
          column: 26
        },
        end: {
          line: 320,
          column: 86
        }
      },
      "143": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 321,
          column: 78
        }
      },
      "144": {
        start: {
          line: 321,
          column: 19
        },
        end: {
          line: 321,
          column: 78
        }
      },
      "145": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 325,
          column: 77
        }
      },
      "146": {
        start: {
          line: 325,
          column: 33
        },
        end: {
          line: 325,
          column: 77
        }
      },
      "147": {
        start: {
          line: 326,
          column: 20
        },
        end: {
          line: 326,
          column: 72
        }
      },
      "148": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 329,
          column: 9
        }
      },
      "149": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 56
        }
      },
      "150": {
        start: {
          line: 330,
          column: 32
        },
        end: {
          line: 332,
          column: 10
        }
      },
      "151": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 333,
          column: 86
        }
      },
      "152": {
        start: {
          line: 333,
          column: 19
        },
        end: {
          line: 333,
          column: 86
        }
      },
      "153": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 334,
          column: 26
        }
      },
      "154": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 337,
          column: 77
        }
      },
      "155": {
        start: {
          line: 337,
          column: 33
        },
        end: {
          line: 337,
          column: 77
        }
      },
      "156": {
        start: {
          line: 338,
          column: 32
        },
        end: {
          line: 342,
          column: 28
        }
      },
      "157": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 343,
          column: 86
        }
      },
      "158": {
        start: {
          line: 343,
          column: 19
        },
        end: {
          line: 343,
          column: 86
        }
      },
      "159": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 344,
          column: 20
        }
      },
      "160": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 347,
          column: 77
        }
      },
      "161": {
        start: {
          line: 347,
          column: 33
        },
        end: {
          line: 347,
          column: 77
        }
      },
      "162": {
        start: {
          line: 348,
          column: 32
        },
        end: {
          line: 351,
          column: 41
        }
      },
      "163": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 352,
          column: 86
        }
      },
      "164": {
        start: {
          line: 352,
          column: 19
        },
        end: {
          line: 352,
          column: 86
        }
      },
      "165": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 353,
          column: 20
        }
      },
      "166": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 356,
          column: 77
        }
      },
      "167": {
        start: {
          line: 356,
          column: 33
        },
        end: {
          line: 356,
          column: 77
        }
      },
      "168": {
        start: {
          line: 357,
          column: 26
        },
        end: {
          line: 357,
          column: 94
        }
      },
      "169": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 358,
          column: 86
        }
      },
      "170": {
        start: {
          line: 358,
          column: 19
        },
        end: {
          line: 358,
          column: 86
        }
      },
      "171": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 420,
          column: 9
        }
      },
      "172": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 419,
          column: 14
        }
      },
      "173": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 421,
          column: 77
        }
      },
      "174": {
        start: {
          line: 421,
          column: 33
        },
        end: {
          line: 421,
          column: 77
        }
      },
      "175": {
        start: {
          line: 422,
          column: 32
        },
        end: {
          line: 424,
          column: 10
        }
      },
      "176": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 425,
          column: 85
        }
      },
      "177": {
        start: {
          line: 425,
          column: 19
        },
        end: {
          line: 425,
          column: 85
        }
      },
      "178": {
        start: {
          line: 426,
          column: 8
        },
        end: {
          line: 426,
          column: 26
        }
      },
      "179": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 429,
          column: 77
        }
      },
      "180": {
        start: {
          line: 429,
          column: 33
        },
        end: {
          line: 429,
          column: 77
        }
      },
      "181": {
        start: {
          line: 430,
          column: 32
        },
        end: {
          line: 434,
          column: 28
        }
      },
      "182": {
        start: {
          line: 435,
          column: 8
        },
        end: {
          line: 435,
          column: 85
        }
      },
      "183": {
        start: {
          line: 435,
          column: 19
        },
        end: {
          line: 435,
          column: 85
        }
      },
      "184": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 436,
          column: 20
        }
      },
      "185": {
        start: {
          line: 439,
          column: 8
        },
        end: {
          line: 439,
          column: 77
        }
      },
      "186": {
        start: {
          line: 439,
          column: 33
        },
        end: {
          line: 439,
          column: 77
        }
      },
      "187": {
        start: {
          line: 440,
          column: 32
        },
        end: {
          line: 443,
          column: 41
        }
      },
      "188": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 444,
          column: 85
        }
      },
      "189": {
        start: {
          line: 444,
          column: 19
        },
        end: {
          line: 444,
          column: 85
        }
      },
      "190": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 445,
          column: 20
        }
      },
      "191": {
        start: {
          line: 448,
          column: 8
        },
        end: {
          line: 448,
          column: 77
        }
      },
      "192": {
        start: {
          line: 448,
          column: 33
        },
        end: {
          line: 448,
          column: 77
        }
      },
      "193": {
        start: {
          line: 449,
          column: 26
        },
        end: {
          line: 449,
          column: 93
        }
      },
      "194": {
        start: {
          line: 450,
          column: 8
        },
        end: {
          line: 450,
          column: 85
        }
      },
      "195": {
        start: {
          line: 450,
          column: 19
        },
        end: {
          line: 450,
          column: 85
        }
      },
      "196": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 454,
          column: 77
        }
      },
      "197": {
        start: {
          line: 454,
          column: 33
        },
        end: {
          line: 454,
          column: 77
        }
      },
      "198": {
        start: {
          line: 455,
          column: 32
        },
        end: {
          line: 457,
          column: 10
        }
      },
      "199": {
        start: {
          line: 458,
          column: 8
        },
        end: {
          line: 458,
          column: 79
        }
      },
      "200": {
        start: {
          line: 458,
          column: 19
        },
        end: {
          line: 458,
          column: 79
        }
      },
      "201": {
        start: {
          line: 459,
          column: 8
        },
        end: {
          line: 459,
          column: 26
        }
      },
      "202": {
        start: {
          line: 462,
          column: 8
        },
        end: {
          line: 462,
          column: 77
        }
      },
      "203": {
        start: {
          line: 462,
          column: 33
        },
        end: {
          line: 462,
          column: 77
        }
      },
      "204": {
        start: {
          line: 463,
          column: 32
        },
        end: {
          line: 466,
          column: 28
        }
      },
      "205": {
        start: {
          line: 467,
          column: 8
        },
        end: {
          line: 467,
          column: 79
        }
      },
      "206": {
        start: {
          line: 467,
          column: 19
        },
        end: {
          line: 467,
          column: 79
        }
      },
      "207": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 468,
          column: 20
        }
      },
      "208": {
        start: {
          line: 471,
          column: 8
        },
        end: {
          line: 471,
          column: 77
        }
      },
      "209": {
        start: {
          line: 471,
          column: 33
        },
        end: {
          line: 471,
          column: 77
        }
      },
      "210": {
        start: {
          line: 472,
          column: 32
        },
        end: {
          line: 472,
          column: 118
        }
      },
      "211": {
        start: {
          line: 473,
          column: 8
        },
        end: {
          line: 473,
          column: 79
        }
      },
      "212": {
        start: {
          line: 473,
          column: 19
        },
        end: {
          line: 473,
          column: 79
        }
      },
      "213": {
        start: {
          line: 474,
          column: 8
        },
        end: {
          line: 474,
          column: 20
        }
      },
      "214": {
        start: {
          line: 477,
          column: 8
        },
        end: {
          line: 477,
          column: 77
        }
      },
      "215": {
        start: {
          line: 477,
          column: 33
        },
        end: {
          line: 477,
          column: 77
        }
      },
      "216": {
        start: {
          line: 478,
          column: 32
        },
        end: {
          line: 480,
          column: 10
        }
      },
      "217": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 481,
          column: 86
        }
      },
      "218": {
        start: {
          line: 481,
          column: 19
        },
        end: {
          line: 481,
          column: 86
        }
      },
      "219": {
        start: {
          line: 482,
          column: 8
        },
        end: {
          line: 482,
          column: 26
        }
      },
      "220": {
        start: {
          line: 486,
          column: 8
        },
        end: {
          line: 486,
          column: 77
        }
      },
      "221": {
        start: {
          line: 486,
          column: 33
        },
        end: {
          line: 486,
          column: 77
        }
      },
      "222": {
        start: {
          line: 487,
          column: 32
        },
        end: {
          line: 489,
          column: 10
        }
      },
      "223": {
        start: {
          line: 490,
          column: 8
        },
        end: {
          line: 493,
          column: 9
        }
      },
      "224": {
        start: {
          line: 491,
          column: 12
        },
        end: {
          line: 491,
          column: 67
        }
      },
      "225": {
        start: {
          line: 492,
          column: 12
        },
        end: {
          line: 492,
          column: 56
        }
      },
      "226": {
        start: {
          line: 495,
          column: 8
        },
        end: {
          line: 495,
          column: 26
        }
      },
      "227": {
        start: {
          line: 498,
          column: 8
        },
        end: {
          line: 498,
          column: 77
        }
      },
      "228": {
        start: {
          line: 498,
          column: 33
        },
        end: {
          line: 498,
          column: 77
        }
      },
      "229": {
        start: {
          line: 499,
          column: 32
        },
        end: {
          line: 499,
          column: 106
        }
      },
      "230": {
        start: {
          line: 500,
          column: 8
        },
        end: {
          line: 503,
          column: 9
        }
      },
      "231": {
        start: {
          line: 501,
          column: 12
        },
        end: {
          line: 501,
          column: 69
        }
      },
      "232": {
        start: {
          line: 502,
          column: 12
        },
        end: {
          line: 502,
          column: 56
        }
      },
      "233": {
        start: {
          line: 504,
          column: 8
        },
        end: {
          line: 504,
          column: 77
        }
      },
      "234": {
        start: {
          line: 504,
          column: 19
        },
        end: {
          line: 504,
          column: 77
        }
      },
      "235": {
        start: {
          line: 505,
          column: 8
        },
        end: {
          line: 505,
          column: 20
        }
      },
      "236": {
        start: {
          line: 508,
          column: 8
        },
        end: {
          line: 508,
          column: 77
        }
      },
      "237": {
        start: {
          line: 508,
          column: 33
        },
        end: {
          line: 508,
          column: 77
        }
      },
      "238": {
        start: {
          line: 509,
          column: 32
        },
        end: {
          line: 509,
          column: 120
        }
      },
      "239": {
        start: {
          line: 510,
          column: 8
        },
        end: {
          line: 510,
          column: 81
        }
      },
      "240": {
        start: {
          line: 510,
          column: 19
        },
        end: {
          line: 510,
          column: 81
        }
      },
      "241": {
        start: {
          line: 511,
          column: 8
        },
        end: {
          line: 511,
          column: 20
        }
      },
      "242": {
        start: {
          line: 514,
          column: 8
        },
        end: {
          line: 514,
          column: 77
        }
      },
      "243": {
        start: {
          line: 514,
          column: 33
        },
        end: {
          line: 514,
          column: 77
        }
      },
      "244": {
        start: {
          line: 515,
          column: 26
        },
        end: {
          line: 515,
          column: 89
        }
      },
      "245": {
        start: {
          line: 516,
          column: 8
        },
        end: {
          line: 516,
          column: 81
        }
      },
      "246": {
        start: {
          line: 516,
          column: 19
        },
        end: {
          line: 516,
          column: 81
        }
      },
      "247": {
        start: {
          line: 520,
          column: 8
        },
        end: {
          line: 520,
          column: 77
        }
      },
      "248": {
        start: {
          line: 520,
          column: 33
        },
        end: {
          line: 520,
          column: 77
        }
      },
      "249": {
        start: {
          line: 521,
          column: 32
        },
        end: {
          line: 521,
          column: 103
        }
      },
      "250": {
        start: {
          line: 522,
          column: 8
        },
        end: {
          line: 522,
          column: 85
        }
      },
      "251": {
        start: {
          line: 522,
          column: 19
        },
        end: {
          line: 522,
          column: 85
        }
      },
      "252": {
        start: {
          line: 523,
          column: 27
        },
        end: {
          line: 523,
          column: 31
        }
      },
      "253": {
        start: {
          line: 524,
          column: 22
        },
        end: {
          line: 529,
          column: 9
        }
      },
      "254": {
        start: {
          line: 526,
          column: 58
        },
        end: {
          line: 526,
          column: 83
        }
      },
      "255": {
        start: {
          line: 530,
          column: 8
        },
        end: {
          line: 533,
          column: 11
        }
      },
      "256": {
        start: {
          line: 531,
          column: 12
        },
        end: {
          line: 531,
          column: 85
        }
      },
      "257": {
        start: {
          line: 532,
          column: 12
        },
        end: {
          line: 532,
          column: 81
        }
      },
      "258": {
        start: {
          line: 534,
          column: 8
        },
        end: {
          line: 534,
          column: 21
        }
      },
      "259": {
        start: {
          line: 537,
          column: 8
        },
        end: {
          line: 537,
          column: 77
        }
      },
      "260": {
        start: {
          line: 537,
          column: 33
        },
        end: {
          line: 537,
          column: 77
        }
      },
      "261": {
        start: {
          line: 538,
          column: 32
        },
        end: {
          line: 538,
          column: 97
        }
      },
      "262": {
        start: {
          line: 539,
          column: 8
        },
        end: {
          line: 539,
          column: 83
        }
      },
      "263": {
        start: {
          line: 539,
          column: 19
        },
        end: {
          line: 539,
          column: 83
        }
      },
      "264": {
        start: {
          line: 540,
          column: 25
        },
        end: {
          line: 540,
          column: 29
        }
      },
      "265": {
        start: {
          line: 541,
          column: 22
        },
        end: {
          line: 545,
          column: 9
        }
      },
      "266": {
        start: {
          line: 546,
          column: 8
        },
        end: {
          line: 549,
          column: 11
        }
      },
      "267": {
        start: {
          line: 547,
          column: 12
        },
        end: {
          line: 547,
          column: 81
        }
      },
      "268": {
        start: {
          line: 548,
          column: 12
        },
        end: {
          line: 548,
          column: 89
        }
      },
      "269": {
        start: {
          line: 550,
          column: 8
        },
        end: {
          line: 550,
          column: 21
        }
      },
      "270": {
        start: {
          line: 554,
          column: 8
        },
        end: {
          line: 556,
          column: 9
        }
      },
      "271": {
        start: {
          line: 555,
          column: 12
        },
        end: {
          line: 555,
          column: 24
        }
      },
      "272": {
        start: {
          line: 557,
          column: 8
        },
        end: {
          line: 561,
          column: 33
        }
      },
      "273": {
        start: {
          line: 564,
          column: 8
        },
        end: {
          line: 566,
          column: 9
        }
      },
      "274": {
        start: {
          line: 565,
          column: 12
        },
        end: {
          line: 565,
          column: 24
        }
      },
      "275": {
        start: {
          line: 567,
          column: 8
        },
        end: {
          line: 571,
          column: 33
        }
      },
      "276": {
        start: {
          line: 574,
          column: 8
        },
        end: {
          line: 576,
          column: 9
        }
      },
      "277": {
        start: {
          line: 575,
          column: 12
        },
        end: {
          line: 575,
          column: 24
        }
      },
      "278": {
        start: {
          line: 577,
          column: 8
        },
        end: {
          line: 581,
          column: 33
        }
      },
      "279": {
        start: {
          line: 584,
          column: 24
        },
        end: {
          line: 584,
          column: 45
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 33
          },
          end: {
            line: 14,
            column: 34
          }
        },
        loc: {
          start: {
            line: 14,
            column: 37
          },
          end: {
            line: 18,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 23
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 21
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 28
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 65
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 31
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 73
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        loc: {
          start: {
            line: 83,
            column: 36
          },
          end: {
            line: 91,
            column: 5
          }
        },
        line: 83
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        loc: {
          start: {
            line: 92,
            column: 27
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 92
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        loc: {
          start: {
            line: 97,
            column: 31
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 97
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        loc: {
          start: {
            line: 110,
            column: 21
          },
          end: {
            line: 157,
            column: 5
          }
        },
        line: 110
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 158,
            column: 4
          },
          end: {
            line: 158,
            column: 5
          }
        },
        loc: {
          start: {
            line: 158,
            column: 26
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 158
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 166,
            column: 5
          }
        },
        loc: {
          start: {
            line: 166,
            column: 27
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 166
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 34
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 176
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 185,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        },
        loc: {
          start: {
            line: 185,
            column: 25
          },
          end: {
            line: 189,
            column: 5
          }
        },
        line: 185
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 190,
            column: 4
          },
          end: {
            line: 190,
            column: 5
          }
        },
        loc: {
          start: {
            line: 190,
            column: 37
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 190
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 199,
            column: 5
          }
        },
        loc: {
          start: {
            line: 199,
            column: 22
          },
          end: {
            line: 241,
            column: 5
          }
        },
        line: 199
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        },
        loc: {
          start: {
            line: 242,
            column: 27
          },
          end: {
            line: 249,
            column: 5
          }
        },
        line: 242
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 250,
            column: 4
          },
          end: {
            line: 250,
            column: 5
          }
        },
        loc: {
          start: {
            line: 250,
            column: 29
          },
          end: {
            line: 259,
            column: 5
          }
        },
        line: 250
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 260,
            column: 4
          },
          end: {
            line: 260,
            column: 5
          }
        },
        loc: {
          start: {
            line: 260,
            column: 35
          },
          end: {
            line: 268,
            column: 5
          }
        },
        line: 260
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 269,
            column: 4
          },
          end: {
            line: 269,
            column: 5
          }
        },
        loc: {
          start: {
            line: 269,
            column: 26
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 269
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 274,
            column: 5
          }
        },
        loc: {
          start: {
            line: 274,
            column: 51
          },
          end: {
            line: 281,
            column: 5
          }
        },
        line: 274
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 283,
            column: 4
          },
          end: {
            line: 283,
            column: 5
          }
        },
        loc: {
          start: {
            line: 283,
            column: 21
          },
          end: {
            line: 290,
            column: 5
          }
        },
        line: 283
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 291,
            column: 4
          },
          end: {
            line: 291,
            column: 5
          }
        },
        loc: {
          start: {
            line: 291,
            column: 26
          },
          end: {
            line: 298,
            column: 5
          }
        },
        line: 291
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 299,
            column: 4
          },
          end: {
            line: 299,
            column: 5
          }
        },
        loc: {
          start: {
            line: 299,
            column: 27
          },
          end: {
            line: 308,
            column: 5
          }
        },
        line: 299
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 309,
            column: 4
          },
          end: {
            line: 309,
            column: 5
          }
        },
        loc: {
          start: {
            line: 309,
            column: 34
          },
          end: {
            line: 317,
            column: 5
          }
        },
        line: 309
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 318,
            column: 4
          },
          end: {
            line: 318,
            column: 5
          }
        },
        loc: {
          start: {
            line: 318,
            column: 25
          },
          end: {
            line: 322,
            column: 5
          }
        },
        line: 318
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 324,
            column: 4
          },
          end: {
            line: 324,
            column: 5
          }
        },
        loc: {
          start: {
            line: 324,
            column: 38
          },
          end: {
            line: 335,
            column: 5
          }
        },
        line: 324
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 336,
            column: 4
          },
          end: {
            line: 336,
            column: 5
          }
        },
        loc: {
          start: {
            line: 336,
            column: 35
          },
          end: {
            line: 345,
            column: 5
          }
        },
        line: 336
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 346,
            column: 4
          },
          end: {
            line: 346,
            column: 5
          }
        },
        loc: {
          start: {
            line: 346,
            column: 41
          },
          end: {
            line: 354,
            column: 5
          }
        },
        line: 346
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 355,
            column: 4
          },
          end: {
            line: 355,
            column: 5
          }
        },
        loc: {
          start: {
            line: 355,
            column: 32
          },
          end: {
            line: 359,
            column: 5
          }
        },
        line: 355
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 361,
            column: 4
          },
          end: {
            line: 361,
            column: 5
          }
        },
        loc: {
          start: {
            line: 361,
            column: 27
          },
          end: {
            line: 427,
            column: 5
          }
        },
        line: 361
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 428,
            column: 4
          },
          end: {
            line: 428,
            column: 5
          }
        },
        loc: {
          start: {
            line: 428,
            column: 34
          },
          end: {
            line: 437,
            column: 5
          }
        },
        line: 428
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 438,
            column: 4
          },
          end: {
            line: 438,
            column: 5
          }
        },
        loc: {
          start: {
            line: 438,
            column: 40
          },
          end: {
            line: 446,
            column: 5
          }
        },
        line: 438
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 447,
            column: 4
          },
          end: {
            line: 447,
            column: 5
          }
        },
        loc: {
          start: {
            line: 447,
            column: 31
          },
          end: {
            line: 451,
            column: 5
          }
        },
        line: 447
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 453,
            column: 4
          },
          end: {
            line: 453,
            column: 5
          }
        },
        loc: {
          start: {
            line: 453,
            column: 22
          },
          end: {
            line: 460,
            column: 5
          }
        },
        line: 453
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 461,
            column: 4
          },
          end: {
            line: 461,
            column: 5
          }
        },
        loc: {
          start: {
            line: 461,
            column: 29
          },
          end: {
            line: 469,
            column: 5
          }
        },
        line: 461
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 470,
            column: 4
          },
          end: {
            line: 470,
            column: 5
          }
        },
        loc: {
          start: {
            line: 470,
            column: 35
          },
          end: {
            line: 475,
            column: 5
          }
        },
        line: 470
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 476,
            column: 4
          },
          end: {
            line: 476,
            column: 5
          }
        },
        loc: {
          start: {
            line: 476,
            column: 38
          },
          end: {
            line: 483,
            column: 5
          }
        },
        line: 476
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 485,
            column: 4
          },
          end: {
            line: 485,
            column: 5
          }
        },
        loc: {
          start: {
            line: 485,
            column: 29
          },
          end: {
            line: 496,
            column: 5
          }
        },
        line: 485
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 497,
            column: 4
          },
          end: {
            line: 497,
            column: 5
          }
        },
        loc: {
          start: {
            line: 497,
            column: 31
          },
          end: {
            line: 506,
            column: 5
          }
        },
        line: 497
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 507,
            column: 4
          },
          end: {
            line: 507,
            column: 5
          }
        },
        loc: {
          start: {
            line: 507,
            column: 36
          },
          end: {
            line: 512,
            column: 5
          }
        },
        line: 507
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 513,
            column: 4
          },
          end: {
            line: 513,
            column: 5
          }
        },
        loc: {
          start: {
            line: 513,
            column: 27
          },
          end: {
            line: 517,
            column: 5
          }
        },
        line: 513
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 519,
            column: 4
          },
          end: {
            line: 519,
            column: 5
          }
        },
        loc: {
          start: {
            line: 519,
            column: 27
          },
          end: {
            line: 535,
            column: 5
          }
        },
        line: 519
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 526,
            column: 43
          },
          end: {
            line: 526,
            column: 44
          }
        },
        loc: {
          start: {
            line: 526,
            column: 58
          },
          end: {
            line: 526,
            column: 83
          }
        },
        line: 526
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 530,
            column: 28
          },
          end: {
            line: 530,
            column: 29
          }
        },
        loc: {
          start: {
            line: 530,
            column: 38
          },
          end: {
            line: 533,
            column: 9
          }
        },
        line: 530
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 536,
            column: 4
          },
          end: {
            line: 536,
            column: 5
          }
        },
        loc: {
          start: {
            line: 536,
            column: 25
          },
          end: {
            line: 551,
            column: 5
          }
        },
        line: 536
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 546,
            column: 26
          },
          end: {
            line: 546,
            column: 27
          }
        },
        loc: {
          start: {
            line: 546,
            column: 34
          },
          end: {
            line: 549,
            column: 9
          }
        },
        line: 546
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 553,
            column: 4
          },
          end: {
            line: 553,
            column: 5
          }
        },
        loc: {
          start: {
            line: 553,
            column: 33
          },
          end: {
            line: 562,
            column: 5
          }
        },
        line: 553
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 563,
            column: 4
          },
          end: {
            line: 563,
            column: 5
          }
        },
        loc: {
          start: {
            line: 563,
            column: 31
          },
          end: {
            line: 572,
            column: 5
          }
        },
        line: 563
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 573,
            column: 4
          },
          end: {
            line: 573,
            column: 5
          }
        },
        loc: {
          start: {
            line: 573,
            column: 32
          },
          end: {
            line: 582,
            column: 5
          }
        },
        line: 573
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 17,
            column: 120
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 17,
            column: 22
          }
        }, {
          start: {
            line: 17,
            column: 26
          },
          end: {
            line: 17,
            column: 37
          }
        }, {
          start: {
            line: 17,
            column: 41
          },
          end: {
            line: 17,
            column: 78
          }
        }, {
          start: {
            line: 17,
            column: 82
          },
          end: {
            line: 17,
            column: 120
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "2": {
        loc: {
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 22,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 22,
            column: 31
          }
        }, {
          start: {
            line: 22,
            column: 35
          },
          end: {
            line: 22,
            column: 62
          }
        }],
        line: 22
      },
      "3": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 62,
            column: 80
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 62,
            column: 80
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "4": {
        loc: {
          start: {
            line: 63,
            column: 15
          },
          end: {
            line: 63,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 15
          },
          end: {
            line: 63,
            column: 19
          }
        }, {
          start: {
            line: 63,
            column: 23
          },
          end: {
            line: 63,
            column: 25
          }
        }],
        line: 63
      },
      "5": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 66,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 66,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "6": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "7": {
        loc: {
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 68,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 68,
            column: 17
          }
        }, {
          start: {
            line: 68,
            column: 21
          },
          end: {
            line: 68,
            column: 46
          }
        }],
        line: 68
      },
      "8": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 74,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 74,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "9": {
        loc: {
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 80,
            column: 80
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 80,
            column: 80
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "10": {
        loc: {
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 84,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 8
          },
          end: {
            line: 84,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "11": {
        loc: {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 89,
            column: 80
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 89,
            column: 80
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "12": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 93,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 93,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "13": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 95,
            column: 80
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 95,
            column: 80
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "14": {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 98,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 98,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "15": {
        loc: {
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "16": {
        loc: {
          start: {
            line: 107,
            column: 15
          },
          end: {
            line: 107,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 15
          },
          end: {
            line: 107,
            column: 19
          }
        }, {
          start: {
            line: 107,
            column: 23
          },
          end: {
            line: 107,
            column: 25
          }
        }],
        line: 107
      },
      "17": {
        loc: {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "18": {
        loc: {
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 111,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 111,
            column: 31
          }
        }, {
          start: {
            line: 111,
            column: 35
          },
          end: {
            line: 111,
            column: 62
          }
        }],
        line: 111
      },
      "19": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 155,
            column: 78
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 155,
            column: 78
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "20": {
        loc: {
          start: {
            line: 156,
            column: 15
          },
          end: {
            line: 156,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 15
          },
          end: {
            line: 156,
            column: 19
          }
        }, {
          start: {
            line: 156,
            column: 23
          },
          end: {
            line: 156,
            column: 25
          }
        }],
        line: 156
      },
      "21": {
        loc: {
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 159,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 159,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "22": {
        loc: {
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "23": {
        loc: {
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 161,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 161,
            column: 17
          }
        }, {
          start: {
            line: 161,
            column: 21
          },
          end: {
            line: 161,
            column: 46
          }
        }],
        line: 161
      },
      "24": {
        loc: {
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 167,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 167,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "25": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 173,
            column: 78
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 173,
            column: 78
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "26": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 177,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 177,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "27": {
        loc: {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 182,
            column: 78
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 182,
            column: 78
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "28": {
        loc: {
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 186,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 186,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "29": {
        loc: {
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 188,
            column: 78
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 188,
            column: 78
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "30": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 191,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 191,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "31": {
        loc: {
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 195,
            column: 85
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 195,
            column: 85
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "32": {
        loc: {
          start: {
            line: 196,
            column: 15
          },
          end: {
            line: 196,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 15
          },
          end: {
            line: 196,
            column: 19
          }
        }, {
          start: {
            line: 196,
            column: 23
          },
          end: {
            line: 196,
            column: 25
          }
        }],
        line: 196
      },
      "33": {
        loc: {
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "34": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 200,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 200,
            column: 31
          }
        }, {
          start: {
            line: 200,
            column: 35
          },
          end: {
            line: 200,
            column: 62
          }
        }],
        line: 200
      },
      "35": {
        loc: {
          start: {
            line: 239,
            column: 8
          },
          end: {
            line: 239,
            column: 79
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 8
          },
          end: {
            line: 239,
            column: 79
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 239
      },
      "36": {
        loc: {
          start: {
            line: 240,
            column: 15
          },
          end: {
            line: 240,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 240,
            column: 15
          },
          end: {
            line: 240,
            column: 19
          }
        }, {
          start: {
            line: 240,
            column: 23
          },
          end: {
            line: 240,
            column: 25
          }
        }],
        line: 240
      },
      "37": {
        loc: {
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 243,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 243,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "38": {
        loc: {
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "39": {
        loc: {
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 245,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 245,
            column: 17
          }
        }, {
          start: {
            line: 245,
            column: 21
          },
          end: {
            line: 245,
            column: 46
          }
        }],
        line: 245
      },
      "40": {
        loc: {
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 251,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 251,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "41": {
        loc: {
          start: {
            line: 257,
            column: 8
          },
          end: {
            line: 257,
            column: 79
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 8
          },
          end: {
            line: 257,
            column: 79
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 257
      },
      "42": {
        loc: {
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 261,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 261,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "43": {
        loc: {
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 266,
            column: 79
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 266,
            column: 79
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "44": {
        loc: {
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 270,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 270,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "45": {
        loc: {
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 272,
            column: 79
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 272,
            column: 79
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "46": {
        loc: {
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 275,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 275,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "47": {
        loc: {
          start: {
            line: 279,
            column: 8
          },
          end: {
            line: 279,
            column: 93
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 8
          },
          end: {
            line: 279,
            column: 93
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "48": {
        loc: {
          start: {
            line: 280,
            column: 15
          },
          end: {
            line: 280,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 280,
            column: 15
          },
          end: {
            line: 280,
            column: 19
          }
        }, {
          start: {
            line: 280,
            column: 23
          },
          end: {
            line: 280,
            column: 25
          }
        }],
        line: 280
      },
      "49": {
        loc: {
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 284,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 284,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "50": {
        loc: {
          start: {
            line: 288,
            column: 8
          },
          end: {
            line: 288,
            column: 78
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 288,
            column: 8
          },
          end: {
            line: 288,
            column: 78
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 288
      },
      "51": {
        loc: {
          start: {
            line: 289,
            column: 15
          },
          end: {
            line: 289,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 289,
            column: 15
          },
          end: {
            line: 289,
            column: 19
          }
        }, {
          start: {
            line: 289,
            column: 23
          },
          end: {
            line: 289,
            column: 25
          }
        }],
        line: 289
      },
      "52": {
        loc: {
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 292,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 292,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "53": {
        loc: {
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 294
      },
      "54": {
        loc: {
          start: {
            line: 294,
            column: 12
          },
          end: {
            line: 294,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 294,
            column: 12
          },
          end: {
            line: 294,
            column: 17
          }
        }, {
          start: {
            line: 294,
            column: 21
          },
          end: {
            line: 294,
            column: 46
          }
        }],
        line: 294
      },
      "55": {
        loc: {
          start: {
            line: 300,
            column: 8
          },
          end: {
            line: 300,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 300,
            column: 8
          },
          end: {
            line: 300,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 300
      },
      "56": {
        loc: {
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 306,
            column: 78
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 8
          },
          end: {
            line: 306,
            column: 78
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "57": {
        loc: {
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 310,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 310,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 310
      },
      "58": {
        loc: {
          start: {
            line: 315,
            column: 8
          },
          end: {
            line: 315,
            column: 78
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 8
          },
          end: {
            line: 315,
            column: 78
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "59": {
        loc: {
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 319,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 319,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "60": {
        loc: {
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 321,
            column: 78
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 321,
            column: 78
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "61": {
        loc: {
          start: {
            line: 325,
            column: 8
          },
          end: {
            line: 325,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 325,
            column: 8
          },
          end: {
            line: 325,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 325
      },
      "62": {
        loc: {
          start: {
            line: 327,
            column: 8
          },
          end: {
            line: 329,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 8
          },
          end: {
            line: 329,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 327
      },
      "63": {
        loc: {
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 333,
            column: 86
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 333,
            column: 86
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 333
      },
      "64": {
        loc: {
          start: {
            line: 334,
            column: 15
          },
          end: {
            line: 334,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 334,
            column: 15
          },
          end: {
            line: 334,
            column: 19
          }
        }, {
          start: {
            line: 334,
            column: 23
          },
          end: {
            line: 334,
            column: 25
          }
        }],
        line: 334
      },
      "65": {
        loc: {
          start: {
            line: 337,
            column: 8
          },
          end: {
            line: 337,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 8
          },
          end: {
            line: 337,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 337
      },
      "66": {
        loc: {
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 343,
            column: 86
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 343,
            column: 86
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "67": {
        loc: {
          start: {
            line: 347,
            column: 8
          },
          end: {
            line: 347,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 347,
            column: 8
          },
          end: {
            line: 347,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 347
      },
      "68": {
        loc: {
          start: {
            line: 352,
            column: 8
          },
          end: {
            line: 352,
            column: 86
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 352,
            column: 8
          },
          end: {
            line: 352,
            column: 86
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 352
      },
      "69": {
        loc: {
          start: {
            line: 356,
            column: 8
          },
          end: {
            line: 356,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 8
          },
          end: {
            line: 356,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 356
      },
      "70": {
        loc: {
          start: {
            line: 358,
            column: 8
          },
          end: {
            line: 358,
            column: 86
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 358,
            column: 8
          },
          end: {
            line: 358,
            column: 86
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 358
      },
      "71": {
        loc: {
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 420,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 420,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 362
      },
      "72": {
        loc: {
          start: {
            line: 362,
            column: 12
          },
          end: {
            line: 362,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 362,
            column: 12
          },
          end: {
            line: 362,
            column: 31
          }
        }, {
          start: {
            line: 362,
            column: 35
          },
          end: {
            line: 362,
            column: 62
          }
        }],
        line: 362
      },
      "73": {
        loc: {
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 421,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 421,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 421
      },
      "74": {
        loc: {
          start: {
            line: 425,
            column: 8
          },
          end: {
            line: 425,
            column: 85
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 425,
            column: 8
          },
          end: {
            line: 425,
            column: 85
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 425
      },
      "75": {
        loc: {
          start: {
            line: 426,
            column: 15
          },
          end: {
            line: 426,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 426,
            column: 15
          },
          end: {
            line: 426,
            column: 19
          }
        }, {
          start: {
            line: 426,
            column: 23
          },
          end: {
            line: 426,
            column: 25
          }
        }],
        line: 426
      },
      "76": {
        loc: {
          start: {
            line: 429,
            column: 8
          },
          end: {
            line: 429,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 429,
            column: 8
          },
          end: {
            line: 429,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 429
      },
      "77": {
        loc: {
          start: {
            line: 435,
            column: 8
          },
          end: {
            line: 435,
            column: 85
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 435,
            column: 8
          },
          end: {
            line: 435,
            column: 85
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 435
      },
      "78": {
        loc: {
          start: {
            line: 439,
            column: 8
          },
          end: {
            line: 439,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 439,
            column: 8
          },
          end: {
            line: 439,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 439
      },
      "79": {
        loc: {
          start: {
            line: 444,
            column: 8
          },
          end: {
            line: 444,
            column: 85
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 444,
            column: 8
          },
          end: {
            line: 444,
            column: 85
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 444
      },
      "80": {
        loc: {
          start: {
            line: 448,
            column: 8
          },
          end: {
            line: 448,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 448,
            column: 8
          },
          end: {
            line: 448,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 448
      },
      "81": {
        loc: {
          start: {
            line: 450,
            column: 8
          },
          end: {
            line: 450,
            column: 85
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 450,
            column: 8
          },
          end: {
            line: 450,
            column: 85
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 450
      },
      "82": {
        loc: {
          start: {
            line: 454,
            column: 8
          },
          end: {
            line: 454,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 454,
            column: 8
          },
          end: {
            line: 454,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 454
      },
      "83": {
        loc: {
          start: {
            line: 458,
            column: 8
          },
          end: {
            line: 458,
            column: 79
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 458,
            column: 8
          },
          end: {
            line: 458,
            column: 79
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 458
      },
      "84": {
        loc: {
          start: {
            line: 459,
            column: 15
          },
          end: {
            line: 459,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 459,
            column: 15
          },
          end: {
            line: 459,
            column: 19
          }
        }, {
          start: {
            line: 459,
            column: 23
          },
          end: {
            line: 459,
            column: 25
          }
        }],
        line: 459
      },
      "85": {
        loc: {
          start: {
            line: 462,
            column: 8
          },
          end: {
            line: 462,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 462,
            column: 8
          },
          end: {
            line: 462,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 462
      },
      "86": {
        loc: {
          start: {
            line: 467,
            column: 8
          },
          end: {
            line: 467,
            column: 79
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 467,
            column: 8
          },
          end: {
            line: 467,
            column: 79
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 467
      },
      "87": {
        loc: {
          start: {
            line: 471,
            column: 8
          },
          end: {
            line: 471,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 471,
            column: 8
          },
          end: {
            line: 471,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 471
      },
      "88": {
        loc: {
          start: {
            line: 473,
            column: 8
          },
          end: {
            line: 473,
            column: 79
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 473,
            column: 8
          },
          end: {
            line: 473,
            column: 79
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 473
      },
      "89": {
        loc: {
          start: {
            line: 477,
            column: 8
          },
          end: {
            line: 477,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 477,
            column: 8
          },
          end: {
            line: 477,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 477
      },
      "90": {
        loc: {
          start: {
            line: 481,
            column: 8
          },
          end: {
            line: 481,
            column: 86
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 481,
            column: 8
          },
          end: {
            line: 481,
            column: 86
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 481
      },
      "91": {
        loc: {
          start: {
            line: 482,
            column: 15
          },
          end: {
            line: 482,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 482,
            column: 15
          },
          end: {
            line: 482,
            column: 19
          }
        }, {
          start: {
            line: 482,
            column: 23
          },
          end: {
            line: 482,
            column: 25
          }
        }],
        line: 482
      },
      "92": {
        loc: {
          start: {
            line: 486,
            column: 8
          },
          end: {
            line: 486,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 486,
            column: 8
          },
          end: {
            line: 486,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 486
      },
      "93": {
        loc: {
          start: {
            line: 490,
            column: 8
          },
          end: {
            line: 493,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 490,
            column: 8
          },
          end: {
            line: 493,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 490
      },
      "94": {
        loc: {
          start: {
            line: 495,
            column: 15
          },
          end: {
            line: 495,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 495,
            column: 15
          },
          end: {
            line: 495,
            column: 19
          }
        }, {
          start: {
            line: 495,
            column: 23
          },
          end: {
            line: 495,
            column: 25
          }
        }],
        line: 495
      },
      "95": {
        loc: {
          start: {
            line: 498,
            column: 8
          },
          end: {
            line: 498,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 498,
            column: 8
          },
          end: {
            line: 498,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 498
      },
      "96": {
        loc: {
          start: {
            line: 500,
            column: 8
          },
          end: {
            line: 503,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 500,
            column: 8
          },
          end: {
            line: 503,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 500
      },
      "97": {
        loc: {
          start: {
            line: 504,
            column: 8
          },
          end: {
            line: 504,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 504,
            column: 8
          },
          end: {
            line: 504,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 504
      },
      "98": {
        loc: {
          start: {
            line: 508,
            column: 8
          },
          end: {
            line: 508,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 508,
            column: 8
          },
          end: {
            line: 508,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 508
      },
      "99": {
        loc: {
          start: {
            line: 510,
            column: 8
          },
          end: {
            line: 510,
            column: 81
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 510,
            column: 8
          },
          end: {
            line: 510,
            column: 81
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 510
      },
      "100": {
        loc: {
          start: {
            line: 514,
            column: 8
          },
          end: {
            line: 514,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 514,
            column: 8
          },
          end: {
            line: 514,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 514
      },
      "101": {
        loc: {
          start: {
            line: 516,
            column: 8
          },
          end: {
            line: 516,
            column: 81
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 516,
            column: 8
          },
          end: {
            line: 516,
            column: 81
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 516
      },
      "102": {
        loc: {
          start: {
            line: 520,
            column: 8
          },
          end: {
            line: 520,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 520,
            column: 8
          },
          end: {
            line: 520,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 520
      },
      "103": {
        loc: {
          start: {
            line: 522,
            column: 8
          },
          end: {
            line: 522,
            column: 85
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 522,
            column: 8
          },
          end: {
            line: 522,
            column: 85
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 522
      },
      "104": {
        loc: {
          start: {
            line: 525,
            column: 19
          },
          end: {
            line: 525,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 525,
            column: 19
          },
          end: {
            line: 525,
            column: 37
          }
        }, {
          start: {
            line: 525,
            column: 41
          },
          end: {
            line: 525,
            column: 42
          }
        }],
        line: 525
      },
      "105": {
        loc: {
          start: {
            line: 526,
            column: 24
          },
          end: {
            line: 526,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 526,
            column: 24
          },
          end: {
            line: 526,
            column: 87
          }
        }, {
          start: {
            line: 526,
            column: 91
          },
          end: {
            line: 526,
            column: 92
          }
        }],
        line: 526
      },
      "106": {
        loc: {
          start: {
            line: 526,
            column: 65
          },
          end: {
            line: 526,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 526,
            column: 65
          },
          end: {
            line: 526,
            column: 77
          }
        }, {
          start: {
            line: 526,
            column: 81
          },
          end: {
            line: 526,
            column: 82
          }
        }],
        line: 526
      },
      "107": {
        loc: {
          start: {
            line: 531,
            column: 45
          },
          end: {
            line: 531,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 531,
            column: 45
          },
          end: {
            line: 531,
            column: 74
          }
        }, {
          start: {
            line: 531,
            column: 78
          },
          end: {
            line: 531,
            column: 79
          }
        }],
        line: 531
      },
      "108": {
        loc: {
          start: {
            line: 532,
            column: 43
          },
          end: {
            line: 532,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 532,
            column: 43
          },
          end: {
            line: 532,
            column: 70
          }
        }, {
          start: {
            line: 532,
            column: 74
          },
          end: {
            line: 532,
            column: 75
          }
        }],
        line: 532
      },
      "109": {
        loc: {
          start: {
            line: 537,
            column: 8
          },
          end: {
            line: 537,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 537,
            column: 8
          },
          end: {
            line: 537,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 537
      },
      "110": {
        loc: {
          start: {
            line: 539,
            column: 8
          },
          end: {
            line: 539,
            column: 83
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 539,
            column: 8
          },
          end: {
            line: 539,
            column: 83
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 539
      },
      "111": {
        loc: {
          start: {
            line: 542,
            column: 19
          },
          end: {
            line: 542,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 542,
            column: 19
          },
          end: {
            line: 542,
            column: 35
          }
        }, {
          start: {
            line: 542,
            column: 39
          },
          end: {
            line: 542,
            column: 40
          }
        }],
        line: 542
      },
      "112": {
        loc: {
          start: {
            line: 547,
            column: 43
          },
          end: {
            line: 547,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 547,
            column: 43
          },
          end: {
            line: 547,
            column: 70
          }
        }, {
          start: {
            line: 547,
            column: 74
          },
          end: {
            line: 547,
            column: 75
          }
        }],
        line: 547
      },
      "113": {
        loc: {
          start: {
            line: 548,
            column: 47
          },
          end: {
            line: 548,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 548,
            column: 47
          },
          end: {
            line: 548,
            column: 78
          }
        }, {
          start: {
            line: 548,
            column: 82
          },
          end: {
            line: 548,
            column: 83
          }
        }],
        line: 548
      },
      "114": {
        loc: {
          start: {
            line: 554,
            column: 8
          },
          end: {
            line: 556,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 554,
            column: 8
          },
          end: {
            line: 556,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 554
      },
      "115": {
        loc: {
          start: {
            line: 554,
            column: 12
          },
          end: {
            line: 554,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 554,
            column: 12
          },
          end: {
            line: 554,
            column: 31
          }
        }, {
          start: {
            line: 554,
            column: 35
          },
          end: {
            line: 554,
            column: 62
          }
        }],
        line: 554
      },
      "116": {
        loc: {
          start: {
            line: 564,
            column: 8
          },
          end: {
            line: 566,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 564,
            column: 8
          },
          end: {
            line: 566,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 564
      },
      "117": {
        loc: {
          start: {
            line: 564,
            column: 12
          },
          end: {
            line: 564,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 564,
            column: 12
          },
          end: {
            line: 564,
            column: 31
          }
        }, {
          start: {
            line: 564,
            column: 35
          },
          end: {
            line: 564,
            column: 62
          }
        }],
        line: 564
      },
      "118": {
        loc: {
          start: {
            line: 574,
            column: 8
          },
          end: {
            line: 576,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 574,
            column: 8
          },
          end: {
            line: 576,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 574
      },
      "119": {
        loc: {
          start: {
            line: 574,
            column: 12
          },
          end: {
            line: 574,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 574,
            column: 12
          },
          end: {
            line: 574,
            column: 31
          }
        }, {
          start: {
            line: 574,
            column: 35
          },
          end: {
            line: 574,
            column: 62
          }
        }],
        line: 574
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0
    },
    b: {
      "0": [0, 0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0, 0],
      "92": [0, 0],
      "93": [0, 0],
      "94": [0, 0],
      "95": [0, 0],
      "96": [0, 0],
      "97": [0, 0],
      "98": [0, 0],
      "99": [0, 0],
      "100": [0, 0],
      "101": [0, 0],
      "102": [0, 0],
      "103": [0, 0],
      "104": [0, 0],
      "105": [0, 0],
      "106": [0, 0],
      "107": [0, 0],
      "108": [0, 0],
      "109": [0, 0],
      "110": [0, 0],
      "111": [0, 0],
      "112": [0, 0],
      "113": [0, 0],
      "114": [0, 0],
      "115": [0, 0],
      "116": [0, 0],
      "117": [0, 0],
      "118": [0, 0],
      "119": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\database.ts"],
      sourcesContent: ["import { supabase, Database } from \"../lib/supabase\"\nimport { sanitizeSearchQuery, encryptApiKey, decryptApiKey } from \"../utils/security\"\n\n// Helper types for database operations\ntype Inserts<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Insert\"]\ntype Updates<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Update\"]\ntype Rows<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Row\"]\n\n// Database types (using Supabase generated types)\nexport type Client = Database['public']['Tables']['clients']['Row']\nexport type Task = Database['public']['Tables']['tasks']['Row']\nexport type Event = Database['public']['Tables']['events']['Row']\nexport type User = Database['public']['Tables']['users']['Row']\nexport type CustomField = Database['public']['Tables']['custom_fields']['Row']\nexport type SalesStage = Database['public']['Tables']['sales_stages']['Row']\nexport type Email = Database['public']['Tables']['emails']['Row']\nexport type ApiKey = Database['public']['Tables']['api_keys']['Row']\n// Export insert and update data types for convenience\nexport type ClientInsertData = Inserts<\"clients\">\nexport type ClientUpdateData = Updates<\"clients\">\nexport type TaskInsertData = Inserts<\"tasks\">\nexport type TaskUpdateData = Updates<\"tasks\">\n\n// Helper function to check if we have a real Supabase connection\nconst isRealSupabaseConnection = () => {\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\n  const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n  return supabaseUrl && supabaseKey && !supabaseUrl.includes(\"your-project\") && !supabaseKey.includes(\"your-anon-key\")\n}\n\nclass DatabaseService {\n  // Client operations\n  async getClients(): Promise<Client[]> {\n    if (!supabase || !isRealSupabaseConnection()) {\n      // Return mock data\n      return [\n        {\n          id: \"1\",\n          name: \"Acme Corp\",\n          email: \"john@acme.com\",\n          phone: \"555-0123\",\n          company: \"Acme Corporation\",\n          status: \"active\",\n          stage: \"1\",\n          value: 5000,\n          source: \"Website\",\n          notes: \"Initial consultation completed\",\n          projects: [],\n          custom_fields: {},\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        },\n        {\n          id: \"2\",\n          name: \"Tech Solutions\",\n          email: \"sarah@techsolutions.com\",\n          phone: \"555-0456\",\n          company: \"Tech Solutions Inc\",\n          status: \"active\",\n          stage: \"3\",\n          value: 12000,\n          source: \"Referral\",\n          notes: \"Proposal sent\",\n          projects: [],\n          custom_fields: {},\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        },\n      ]\n    }\n\n    const { data, error } = await (supabase as any).from(\"clients\").select(\"*\").order(\"created_at\", { ascending: false })\n\n    if (error) throw new Error(`Failed to fetch clients: ${error.message}`)\n    return data || []\n  }\n\n  async getClientById(id: string): Promise<Client | null> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"clients\").select(\"*\").eq(\"id\", id).single()\n\n    if (error && error.code !== \"PGRST116\") {\n      throw new Error(`Failed to fetch client: ${error.message}`)\n    }\n    return data\n  }\n\n  async createClient(client: Inserts<\"clients\">): Promise<Client> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"clients\")\n      .insert({\n        ...client,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      })\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to create client: ${error.message}`)\n    return data\n  }\n\n  async updateClient(id: string, updates: Updates<\"clients\">): Promise<Client> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"clients\")\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"id\", id)\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to update client: ${error.message}`)\n    return data\n  }\n\n  async deleteClient(id: string): Promise<void> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { error } = await (supabase as any).from(\"clients\").delete().eq(\"id\", id)\n\n    if (error) throw new Error(`Failed to delete client: ${error.message}`)\n  }\n\n  async searchClients(query: string): Promise<Client[]> {\n    if (!supabase) throw new Error('Database not initialized')\n    const sanitizedQuery = sanitizeSearchQuery(query)\n    const { data, error } = await (supabase as any)\n      .from(\"clients\")\n      .select(\"*\")\n      .or(`name.ilike.%${sanitizedQuery}%,email.ilike.%${sanitizedQuery}%,company.ilike.%${sanitizedQuery}%`)\n      .order(\"created_at\", { ascending: false })\n\n    if (error) {\n      console.error('Database search error:', error)\n      throw new Error('Failed to search clients')\n    }\n    return data || []\n  }\n\n  // Task operations\n  async getTasks(): Promise<Task[]> {\n    if (!supabase || !isRealSupabaseConnection()) {\n      // Return mock data\n      return [\n        {\n          id: \"1\",\n          title: \"Design Homepage\",\n          description: \"Create homepage design mockup\",\n          status: \"pending\",\n          priority: \"high\",\n          due_date: \"2024-02-15\",\n          client_id: \"1\",\n          assigned_to: \"John Doe\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n          tags: [\"design\", \"homepage\"],\n          time_estimate: 8,\n          time_spent: 0,\n        },\n        {\n          id: \"2\",\n          title: \"Client Review\",\n          description: \"Review client feedback\",\n          status: \"completed\",\n          priority: \"medium\",\n          due_date: \"2024-02-20\",\n          client_id: \"2\",\n          assigned_to: \"Jane Smith\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n          tags: [\"review\", \"client\"],\n          time_estimate: 4,\n          time_spent: 3,\n        },\n      ]\n    }\n\n    const { data, error } = await (supabase as any).from(\"tasks\").select(\"*\").order(\"created_at\", { ascending: false })\n\n    if (error) throw new Error(`Failed to fetch tasks: ${error.message}`)\n    return data || []\n  }\n\n  async getTaskById(id: string): Promise<Task | null> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"tasks\").select(\"*\").eq(\"id\", id).single()\n\n    if (error && error.code !== \"PGRST116\") {\n      throw new Error(`Failed to fetch task: ${error.message}`)\n    }\n    return data\n  }\n\n  async createTask(task: Inserts<\"tasks\">): Promise<Task> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"tasks\")\n      .insert({\n        ...task,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      })\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to create task: ${error.message}`)\n    return data\n  }\n\n  async updateTask(id: string, updates: Updates<\"tasks\">): Promise<Task> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"tasks\")\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"id\", id)\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to update task: ${error.message}`)\n    return data\n  }\n\n  async deleteTask(id: string): Promise<void> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { error } = await (supabase as any).from(\"tasks\").delete().eq(\"id\", id)\n\n    if (error) throw new Error(`Failed to delete task: ${error.message}`)\n  }\n\n  async getTasksByClient(clientId: string): Promise<Task[]> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"tasks\")\n      .select(\"*\")\n      .eq(\"client_id\", clientId)\n      .order(\"created_at\", { ascending: false })\n\n    if (error) throw new Error(`Failed to fetch client tasks: ${error.message}`)\n    return data || []\n  }\n\n  // Event operations\n  async getEvents(): Promise<Event[]> {\n    if (!supabase || !isRealSupabaseConnection()) {\n      // Return mock data\n      return [\n        {\n          id: \"1\",\n          title: \"Client Meeting\",\n          description: \"Discuss project requirements\",\n          start_date: \"2024-02-15T10:00:00Z\",\n          end_date: \"2024-02-15T11:00:00Z\",\n          type: \"meeting\",\n          client_id: \"1\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n          location: \"Conference Room A\",\n          attendees: [\"john@techcorp.com\", \"sarah@company.com\"],\n        },\n        {\n          id: \"2\",\n          title: \"Follow-up Call\",\n          description: \"Check on project progress\",\n          start_date: \"2024-02-18T14:00:00Z\",\n          end_date: \"2024-02-18T14:30:00Z\",\n          type: \"call\",\n          client_id: \"2\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n          location: \"Phone Call\",\n          attendees: [\"mike@marketing.com\"],\n        },\n      ]\n    }\n\n    const { data, error } = await (supabase as any).from(\"events\").select(\"*\").order(\"start_date\", { ascending: true })\n\n    if (error) throw new Error(`Failed to fetch events: ${error.message}`)\n    return data || []\n  }\n\n  async getEventById(id: string): Promise<Event | null> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"events\").select(\"*\").eq(\"id\", id).single()\n\n    if (error && error.code !== \"PGRST116\") {\n      throw new Error(`Failed to fetch event: ${error.message}`)\n    }\n    return data\n  }\n\n  async createEvent(event: Inserts<\"events\">): Promise<Event> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"events\")\n      .insert({\n        ...event,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      })\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to create event: ${error.message}`)\n    return data\n  }\n\n  async updateEvent(id: string, updates: Updates<\"events\">): Promise<Event> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"events\")\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"id\", id)\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to update event: ${error.message}`)\n    return data\n  }\n\n  async deleteEvent(id: string): Promise<void> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { error } = await (supabase as any).from(\"events\").delete().eq(\"id\", id)\n\n    if (error) throw new Error(`Failed to delete event: ${error.message}`)\n  }\n\n  async getEventsByDateRange(startDate: string, endDate: string): Promise<Event[]> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"events\")\n      .select(\"*\")\n      .gte(\"start_date\", startDate)\n      .lte(\"end_date\", endDate)\n      .order(\"start_date\", { ascending: true })\n\n    if (error) throw new Error(`Failed to fetch events by date range: ${error.message}`)\n    return data || []\n  }\n\n  // User operations\n  async getUsers(): Promise<User[]> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"users\").select(\"*\").order(\"created_at\", { ascending: false })\n\n    if (error) throw new Error(`Failed to fetch users: ${error.message}`)\n    return data || []\n  }\n\n  async getUserById(id: string): Promise<User | null> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"users\").select(\"*\").eq(\"id\", id).single()\n\n    if (error && error.code !== \"PGRST116\") {\n      throw new Error(`Failed to fetch user: ${error.message}`)\n    }\n    return data\n  }\n\n  async createUser(user: Inserts<\"users\">): Promise<User> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"users\")\n      .insert({\n        ...user,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      })\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to create user: ${error.message}`)\n    return data\n  }\n\n  async updateUser(id: string, updates: Updates<\"users\">): Promise<User> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"users\")\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"id\", id)\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to update user: ${error.message}`)\n    return data\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { error } = await (supabase as any).from(\"users\").delete().eq(\"id\", id)\n\n    if (error) throw new Error(`Failed to delete user: ${error.message}`)\n  }\n\n  // Custom Fields operations\n  async getCustomFields(entityType?: string): Promise<CustomField[]> {\n    if (!supabase) throw new Error('Database not initialized')\n    let query = (supabase as any).from(\"custom_fields\").select(\"*\")\n\n    if (entityType) {\n      query = query.eq(\"entity_type\", entityType)\n    }\n\n    const { data, error } = await query.order(\"created_at\", { ascending: false })\n\n    if (error) throw new Error(`Failed to fetch custom fields: ${error.message}`)\n    return data || []\n  }\n\n  async createCustomField(field: Inserts<\"custom_fields\">): Promise<CustomField> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"custom_fields\")\n      .insert({\n        ...field,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      })\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to create custom field: ${error.message}`)\n    return data\n  }\n\n  async updateCustomField(id: string, updates: Updates<\"custom_fields\">): Promise<CustomField> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"custom_fields\")\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"id\", id)\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to update custom field: ${error.message}`)\n    return data\n  }\n\n  async deleteCustomField(id: string): Promise<void> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { error } = await (supabase as any).from(\"custom_fields\").delete().eq(\"id\", id)\n\n    if (error) throw new Error(`Failed to delete custom field: ${error.message}`)\n  }\n\n  // Sales Stages operations\n  async getSalesStages(): Promise<SalesStage[]> {\n    if (!supabase || !isRealSupabaseConnection()) {\n      // Return mock data\n      return [\n        {\n          id: \"1\",\n          name: \"Lead\",\n          color: \"#3B82F6\",\n          order: 1,\n          description: \"Initial lead stage\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        },\n        {\n          id: \"2\",\n          name: \"Qualified\",\n          color: \"#8B5CF6\",\n          order: 2,\n          description: \"Qualified prospect\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        },\n        {\n          id: \"3\",\n          name: \"Proposal\",\n          color: \"#F59E0B\",\n          order: 3,\n          description: \"Proposal sent\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        },\n        {\n          id: \"4\",\n          name: \"Negotiation\",\n          color: \"#F97316\",\n          order: 4,\n          description: \"In negotiation\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        },\n        {\n          id: \"5\",\n          name: \"Closed Won\",\n          color: \"#10B981\",\n          order: 5,\n          description: \"Deal closed successfully\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        },\n        {\n          id: \"6\",\n          name: \"Closed Lost\",\n          color: \"#EF4444\",\n          order: 6,\n          description: \"Deal lost\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        },\n      ]\n    }\n\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"sales_stages\").select(\"*\").order(\"order\", { ascending: true })\n\n    if (error) throw new Error(`Failed to fetch sales stages: ${error.message}`)\n    return data || []\n  }\n\n  async createSalesStage(stage: Inserts<\"sales_stages\">): Promise<SalesStage> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"sales_stages\")\n      .insert({\n        ...stage,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      })\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to create sales stage: ${error.message}`)\n    return data\n  }\n\n  async updateSalesStage(id: string, updates: Updates<\"sales_stages\">): Promise<SalesStage> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"sales_stages\")\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"id\", id)\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to update sales stage: ${error.message}`)\n    return data\n  }\n\n  async deleteSalesStage(id: string): Promise<void> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { error } = await (supabase as any).from(\"sales_stages\").delete().eq(\"id\", id)\n\n    if (error) throw new Error(`Failed to delete sales stage: ${error.message}`)\n  }\n\n  // Email operations\n  async getEmails(): Promise<Email[]> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"emails\").select(\"*\").order(\"created_at\", { ascending: false })\n\n    if (error) throw new Error(`Failed to fetch emails: ${error.message}`)\n    return data || []\n  }\n\n  async createEmail(email: Inserts<\"emails\">): Promise<Email> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"emails\")\n      .insert({\n        ...email,\n        created_at: new Date().toISOString(),\n      })\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to create email: ${error.message}`)\n    return data\n  }\n\n  async updateEmail(id: string, updates: Updates<\"emails\">): Promise<Email> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"emails\").update(updates).eq(\"id\", id).select().single()\n\n    if (error) throw new Error(`Failed to update email: ${error.message}`)\n    return data\n  }\n\n  async getEmailsByClient(clientId: string): Promise<Email[]> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"emails\")\n      .select(\"*\")\n      .eq(\"client_id\", clientId)\n      .order(\"created_at\", { ascending: false })\n\n    if (error) throw new Error(`Failed to fetch client emails: ${error.message}`)\n    return data || []\n  }\n\n  // API Keys operations\n  async getApiKeys(userId: string): Promise<ApiKey[]> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"api_keys\")\n      .select(\"*\")\n      .eq(\"user_id\", userId)\n      .order(\"created_at\", { ascending: false })\n\n    if (error) {\n      console.error('Database API keys fetch error:', error)\n      throw new Error('Failed to fetch API keys')\n    }\n    \n    // Return API keys as-is (key_hash is already encrypted)\n    return data || []\n  }\n\n  async createApiKey(apiKey: Database['public']['Tables']['api_keys']['Insert']): Promise<ApiKey> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"api_keys\")\n      .insert(apiKey)\n      .select()\n      .single()\n\n    if (error) {\n      console.error('Database API key creation error:', error)\n      throw new Error('Failed to create API key')\n    }\n    \n    if (!data) throw new Error('No data returned from API key creation')\n    \n    return data\n  }\n\n  async updateApiKey(id: string, updates: Database['public']['Tables']['api_keys']['Update']): Promise<ApiKey> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"api_keys\").update(updates).eq(\"id\", id).select().single()\n\n    if (error) throw new Error(`Failed to update API key: ${error.message}`)\n    return data\n  }\n\n  async deleteApiKey(id: string): Promise<void> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { error } = await (supabase as any).from(\"api_keys\").delete().eq(\"id\", id)\n\n    if (error) throw new Error(`Failed to delete API key: ${error.message}`)\n  }\n\n  // Analytics and reporting\n  async getClientStats(): Promise<any> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"clients\").select(\"status, stage, value\")\n\n    if (error) throw new Error(`Failed to fetch client stats: ${error.message}`)\n\n    const clientData = data as Array<{ status: string; stage: string; value: number }>\n\n    const stats = {\n      total: clientData?.length || 0,\n      totalValue: clientData?.reduce((sum, client) => sum + (client.value || 0), 0) || 0,\n      byStatus: {} as Record<string, number>,\n      byStage: {} as Record<string, number>,\n    }\n\n    clientData?.forEach((client) => {\n      stats.byStatus[client.status] = (stats.byStatus[client.status] || 0) + 1\n      stats.byStage[client.stage] = (stats.byStage[client.stage] || 0) + 1\n    })\n\n    return stats\n  }\n\n  async getTaskStats(): Promise<any> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"tasks\").select(\"status, priority\")\n\n    if (error) throw new Error(`Failed to fetch task stats: ${error.message}`)\n\n    const taskData = data as Array<{ status: string; priority: string }>\n\n    const stats = {\n      total: taskData?.length || 0,\n      byStatus: {} as Record<string, number>,\n      byPriority: {} as Record<string, number>,\n    }\n\n    taskData?.forEach((task) => {\n      stats.byStatus[task.status] = (stats.byStatus[task.status] || 0) + 1\n      stats.byPriority[task.priority] = (stats.byPriority[task.priority] || 0) + 1\n    })\n\n    return stats\n  }\n\n  // Real-time subscriptions\n  subscribeToClients(callback: (payload: any) => void) {\n    if (!supabase || !isRealSupabaseConnection()) {\n      return null\n    }\n\n    return supabase\n      .channel(\"clients\")\n      .on(\"postgres_changes\", { event: \"*\", schema: \"public\", table: \"clients\" }, callback)\n      .subscribe()\n  }\n\n  subscribeToTasks(callback: (payload: any) => void) {\n    if (!supabase || !isRealSupabaseConnection()) {\n      return null\n    }\n\n    return supabase\n      .channel(\"tasks\")\n      .on(\"postgres_changes\", { event: \"*\", schema: \"public\", table: \"tasks\" }, callback)\n      .subscribe()\n  }\n\n  subscribeToEvents(callback: (payload: any) => void) {\n    if (!supabase || !isRealSupabaseConnection()) {\n      return null\n    }\n\n    return supabase\n      .channel(\"events\")\n      .on(\"postgres_changes\", { event: \"*\", schema: \"public\", table: \"events\" }, callback)\n      .subscribe()\n  }\n}\n\nexport const databaseService = new DatabaseService()\n"],
      names: ["databaseService", "isRealSupabaseConnection", "supabaseUrl", "process", "env", "NEXT_PUBLIC_SUPABASE_URL", "supabaseKey", "NEXT_PUBLIC_SUPABASE_ANON_KEY", "includes", "DatabaseService", "getClients", "supabase", "id", "name", "email", "phone", "company", "status", "stage", "value", "source", "notes", "projects", "custom_fields", "created_at", "Date", "toISOString", "updated_at", "data", "error", "from", "select", "order", "ascending", "Error", "message", "getClientById", "eq", "single", "code", "createClient", "client", "insert", "updateClient", "updates", "update", "deleteClient", "delete", "searchClients", "query", "sanitizedQuery", "sanitizeSearchQuery", "or", "console", "getTasks", "title", "description", "priority", "due_date", "client_id", "assigned_to", "tags", "time_estimate", "time_spent", "getTaskById", "createTask", "task", "updateTask", "deleteTask", "getTasksByClient", "clientId", "getEvents", "start_date", "end_date", "type", "location", "attendees", "getEventById", "createEvent", "event", "updateEvent", "deleteEvent", "getEventsByDateRange", "startDate", "endDate", "gte", "lte", "getUsers", "getUserById", "createUser", "user", "updateUser", "deleteUser", "getCustomFields", "entityType", "createCustomField", "field", "updateCustomField", "deleteCustomField", "getSalesStages", "color", "createSalesStage", "updateSalesStage", "deleteSalesStage", "getEmails", "createEmail", "updateEmail", "getEmailsByClient", "getApiKeys", "userId", "createApiKey", "apiKey", "updateApiKey", "deleteApiKey", "getClientStats", "clientData", "stats", "total", "length", "totalValue", "reduce", "sum", "byStatus", "byStage", "forEach", "getTaskStats", "taskData", "byPriority", "subscribeToClients", "callback", "channel", "on", "schema", "table", "subscribe", "subscribeToTasks", "subscribeToEvents"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "efa94cef76452f50ef15af155831e48496234cfb"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_jdujg0y4n = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_jdujg0y4n();
cov_jdujg0y4n().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_jdujg0y4n().s[1]++;
Object.defineProperty(exports, "databaseService", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[0]++;
    cov_jdujg0y4n().s[2]++;
    return databaseService;
  }
});
const _supabase =
/* istanbul ignore next */
(cov_jdujg0y4n().s[3]++, require("../lib/supabase"));
const _security =
/* istanbul ignore next */
(cov_jdujg0y4n().s[4]++, require("../utils/security"));
// Helper function to check if we have a real Supabase connection
/* istanbul ignore next */
cov_jdujg0y4n().s[5]++;
const isRealSupabaseConnection = () => {
  /* istanbul ignore next */
  cov_jdujg0y4n().f[1]++;
  const supabaseUrl =
  /* istanbul ignore next */
  (cov_jdujg0y4n().s[6]++, process.env.NEXT_PUBLIC_SUPABASE_URL);
  const supabaseKey =
  /* istanbul ignore next */
  (cov_jdujg0y4n().s[7]++, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);
  /* istanbul ignore next */
  cov_jdujg0y4n().s[8]++;
  return /* istanbul ignore next */(cov_jdujg0y4n().b[0][0]++, supabaseUrl) &&
  /* istanbul ignore next */
  (cov_jdujg0y4n().b[0][1]++, supabaseKey) &&
  /* istanbul ignore next */
  (cov_jdujg0y4n().b[0][2]++, !supabaseUrl.includes("your-project")) &&
  /* istanbul ignore next */
  (cov_jdujg0y4n().b[0][3]++, !supabaseKey.includes("your-anon-key"));
};
class DatabaseService {
  // Client operations
  async getClients() {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[2]++;
    cov_jdujg0y4n().s[9]++;
    if (
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[2][0]++, !_supabase.supabase) ||
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[2][1]++, !isRealSupabaseConnection())) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[1][0]++;
      cov_jdujg0y4n().s[10]++;
      // Return mock data
      return [{
        id: "1",
        name: "Acme Corp",
        email: "john@acme.com",
        phone: "555-0123",
        company: "Acme Corporation",
        status: "active",
        stage: "1",
        value: 5000,
        source: "Website",
        notes: "Initial consultation completed",
        projects: [],
        custom_fields: {},
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }, {
        id: "2",
        name: "Tech Solutions",
        email: "sarah@techsolutions.com",
        phone: "555-0456",
        company: "Tech Solutions Inc",
        status: "active",
        stage: "3",
        value: 12000,
        source: "Referral",
        notes: "Proposal sent",
        projects: [],
        custom_fields: {},
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }];
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[1][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[11]++, await _supabase.supabase.from("clients").select("*").order("created_at", {
      ascending: false
    }));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[12]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[3][0]++;
      cov_jdujg0y4n().s[13]++;
      throw new Error(`Failed to fetch clients: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[3][1]++;
    }
    cov_jdujg0y4n().s[14]++;
    return /* istanbul ignore next */(cov_jdujg0y4n().b[4][0]++, data) ||
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[4][1]++, []);
  }
  async getClientById(id) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[3]++;
    cov_jdujg0y4n().s[15]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[5][0]++;
      cov_jdujg0y4n().s[16]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[5][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[17]++, await _supabase.supabase.from("clients").select("*").eq("id", id).single());
    /* istanbul ignore next */
    cov_jdujg0y4n().s[18]++;
    if (
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[7][0]++, error) &&
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[7][1]++, error.code !== "PGRST116")) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[6][0]++;
      cov_jdujg0y4n().s[19]++;
      throw new Error(`Failed to fetch client: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[6][1]++;
    }
    cov_jdujg0y4n().s[20]++;
    return data;
  }
  async createClient(client) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[4]++;
    cov_jdujg0y4n().s[21]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[8][0]++;
      cov_jdujg0y4n().s[22]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[8][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[23]++, await _supabase.supabase.from("clients").insert({
      ...client,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }).select().single());
    /* istanbul ignore next */
    cov_jdujg0y4n().s[24]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[9][0]++;
      cov_jdujg0y4n().s[25]++;
      throw new Error(`Failed to create client: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[9][1]++;
    }
    cov_jdujg0y4n().s[26]++;
    return data;
  }
  async updateClient(id, updates) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[5]++;
    cov_jdujg0y4n().s[27]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[10][0]++;
      cov_jdujg0y4n().s[28]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[10][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[29]++, await _supabase.supabase.from("clients").update({
      ...updates,
      updated_at: new Date().toISOString()
    }).eq("id", id).select().single());
    /* istanbul ignore next */
    cov_jdujg0y4n().s[30]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[11][0]++;
      cov_jdujg0y4n().s[31]++;
      throw new Error(`Failed to update client: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[11][1]++;
    }
    cov_jdujg0y4n().s[32]++;
    return data;
  }
  async deleteClient(id) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[6]++;
    cov_jdujg0y4n().s[33]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[12][0]++;
      cov_jdujg0y4n().s[34]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[12][1]++;
    }
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[35]++, await _supabase.supabase.from("clients").delete().eq("id", id));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[36]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[13][0]++;
      cov_jdujg0y4n().s[37]++;
      throw new Error(`Failed to delete client: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[13][1]++;
    }
  }
  async searchClients(query) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[7]++;
    cov_jdujg0y4n().s[38]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[14][0]++;
      cov_jdujg0y4n().s[39]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[14][1]++;
    }
    const sanitizedQuery =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[40]++, (0, _security.sanitizeSearchQuery)(query));
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[41]++, await _supabase.supabase.from("clients").select("*").or(`name.ilike.%${sanitizedQuery}%,email.ilike.%${sanitizedQuery}%,company.ilike.%${sanitizedQuery}%`).order("created_at", {
      ascending: false
    }));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[42]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[15][0]++;
      cov_jdujg0y4n().s[43]++;
      console.error('Database search error:', error);
      /* istanbul ignore next */
      cov_jdujg0y4n().s[44]++;
      throw new Error('Failed to search clients');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[15][1]++;
    }
    cov_jdujg0y4n().s[45]++;
    return /* istanbul ignore next */(cov_jdujg0y4n().b[16][0]++, data) ||
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[16][1]++, []);
  }
  // Task operations
  async getTasks() {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[8]++;
    cov_jdujg0y4n().s[46]++;
    if (
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[18][0]++, !_supabase.supabase) ||
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[18][1]++, !isRealSupabaseConnection())) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[17][0]++;
      cov_jdujg0y4n().s[47]++;
      // Return mock data
      return [{
        id: "1",
        title: "Design Homepage",
        description: "Create homepage design mockup",
        status: "pending",
        priority: "high",
        due_date: "2024-02-15",
        client_id: "1",
        assigned_to: "John Doe",
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        tags: ["design", "homepage"],
        time_estimate: 8,
        time_spent: 0
      }, {
        id: "2",
        title: "Client Review",
        description: "Review client feedback",
        status: "completed",
        priority: "medium",
        due_date: "2024-02-20",
        client_id: "2",
        assigned_to: "Jane Smith",
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        tags: ["review", "client"],
        time_estimate: 4,
        time_spent: 3
      }];
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[17][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[48]++, await _supabase.supabase.from("tasks").select("*").order("created_at", {
      ascending: false
    }));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[49]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[19][0]++;
      cov_jdujg0y4n().s[50]++;
      throw new Error(`Failed to fetch tasks: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[19][1]++;
    }
    cov_jdujg0y4n().s[51]++;
    return /* istanbul ignore next */(cov_jdujg0y4n().b[20][0]++, data) ||
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[20][1]++, []);
  }
  async getTaskById(id) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[9]++;
    cov_jdujg0y4n().s[52]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[21][0]++;
      cov_jdujg0y4n().s[53]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[21][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[54]++, await _supabase.supabase.from("tasks").select("*").eq("id", id).single());
    /* istanbul ignore next */
    cov_jdujg0y4n().s[55]++;
    if (
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[23][0]++, error) &&
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[23][1]++, error.code !== "PGRST116")) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[22][0]++;
      cov_jdujg0y4n().s[56]++;
      throw new Error(`Failed to fetch task: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[22][1]++;
    }
    cov_jdujg0y4n().s[57]++;
    return data;
  }
  async createTask(task) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[10]++;
    cov_jdujg0y4n().s[58]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[24][0]++;
      cov_jdujg0y4n().s[59]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[24][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[60]++, await _supabase.supabase.from("tasks").insert({
      ...task,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }).select().single());
    /* istanbul ignore next */
    cov_jdujg0y4n().s[61]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[25][0]++;
      cov_jdujg0y4n().s[62]++;
      throw new Error(`Failed to create task: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[25][1]++;
    }
    cov_jdujg0y4n().s[63]++;
    return data;
  }
  async updateTask(id, updates) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[11]++;
    cov_jdujg0y4n().s[64]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[26][0]++;
      cov_jdujg0y4n().s[65]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[26][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[66]++, await _supabase.supabase.from("tasks").update({
      ...updates,
      updated_at: new Date().toISOString()
    }).eq("id", id).select().single());
    /* istanbul ignore next */
    cov_jdujg0y4n().s[67]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[27][0]++;
      cov_jdujg0y4n().s[68]++;
      throw new Error(`Failed to update task: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[27][1]++;
    }
    cov_jdujg0y4n().s[69]++;
    return data;
  }
  async deleteTask(id) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[12]++;
    cov_jdujg0y4n().s[70]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[28][0]++;
      cov_jdujg0y4n().s[71]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[28][1]++;
    }
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[72]++, await _supabase.supabase.from("tasks").delete().eq("id", id));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[73]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[29][0]++;
      cov_jdujg0y4n().s[74]++;
      throw new Error(`Failed to delete task: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[29][1]++;
    }
  }
  async getTasksByClient(clientId) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[13]++;
    cov_jdujg0y4n().s[75]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[30][0]++;
      cov_jdujg0y4n().s[76]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[30][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[77]++, await _supabase.supabase.from("tasks").select("*").eq("client_id", clientId).order("created_at", {
      ascending: false
    }));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[78]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[31][0]++;
      cov_jdujg0y4n().s[79]++;
      throw new Error(`Failed to fetch client tasks: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[31][1]++;
    }
    cov_jdujg0y4n().s[80]++;
    return /* istanbul ignore next */(cov_jdujg0y4n().b[32][0]++, data) ||
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[32][1]++, []);
  }
  // Event operations
  async getEvents() {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[14]++;
    cov_jdujg0y4n().s[81]++;
    if (
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[34][0]++, !_supabase.supabase) ||
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[34][1]++, !isRealSupabaseConnection())) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[33][0]++;
      cov_jdujg0y4n().s[82]++;
      // Return mock data
      return [{
        id: "1",
        title: "Client Meeting",
        description: "Discuss project requirements",
        start_date: "2024-02-15T10:00:00Z",
        end_date: "2024-02-15T11:00:00Z",
        type: "meeting",
        client_id: "1",
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        location: "Conference Room A",
        attendees: ["john@techcorp.com", "sarah@company.com"]
      }, {
        id: "2",
        title: "Follow-up Call",
        description: "Check on project progress",
        start_date: "2024-02-18T14:00:00Z",
        end_date: "2024-02-18T14:30:00Z",
        type: "call",
        client_id: "2",
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        location: "Phone Call",
        attendees: ["mike@marketing.com"]
      }];
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[33][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[83]++, await _supabase.supabase.from("events").select("*").order("start_date", {
      ascending: true
    }));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[84]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[35][0]++;
      cov_jdujg0y4n().s[85]++;
      throw new Error(`Failed to fetch events: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[35][1]++;
    }
    cov_jdujg0y4n().s[86]++;
    return /* istanbul ignore next */(cov_jdujg0y4n().b[36][0]++, data) ||
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[36][1]++, []);
  }
  async getEventById(id) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[15]++;
    cov_jdujg0y4n().s[87]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[37][0]++;
      cov_jdujg0y4n().s[88]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[37][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[89]++, await _supabase.supabase.from("events").select("*").eq("id", id).single());
    /* istanbul ignore next */
    cov_jdujg0y4n().s[90]++;
    if (
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[39][0]++, error) &&
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[39][1]++, error.code !== "PGRST116")) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[38][0]++;
      cov_jdujg0y4n().s[91]++;
      throw new Error(`Failed to fetch event: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[38][1]++;
    }
    cov_jdujg0y4n().s[92]++;
    return data;
  }
  async createEvent(event) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[16]++;
    cov_jdujg0y4n().s[93]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[40][0]++;
      cov_jdujg0y4n().s[94]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[40][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[95]++, await _supabase.supabase.from("events").insert({
      ...event,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }).select().single());
    /* istanbul ignore next */
    cov_jdujg0y4n().s[96]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[41][0]++;
      cov_jdujg0y4n().s[97]++;
      throw new Error(`Failed to create event: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[41][1]++;
    }
    cov_jdujg0y4n().s[98]++;
    return data;
  }
  async updateEvent(id, updates) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[17]++;
    cov_jdujg0y4n().s[99]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[42][0]++;
      cov_jdujg0y4n().s[100]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[42][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[101]++, await _supabase.supabase.from("events").update({
      ...updates,
      updated_at: new Date().toISOString()
    }).eq("id", id).select().single());
    /* istanbul ignore next */
    cov_jdujg0y4n().s[102]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[43][0]++;
      cov_jdujg0y4n().s[103]++;
      throw new Error(`Failed to update event: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[43][1]++;
    }
    cov_jdujg0y4n().s[104]++;
    return data;
  }
  async deleteEvent(id) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[18]++;
    cov_jdujg0y4n().s[105]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[44][0]++;
      cov_jdujg0y4n().s[106]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[44][1]++;
    }
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[107]++, await _supabase.supabase.from("events").delete().eq("id", id));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[108]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[45][0]++;
      cov_jdujg0y4n().s[109]++;
      throw new Error(`Failed to delete event: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[45][1]++;
    }
  }
  async getEventsByDateRange(startDate, endDate) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[19]++;
    cov_jdujg0y4n().s[110]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[46][0]++;
      cov_jdujg0y4n().s[111]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[46][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[112]++, await _supabase.supabase.from("events").select("*").gte("start_date", startDate).lte("end_date", endDate).order("start_date", {
      ascending: true
    }));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[113]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[47][0]++;
      cov_jdujg0y4n().s[114]++;
      throw new Error(`Failed to fetch events by date range: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[47][1]++;
    }
    cov_jdujg0y4n().s[115]++;
    return /* istanbul ignore next */(cov_jdujg0y4n().b[48][0]++, data) ||
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[48][1]++, []);
  }
  // User operations
  async getUsers() {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[20]++;
    cov_jdujg0y4n().s[116]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[49][0]++;
      cov_jdujg0y4n().s[117]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[49][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[118]++, await _supabase.supabase.from("users").select("*").order("created_at", {
      ascending: false
    }));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[119]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[50][0]++;
      cov_jdujg0y4n().s[120]++;
      throw new Error(`Failed to fetch users: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[50][1]++;
    }
    cov_jdujg0y4n().s[121]++;
    return /* istanbul ignore next */(cov_jdujg0y4n().b[51][0]++, data) ||
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[51][1]++, []);
  }
  async getUserById(id) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[21]++;
    cov_jdujg0y4n().s[122]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[52][0]++;
      cov_jdujg0y4n().s[123]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[52][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[124]++, await _supabase.supabase.from("users").select("*").eq("id", id).single());
    /* istanbul ignore next */
    cov_jdujg0y4n().s[125]++;
    if (
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[54][0]++, error) &&
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[54][1]++, error.code !== "PGRST116")) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[53][0]++;
      cov_jdujg0y4n().s[126]++;
      throw new Error(`Failed to fetch user: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[53][1]++;
    }
    cov_jdujg0y4n().s[127]++;
    return data;
  }
  async createUser(user) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[22]++;
    cov_jdujg0y4n().s[128]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[55][0]++;
      cov_jdujg0y4n().s[129]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[55][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[130]++, await _supabase.supabase.from("users").insert({
      ...user,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }).select().single());
    /* istanbul ignore next */
    cov_jdujg0y4n().s[131]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[56][0]++;
      cov_jdujg0y4n().s[132]++;
      throw new Error(`Failed to create user: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[56][1]++;
    }
    cov_jdujg0y4n().s[133]++;
    return data;
  }
  async updateUser(id, updates) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[23]++;
    cov_jdujg0y4n().s[134]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[57][0]++;
      cov_jdujg0y4n().s[135]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[57][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[136]++, await _supabase.supabase.from("users").update({
      ...updates,
      updated_at: new Date().toISOString()
    }).eq("id", id).select().single());
    /* istanbul ignore next */
    cov_jdujg0y4n().s[137]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[58][0]++;
      cov_jdujg0y4n().s[138]++;
      throw new Error(`Failed to update user: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[58][1]++;
    }
    cov_jdujg0y4n().s[139]++;
    return data;
  }
  async deleteUser(id) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[24]++;
    cov_jdujg0y4n().s[140]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[59][0]++;
      cov_jdujg0y4n().s[141]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[59][1]++;
    }
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[142]++, await _supabase.supabase.from("users").delete().eq("id", id));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[143]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[60][0]++;
      cov_jdujg0y4n().s[144]++;
      throw new Error(`Failed to delete user: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[60][1]++;
    }
  }
  // Custom Fields operations
  async getCustomFields(entityType) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[25]++;
    cov_jdujg0y4n().s[145]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[61][0]++;
      cov_jdujg0y4n().s[146]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[61][1]++;
    }
    let query =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[147]++, _supabase.supabase.from("custom_fields").select("*"));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[148]++;
    if (entityType) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[62][0]++;
      cov_jdujg0y4n().s[149]++;
      query = query.eq("entity_type", entityType);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[62][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[150]++, await query.order("created_at", {
      ascending: false
    }));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[151]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[63][0]++;
      cov_jdujg0y4n().s[152]++;
      throw new Error(`Failed to fetch custom fields: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[63][1]++;
    }
    cov_jdujg0y4n().s[153]++;
    return /* istanbul ignore next */(cov_jdujg0y4n().b[64][0]++, data) ||
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[64][1]++, []);
  }
  async createCustomField(field) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[26]++;
    cov_jdujg0y4n().s[154]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[65][0]++;
      cov_jdujg0y4n().s[155]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[65][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[156]++, await _supabase.supabase.from("custom_fields").insert({
      ...field,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }).select().single());
    /* istanbul ignore next */
    cov_jdujg0y4n().s[157]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[66][0]++;
      cov_jdujg0y4n().s[158]++;
      throw new Error(`Failed to create custom field: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[66][1]++;
    }
    cov_jdujg0y4n().s[159]++;
    return data;
  }
  async updateCustomField(id, updates) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[27]++;
    cov_jdujg0y4n().s[160]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[67][0]++;
      cov_jdujg0y4n().s[161]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[67][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[162]++, await _supabase.supabase.from("custom_fields").update({
      ...updates,
      updated_at: new Date().toISOString()
    }).eq("id", id).select().single());
    /* istanbul ignore next */
    cov_jdujg0y4n().s[163]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[68][0]++;
      cov_jdujg0y4n().s[164]++;
      throw new Error(`Failed to update custom field: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[68][1]++;
    }
    cov_jdujg0y4n().s[165]++;
    return data;
  }
  async deleteCustomField(id) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[28]++;
    cov_jdujg0y4n().s[166]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[69][0]++;
      cov_jdujg0y4n().s[167]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[69][1]++;
    }
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[168]++, await _supabase.supabase.from("custom_fields").delete().eq("id", id));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[169]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[70][0]++;
      cov_jdujg0y4n().s[170]++;
      throw new Error(`Failed to delete custom field: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[70][1]++;
    }
  }
  // Sales Stages operations
  async getSalesStages() {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[29]++;
    cov_jdujg0y4n().s[171]++;
    if (
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[72][0]++, !_supabase.supabase) ||
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[72][1]++, !isRealSupabaseConnection())) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[71][0]++;
      cov_jdujg0y4n().s[172]++;
      // Return mock data
      return [{
        id: "1",
        name: "Lead",
        color: "#3B82F6",
        order: 1,
        description: "Initial lead stage",
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }, {
        id: "2",
        name: "Qualified",
        color: "#8B5CF6",
        order: 2,
        description: "Qualified prospect",
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }, {
        id: "3",
        name: "Proposal",
        color: "#F59E0B",
        order: 3,
        description: "Proposal sent",
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }, {
        id: "4",
        name: "Negotiation",
        color: "#F97316",
        order: 4,
        description: "In negotiation",
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }, {
        id: "5",
        name: "Closed Won",
        color: "#10B981",
        order: 5,
        description: "Deal closed successfully",
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }, {
        id: "6",
        name: "Closed Lost",
        color: "#EF4444",
        order: 6,
        description: "Deal lost",
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }];
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[71][1]++;
    }
    cov_jdujg0y4n().s[173]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[73][0]++;
      cov_jdujg0y4n().s[174]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[73][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[175]++, await _supabase.supabase.from("sales_stages").select("*").order("order", {
      ascending: true
    }));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[176]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[74][0]++;
      cov_jdujg0y4n().s[177]++;
      throw new Error(`Failed to fetch sales stages: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[74][1]++;
    }
    cov_jdujg0y4n().s[178]++;
    return /* istanbul ignore next */(cov_jdujg0y4n().b[75][0]++, data) ||
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[75][1]++, []);
  }
  async createSalesStage(stage) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[30]++;
    cov_jdujg0y4n().s[179]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[76][0]++;
      cov_jdujg0y4n().s[180]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[76][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[181]++, await _supabase.supabase.from("sales_stages").insert({
      ...stage,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }).select().single());
    /* istanbul ignore next */
    cov_jdujg0y4n().s[182]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[77][0]++;
      cov_jdujg0y4n().s[183]++;
      throw new Error(`Failed to create sales stage: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[77][1]++;
    }
    cov_jdujg0y4n().s[184]++;
    return data;
  }
  async updateSalesStage(id, updates) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[31]++;
    cov_jdujg0y4n().s[185]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[78][0]++;
      cov_jdujg0y4n().s[186]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[78][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[187]++, await _supabase.supabase.from("sales_stages").update({
      ...updates,
      updated_at: new Date().toISOString()
    }).eq("id", id).select().single());
    /* istanbul ignore next */
    cov_jdujg0y4n().s[188]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[79][0]++;
      cov_jdujg0y4n().s[189]++;
      throw new Error(`Failed to update sales stage: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[79][1]++;
    }
    cov_jdujg0y4n().s[190]++;
    return data;
  }
  async deleteSalesStage(id) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[32]++;
    cov_jdujg0y4n().s[191]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[80][0]++;
      cov_jdujg0y4n().s[192]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[80][1]++;
    }
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[193]++, await _supabase.supabase.from("sales_stages").delete().eq("id", id));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[194]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[81][0]++;
      cov_jdujg0y4n().s[195]++;
      throw new Error(`Failed to delete sales stage: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[81][1]++;
    }
  }
  // Email operations
  async getEmails() {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[33]++;
    cov_jdujg0y4n().s[196]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[82][0]++;
      cov_jdujg0y4n().s[197]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[82][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[198]++, await _supabase.supabase.from("emails").select("*").order("created_at", {
      ascending: false
    }));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[199]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[83][0]++;
      cov_jdujg0y4n().s[200]++;
      throw new Error(`Failed to fetch emails: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[83][1]++;
    }
    cov_jdujg0y4n().s[201]++;
    return /* istanbul ignore next */(cov_jdujg0y4n().b[84][0]++, data) ||
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[84][1]++, []);
  }
  async createEmail(email) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[34]++;
    cov_jdujg0y4n().s[202]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[85][0]++;
      cov_jdujg0y4n().s[203]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[85][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[204]++, await _supabase.supabase.from("emails").insert({
      ...email,
      created_at: new Date().toISOString()
    }).select().single());
    /* istanbul ignore next */
    cov_jdujg0y4n().s[205]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[86][0]++;
      cov_jdujg0y4n().s[206]++;
      throw new Error(`Failed to create email: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[86][1]++;
    }
    cov_jdujg0y4n().s[207]++;
    return data;
  }
  async updateEmail(id, updates) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[35]++;
    cov_jdujg0y4n().s[208]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[87][0]++;
      cov_jdujg0y4n().s[209]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[87][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[210]++, await _supabase.supabase.from("emails").update(updates).eq("id", id).select().single());
    /* istanbul ignore next */
    cov_jdujg0y4n().s[211]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[88][0]++;
      cov_jdujg0y4n().s[212]++;
      throw new Error(`Failed to update email: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[88][1]++;
    }
    cov_jdujg0y4n().s[213]++;
    return data;
  }
  async getEmailsByClient(clientId) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[36]++;
    cov_jdujg0y4n().s[214]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[89][0]++;
      cov_jdujg0y4n().s[215]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[89][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[216]++, await _supabase.supabase.from("emails").select("*").eq("client_id", clientId).order("created_at", {
      ascending: false
    }));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[217]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[90][0]++;
      cov_jdujg0y4n().s[218]++;
      throw new Error(`Failed to fetch client emails: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[90][1]++;
    }
    cov_jdujg0y4n().s[219]++;
    return /* istanbul ignore next */(cov_jdujg0y4n().b[91][0]++, data) ||
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[91][1]++, []);
  }
  // API Keys operations
  async getApiKeys(userId) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[37]++;
    cov_jdujg0y4n().s[220]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[92][0]++;
      cov_jdujg0y4n().s[221]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[92][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[222]++, await _supabase.supabase.from("api_keys").select("*").eq("user_id", userId).order("created_at", {
      ascending: false
    }));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[223]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[93][0]++;
      cov_jdujg0y4n().s[224]++;
      console.error('Database API keys fetch error:', error);
      /* istanbul ignore next */
      cov_jdujg0y4n().s[225]++;
      throw new Error('Failed to fetch API keys');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[93][1]++;
    }
    // Return API keys as-is (key_hash is already encrypted)
    cov_jdujg0y4n().s[226]++;
    return /* istanbul ignore next */(cov_jdujg0y4n().b[94][0]++, data) ||
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[94][1]++, []);
  }
  async createApiKey(apiKey) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[38]++;
    cov_jdujg0y4n().s[227]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[95][0]++;
      cov_jdujg0y4n().s[228]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[95][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[229]++, await _supabase.supabase.from("api_keys").insert(apiKey).select().single());
    /* istanbul ignore next */
    cov_jdujg0y4n().s[230]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[96][0]++;
      cov_jdujg0y4n().s[231]++;
      console.error('Database API key creation error:', error);
      /* istanbul ignore next */
      cov_jdujg0y4n().s[232]++;
      throw new Error('Failed to create API key');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[96][1]++;
    }
    cov_jdujg0y4n().s[233]++;
    if (!data) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[97][0]++;
      cov_jdujg0y4n().s[234]++;
      throw new Error('No data returned from API key creation');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[97][1]++;
    }
    cov_jdujg0y4n().s[235]++;
    return data;
  }
  async updateApiKey(id, updates) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[39]++;
    cov_jdujg0y4n().s[236]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[98][0]++;
      cov_jdujg0y4n().s[237]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[98][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[238]++, await _supabase.supabase.from("api_keys").update(updates).eq("id", id).select().single());
    /* istanbul ignore next */
    cov_jdujg0y4n().s[239]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[99][0]++;
      cov_jdujg0y4n().s[240]++;
      throw new Error(`Failed to update API key: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[99][1]++;
    }
    cov_jdujg0y4n().s[241]++;
    return data;
  }
  async deleteApiKey(id) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[40]++;
    cov_jdujg0y4n().s[242]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[100][0]++;
      cov_jdujg0y4n().s[243]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[100][1]++;
    }
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[244]++, await _supabase.supabase.from("api_keys").delete().eq("id", id));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[245]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[101][0]++;
      cov_jdujg0y4n().s[246]++;
      throw new Error(`Failed to delete API key: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[101][1]++;
    }
  }
  // Analytics and reporting
  async getClientStats() {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[41]++;
    cov_jdujg0y4n().s[247]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[102][0]++;
      cov_jdujg0y4n().s[248]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[102][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[249]++, await _supabase.supabase.from("clients").select("status, stage, value"));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[250]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[103][0]++;
      cov_jdujg0y4n().s[251]++;
      throw new Error(`Failed to fetch client stats: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[103][1]++;
    }
    const clientData =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[252]++, data);
    const stats =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[253]++, {
      total:
      /* istanbul ignore next */
      (cov_jdujg0y4n().b[104][0]++, clientData?.length) ||
      /* istanbul ignore next */
      (cov_jdujg0y4n().b[104][1]++, 0),
      totalValue:
      /* istanbul ignore next */
      (cov_jdujg0y4n().b[105][0]++, clientData?.reduce((sum, client) => {
        /* istanbul ignore next */
        cov_jdujg0y4n().f[42]++;
        cov_jdujg0y4n().s[254]++;
        return sum + (
        /* istanbul ignore next */
        (cov_jdujg0y4n().b[106][0]++, client.value) ||
        /* istanbul ignore next */
        (cov_jdujg0y4n().b[106][1]++, 0));
      }, 0)) ||
      /* istanbul ignore next */
      (cov_jdujg0y4n().b[105][1]++, 0),
      byStatus: {},
      byStage: {}
    });
    /* istanbul ignore next */
    cov_jdujg0y4n().s[255]++;
    clientData?.forEach(client => {
      /* istanbul ignore next */
      cov_jdujg0y4n().f[43]++;
      cov_jdujg0y4n().s[256]++;
      stats.byStatus[client.status] = (
      /* istanbul ignore next */
      (cov_jdujg0y4n().b[107][0]++, stats.byStatus[client.status]) ||
      /* istanbul ignore next */
      (cov_jdujg0y4n().b[107][1]++, 0)) + 1;
      /* istanbul ignore next */
      cov_jdujg0y4n().s[257]++;
      stats.byStage[client.stage] = (
      /* istanbul ignore next */
      (cov_jdujg0y4n().b[108][0]++, stats.byStage[client.stage]) ||
      /* istanbul ignore next */
      (cov_jdujg0y4n().b[108][1]++, 0)) + 1;
    });
    /* istanbul ignore next */
    cov_jdujg0y4n().s[258]++;
    return stats;
  }
  async getTaskStats() {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[44]++;
    cov_jdujg0y4n().s[259]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[109][0]++;
      cov_jdujg0y4n().s[260]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[109][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[261]++, await _supabase.supabase.from("tasks").select("status, priority"));
    /* istanbul ignore next */
    cov_jdujg0y4n().s[262]++;
    if (error) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[110][0]++;
      cov_jdujg0y4n().s[263]++;
      throw new Error(`Failed to fetch task stats: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[110][1]++;
    }
    const taskData =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[264]++, data);
    const stats =
    /* istanbul ignore next */
    (cov_jdujg0y4n().s[265]++, {
      total:
      /* istanbul ignore next */
      (cov_jdujg0y4n().b[111][0]++, taskData?.length) ||
      /* istanbul ignore next */
      (cov_jdujg0y4n().b[111][1]++, 0),
      byStatus: {},
      byPriority: {}
    });
    /* istanbul ignore next */
    cov_jdujg0y4n().s[266]++;
    taskData?.forEach(task => {
      /* istanbul ignore next */
      cov_jdujg0y4n().f[45]++;
      cov_jdujg0y4n().s[267]++;
      stats.byStatus[task.status] = (
      /* istanbul ignore next */
      (cov_jdujg0y4n().b[112][0]++, stats.byStatus[task.status]) ||
      /* istanbul ignore next */
      (cov_jdujg0y4n().b[112][1]++, 0)) + 1;
      /* istanbul ignore next */
      cov_jdujg0y4n().s[268]++;
      stats.byPriority[task.priority] = (
      /* istanbul ignore next */
      (cov_jdujg0y4n().b[113][0]++, stats.byPriority[task.priority]) ||
      /* istanbul ignore next */
      (cov_jdujg0y4n().b[113][1]++, 0)) + 1;
    });
    /* istanbul ignore next */
    cov_jdujg0y4n().s[269]++;
    return stats;
  }
  // Real-time subscriptions
  subscribeToClients(callback) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[46]++;
    cov_jdujg0y4n().s[270]++;
    if (
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[115][0]++, !_supabase.supabase) ||
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[115][1]++, !isRealSupabaseConnection())) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[114][0]++;
      cov_jdujg0y4n().s[271]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[114][1]++;
    }
    cov_jdujg0y4n().s[272]++;
    return _supabase.supabase.channel("clients").on("postgres_changes", {
      event: "*",
      schema: "public",
      table: "clients"
    }, callback).subscribe();
  }
  subscribeToTasks(callback) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[47]++;
    cov_jdujg0y4n().s[273]++;
    if (
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[117][0]++, !_supabase.supabase) ||
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[117][1]++, !isRealSupabaseConnection())) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[116][0]++;
      cov_jdujg0y4n().s[274]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[116][1]++;
    }
    cov_jdujg0y4n().s[275]++;
    return _supabase.supabase.channel("tasks").on("postgres_changes", {
      event: "*",
      schema: "public",
      table: "tasks"
    }, callback).subscribe();
  }
  subscribeToEvents(callback) {
    /* istanbul ignore next */
    cov_jdujg0y4n().f[48]++;
    cov_jdujg0y4n().s[276]++;
    if (
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[119][0]++, !_supabase.supabase) ||
    /* istanbul ignore next */
    (cov_jdujg0y4n().b[119][1]++, !isRealSupabaseConnection())) {
      /* istanbul ignore next */
      cov_jdujg0y4n().b[118][0]++;
      cov_jdujg0y4n().s[277]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_jdujg0y4n().b[118][1]++;
    }
    cov_jdujg0y4n().s[278]++;
    return _supabase.supabase.channel("events").on("postgres_changes", {
      event: "*",
      schema: "public",
      table: "events"
    }, callback).subscribe();
  }
}
const databaseService =
/* istanbul ignore next */
(cov_jdujg0y4n().s[279]++, new DatabaseService());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,