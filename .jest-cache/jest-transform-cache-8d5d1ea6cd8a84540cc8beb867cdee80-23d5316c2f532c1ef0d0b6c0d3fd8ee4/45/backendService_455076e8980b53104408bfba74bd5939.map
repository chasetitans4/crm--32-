{"version":3,"names":["backendService","cov_255m12gg1k","f","s","default","_default","ensureSecureUrl","url","b","process","env","NODE_ENV","startsWith","console","warn","replace","isRealSupabaseConnection","supabaseUrl","NEXT_PUBLIC_SUPABASE_URL","supabaseKey","NEXT_PUBLIC_SUPABASE_ANON_KEY","includes","BackendService","constructor","config","offlineQueue","syncStatus","Map","isOnline","navigator","onLine","syncInterval","hasRealConnection","defaultApiUrl","NEXT_PUBLIC_API_URL","apiUrl","timeout","retryAttempts","enableOfflineMode","Boolean","initializeOfflineSupport","startSyncInterval","initialize","window","addEventListener","syncOfflineActions","savedQueue","localStorage","getItem","JSON","parse","clearInterval","setInterval","syncAllEntities","create","table","data","id","crypto","randomUUID","created_at","Date","toISOString","updated_at","queueOfflineAction","result","error","_supabase","supabase","from","insert","select","single","updateSyncStatus","update","eq","delete","read","filters","getMockData","query","Object","entries","forEach","key","value","Array","isArray","in","getCachedData","name","email","phone","company","status","stage","title","description","priority","due_date","client_id","assigned_to","start_date","end_date","type","entity","action","timestamp","synced","push","saveOfflineQueue","setItem","stringify","pendingActions","filter","executeOfflineAction","message","updateData","cacheKey","cached","setCachedData","errorMessage","set","lastSync","getSyncStatus","get","values","entities","getPerformanceMetrics","responseTime","errorRate","syncQueueSize","cacheHitRate","startTime","now","Error","limit","calculateErrorRate","length","calculateCacheHitRate","errorStatuses","Math","max","size","destroy","removeEventListener"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\backendService.ts"],"sourcesContent":["import { supabase } from \"../lib/supabase\"\r\nimport type { Database } from \"../lib/supabase\"\r\n\r\ntype Tables<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Row\"]\r\ntype Inserts<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Insert\"]\r\ntype Updates<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Update\"]\r\n\r\nexport interface BackendConfig {\r\n  apiUrl: string\r\n  timeout: number\r\n  retryAttempts: number\r\n  enableOfflineMode: boolean\r\n  syncInterval: number\r\n}\r\n\r\nexport interface SyncStatus {\r\n  entity: string\r\n  lastSync: string\r\n  status: \"synced\" | \"pending\" | \"error\"\r\n  errorMessage?: string\r\n}\r\n\r\nexport interface OfflineAction {\r\n  id: string\r\n  type: \"create\" | \"update\" | \"delete\"\r\n  entity: string\r\n  data: Record<string, unknown>\r\n  timestamp: string\r\n  synced: boolean\r\n}\r\n\r\nexport interface BackupData {\r\n  id: string\r\n  timestamp: string\r\n  entities: Record<string, unknown[]>\r\n  size: number\r\n  compressed: boolean\r\n}\r\n\r\n// Helper function to ensure secure URL\r\nconst ensureSecureUrl = (url: string): string => {\r\n  // In production, enforce HTTPS\r\n  if (process.env.NODE_ENV === 'production' && url.startsWith('http://')) {\r\n    console.warn('Insecure HTTP URL detected in production, converting to HTTPS:', url)\r\n    return url.replace('http://', 'https://')\r\n  }\r\n  return url\r\n}\r\n\r\n// Helper function to check if we have a real Supabase connection\r\nconst isRealSupabaseConnection = () => {\r\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\r\n  const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\r\n  return supabaseUrl && supabaseKey && !supabaseUrl.includes(\"your-project\") && !supabaseKey.includes(\"your-anon-key\")\r\n}\r\n\r\nclass BackendService {\r\n  private config: BackendConfig\r\n  private offlineQueue: OfflineAction[] = []\r\n  private syncStatus: Map<string, SyncStatus> = new Map()\r\n  private isOnline = navigator.onLine\r\n  private syncInterval: NodeJS.Timeout | null = null\r\n  private hasRealConnection = false\r\n\r\n  constructor(config: Partial<BackendConfig> = {}) {\r\n    const defaultApiUrl = process.env.NEXT_PUBLIC_API_URL || \"https://localhost:3001\"\r\n    \r\n    this.config = {\r\n      apiUrl: ensureSecureUrl(defaultApiUrl),\r\n      timeout: 30000,\r\n      retryAttempts: 3,\r\n      enableOfflineMode: true,\r\n      syncInterval: 30000, // 30 seconds\r\n      ...config,\r\n    }\r\n\r\n    // Ensure the configured URL is also secure\r\n    this.config.apiUrl = ensureSecureUrl(this.config.apiUrl)\r\n\r\n    this.hasRealConnection = Boolean(isRealSupabaseConnection())\r\n\r\n    if (this.hasRealConnection) {\r\n      this.initializeOfflineSupport()\r\n      this.startSyncInterval()\r\n    } else {\r\n      // Silent logging - Backend service running in mock mode\r\n    }\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    if (this.hasRealConnection) {\r\n      // Silent logging - Backend service initialized with real database\r\n    } else {\r\n      // Silent logging - Backend service initialized in mock mode\r\n    }\r\n  }\r\n\r\n  // Connection Management\r\n  private initializeOfflineSupport(): void {\r\n    if (!this.hasRealConnection) return\r\n\r\n    window.addEventListener(\"online\", () => {\r\n      this.isOnline = true\r\n      this.syncOfflineActions()\r\n    })\r\n\r\n    window.addEventListener(\"offline\", () => {\r\n      this.isOnline = false\r\n    })\r\n\r\n    // Load offline queue from localStorage\r\n    const savedQueue = localStorage.getItem(\"offline_queue\")\r\n    if (savedQueue) {\r\n      this.offlineQueue = JSON.parse(savedQueue)\r\n    }\r\n  }\r\n\r\n  private startSyncInterval(): void {\r\n    if (!this.hasRealConnection) return\r\n\r\n    if (this.syncInterval) {\r\n      clearInterval(this.syncInterval)\r\n    }\r\n\r\n    this.syncInterval = setInterval(() => {\r\n      if (this.isOnline && this.hasRealConnection) {\r\n        this.syncAllEntities()\r\n      }\r\n    }, this.config.syncInterval)\r\n  }\r\n\r\n  // CRUD Operations with Offline Support\r\n  async create<T extends keyof Database[\"public\"][\"Tables\"]>(table: T, data: Inserts<T>): Promise<Tables<T>> {\r\n    if (!this.hasRealConnection) {\r\n      // Return mock data for development\r\n      return {\r\n        id: crypto.randomUUID(),\r\n        ...data,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString(),\r\n      } as Tables<T>\r\n    }\r\n\r\n    if (!this.isOnline && this.config.enableOfflineMode) {\r\n      return this.queueOfflineAction(\"create\", table as string, data as any)\r\n    }\r\n\r\n    try {\r\n      const { data: result, error } = await (supabase as any).from(table).insert(data as any).select().single()\r\n\r\n      if (error) throw error\r\n\r\n      // Update sync status\r\n      this.updateSyncStatus(table as string, \"synced\")\r\n\r\n      return result as Tables<T>\r\n    } catch (error: any) {\r\n      if (this.config.enableOfflineMode) {\r\n        return this.queueOfflineAction(\"create\", table as string, data as any)\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  async update<T extends keyof Database[\"public\"][\"Tables\"]>(\r\n    table: T,\r\n    id: string,\r\n    data: Updates<T>,\r\n  ): Promise<Tables<T>> {\r\n    if (!this.hasRealConnection) {\r\n      // Return mock data for development\r\n      return {\r\n        id,\r\n        ...data,\r\n        updated_at: new Date().toISOString(),\r\n      } as Tables<T>\r\n    }\r\n\r\n    if (!this.isOnline && this.config.enableOfflineMode) {\r\n      return this.queueOfflineAction(\"update\", table as string, { id, ...data as any })\r\n    }\r\n\r\n    try {\r\n      const { data: result, error } = await (supabase as any).from(table).update(data as any).eq(\"id\", id as any).select().single()\r\n\r\n      if (error) throw error\r\n\r\n      this.updateSyncStatus(table as string, \"synced\")\r\n\r\n      return result as Tables<T>\r\n    } catch (error: any) {\r\n      if (this.config.enableOfflineMode) {\r\n        return this.queueOfflineAction(\"update\", table as string, { id, ...data as any })\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  async delete<T extends keyof Database[\"public\"][\"Tables\"]>(table: T, id: string): Promise<void> {\r\n    if (!this.hasRealConnection) {\r\n      // Mock delete - just log it\r\n      // Silent logging - Mock delete operation\r\n      return\r\n    }\r\n\r\n    if (!this.isOnline && this.config.enableOfflineMode) {\r\n      this.queueOfflineAction(\"delete\", table as string, { id })\r\n      return\r\n    }\r\n\r\n    try {\r\n      const { error } = await (supabase as any).from(table).delete().eq(\"id\", id as any)\r\n\r\n      if (error) throw error\r\n\r\n      this.updateSyncStatus(table as string, \"synced\")\r\n    } catch (error: any) {\r\n      if (this.config.enableOfflineMode) {\r\n        this.queueOfflineAction(\"delete\", table as string, { id })\r\n        return\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  async read<T extends keyof Database[\"public\"][\"Tables\"]>(\r\n    table: T,\r\n    filters?: Record<string, any>,\r\n  ): Promise<Tables<T>[]> {\r\n    if (!this.hasRealConnection) {\r\n      // Return mock data based on table\r\n      return this.getMockData(table as string) as Tables<T>[]\r\n    }\r\n\r\n    try {\r\n      let query = (supabase as any).from(table).select(\"*\")\r\n\r\n      if (filters) {\r\n        Object.entries(filters).forEach(([key, value]) => {\r\n          if (Array.isArray(value)) {\r\n            query = query.in(key as any, value as any)\r\n          } else {\r\n            query = query.eq(key as any, value as any)\r\n          }\r\n        })\r\n      }\r\n\r\n      const { data, error } = await query\r\n\r\n      if (error) throw error\r\n\r\n      this.updateSyncStatus(table as string, \"synced\")\r\n\r\n      return (data || []) as Tables<T>[]\r\n    } catch (error: any) {\r\n      // Try to get cached data if offline\r\n      if (!this.isOnline && this.config.enableOfflineMode) {\r\n        return this.getCachedData(table as string, filters)\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // Mock data for development\r\n  private getMockData(table: string): any[] {\r\n    switch (table) {\r\n      case \"clients\":\r\n        return [\r\n          {\r\n            id: \"1\",\r\n            name: \"Acme Corp\",\r\n            email: \"john@acme.com\",\r\n            phone: \"555-0123\",\r\n            company: \"Acme Corporation\",\r\n            status: \"active\",\r\n            stage: \"1\",\r\n            value: 5000,\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString(),\r\n          },\r\n          {\r\n            id: \"2\",\r\n            name: \"Tech Solutions\",\r\n            email: \"sarah@techsolutions.com\",\r\n            phone: \"555-0456\",\r\n            company: \"Tech Solutions Inc\",\r\n            status: \"active\",\r\n            stage: \"3\",\r\n            value: 12000,\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString(),\r\n          },\r\n        ]\r\n      case \"tasks\":\r\n        return [\r\n          {\r\n            id: \"1\",\r\n            title: \"Design Homepage\",\r\n            description: \"Create homepage design mockup\",\r\n            status: \"pending\",\r\n            priority: \"high\",\r\n            due_date: \"2024-02-15\",\r\n            client_id: \"1\",\r\n            assigned_to: \"John Doe\",\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString(),\r\n          },\r\n          {\r\n            id: \"2\",\r\n            title: \"Client Review\",\r\n            description: \"Review client feedback\",\r\n            status: \"completed\",\r\n            priority: \"medium\",\r\n            due_date: \"2024-02-20\",\r\n            client_id: \"2\",\r\n            assigned_to: \"Jane Smith\",\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString(),\r\n          },\r\n        ]\r\n      case \"events\":\r\n        return [\r\n          {\r\n            id: \"1\",\r\n            title: \"Client Meeting\",\r\n            description: \"Discuss project requirements\",\r\n            start_date: \"2024-02-15T10:00:00Z\",\r\n            end_date: \"2024-02-15T11:00:00Z\",\r\n            type: \"meeting\",\r\n            client_id: \"1\",\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString(),\r\n          },\r\n        ]\r\n      default:\r\n        return []\r\n    }\r\n  }\r\n\r\n  // Offline Queue Management\r\n  private queueOfflineAction(type: OfflineAction[\"type\"], entity: string, data: any): any {\r\n    const action: OfflineAction = {\r\n      id: crypto.randomUUID(),\r\n      type,\r\n      entity,\r\n      data,\r\n      timestamp: new Date().toISOString(),\r\n      synced: false,\r\n    }\r\n\r\n    this.offlineQueue.push(action)\r\n    this.saveOfflineQueue()\r\n    this.updateSyncStatus(entity, \"pending\")\r\n\r\n    // Return optimistic result for UI\r\n    return {\r\n      id: action.id,\r\n      ...data,\r\n      created_at: action.timestamp,\r\n      updated_at: action.timestamp,\r\n    }\r\n  }\r\n\r\n  private saveOfflineQueue(): void {\r\n    if (!this.hasRealConnection) return\r\n    localStorage.setItem(\"offline_queue\", JSON.stringify(this.offlineQueue))\r\n  }\r\n\r\n  private async syncOfflineActions(): Promise<void> {\r\n    if (!this.hasRealConnection) return\r\n\r\n    const pendingActions = this.offlineQueue.filter((action) => !action.synced)\r\n\r\n    for (const action of pendingActions) {\r\n      try {\r\n        await this.executeOfflineAction(action)\r\n        action.synced = true\r\n        this.updateSyncStatus(action.entity, \"synced\")\r\n      } catch (error: any) {\r\n        // Silent error handling - Failed to sync action\r\n        this.updateSyncStatus(action.entity, \"error\", error.message)\r\n      }\r\n    }\r\n\r\n    // Remove synced actions\r\n    this.offlineQueue = this.offlineQueue.filter((action) => !action.synced)\r\n    this.saveOfflineQueue()\r\n  }\r\n\r\n  private async executeOfflineAction(action: OfflineAction): Promise<void> {\r\n    if (!this.hasRealConnection) return\r\n\r\n    const { type, entity, data } = action\r\n\r\n    switch (type) {\r\n      case \"create\":\r\n        await (supabase as any).from(entity).insert(data as any)\r\n        break\r\n      case \"update\":\r\n        const { id, ...updateData } = data\r\n        await (supabase as any).from(entity).update(updateData as any).eq(\"id\", id as any)\r\n        break\r\n      case \"delete\":\r\n        await (supabase as any).from(entity).delete().eq(\"id\", (data as any).id)\r\n        break\r\n    }\r\n  }\r\n\r\n  // Caching\r\n  private getCachedData(entity: string, filters?: Record<string, any>): any[] {\r\n    if (!this.hasRealConnection) {\r\n      return this.getMockData(entity)\r\n    }\r\n\r\n    const cacheKey = `cache_${entity}_${JSON.stringify(filters || {})}`\r\n    const cached = localStorage.getItem(cacheKey)\r\n    return cached ? JSON.parse(cached) : []\r\n  }\r\n\r\n  private setCachedData(entity: string, data: any[], filters?: Record<string, any>): void {\r\n    if (!this.hasRealConnection) return\r\n\r\n    const cacheKey = `cache_${entity}_${JSON.stringify(filters || {})}`\r\n    localStorage.setItem(cacheKey, JSON.stringify(data))\r\n  }\r\n\r\n  // Sync Status Management\r\n  private updateSyncStatus(entity: string, status: SyncStatus[\"status\"], errorMessage?: string): void {\r\n    this.syncStatus.set(entity, {\r\n      entity,\r\n      lastSync: new Date().toISOString(),\r\n      status,\r\n      errorMessage,\r\n    })\r\n  }\r\n\r\n  getSyncStatus(entity?: string): SyncStatus | SyncStatus[] {\r\n    if (entity) {\r\n      return (\r\n        this.syncStatus.get(entity) || {\r\n          entity,\r\n          lastSync: \"\",\r\n          status: this.hasRealConnection ? \"pending\" : \"synced\",\r\n        }\r\n      )\r\n    }\r\n    return Array.from(this.syncStatus.values())\r\n  }\r\n\r\n  // Full Sync\r\n  private async syncAllEntities(): Promise<void> {\r\n    if (!this.hasRealConnection) {\r\n      // Silent logging - Skipping sync, using mock data\r\n      return\r\n    }\r\n\r\n    const entities = [\"clients\", \"tasks\", \"events\", \"projects\", \"invoices\"]\r\n\r\n    for (const entity of entities) {\r\n      try {\r\n        const data = await this.read(entity as any)\r\n        this.setCachedData(entity, data)\r\n        this.updateSyncStatus(entity, \"synced\")\r\n      } catch (error: any) {\r\n        // Silent error handling - Failed to sync entity\r\n        this.updateSyncStatus(entity, \"error\", error.message)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Performance Monitoring\r\n  async getPerformanceMetrics(): Promise<{\r\n    responseTime: number\r\n    errorRate: number\r\n    syncQueueSize: number\r\n    cacheHitRate: number\r\n  }> {\r\n    if (!this.hasRealConnection) {\r\n      // Return mock metrics for development\r\n      return {\r\n        responseTime: 50,\r\n        errorRate: 0,\r\n        syncQueueSize: 0,\r\n        cacheHitRate: 1,\r\n      }\r\n    }\r\n\r\n    const startTime = Date.now()\r\n\r\n    try {\r\n      if (!supabase) {\r\n        throw new Error(\"Supabase client not initialized\")\r\n      }\r\n      \r\n      await supabase.from(\"clients\").select(\"count\").limit(1)\r\n      const responseTime = Date.now() - startTime\r\n\r\n      return {\r\n        responseTime,\r\n        errorRate: this.calculateErrorRate(),\r\n        syncQueueSize: this.offlineQueue.length,\r\n        cacheHitRate: this.calculateCacheHitRate(),\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        responseTime: -1,\r\n        errorRate: 1,\r\n        syncQueueSize: this.offlineQueue.length,\r\n        cacheHitRate: 0,\r\n      }\r\n    }\r\n  }\r\n\r\n  private calculateErrorRate(): number {\r\n    const errorStatuses = Array.from(this.syncStatus.values()).filter((status) => status.status === \"error\")\r\n    return errorStatuses.length / Math.max(this.syncStatus.size, 1)\r\n  }\r\n\r\n  private calculateCacheHitRate(): number {\r\n    // Simplified cache hit rate calculation\r\n    // In a real implementation, you'd track cache hits vs misses\r\n    return this.hasRealConnection ? 0.85 : 1.0 // 100% hit rate for mock data\r\n  }\r\n\r\n  // Cleanup\r\n  destroy(): void {\r\n    if (this.syncInterval) {\r\n      clearInterval(this.syncInterval)\r\n    }\r\n\r\n    if (this.hasRealConnection) {\r\n      window.removeEventListener(\"online\", this.syncOfflineActions)\r\n      window.removeEventListener(\"offline\", () => (this.isOnline = false))\r\n    }\r\n  }\r\n}\r\n\r\nexport const backendService = new BackendService()\r\nexport default backendService\r\n"],"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","ignoreList":[]}