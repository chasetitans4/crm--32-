505724452ee05e6ed651121954f484fb
"use strict";
// Mock framer-motion
jest.mock('framer-motion', ()=>({
        motion: {
            div: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    ...props,
                    children: children
                }),
            h1: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                    ...props,
                    children: children
                }),
            p: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                    ...props,
                    children: children
                })
        },
        AnimatePresence: ({ children })=>children
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _Dashboard = /*#__PURE__*/ _interop_require_default(require("../Dashboard"));
const _AppContext = require("../../context/AppContext");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockClients = [
    {
        id: '1',
        name: 'John Doe',
        email: 'john@example.com',
        phone: '+1 (555) 123-4567',
        company: 'Acme Corp',
        stage: 'lead',
        value: 50000,
        lastContact: '2024-01-15',
        notes: [],
        projects: [],
        tags: [
            'enterprise'
        ],
        priority: 'high',
        source: 'website',
        assignedTo: 'sales-rep-1'
    },
    {
        id: '2',
        name: 'Jane Smith',
        email: 'jane@example.com',
        phone: '+1 (555) 987-6543',
        company: 'Tech Solutions',
        stage: 'qualified',
        value: 75000,
        lastContact: '2024-01-10',
        notes: [],
        projects: [],
        tags: [
            'tech'
        ],
        priority: 'medium',
        source: 'referral',
        assignedTo: 'sales-rep-2'
    },
    {
        id: '3',
        name: 'Bob Wilson',
        email: 'bob@example.com',
        phone: '+1 (555) 456-7890',
        company: 'StartupXYZ',
        stage: 'closed',
        value: 25000,
        lastContact: '2024-01-05',
        notes: [],
        projects: [],
        tags: [
            'startup'
        ],
        priority: 'low',
        source: 'cold-call',
        assignedTo: 'sales-rep-1'
    }
];
const mockTasks = [
    {
        id: '1',
        title: 'Follow up with John Doe',
        description: 'Schedule demo call',
        dueDate: '2024-01-20',
        priority: 'high',
        status: 'pending',
        assignedTo: 'sales-rep-1',
        clientId: '1'
    },
    {
        id: '2',
        title: 'Prepare proposal for Jane Smith',
        description: 'Create detailed proposal',
        dueDate: '2024-01-18',
        priority: 'medium',
        status: 'in-progress',
        assignedTo: 'sales-rep-2',
        clientId: '2'
    }
];
const mockContracts = [
    {
        id: '1',
        clientId: '3',
        title: 'Software Development Contract',
        value: 25000,
        startDate: '2024-01-01',
        endDate: '2024-06-01',
        status: 'active',
        terms: 'Standard terms'
    }
];
const mockInvoices = [
    {
        id: '1',
        clientId: '3',
        contractId: '1',
        amount: 5000,
        dueDate: '2024-01-30',
        status: 'pending',
        items: []
    }
];
const mockSalesStages = [
    {
        id: 'lead',
        name: 'Lead',
        color: '#3B82F6'
    },
    {
        id: 'qualified',
        name: 'Qualified',
        color: '#10B981'
    },
    {
        id: 'proposal',
        name: 'Proposal',
        color: '#F59E0B'
    },
    {
        id: 'closed',
        name: 'Closed',
        color: '#EF4444'
    }
];
const mockInitialState = {
    clients: mockClients,
    salesStages: mockSalesStages,
    contracts: mockContracts,
    invoices: mockInvoices,
    tasks: mockTasks,
    projects: [],
    reports: [],
    settings: {
        currency: 'USD',
        dateFormat: 'MM/DD/YYYY',
        timezone: 'UTC'
    }
};
const renderWithProvider = (component)=>{
    return (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppContext.AppProvider, {
        children: component
    }));
};
describe('Dashboard Component', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    test('renders dashboard component', async ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Dashboard.default, {}));
        // Wait for the animated Dashboard title to appear
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Dashboard')).toBeInTheDocument();
        });
    });
    test('displays active clients metric', async ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Dashboard.default, {}));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Active Clients')).toBeInTheDocument();
        }, {
            timeout: 3000
        });
    });
    test('displays total pipeline value metric', async ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Dashboard.default, {}));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Total Pipeline Value')).toBeInTheDocument();
        }, {
            timeout: 3000
        });
    });
    test('displays active projects metric', async ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Dashboard.default, {}));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Active Projects')).toBeInTheDocument();
        }, {
            timeout: 3000
        });
    });
    test('displays task completion metric', async ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Dashboard.default, {}));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Tasks Completion')).toBeInTheDocument();
        }, {
            timeout: 3000
        });
    });
    test('shows recent activity section', async ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Dashboard.default, {}));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Recent Activity')).toBeInTheDocument();
        }, {
            timeout: 3000
        });
    });
    test('displays revenue trend chart', async ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Dashboard.default, {}));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Revenue Trend (Last 7 Months)')).toBeInTheDocument();
        }, {
            timeout: 3000
        });
    });
    test('shows new clients chart', async ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Dashboard.default, {}));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('New Clients (Last 7 Months)')).toBeInTheDocument();
        }, {
            timeout: 3000
        });
    });
    test('displays upcoming tasks and events', async ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Dashboard.default, {}));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Upcoming Tasks & Events')).toBeInTheDocument();
            expect(_react1.screen.getByText('Client meeting')).toBeInTheDocument();
            expect(_react1.screen.getByText('Send proposal')).toBeInTheDocument();
        }, {
            timeout: 3000
        });
    });
    test('shows recent activity section', async ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Dashboard.default, {}));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Recent Activity')).toBeInTheDocument();
            expect(_react1.screen.getByText('New client added')).toBeInTheDocument();
            expect(_react1.screen.getByText('Task completed')).toBeInTheDocument();
        }, {
            timeout: 3000
        });
    });
    test('displays client distribution by stage', async ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Dashboard.default, {}));
        await (0, _react1.waitFor)(()=>{
            // Should show distribution: 1 lead, 1 qualified, 1 closed
            const leadClients = mockClients.filter((c)=>c.stage === 'lead').length;
            const qualifiedClients = mockClients.filter((c)=>c.stage === 'qualified').length;
            const closedClients = mockClients.filter((c)=>c.stage === 'closed').length;
            expect(leadClients).toBe(1);
            expect(qualifiedClients).toBe(1);
            expect(closedClients).toBe(1);
        }, {
            timeout: 3000
        });
    });
    test('handles setActiveTab prop correctly', async ()=>{
        const mockSetActiveTab = jest.fn();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Dashboard.default, {
            setActiveTab: mockSetActiveTab
        }));
        // Component should render without errors when setActiveTab is provided
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Dashboard')).toBeInTheDocument();
        }, {
            timeout: 3000
        });
    });
    test('displays correct priority distribution', async ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Dashboard.default, {}));
        await (0, _react1.waitFor)(()=>{
            const highPriorityCount = mockClients.filter((c)=>c.priority === 'high').length;
            const mediumPriorityCount = mockClients.filter((c)=>c.priority === 'medium').length;
            const lowPriorityCount = mockClients.filter((c)=>c.priority === 'low').length;
            expect(highPriorityCount).toBe(1);
            expect(mediumPriorityCount).toBe(1);
            expect(lowPriorityCount).toBe(1);
        }, {
            timeout: 3000
        });
    });
    test('shows welcome message', async ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Dashboard.default, {}));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Welcome back! Here\'s an overview of your sales performance.')).toBeInTheDocument();
        }, {
            timeout: 3000
        });
    });
    test('calculates task completion rate correctly', async ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Dashboard.default, {}));
        // Component should calculate and display task completion rate
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Tasks Completion')).toBeInTheDocument();
        }, {
            timeout: 3000
        });
    });
    test('handles empty data gracefully', async ()=>{
        const emptyState = {
            ...mockInitialState,
            clients: [],
            tasks: [],
            contracts: [],
            invoices: []
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppContext.AppProvider, {
            initialState: emptyState,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Dashboard.default, {})
        }));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('0')).toBeInTheDocument(); // Should show 0 for metrics
        }, {
            timeout: 3000
        });
    });
    test('chart components render without errors', async ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Dashboard.default, {}));
        // Check that chart sections are present
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Revenue Trend (Last 7 Months)')).toBeInTheDocument();
            expect(_react1.screen.getByText('New Clients (Last 7 Months)')).toBeInTheDocument();
        }, {
            timeout: 3000
        });
    });
    test('activity feed shows recent client interactions', async ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Dashboard.default, {}));
        // Should show recent client activities based on lastContact dates
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Recent Activity')).toBeInTheDocument();
        });
    });
    test('responsive design elements are present', async ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Dashboard.default, {}));
        // Check that dashboard renders properly
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByText('Dashboard')).toBeInTheDocument();
        });
        expect(_react1.screen.getByText('Welcome back! Here\'s an overview of your sales performance.')).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,