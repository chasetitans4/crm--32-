d312ce319484cdf7288112ebbe34ddbe
'use client';
"use strict";

/* istanbul ignore next */
function cov_15fs00cg3g() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\errorTracking.ts";
  var hash = "226f88c3a9160d7d9e40948ddc5d17e3c156bcd2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\errorTracking.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 28,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 28
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 29
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 28
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 31
        }
      },
      "8": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 23
        }
      },
      "9": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 32
        }
      },
      "10": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 30
        }
      },
      "11": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 34
        }
      },
      "12": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 30
        }
      },
      "13": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 28
        }
      },
      "14": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 43
        }
      },
      "15": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 35
        }
      },
      "16": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 50
        }
      },
      "17": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 26
        }
      },
      "18": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 82
        }
      },
      "19": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 80
        }
      },
      "20": {
        start: {
          line: 48,
          column: 24
        },
        end: {
          line: 48,
          column: 73
        }
      },
      "21": {
        start: {
          line: 49,
          column: 22
        },
        end: {
          line: 49,
          column: 81
        }
      },
      "22": {
        start: {
          line: 51,
          column: 27
        },
        end: {
          line: 51,
          column: 67
        }
      },
      "23": {
        start: {
          line: 52,
          column: 25
        },
        end: {
          line: 52,
          column: 51
        }
      },
      "24": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 41
        }
      },
      "25": {
        start: {
          line: 56,
          column: 19
        },
        end: {
          line: 56,
          column: 20
        }
      },
      "26": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "27": {
        start: {
          line: 57,
          column: 20
        },
        end: {
          line: 57,
          column: 21
        }
      },
      "28": {
        start: {
          line: 58,
          column: 25
        },
        end: {
          line: 58,
          column: 42
        }
      },
      "29": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 45
        }
      },
      "30": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 31
        }
      },
      "31": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 43
        }
      },
      "32": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 72
        }
      },
      "33": {
        start: {
          line: 65,
          column: 65
        },
        end: {
          line: 65,
          column: 72
        }
      },
      "34": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 73,
          column: 11
        }
      },
      "35": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 72,
          column: 15
        }
      },
      "36": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 80,
          column: 11
        }
      },
      "37": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 79,
          column: 15
        }
      },
      "38": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 36
        }
      },
      "39": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 34
        }
      },
      "40": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 37
        }
      },
      "41": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 34
        }
      },
      "42": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 50
        }
      },
      "43": {
        start: {
          line: 90,
          column: 43
        },
        end: {
          line: 90,
          column: 50
        }
      },
      "44": {
        start: {
          line: 92,
          column: 30
        },
        end: {
          line: 92,
          column: 42
        }
      },
      "45": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 127,
          column: 10
        }
      },
      "46": {
        start: {
          line: 94,
          column: 30
        },
        end: {
          line: 94,
          column: 40
        }
      },
      "47": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 126,
          column: 13
        }
      },
      "48": {
        start: {
          line: 96,
          column: 33
        },
        end: {
          line: 96,
          column: 61
        }
      },
      "49": {
        start: {
          line: 97,
          column: 33
        },
        end: {
          line: 97,
          column: 55
        }
      },
      "50": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 108,
          column: 19
        }
      },
      "51": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 116,
          column: 17
        }
      },
      "52": {
        start: {
          line: 110,
          column: 20
        },
        end: {
          line: 115,
          column: 23
        }
      },
      "53": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 32
        }
      },
      "54": {
        start: {
          line: 119,
          column: 33
        },
        end: {
          line: 119,
          column: 55
        }
      },
      "55": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 124,
          column: 19
        }
      },
      "56": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 28
        }
      },
      "57": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 81
        }
      },
      "58": {
        start: {
          line: 130,
          column: 74
        },
        end: {
          line: 130,
          column: 81
        }
      },
      "59": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "60": {
        start: {
          line: 133,
          column: 37
        },
        end: {
          line: 148,
          column: 14
        }
      },
      "61": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 147,
          column: 17
        }
      },
      "62": {
        start: {
          line: 135,
          column: 20
        },
        end: {
          line: 146,
          column: 21
        }
      },
      "63": {
        start: {
          line: 136,
          column: 24
        },
        end: {
          line: 145,
          column: 27
        }
      },
      "64": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 153,
          column: 15
        }
      },
      "65": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 71
        }
      },
      "66": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "67": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 177,
          column: 22
        }
      },
      "68": {
        start: {
          line: 160,
          column: 31
        },
        end: {
          line: 160,
          column: 49
        }
      },
      "69": {
        start: {
          line: 161,
          column: 36
        },
        end: {
          line: 161,
          column: 88
        }
      },
      "70": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 176,
          column: 17
        }
      },
      "71": {
        start: {
          line: 163,
          column: 20
        },
        end: {
          line: 175,
          column: 23
        }
      },
      "72": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 50
        }
      },
      "73": {
        start: {
          line: 181,
          column: 43
        },
        end: {
          line: 181,
          column: 50
        }
      },
      "74": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 197,
          column: 11
        }
      },
      "75": {
        start: {
          line: 184,
          column: 27
        },
        end: {
          line: 184,
          column: 39
        }
      },
      "76": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 196,
          column: 15
        }
      },
      "77": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 210,
          column: 11
        }
      },
      "78": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 209,
          column: 15
        }
      },
      "79": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 213,
          column: 29
        }
      },
      "80": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 220,
          column: 11
        }
      },
      "81": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 223,
          column: 42
        }
      },
      "82": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "83": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 76
        }
      },
      "84": {
        start: {
          line: 230,
          column: 25
        },
        end: {
          line: 230,
          column: 77
        }
      },
      "85": {
        start: {
          line: 231,
          column: 28
        },
        end: {
          line: 231,
          column: 71
        }
      },
      "86": {
        start: {
          line: 232,
          column: 24
        },
        end: {
          line: 232,
          column: 52
        }
      },
      "87": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "88": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 36
        }
      },
      "89": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 45
        }
      },
      "90": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 258,
          column: 14
        }
      },
      "91": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 52
        }
      },
      "92": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 267,
          column: 15
        }
      },
      "93": {
        start: {
          line: 262,
          column: 16
        },
        end: {
          line: 266,
          column: 17
        }
      },
      "94": {
        start: {
          line: 263,
          column: 20
        },
        end: {
          line: 263,
          column: 40
        }
      },
      "95": {
        start: {
          line: 265,
          column: 20
        },
        end: {
          line: 265,
          column: 77
        }
      },
      "96": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 270,
          column: 29
        }
      },
      "97": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 271,
          column: 28
        }
      },
      "98": {
        start: {
          line: 274,
          column: 33
        },
        end: {
          line: 280,
          column: 9
        }
      },
      "99": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 281,
          column: 74
        }
      },
      "100": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 289,
          column: 42
        }
      },
      "101": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 290,
          column: 35
        }
      },
      "102": {
        start: {
          line: 293,
          column: 21
        },
        end: {
          line: 293,
          column: 23
        }
      },
      "103": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 297,
          column: 9
        }
      },
      "104": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 296,
          column: 58
        }
      },
      "105": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 302,
          column: 9
        }
      },
      "106": {
        start: {
          line: 300,
          column: 24
        },
        end: {
          line: 300,
          column: 53
        }
      },
      "107": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 46
        }
      },
      "108": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 308,
          column: 9
        }
      },
      "109": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 305,
          column: 79
        }
      },
      "110": {
        start: {
          line: 305,
          column: 35
        },
        end: {
          line: 305,
          column: 79
        }
      },
      "111": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 73
        }
      },
      "112": {
        start: {
          line: 306,
          column: 33
        },
        end: {
          line: 306,
          column: 73
        }
      },
      "113": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 61
        }
      },
      "114": {
        start: {
          line: 307,
          column: 29
        },
        end: {
          line: 307,
          column: 61
        }
      },
      "115": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 20
        }
      },
      "116": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 312,
          column: 63
        }
      },
      "117": {
        start: {
          line: 312,
          column: 46
        },
        end: {
          line: 312,
          column: 63
        }
      },
      "118": {
        start: {
          line: 313,
          column: 26
        },
        end: {
          line: 313,
          column: 45
        }
      },
      "119": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 314,
          column: 58
        }
      },
      "120": {
        start: {
          line: 314,
          column: 42
        },
        end: {
          line: 314,
          column: 58
        }
      },
      "121": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 315,
          column: 60
        }
      },
      "122": {
        start: {
          line: 315,
          column: 43
        },
        end: {
          line: 315,
          column: 60
        }
      },
      "123": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 58
        }
      },
      "124": {
        start: {
          line: 316,
          column: 42
        },
        end: {
          line: 316,
          column: 58
        }
      },
      "125": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 317,
          column: 54
        }
      },
      "126": {
        start: {
          line: 317,
          column: 40
        },
        end: {
          line: 317,
          column: 54
        }
      },
      "127": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 318,
          column: 23
        }
      },
      "128": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 321,
          column: 55
        }
      },
      "129": {
        start: {
          line: 321,
          column: 48
        },
        end: {
          line: 321,
          column: 55
        }
      },
      "130": {
        start: {
          line: 323,
          column: 29
        },
        end: {
          line: 323,
          column: 110
        }
      },
      "131": {
        start: {
          line: 323,
          column: 84
        },
        end: {
          line: 323,
          column: 109
        }
      },
      "132": {
        start: {
          line: 324,
          column: 25
        },
        end: {
          line: 324,
          column: 84
        }
      },
      "133": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 327,
          column: 11
        }
      },
      "134": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 326,
          column: 44
        }
      },
      "135": {
        start: {
          line: 330,
          column: 22
        },
        end: {
          line: 330,
          column: 50
        }
      },
      "136": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 334,
          column: 9
        }
      },
      "137": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 332,
          column: 34
        }
      },
      "138": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 333,
          column: 24
        }
      },
      "139": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 335,
          column: 21
        }
      },
      "140": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 338,
          column: 44
        }
      },
      "141": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 341,
          column: 48
        }
      },
      "142": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 344,
          column: 80
        }
      },
      "143": {
        start: {
          line: 344,
          column: 51
        },
        end: {
          line: 344,
          column: 78
        }
      },
      "144": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 347,
          column: 80
        }
      },
      "145": {
        start: {
          line: 347,
          column: 51
        },
        end: {
          line: 347,
          column: 78
        }
      },
      "146": {
        start: {
          line: 350,
          column: 23
        },
        end: {
          line: 350,
          column: 42
        }
      },
      "147": {
        start: {
          line: 351,
          column: 28
        },
        end: {
          line: 351,
          column: 41
        }
      },
      "148": {
        start: {
          line: 352,
          column: 33
        },
        end: {
          line: 352,
          column: 71
        }
      },
      "149": {
        start: {
          line: 352,
          column: 52
        },
        end: {
          line: 352,
          column: 63
        }
      },
      "150": {
        start: {
          line: 354,
          column: 26
        },
        end: {
          line: 354,
          column: 37
        }
      },
      "151": {
        start: {
          line: 356,
          column: 28
        },
        end: {
          line: 356,
          column: 37
        }
      },
      "152": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 367,
          column: 11
        }
      },
      "153": {
        start: {
          line: 358,
          column: 29
        },
        end: {
          line: 358,
          column: 63
        }
      },
      "154": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 366,
          column: 13
        }
      },
      "155": {
        start: {
          line: 360,
          column: 16
        },
        end: {
          line: 360,
          column: 52
        }
      },
      "156": {
        start: {
          line: 362,
          column: 16
        },
        end: {
          line: 365,
          column: 19
        }
      },
      "157": {
        start: {
          line: 368,
          column: 26
        },
        end: {
          line: 371,
          column: 60
        }
      },
      "158": {
        start: {
          line: 368,
          column: 88
        },
        end: {
          line: 371,
          column: 13
        }
      },
      "159": {
        start: {
          line: 371,
          column: 29
        },
        end: {
          line: 371,
          column: 46
        }
      },
      "160": {
        start: {
          line: 373,
          column: 33
        },
        end: {
          line: 373,
          column: 35
        }
      },
      "161": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 376,
          column: 11
        }
      },
      "162": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 375,
          column: 91
        }
      },
      "163": {
        start: {
          line: 378,
          column: 33
        },
        end: {
          line: 378,
          column: 35
        }
      },
      "164": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 381,
          column: 11
        }
      },
      "165": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 380,
          column: 91
        }
      },
      "166": {
        start: {
          line: 383,
          column: 31
        },
        end: {
          line: 383,
          column: 61
        }
      },
      "167": {
        start: {
          line: 383,
          column: 50
        },
        end: {
          line: 383,
          column: 60
        }
      },
      "168": {
        start: {
          line: 384,
          column: 38
        },
        end: {
          line: 384,
          column: 89
        }
      },
      "169": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 393,
          column: 10
        }
      },
      "170": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 396,
          column: 59
        }
      },
      "171": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 399,
          column: 38
        }
      },
      "172": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 406,
          column: 10
        }
      },
      "173": {
        start: {
          line: 402,
          column: 26
        },
        end: {
          line: 402,
          column: 58
        }
      },
      "174": {
        start: {
          line: 403,
          column: 12
        },
        end: {
          line: 405,
          column: 13
        }
      },
      "175": {
        start: {
          line: 404,
          column: 16
        },
        end: {
          line: 404,
          column: 48
        }
      },
      "176": {
        start: {
          line: 409,
          column: 8
        },
        end: {
          line: 409,
          column: 28
        }
      },
      "177": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 410,
          column: 39
        }
      },
      "178": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 419,
          column: 20
        }
      },
      "179": {
        start: {
          line: 423,
          column: 25
        },
        end: {
          line: 423,
          column: 29
        }
      },
      "180": {
        start: {
          line: 425,
          column: 4
        },
        end: {
          line: 427,
          column: 5
        }
      },
      "181": {
        start: {
          line: 426,
          column: 8
        },
        end: {
          line: 426,
          column: 48
        }
      },
      "182": {
        start: {
          line: 428,
          column: 4
        },
        end: {
          line: 428,
          column: 30
        }
      },
      "183": {
        start: {
          line: 431,
          column: 4
        },
        end: {
          line: 431,
          column: 78
        }
      },
      "184": {
        start: {
          line: 434,
          column: 4
        },
        end: {
          line: 434,
          column: 48
        }
      },
      "185": {
        start: {
          line: 437,
          column: 4
        },
        end: {
          line: 437,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 24
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 25
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 24
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 27
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 19
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 17
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 30
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 24
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 41
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 22
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 44
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 40
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 47
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        loc: {
          start: {
            line: 55,
            column: 20
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 55
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 17
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 64
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 67,
            column: 41
          },
          end: {
            line: 67,
            column: 42
          }
        },
        loc: {
          start: {
            line: 67,
            column: 50
          },
          end: {
            line: 73,
            column: 9
          }
        },
        line: 67
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 75,
            column: 54
          },
          end: {
            line: 75,
            column: 55
          }
        },
        loc: {
          start: {
            line: 75,
            column: 63
          },
          end: {
            line: 80,
            column: 9
          }
        },
        line: 75
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        loc: {
          start: {
            line: 89,
            column: 27
          },
          end: {
            line: 128,
            column: 5
          }
        },
        line: 89
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 93,
            column: 23
          },
          end: {
            line: 93,
            column: 24
          }
        },
        loc: {
          start: {
            line: 93,
            column: 40
          },
          end: {
            line: 127,
            column: 9
          }
        },
        line: 93
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        },
        loc: {
          start: {
            line: 129,
            column: 25
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 129
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 133,
            column: 61
          },
          end: {
            line: 133,
            column: 62
          }
        },
        loc: {
          start: {
            line: 133,
            column: 69
          },
          end: {
            line: 148,
            column: 13
          }
        },
        line: 133
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 159,
            column: 24
          },
          end: {
            line: 159,
            column: 25
          }
        },
        loc: {
          start: {
            line: 159,
            column: 28
          },
          end: {
            line: 177,
            column: 13
          }
        },
        line: 159
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 180,
            column: 5
          }
        },
        loc: {
          start: {
            line: 180,
            column: 28
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 180
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 183,
            column: 43
          },
          end: {
            line: 183,
            column: 44
          }
        },
        loc: {
          start: {
            line: 183,
            column: 52
          },
          end: {
            line: 197,
            column: 9
          }
        },
        line: 183
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 199,
            column: 44
          },
          end: {
            line: 199,
            column: 45
          }
        },
        loc: {
          start: {
            line: 199,
            column: 48
          },
          end: {
            line: 210,
            column: 9
          }
        },
        line: 199
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 212,
            column: 5
          }
        },
        loc: {
          start: {
            line: 212,
            column: 30
          },
          end: {
            line: 221,
            column: 5
          }
        },
        line: 212
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 222,
            column: 4
          },
          end: {
            line: 222,
            column: 5
          }
        },
        loc: {
          start: {
            line: 222,
            column: 30
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 222
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 229,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        },
        loc: {
          start: {
            line: 229,
            column: 79
          },
          end: {
            line: 272,
            column: 5
          }
        },
        line: 229
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 261,
            column: 35
          },
          end: {
            line: 261,
            column: 36
          }
        },
        loc: {
          start: {
            line: 261,
            column: 47
          },
          end: {
            line: 267,
            column: 13
          }
        },
        line: 261
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 273,
            column: 4
          },
          end: {
            line: 273,
            column: 5
          }
        },
        loc: {
          start: {
            line: 273,
            column: 35
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 273
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 292,
            column: 4
          },
          end: {
            line: 292,
            column: 5
          }
        },
        loc: {
          start: {
            line: 292,
            column: 33
          },
          end: {
            line: 310,
            column: 5
          }
        },
        line: 292
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 311,
            column: 4
          },
          end: {
            line: 311,
            column: 5
          }
        },
        loc: {
          start: {
            line: 311,
            column: 21
          },
          end: {
            line: 319,
            column: 5
          }
        },
        line: 311
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 320,
            column: 4
          },
          end: {
            line: 320,
            column: 5
          }
        },
        loc: {
          start: {
            line: 320,
            column: 20
          },
          end: {
            line: 328,
            column: 5
          }
        },
        line: 320
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 323,
            column: 68
          },
          end: {
            line: 323,
            column: 69
          }
        },
        loc: {
          start: {
            line: 323,
            column: 84
          },
          end: {
            line: 323,
            column: 109
          }
        },
        line: 323
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 325,
            column: 25
          },
          end: {
            line: 325,
            column: 26
          }
        },
        loc: {
          start: {
            line: 325,
            column: 42
          },
          end: {
            line: 327,
            column: 9
          }
        },
        line: 325
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 329,
            column: 4
          },
          end: {
            line: 329,
            column: 5
          }
        },
        loc: {
          start: {
            line: 329,
            column: 30
          },
          end: {
            line: 336,
            column: 5
          }
        },
        line: 329
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 337,
            column: 4
          },
          end: {
            line: 337,
            column: 5
          }
        },
        loc: {
          start: {
            line: 337,
            column: 26
          },
          end: {
            line: 339,
            column: 5
          }
        },
        line: 337
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 340,
            column: 4
          },
          end: {
            line: 340,
            column: 5
          }
        },
        loc: {
          start: {
            line: 340,
            column: 19
          },
          end: {
            line: 342,
            column: 5
          }
        },
        line: 340
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 343,
            column: 4
          },
          end: {
            line: 343,
            column: 5
          }
        },
        loc: {
          start: {
            line: 343,
            column: 34
          },
          end: {
            line: 345,
            column: 5
          }
        },
        line: 343
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 344,
            column: 42
          },
          end: {
            line: 344,
            column: 43
          }
        },
        loc: {
          start: {
            line: 344,
            column: 51
          },
          end: {
            line: 344,
            column: 78
          }
        },
        line: 344
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 346,
            column: 4
          },
          end: {
            line: 346,
            column: 5
          }
        },
        loc: {
          start: {
            line: 346,
            column: 34
          },
          end: {
            line: 348,
            column: 5
          }
        },
        line: 346
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 347,
            column: 42
          },
          end: {
            line: 347,
            column: 43
          }
        },
        loc: {
          start: {
            line: 347,
            column: 51
          },
          end: {
            line: 347,
            column: 78
          }
        },
        line: 347
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 349,
            column: 4
          },
          end: {
            line: 349,
            column: 5
          }
        },
        loc: {
          start: {
            line: 349,
            column: 17
          },
          end: {
            line: 394,
            column: 5
          }
        },
        line: 349
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 352,
            column: 47
          },
          end: {
            line: 352,
            column: 48
          }
        },
        loc: {
          start: {
            line: 352,
            column: 52
          },
          end: {
            line: 352,
            column: 63
          }
        },
        line: 352
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 357,
            column: 23
          },
          end: {
            line: 357,
            column: 24
          }
        },
        loc: {
          start: {
            line: 357,
            column: 32
          },
          end: {
            line: 367,
            column: 9
          }
        },
        line: 357
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 368,
            column: 64
          },
          end: {
            line: 368,
            column: 65
          }
        },
        loc: {
          start: {
            line: 368,
            column: 88
          },
          end: {
            line: 371,
            column: 13
          }
        },
        line: 368
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 371,
            column: 21
          },
          end: {
            line: 371,
            column: 22
          }
        },
        loc: {
          start: {
            line: 371,
            column: 29
          },
          end: {
            line: 371,
            column: 46
          }
        },
        line: 371
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 374,
            column: 23
          },
          end: {
            line: 374,
            column: 24
          }
        },
        loc: {
          start: {
            line: 374,
            column: 32
          },
          end: {
            line: 376,
            column: 9
          }
        },
        line: 374
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 379,
            column: 23
          },
          end: {
            line: 379,
            column: 24
          }
        },
        loc: {
          start: {
            line: 379,
            column: 32
          },
          end: {
            line: 381,
            column: 9
          }
        },
        line: 379
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 383,
            column: 45
          },
          end: {
            line: 383,
            column: 46
          }
        },
        loc: {
          start: {
            line: 383,
            column: 50
          },
          end: {
            line: 383,
            column: 60
          }
        },
        line: 383
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 395,
            column: 4
          },
          end: {
            line: 395,
            column: 5
          }
        },
        loc: {
          start: {
            line: 395,
            column: 27
          },
          end: {
            line: 397,
            column: 5
          }
        },
        line: 395
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 398,
            column: 4
          },
          end: {
            line: 398,
            column: 5
          }
        },
        loc: {
          start: {
            line: 398,
            column: 22
          },
          end: {
            line: 407,
            column: 5
          }
        },
        line: 398
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 401,
            column: 15
          },
          end: {
            line: 401,
            column: 16
          }
        },
        loc: {
          start: {
            line: 401,
            column: 19
          },
          end: {
            line: 406,
            column: 9
          }
        },
        line: 401
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 408,
            column: 4
          },
          end: {
            line: 408,
            column: 5
          }
        },
        loc: {
          start: {
            line: 408,
            column: 18
          },
          end: {
            line: 411,
            column: 5
          }
        },
        line: 408
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 412,
            column: 4
          },
          end: {
            line: 412,
            column: 5
          }
        },
        loc: {
          start: {
            line: 412,
            column: 19
          },
          end: {
            line: 420,
            column: 5
          }
        },
        line: 412
      },
      "52": {
        name: "getErrorTracker",
        decl: {
          start: {
            line: 424,
            column: 9
          },
          end: {
            line: 424,
            column: 24
          }
        },
        loc: {
          start: {
            line: 424,
            column: 27
          },
          end: {
            line: 429,
            column: 1
          }
        },
        line: 424
      },
      "53": {
        name: "captureError",
        decl: {
          start: {
            line: 430,
            column: 9
          },
          end: {
            line: 430,
            column: 21
          }
        },
        loc: {
          start: {
            line: 430,
            column: 58
          },
          end: {
            line: 432,
            column: 1
          }
        },
        line: 430
      },
      "54": {
        name: "addBreadcrumb",
        decl: {
          start: {
            line: 433,
            column: 9
          },
          end: {
            line: 433,
            column: 22
          }
        },
        loc: {
          start: {
            line: 433,
            column: 35
          },
          end: {
            line: 435,
            column: 1
          }
        },
        line: 433
      },
      "55": {
        name: "setUser",
        decl: {
          start: {
            line: 436,
            column: 9
          },
          end: {
            line: 436,
            column: 16
          }
        },
        loc: {
          start: {
            line: 436,
            column: 35
          },
          end: {
            line: 438,
            column: 1
          }
        },
        line: 436
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 48,
            column: 24
          },
          end: {
            line: 48,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 48,
            column: 52
          },
          end: {
            line: 48,
            column: 57
          }
        }, {
          start: {
            line: 48,
            column: 60
          },
          end: {
            line: 48,
            column: 73
          }
        }],
        line: 48
      },
      "1": {
        loc: {
          start: {
            line: 49,
            column: 22
          },
          end: {
            line: 49,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 49,
            column: 65
          },
          end: {
            line: 49,
            column: 76
          }
        }, {
          start: {
            line: 49,
            column: 79
          },
          end: {
            line: 49,
            column: 81
          }
        }],
        line: 49
      },
      "2": {
        loc: {
          start: {
            line: 49,
            column: 22
          },
          end: {
            line: 49,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 22
          },
          end: {
            line: 49,
            column: 47
          }
        }, {
          start: {
            line: 49,
            column: 51
          },
          end: {
            line: 49,
            column: 62
          }
        }],
        line: 49
      },
      "3": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 65,
            column: 72
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 65,
            column: 72
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "4": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 65,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 65,
            column: 30
          }
        }, {
          start: {
            line: 65,
            column: 34
          },
          end: {
            line: 65,
            column: 63
          }
        }],
        line: 65
      },
      "5": {
        loc: {
          start: {
            line: 68,
            column: 30
          },
          end: {
            line: 68,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 30
          },
          end: {
            line: 68,
            column: 41
          }
        }, {
          start: {
            line: 68,
            column: 45
          },
          end: {
            line: 68,
            column: 69
          }
        }],
        line: 68
      },
      "6": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 90,
            column: 50
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 90,
            column: 50
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "7": {
        loc: {
          start: {
            line: 102,
            column: 27
          },
          end: {
            line: 102,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 102,
            column: 41
          },
          end: {
            line: 102,
            column: 47
          }
        }, {
          start: {
            line: 102,
            column: 50
          },
          end: {
            line: 102,
            column: 57
          }
        }],
        line: 102
      },
      "8": {
        loc: {
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 116,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 116,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "9": {
        loc: {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 130,
            column: 81
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 130,
            column: 81
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "10": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 130,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 130,
            column: 41
          }
        }, {
          start: {
            line: 130,
            column: 45
          },
          end: {
            line: 130,
            column: 72
          }
        }],
        line: 130
      },
      "11": {
        loc: {
          start: {
            line: 135,
            column: 20
          },
          end: {
            line: 146,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 20
          },
          end: {
            line: 146,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "12": {
        loc: {
          start: {
            line: 138,
            column: 38
          },
          end: {
            line: 138,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 138,
            column: 61
          },
          end: {
            line: 138,
            column: 67
          }
        }, {
          start: {
            line: 138,
            column: 70
          },
          end: {
            line: 138,
            column: 78
          }
        }],
        line: 138
      },
      "13": {
        loc: {
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "14": {
        loc: {
          start: {
            line: 162,
            column: 16
          },
          end: {
            line: 176,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 16
          },
          end: {
            line: 176,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "15": {
        loc: {
          start: {
            line: 165,
            column: 34
          },
          end: {
            line: 165,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 165,
            column: 53
          },
          end: {
            line: 165,
            column: 63
          }
        }, {
          start: {
            line: 165,
            column: 66
          },
          end: {
            line: 165,
            column: 72
          }
        }],
        line: 165
      },
      "16": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 181,
            column: 50
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 181,
            column: 50
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "17": {
        loc: {
          start: {
            line: 187,
            column: 53
          },
          end: {
            line: 187,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 187,
            column: 65
          },
          end: {
            line: 187,
            column: 80
          }
        }, {
          start: {
            line: 187,
            column: 83
          },
          end: {
            line: 187,
            column: 85
          }
        }],
        line: 187
      },
      "18": {
        loc: {
          start: {
            line: 187,
            column: 88
          },
          end: {
            line: 187,
            column: 148
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 187,
            column: 107
          },
          end: {
            line: 187,
            column: 143
          }
        }, {
          start: {
            line: 187,
            column: 146
          },
          end: {
            line: 187,
            column: 148
          }
        }],
        line: 187
      },
      "19": {
        loc: {
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 227,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 225
      },
      "20": {
        loc: {
          start: {
            line: 229,
            column: 33
          },
          end: {
            line: 229,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 229,
            column: 44
          },
          end: {
            line: 229,
            column: 52
          }
        }],
        line: 229
      },
      "21": {
        loc: {
          start: {
            line: 229,
            column: 54
          },
          end: {
            line: 229,
            column: 77
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 229,
            column: 65
          },
          end: {
            line: 229,
            column: 77
          }
        }],
        line: 229
      },
      "22": {
        loc: {
          start: {
            line: 230,
            column: 25
          },
          end: {
            line: 230,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 230,
            column: 53
          },
          end: {
            line: 230,
            column: 69
          }
        }, {
          start: {
            line: 230,
            column: 72
          },
          end: {
            line: 230,
            column: 77
          }
        }],
        line: 230
      },
      "23": {
        loc: {
          start: {
            line: 233,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 233,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        }, {
          start: {
            line: 237,
            column: 15
          },
          end: {
            line: 268,
            column: 9
          }
        }],
        line: 233
      },
      "24": {
        loc: {
          start: {
            line: 244,
            column: 21
          },
          end: {
            line: 244,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 244,
            column: 53
          },
          end: {
            line: 244,
            column: 73
          }
        }, {
          start: {
            line: 244,
            column: 76
          },
          end: {
            line: 244,
            column: 78
          }
        }],
        line: 244
      },
      "25": {
        loc: {
          start: {
            line: 245,
            column: 27
          },
          end: {
            line: 245,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 245,
            column: 62
          },
          end: {
            line: 245,
            column: 81
          }
        }, {
          start: {
            line: 245,
            column: 84
          },
          end: {
            line: 245,
            column: 86
          }
        }],
        line: 245
      },
      "26": {
        loc: {
          start: {
            line: 250,
            column: 25
          },
          end: {
            line: 250,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 250,
            column: 25
          },
          end: {
            line: 250,
            column: 32
          }
        }, {
          start: {
            line: 250,
            column: 36
          },
          end: {
            line: 250,
            column: 38
          }
        }],
        line: 250
      },
      "27": {
        loc: {
          start: {
            line: 277,
            column: 17
          },
          end: {
            line: 277,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 277,
            column: 49
          },
          end: {
            line: 277,
            column: 69
          }
        }, {
          start: {
            line: 277,
            column: 72
          },
          end: {
            line: 277,
            column: 74
          }
        }],
        line: 277
      },
      "28": {
        loc: {
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 295
      },
      "29": {
        loc: {
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 302,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 302,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 299
      },
      "30": {
        loc: {
          start: {
            line: 304,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 8
          },
          end: {
            line: 308,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "31": {
        loc: {
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 305,
            column: 79
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 305,
            column: 79
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 305
      },
      "32": {
        loc: {
          start: {
            line: 306,
            column: 12
          },
          end: {
            line: 306,
            column: 73
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 12
          },
          end: {
            line: 306,
            column: 73
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "33": {
        loc: {
          start: {
            line: 307,
            column: 12
          },
          end: {
            line: 307,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 12
          },
          end: {
            line: 307,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "34": {
        loc: {
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 312,
            column: 63
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 312,
            column: 63
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 312
      },
      "35": {
        loc: {
          start: {
            line: 314,
            column: 8
          },
          end: {
            line: 314,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 314,
            column: 8
          },
          end: {
            line: 314,
            column: 58
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 314
      },
      "36": {
        loc: {
          start: {
            line: 315,
            column: 8
          },
          end: {
            line: 315,
            column: 60
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 8
          },
          end: {
            line: 315,
            column: 60
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "37": {
        loc: {
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 316,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 316,
            column: 58
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 316
      },
      "38": {
        loc: {
          start: {
            line: 317,
            column: 8
          },
          end: {
            line: 317,
            column: 54
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 317,
            column: 8
          },
          end: {
            line: 317,
            column: 54
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 317
      },
      "39": {
        loc: {
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 321,
            column: 55
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 8
          },
          end: {
            line: 321,
            column: 55
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "40": {
        loc: {
          start: {
            line: 331,
            column: 8
          },
          end: {
            line: 334,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 8
          },
          end: {
            line: 334,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 331
      },
      "41": {
        loc: {
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 366,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 366,
            column: 13
          }
        }, {
          start: {
            line: 361,
            column: 19
          },
          end: {
            line: 366,
            column: 13
          }
        }],
        line: 359
      },
      "42": {
        loc: {
          start: {
            line: 375,
            column: 48
          },
          end: {
            line: 375,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 375,
            column: 48
          },
          end: {
            line: 375,
            column: 80
          }
        }, {
          start: {
            line: 375,
            column: 84
          },
          end: {
            line: 375,
            column: 85
          }
        }],
        line: 375
      },
      "43": {
        loc: {
          start: {
            line: 380,
            column: 48
          },
          end: {
            line: 380,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 380,
            column: 48
          },
          end: {
            line: 380,
            column: 80
          }
        }, {
          start: {
            line: 380,
            column: 84
          },
          end: {
            line: 380,
            column: 85
          }
        }],
        line: 380
      },
      "44": {
        loc: {
          start: {
            line: 384,
            column: 38
          },
          end: {
            line: 384,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 384,
            column: 66
          },
          end: {
            line: 384,
            column: 85
          }
        }, {
          start: {
            line: 384,
            column: 88
          },
          end: {
            line: 384,
            column: 89
          }
        }],
        line: 384
      },
      "45": {
        loc: {
          start: {
            line: 403,
            column: 12
          },
          end: {
            line: 405,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 403,
            column: 12
          },
          end: {
            line: 405,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 403
      },
      "46": {
        loc: {
          start: {
            line: 425,
            column: 4
          },
          end: {
            line: 427,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 425,
            column: 4
          },
          end: {
            line: 427,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 425
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0],
      "21": [0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\errorTracking.ts"],
      sourcesContent: ["'use client';\n\ninterface ErrorInfo {\n  id: string;\n  message: string;\n  stack?: string;\n  timestamp: number;\n  url: string;\n  userAgent: string;\n  userId?: string;\n  sessionId: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  category: 'javascript' | 'network' | 'api' | 'ui' | 'performance' | 'security';\n  context?: Record<string, any>;\n  breadcrumbs: Breadcrumb[];\n  tags: string[];\n  fingerprint: string;\n  resolved: boolean;\n  occurrences: number;\n}\n\ninterface Breadcrumb {\n  timestamp: number;\n  message: string;\n  category: 'navigation' | 'user' | 'console' | 'network' | 'dom' | 'http';\n  level: 'info' | 'warning' | 'error' | 'debug';\n  data?: Record<string, any>;\n}\n\ninterface ErrorMetrics {\n  totalErrors: number;\n  errorRate: number;\n  topErrors: Array<{ fingerprint: string; count: number; message: string }>;\n  errorsByCategory: Record<string, number>;\n  errorsBySeverity: Record<string, number>;\n  averageResolutionTime: number;\n  unresolvedErrors: number;\n}\n\ninterface PerformanceIssue {\n  id: string;\n  type: 'slow_api' | 'memory_leak' | 'large_bundle' | 'slow_render' | 'network_timeout';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  timestamp: number;\n  metrics: Record<string, number>;\n  threshold: number;\n  actualValue: number;\n  url: string;\n  resolved: boolean;\n}\n\nclass ErrorTracker {\n  private errors: Map<string, ErrorInfo> = new Map();\n  private breadcrumbs: Breadcrumb[] = [];\n  private sessionId: string;\n  private userId?: string;\n  private maxBreadcrumbs: number = 100;\n  private maxErrors: number = 1000;\n  private listeners: Array<(error: ErrorInfo) => void> = [];\n  private performanceIssues: Map<string, PerformanceIssue> = new Map();\n  private isInitialized: boolean = false;\n\n  constructor() {\n    this.sessionId = this.generateSessionId();\n    this.initialize();\n  }\n\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateErrorId(): string {\n    return `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateFingerprint(error: Error | string, context?: Record<string, any>): string {\n    const message = typeof error === 'string' ? error : error.message;\n    const stack = typeof error === 'object' && error.stack ? error.stack : '';\n    \n    // Create a simple hash of the error message and first few stack frames\n    const stackLines = stack.split('\\n').slice(0, 3).join('\\n');\n    const combined = `${message}:${stackLines}`;\n    \n    return this.simpleHash(combined);\n  }\n\n  private simpleHash(str: string): string {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash;\n    }\n    return Math.abs(hash).toString(36);\n  }\n\n  private initialize(): void {\n    if (this.isInitialized || typeof window === 'undefined') return;\n\n    // Global error handler\n    window.addEventListener('error', (event) => {\n      this.captureError(event.error || new Error(event.message), {\n        filename: event.filename,\n        lineno: event.lineno,\n        colno: event.colno\n      });\n    });\n\n    // Unhandled promise rejection handler\n    window.addEventListener('unhandledrejection', (event) => {\n      this.captureError(new Error(`Unhandled Promise Rejection: ${event.reason}`), {\n        type: 'unhandledrejection',\n        reason: event.reason\n      });\n    });\n\n    // Network error monitoring\n    this.monitorNetworkErrors();\n\n    // Performance monitoring\n    this.monitorPerformance();\n\n    // User interaction tracking\n    this.trackUserInteractions();\n\n    this.isInitialized = true;\n  }\n\n  private monitorNetworkErrors(): void {\n    if (typeof window === 'undefined') return;\n\n    // Monitor fetch errors\n    const originalFetch = window.fetch;\n    window.fetch = async (...args) => {\n      const startTime = Date.now();\n      try {\n        const response = await originalFetch(...args);\n        const duration = Date.now() - startTime;\n        \n        this.addBreadcrumb({\n          timestamp: Date.now(),\n          message: `Fetch ${args[0]} - ${response.status}`,\n          category: 'network',\n          level: response.ok ? 'info' : 'error',\n          data: {\n            url: args[0],\n            status: response.status,\n            duration\n          }\n        });\n\n        if (!response.ok) {\n          this.captureError(new Error(`HTTP ${response.status}: ${response.statusText}`), {\n            url: args[0],\n            status: response.status,\n            duration,\n            category: 'network'\n          });\n        }\n\n        return response;\n      } catch (error) {\n        const duration = Date.now() - startTime;\n        this.captureError(error as Error, {\n          url: args[0],\n          duration,\n          category: 'network'\n        });\n        throw error;\n      }\n    };\n  }\n\n  private monitorPerformance(): void {\n    if (typeof window === 'undefined' || !window.PerformanceObserver) return;\n\n    // Monitor long tasks\n    try {\n      const longTaskObserver = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          if (entry.duration > 50) { // Tasks longer than 50ms\n            this.capturePerformanceIssue({\n              type: 'slow_render',\n              severity: entry.duration > 100 ? 'high' : 'medium',\n              message: `Long task detected: ${entry.duration.toFixed(2)}ms`,\n              metrics: { duration: entry.duration },\n              threshold: 50,\n              actualValue: entry.duration\n            });\n          }\n        }\n      });\n      longTaskObserver.observe({ entryTypes: ['longtask'] });\n    } catch (error) {\n      console.warn('Long task monitoring not supported:', error);\n    }\n\n    // Monitor memory usage\n    if ('memory' in performance) {\n      setInterval(() => {\n        const memory = (performance as any).memory;\n        const usedPercent = (memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100;\n        \n        if (usedPercent > 80) {\n          this.capturePerformanceIssue({\n            type: 'memory_leak',\n            severity: usedPercent > 90 ? 'critical' : 'high',\n            message: `High memory usage: ${usedPercent.toFixed(1)}%`,\n            metrics: {\n              usedJSHeapSize: memory.usedJSHeapSize,\n              totalJSHeapSize: memory.totalJSHeapSize,\n              jsHeapSizeLimit: memory.jsHeapSizeLimit,\n              usedPercent\n            },\n            threshold: 80,\n            actualValue: usedPercent\n          });\n        }\n      }, 30000); // Check every 30 seconds\n    }\n  }\n\n  private trackUserInteractions(): void {\n    if (typeof window === 'undefined') return;\n\n    // Track clicks\n    document.addEventListener('click', (event) => {\n      const target = event.target as HTMLElement;\n      this.addBreadcrumb({\n        timestamp: Date.now(),\n        message: `Clicked ${target.tagName}${target.id ? `#${target.id}` : ''}${target.className ? `.${target.className.split(' ')[0]}` : ''}`,\n        category: 'user',\n        level: 'info',\n        data: {\n          tagName: target.tagName,\n          id: target.id,\n          className: target.className,\n          innerText: target.innerText?.substring(0, 50)\n        }\n      });\n    });\n\n    // Track navigation\n    window.addEventListener('popstate', () => {\n      this.addBreadcrumb({\n        timestamp: Date.now(),\n        message: `Navigation to ${window.location.pathname}`,\n        category: 'navigation',\n        level: 'info',\n        data: {\n          url: window.location.href,\n          pathname: window.location.pathname\n        }\n      });\n    });\n  }\n\n  public setUser(userId: string, userData?: Record<string, any>): void {\n    this.userId = userId;\n    this.addBreadcrumb({\n      timestamp: Date.now(),\n      message: `User identified: ${userId}`,\n      category: 'user',\n      level: 'info',\n      data: userData\n    });\n  }\n\n  public addBreadcrumb(breadcrumb: Breadcrumb): void {\n    this.breadcrumbs.push(breadcrumb);\n    \n    // Keep only the most recent breadcrumbs\n    if (this.breadcrumbs.length > this.maxBreadcrumbs) {\n      this.breadcrumbs = this.breadcrumbs.slice(-this.maxBreadcrumbs);\n    }\n  }\n\n  public captureError(\n    error: Error | string,\n    context?: Record<string, any>,\n    severity: ErrorInfo['severity'] = 'medium',\n    category: ErrorInfo['category'] = 'javascript'\n  ): string {\n    const errorObj = typeof error === 'string' ? new Error(error) : error;\n    const fingerprint = this.generateFingerprint(errorObj, context);\n    \n    let errorInfo = this.errors.get(fingerprint);\n    \n    if (errorInfo) {\n      // Update existing error\n      errorInfo.occurrences++;\n      errorInfo.timestamp = Date.now();\n    } else {\n      // Create new error\n      errorInfo = {\n        id: this.generateErrorId(),\n        message: errorObj.message,\n        stack: errorObj.stack,\n        timestamp: Date.now(),\n        url: typeof window !== 'undefined' ? window.location.href : '',\n        userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : '',\n        userId: this.userId,\n        sessionId: this.sessionId,\n        severity,\n        category,\n        context: context || {},\n        breadcrumbs: [...this.breadcrumbs],\n        tags: this.generateTags(errorObj, context),\n        fingerprint,\n        resolved: false,\n        occurrences: 1\n      };\n      \n      this.errors.set(fingerprint, errorInfo);\n      \n      // Notify listeners\n      this.listeners.forEach(listener => {\n        try {\n          listener(errorInfo!);\n        } catch (listenerError) {\n          console.error('Error in error listener:', listenerError);\n        }\n      });\n    }\n\n    // Clean up old errors\n    this.cleanupErrors();\n    \n    return errorInfo.id;\n  }\n\n  public capturePerformanceIssue(issue: Omit<PerformanceIssue, 'id' | 'timestamp' | 'url' | 'resolved'>): string {\n    const performanceIssue: PerformanceIssue = {\n      id: this.generateErrorId(),\n      timestamp: Date.now(),\n      url: typeof window !== 'undefined' ? window.location.href : '',\n      resolved: false,\n      ...issue\n    };\n    \n    this.performanceIssues.set(performanceIssue.id, performanceIssue);\n    \n    // Also capture as regular error for unified tracking\n    this.captureError(new Error(issue.message), {\n      type: 'performance',\n      performanceType: issue.type,\n      metrics: issue.metrics,\n      threshold: issue.threshold,\n      actualValue: issue.actualValue\n    }, issue.severity, 'performance');\n    \n    return performanceIssue.id;\n  }\n\n  private generateTags(error: Error, context?: Record<string, any>): string[] {\n    const tags: string[] = [];\n    \n    // Add browser info\n    if (typeof navigator !== 'undefined') {\n      tags.push(`browser:${this.getBrowserName()}`);\n    }\n    \n    // Add URL-based tags\n    if (typeof window !== 'undefined') {\n      const url = new URL(window.location.href);\n      tags.push(`page:${url.pathname}`);\n    }\n    \n    // Add context-based tags\n    if (context) {\n      if (context.component) tags.push(`component:${context.component}`);\n      if (context.feature) tags.push(`feature:${context.feature}`);\n      if (context.api) tags.push(`api:${context.api}`);\n    }\n    \n    return tags;\n  }\n\n  private getBrowserName(): string {\n    if (typeof navigator === 'undefined') return 'unknown';\n    \n    const userAgent = navigator.userAgent;\n    if (userAgent.includes('Chrome')) return 'chrome';\n    if (userAgent.includes('Firefox')) return 'firefox';\n    if (userAgent.includes('Safari')) return 'safari';\n    if (userAgent.includes('Edge')) return 'edge';\n    return 'other';\n  }\n\n  private cleanupErrors(): void {\n    if (this.errors.size <= this.maxErrors) return;\n    \n    // Remove oldest errors\n    const sortedErrors = Array.from(this.errors.entries())\n      .sort(([, a], [, b]) => a.timestamp - b.timestamp);\n    \n    const toRemove = sortedErrors.slice(0, sortedErrors.length - this.maxErrors);\n    toRemove.forEach(([fingerprint]) => {\n      this.errors.delete(fingerprint);\n    });\n  }\n\n  public resolveError(fingerprint: string): boolean {\n    const error = this.errors.get(fingerprint);\n    if (error) {\n      error.resolved = true;\n      return true;\n    }\n    return false;\n  }\n\n  public getError(fingerprint: string): ErrorInfo | undefined {\n    return this.errors.get(fingerprint);\n  }\n\n  public getAllErrors(): ErrorInfo[] {\n    return Array.from(this.errors.values());\n  }\n\n  public getErrorsByCategory(category: ErrorInfo['category']): ErrorInfo[] {\n    return this.getAllErrors().filter(error => error.category === category);\n  }\n\n  public getErrorsBySeverity(severity: ErrorInfo['severity']): ErrorInfo[] {\n    return this.getAllErrors().filter(error => error.severity === severity);\n  }\n\n  public getMetrics(): ErrorMetrics {\n    const errors = this.getAllErrors();\n    const totalErrors = errors.length;\n    const unresolvedErrors = errors.filter(e => !e.resolved).length;\n    \n    // Calculate error rate (errors per session)\n    const errorRate = totalErrors;\n    \n    // Top errors by occurrence\n    const errorCounts = new Map<string, { count: number; message: string }>();\n    errors.forEach(error => {\n      const existing = errorCounts.get(error.fingerprint);\n      if (existing) {\n        existing.count += error.occurrences;\n      } else {\n        errorCounts.set(error.fingerprint, {\n          count: error.occurrences,\n          message: error.message\n        });\n      }\n    });\n    \n    const topErrors = Array.from(errorCounts.entries())\n      .map(([fingerprint, data]) => ({ fingerprint, ...data }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10);\n    \n    // Errors by category\n    const errorsByCategory: Record<string, number> = {};\n    errors.forEach(error => {\n      errorsByCategory[error.category] = (errorsByCategory[error.category] || 0) + 1;\n    });\n    \n    // Errors by severity\n    const errorsBySeverity: Record<string, number> = {};\n    errors.forEach(error => {\n      errorsBySeverity[error.severity] = (errorsBySeverity[error.severity] || 0) + 1;\n    });\n    \n    // Average resolution time (mock calculation)\n    const resolvedErrors = errors.filter(e => e.resolved);\n    const averageResolutionTime = resolvedErrors.length > 0 ? 24 * 60 * 60 * 1000 : 0; // 24 hours mock\n    \n    return {\n      totalErrors,\n      errorRate,\n      topErrors,\n      errorsByCategory,\n      errorsBySeverity,\n      averageResolutionTime,\n      unresolvedErrors\n    };\n  }\n\n  public getPerformanceIssues(): PerformanceIssue[] {\n    return Array.from(this.performanceIssues.values());\n  }\n\n  public onError(listener: (error: ErrorInfo) => void): () => void {\n    this.listeners.push(listener);\n    \n    // Return unsubscribe function\n    return () => {\n      const index = this.listeners.indexOf(listener);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n\n  public clearErrors(): void {\n    this.errors.clear();\n    this.performanceIssues.clear();\n  }\n\n  public exportErrors(): string {\n    return JSON.stringify({\n      errors: this.getAllErrors(),\n      performanceIssues: this.getPerformanceIssues(),\n      metrics: this.getMetrics(),\n      sessionId: this.sessionId,\n      exportTime: Date.now()\n    }, null, 2);\n  }\n}\n\n// Global error tracker instance\nlet globalErrorTracker: ErrorTracker | null = null;\n\n// Get global error tracker\nexport function getErrorTracker(): ErrorTracker {\n  if (!globalErrorTracker) {\n    globalErrorTracker = new ErrorTracker();\n  }\n  return globalErrorTracker;\n}\n\n// Convenience functions\nexport function captureError(\n  error: Error | string,\n  context?: Record<string, any>,\n  severity?: ErrorInfo['severity'],\n  category?: ErrorInfo['category']\n): string {\n  return getErrorTracker().captureError(error, context, severity, category);\n}\n\nexport function addBreadcrumb(breadcrumb: Breadcrumb): void {\n  getErrorTracker().addBreadcrumb(breadcrumb);\n}\n\nexport function setUser(userId: string, userData?: Record<string, any>): void {\n  getErrorTracker().setUser(userId, userData);\n}\n\n// Export types and classes\nexport {\n  ErrorTracker\n};\n\nexport type {\n  ErrorInfo,\n  Breadcrumb,\n  ErrorMetrics,\n  PerformanceIssue\n};"],
      names: ["ErrorTracker", "addBreadcrumb", "captureError", "getErrorTracker", "setUser", "errors", "Map", "breadcrumbs", "maxBreadcrumbs", "maxErrors", "listeners", "performanceIssues", "isInitialized", "sessionId", "generateSessionId", "initialize", "Date", "now", "Math", "random", "toString", "substr", "generateErrorId", "generateFingerprint", "error", "context", "message", "stack", "stackLines", "split", "slice", "join", "combined", "simpleHash", "str", "hash", "i", "length", "char", "charCodeAt", "abs", "window", "addEventListener", "event", "Error", "filename", "lineno", "colno", "reason", "type", "monitorNetworkErrors", "monitorPerformance", "trackUserInteractions", "originalFetch", "fetch", "args", "startTime", "response", "duration", "timestamp", "status", "category", "level", "ok", "data", "url", "statusText", "PerformanceObserver", "longTaskObserver", "list", "entry", "getEntries", "capturePerformanceIssue", "severity", "toFixed", "metrics", "threshold", "actualValue", "observe", "entryTypes", "console", "warn", "performance", "setInterval", "memory", "usedPercent", "usedJSHeapSize", "jsHeapSizeLimit", "totalJSHeapSize", "document", "target", "tagName", "id", "className", "innerText", "substring", "location", "pathname", "href", "userId", "userData", "breadcrumb", "push", "errorObj", "fingerprint", "errorInfo", "get", "occurrences", "userAgent", "navigator", "tags", "generateTags", "resolved", "set", "forEach", "listener", "listenerError", "cleanupErrors", "issue", "performanceIssue", "performanceType", "getBrowserName", "URL", "component", "feature", "api", "includes", "size", "sortedErrors", "Array", "from", "entries", "sort", "a", "b", "toRemove", "delete", "resolveError", "getError", "getAllErrors", "values", "getErrorsByCategory", "filter", "getErrorsBySeverity", "getMetrics", "totalErrors", "unresolvedErrors", "e", "errorRate", "errorCounts", "existing", "count", "topErrors", "map", "errorsByCategory", "errorsBySeverity", "resolvedErrors", "averageResolutionTime", "getPerformanceIssues", "onError", "index", "indexOf", "splice", "clearErrors", "clear", "exportErrors", "JSON", "stringify", "exportTime", "globalErrorTracker"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "226f88c3a9160d7d9e40948ddc5d17e3c156bcd2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_15fs00cg3g = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_15fs00cg3g();
cov_15fs00cg3g().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_15fs00cg3g().f[0]++;
  cov_15fs00cg3g().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_15fs00cg3g().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_15fs00cg3g().s[3]++;
_export(exports, {
  get ErrorTracker() {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[1]++;
    cov_15fs00cg3g().s[4]++;
    return ErrorTracker;
  },
  get addBreadcrumb() {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[2]++;
    cov_15fs00cg3g().s[5]++;
    return addBreadcrumb;
  },
  get captureError() {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[3]++;
    cov_15fs00cg3g().s[6]++;
    return captureError;
  },
  get getErrorTracker() {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[4]++;
    cov_15fs00cg3g().s[7]++;
    return getErrorTracker;
  },
  get setUser() {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[5]++;
    cov_15fs00cg3g().s[8]++;
    return setUser;
  }
});
class ErrorTracker {
  constructor() {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[6]++;
    cov_15fs00cg3g().s[9]++;
    this.errors = new Map();
    /* istanbul ignore next */
    cov_15fs00cg3g().s[10]++;
    this.breadcrumbs = [];
    /* istanbul ignore next */
    cov_15fs00cg3g().s[11]++;
    this.maxBreadcrumbs = 100;
    /* istanbul ignore next */
    cov_15fs00cg3g().s[12]++;
    this.maxErrors = 1000;
    /* istanbul ignore next */
    cov_15fs00cg3g().s[13]++;
    this.listeners = [];
    /* istanbul ignore next */
    cov_15fs00cg3g().s[14]++;
    this.performanceIssues = new Map();
    /* istanbul ignore next */
    cov_15fs00cg3g().s[15]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_15fs00cg3g().s[16]++;
    this.sessionId = this.generateSessionId();
    /* istanbul ignore next */
    cov_15fs00cg3g().s[17]++;
    this.initialize();
  }
  generateSessionId() {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[7]++;
    cov_15fs00cg3g().s[18]++;
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  generateErrorId() {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[8]++;
    cov_15fs00cg3g().s[19]++;
    return `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  generateFingerprint(error, context) {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[9]++;
    const message =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[20]++, typeof error === 'string' ?
    /* istanbul ignore next */
    (cov_15fs00cg3g().b[0][0]++, error) :
    /* istanbul ignore next */
    (cov_15fs00cg3g().b[0][1]++, error.message));
    const stack =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[21]++,
    /* istanbul ignore next */
    (cov_15fs00cg3g().b[2][0]++, typeof error === 'object') &&
    /* istanbul ignore next */
    (cov_15fs00cg3g().b[2][1]++, error.stack) ?
    /* istanbul ignore next */
    (cov_15fs00cg3g().b[1][0]++, error.stack) :
    /* istanbul ignore next */
    (cov_15fs00cg3g().b[1][1]++, ''));
    // Create a simple hash of the error message and first few stack frames
    const stackLines =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[22]++, stack.split('\n').slice(0, 3).join('\n'));
    const combined =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[23]++, `${message}:${stackLines}`);
    /* istanbul ignore next */
    cov_15fs00cg3g().s[24]++;
    return this.simpleHash(combined);
  }
  simpleHash(str) {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[10]++;
    let hash =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[25]++, 0);
    /* istanbul ignore next */
    cov_15fs00cg3g().s[26]++;
    for (let i =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[27]++, 0); i < str.length; i++) {
      const char =
      /* istanbul ignore next */
      (cov_15fs00cg3g().s[28]++, str.charCodeAt(i));
      /* istanbul ignore next */
      cov_15fs00cg3g().s[29]++;
      hash = (hash << 5) - hash + char;
      /* istanbul ignore next */
      cov_15fs00cg3g().s[30]++;
      hash = hash & hash;
    }
    /* istanbul ignore next */
    cov_15fs00cg3g().s[31]++;
    return Math.abs(hash).toString(36);
  }
  initialize() {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[11]++;
    cov_15fs00cg3g().s[32]++;
    if (
    /* istanbul ignore next */
    (cov_15fs00cg3g().b[4][0]++, this.isInitialized) ||
    /* istanbul ignore next */
    (cov_15fs00cg3g().b[4][1]++, typeof window === 'undefined')) {
      /* istanbul ignore next */
      cov_15fs00cg3g().b[3][0]++;
      cov_15fs00cg3g().s[33]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_15fs00cg3g().b[3][1]++;
    }
    // Global error handler
    cov_15fs00cg3g().s[34]++;
    window.addEventListener('error', event => {
      /* istanbul ignore next */
      cov_15fs00cg3g().f[12]++;
      cov_15fs00cg3g().s[35]++;
      this.captureError(
      /* istanbul ignore next */
      (cov_15fs00cg3g().b[5][0]++, event.error) ||
      /* istanbul ignore next */
      (cov_15fs00cg3g().b[5][1]++, new Error(event.message)), {
        filename: event.filename,
        lineno: event.lineno,
        colno: event.colno
      });
    });
    // Unhandled promise rejection handler
    /* istanbul ignore next */
    cov_15fs00cg3g().s[36]++;
    window.addEventListener('unhandledrejection', event => {
      /* istanbul ignore next */
      cov_15fs00cg3g().f[13]++;
      cov_15fs00cg3g().s[37]++;
      this.captureError(new Error(`Unhandled Promise Rejection: ${event.reason}`), {
        type: 'unhandledrejection',
        reason: event.reason
      });
    });
    // Network error monitoring
    /* istanbul ignore next */
    cov_15fs00cg3g().s[38]++;
    this.monitorNetworkErrors();
    // Performance monitoring
    /* istanbul ignore next */
    cov_15fs00cg3g().s[39]++;
    this.monitorPerformance();
    // User interaction tracking
    /* istanbul ignore next */
    cov_15fs00cg3g().s[40]++;
    this.trackUserInteractions();
    /* istanbul ignore next */
    cov_15fs00cg3g().s[41]++;
    this.isInitialized = true;
  }
  monitorNetworkErrors() {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[14]++;
    cov_15fs00cg3g().s[42]++;
    if (typeof window === 'undefined') {
      /* istanbul ignore next */
      cov_15fs00cg3g().b[6][0]++;
      cov_15fs00cg3g().s[43]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_15fs00cg3g().b[6][1]++;
    }
    // Monitor fetch errors
    const originalFetch =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[44]++, window.fetch);
    /* istanbul ignore next */
    cov_15fs00cg3g().s[45]++;
    window.fetch = async (...args) => {
      /* istanbul ignore next */
      cov_15fs00cg3g().f[15]++;
      const startTime =
      /* istanbul ignore next */
      (cov_15fs00cg3g().s[46]++, Date.now());
      /* istanbul ignore next */
      cov_15fs00cg3g().s[47]++;
      try {
        const response =
        /* istanbul ignore next */
        (cov_15fs00cg3g().s[48]++, await originalFetch(...args));
        const duration =
        /* istanbul ignore next */
        (cov_15fs00cg3g().s[49]++, Date.now() - startTime);
        /* istanbul ignore next */
        cov_15fs00cg3g().s[50]++;
        this.addBreadcrumb({
          timestamp: Date.now(),
          message: `Fetch ${args[0]} - ${response.status}`,
          category: 'network',
          level: response.ok ?
          /* istanbul ignore next */
          (cov_15fs00cg3g().b[7][0]++, 'info') :
          /* istanbul ignore next */
          (cov_15fs00cg3g().b[7][1]++, 'error'),
          data: {
            url: args[0],
            status: response.status,
            duration
          }
        });
        /* istanbul ignore next */
        cov_15fs00cg3g().s[51]++;
        if (!response.ok) {
          /* istanbul ignore next */
          cov_15fs00cg3g().b[8][0]++;
          cov_15fs00cg3g().s[52]++;
          this.captureError(new Error(`HTTP ${response.status}: ${response.statusText}`), {
            url: args[0],
            status: response.status,
            duration,
            category: 'network'
          });
        } else
        /* istanbul ignore next */
        {
          cov_15fs00cg3g().b[8][1]++;
        }
        cov_15fs00cg3g().s[53]++;
        return response;
      } catch (error) {
        const duration =
        /* istanbul ignore next */
        (cov_15fs00cg3g().s[54]++, Date.now() - startTime);
        /* istanbul ignore next */
        cov_15fs00cg3g().s[55]++;
        this.captureError(error, {
          url: args[0],
          duration,
          category: 'network'
        });
        /* istanbul ignore next */
        cov_15fs00cg3g().s[56]++;
        throw error;
      }
    };
  }
  monitorPerformance() {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[16]++;
    cov_15fs00cg3g().s[57]++;
    if (
    /* istanbul ignore next */
    (cov_15fs00cg3g().b[10][0]++, typeof window === 'undefined') ||
    /* istanbul ignore next */
    (cov_15fs00cg3g().b[10][1]++, !window.PerformanceObserver)) {
      /* istanbul ignore next */
      cov_15fs00cg3g().b[9][0]++;
      cov_15fs00cg3g().s[58]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_15fs00cg3g().b[9][1]++;
    }
    // Monitor long tasks
    cov_15fs00cg3g().s[59]++;
    try {
      const longTaskObserver =
      /* istanbul ignore next */
      (cov_15fs00cg3g().s[60]++, new PerformanceObserver(list => {
        /* istanbul ignore next */
        cov_15fs00cg3g().f[17]++;
        cov_15fs00cg3g().s[61]++;
        for (const entry of list.getEntries()) {
          /* istanbul ignore next */
          cov_15fs00cg3g().s[62]++;
          if (entry.duration > 50) {
            /* istanbul ignore next */
            cov_15fs00cg3g().b[11][0]++;
            cov_15fs00cg3g().s[63]++;
            this.capturePerformanceIssue({
              type: 'slow_render',
              severity: entry.duration > 100 ?
              /* istanbul ignore next */
              (cov_15fs00cg3g().b[12][0]++, 'high') :
              /* istanbul ignore next */
              (cov_15fs00cg3g().b[12][1]++, 'medium'),
              message: `Long task detected: ${entry.duration.toFixed(2)}ms`,
              metrics: {
                duration: entry.duration
              },
              threshold: 50,
              actualValue: entry.duration
            });
          } else
          /* istanbul ignore next */
          {
            cov_15fs00cg3g().b[11][1]++;
          }
        }
      }));
      /* istanbul ignore next */
      cov_15fs00cg3g().s[64]++;
      longTaskObserver.observe({
        entryTypes: ['longtask']
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_15fs00cg3g().s[65]++;
      console.warn('Long task monitoring not supported:', error);
    }
    // Monitor memory usage
    /* istanbul ignore next */
    cov_15fs00cg3g().s[66]++;
    if ('memory' in performance) {
      /* istanbul ignore next */
      cov_15fs00cg3g().b[13][0]++;
      cov_15fs00cg3g().s[67]++;
      setInterval(() => {
        /* istanbul ignore next */
        cov_15fs00cg3g().f[18]++;
        const memory =
        /* istanbul ignore next */
        (cov_15fs00cg3g().s[68]++, performance.memory);
        const usedPercent =
        /* istanbul ignore next */
        (cov_15fs00cg3g().s[69]++, memory.usedJSHeapSize / memory.jsHeapSizeLimit * 100);
        /* istanbul ignore next */
        cov_15fs00cg3g().s[70]++;
        if (usedPercent > 80) {
          /* istanbul ignore next */
          cov_15fs00cg3g().b[14][0]++;
          cov_15fs00cg3g().s[71]++;
          this.capturePerformanceIssue({
            type: 'memory_leak',
            severity: usedPercent > 90 ?
            /* istanbul ignore next */
            (cov_15fs00cg3g().b[15][0]++, 'critical') :
            /* istanbul ignore next */
            (cov_15fs00cg3g().b[15][1]++, 'high'),
            message: `High memory usage: ${usedPercent.toFixed(1)}%`,
            metrics: {
              usedJSHeapSize: memory.usedJSHeapSize,
              totalJSHeapSize: memory.totalJSHeapSize,
              jsHeapSizeLimit: memory.jsHeapSizeLimit,
              usedPercent
            },
            threshold: 80,
            actualValue: usedPercent
          });
        } else
        /* istanbul ignore next */
        {
          cov_15fs00cg3g().b[14][1]++;
        }
      }, 30000); // Check every 30 seconds
    } else
    /* istanbul ignore next */
    {
      cov_15fs00cg3g().b[13][1]++;
    }
  }
  trackUserInteractions() {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[19]++;
    cov_15fs00cg3g().s[72]++;
    if (typeof window === 'undefined') {
      /* istanbul ignore next */
      cov_15fs00cg3g().b[16][0]++;
      cov_15fs00cg3g().s[73]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_15fs00cg3g().b[16][1]++;
    }
    // Track clicks
    cov_15fs00cg3g().s[74]++;
    document.addEventListener('click', event => {
      /* istanbul ignore next */
      cov_15fs00cg3g().f[20]++;
      const target =
      /* istanbul ignore next */
      (cov_15fs00cg3g().s[75]++, event.target);
      /* istanbul ignore next */
      cov_15fs00cg3g().s[76]++;
      this.addBreadcrumb({
        timestamp: Date.now(),
        message: `Clicked ${target.tagName}${target.id ?
        /* istanbul ignore next */
        (cov_15fs00cg3g().b[17][0]++, `#${target.id}`) :
        /* istanbul ignore next */
        (cov_15fs00cg3g().b[17][1]++, '')}${target.className ?
        /* istanbul ignore next */
        (cov_15fs00cg3g().b[18][0]++, `.${target.className.split(' ')[0]}`) :
        /* istanbul ignore next */
        (cov_15fs00cg3g().b[18][1]++, '')}`,
        category: 'user',
        level: 'info',
        data: {
          tagName: target.tagName,
          id: target.id,
          className: target.className,
          innerText: target.innerText?.substring(0, 50)
        }
      });
    });
    // Track navigation
    /* istanbul ignore next */
    cov_15fs00cg3g().s[77]++;
    window.addEventListener('popstate', () => {
      /* istanbul ignore next */
      cov_15fs00cg3g().f[21]++;
      cov_15fs00cg3g().s[78]++;
      this.addBreadcrumb({
        timestamp: Date.now(),
        message: `Navigation to ${window.location.pathname}`,
        category: 'navigation',
        level: 'info',
        data: {
          url: window.location.href,
          pathname: window.location.pathname
        }
      });
    });
  }
  setUser(userId, userData) {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[22]++;
    cov_15fs00cg3g().s[79]++;
    this.userId = userId;
    /* istanbul ignore next */
    cov_15fs00cg3g().s[80]++;
    this.addBreadcrumb({
      timestamp: Date.now(),
      message: `User identified: ${userId}`,
      category: 'user',
      level: 'info',
      data: userData
    });
  }
  addBreadcrumb(breadcrumb) {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[23]++;
    cov_15fs00cg3g().s[81]++;
    this.breadcrumbs.push(breadcrumb);
    // Keep only the most recent breadcrumbs
    /* istanbul ignore next */
    cov_15fs00cg3g().s[82]++;
    if (this.breadcrumbs.length > this.maxBreadcrumbs) {
      /* istanbul ignore next */
      cov_15fs00cg3g().b[19][0]++;
      cov_15fs00cg3g().s[83]++;
      this.breadcrumbs = this.breadcrumbs.slice(-this.maxBreadcrumbs);
    } else
    /* istanbul ignore next */
    {
      cov_15fs00cg3g().b[19][1]++;
    }
  }
  captureError(error, context, severity =
  /* istanbul ignore next */
  (cov_15fs00cg3g().b[20][0]++, 'medium'), category =
  /* istanbul ignore next */
  (cov_15fs00cg3g().b[21][0]++, 'javascript')) {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[24]++;
    const errorObj =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[84]++, typeof error === 'string' ?
    /* istanbul ignore next */
    (cov_15fs00cg3g().b[22][0]++, new Error(error)) :
    /* istanbul ignore next */
    (cov_15fs00cg3g().b[22][1]++, error));
    const fingerprint =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[85]++, this.generateFingerprint(errorObj, context));
    let errorInfo =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[86]++, this.errors.get(fingerprint));
    /* istanbul ignore next */
    cov_15fs00cg3g().s[87]++;
    if (errorInfo) {
      /* istanbul ignore next */
      cov_15fs00cg3g().b[23][0]++;
      cov_15fs00cg3g().s[88]++;
      // Update existing error
      errorInfo.occurrences++;
      /* istanbul ignore next */
      cov_15fs00cg3g().s[89]++;
      errorInfo.timestamp = Date.now();
    } else {
      /* istanbul ignore next */
      cov_15fs00cg3g().b[23][1]++;
      cov_15fs00cg3g().s[90]++;
      // Create new error
      errorInfo = {
        id: this.generateErrorId(),
        message: errorObj.message,
        stack: errorObj.stack,
        timestamp: Date.now(),
        url: typeof window !== 'undefined' ?
        /* istanbul ignore next */
        (cov_15fs00cg3g().b[24][0]++, window.location.href) :
        /* istanbul ignore next */
        (cov_15fs00cg3g().b[24][1]++, ''),
        userAgent: typeof navigator !== 'undefined' ?
        /* istanbul ignore next */
        (cov_15fs00cg3g().b[25][0]++, navigator.userAgent) :
        /* istanbul ignore next */
        (cov_15fs00cg3g().b[25][1]++, ''),
        userId: this.userId,
        sessionId: this.sessionId,
        severity,
        category,
        context:
        /* istanbul ignore next */
        (cov_15fs00cg3g().b[26][0]++, context) ||
        /* istanbul ignore next */
        (cov_15fs00cg3g().b[26][1]++, {}),
        breadcrumbs: [...this.breadcrumbs],
        tags: this.generateTags(errorObj, context),
        fingerprint,
        resolved: false,
        occurrences: 1
      };
      /* istanbul ignore next */
      cov_15fs00cg3g().s[91]++;
      this.errors.set(fingerprint, errorInfo);
      // Notify listeners
      /* istanbul ignore next */
      cov_15fs00cg3g().s[92]++;
      this.listeners.forEach(listener => {
        /* istanbul ignore next */
        cov_15fs00cg3g().f[25]++;
        cov_15fs00cg3g().s[93]++;
        try {
          /* istanbul ignore next */
          cov_15fs00cg3g().s[94]++;
          listener(errorInfo);
        } catch (listenerError) {
          /* istanbul ignore next */
          cov_15fs00cg3g().s[95]++;
          console.error('Error in error listener:', listenerError);
        }
      });
    }
    // Clean up old errors
    /* istanbul ignore next */
    cov_15fs00cg3g().s[96]++;
    this.cleanupErrors();
    /* istanbul ignore next */
    cov_15fs00cg3g().s[97]++;
    return errorInfo.id;
  }
  capturePerformanceIssue(issue) {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[26]++;
    const performanceIssue =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[98]++, {
      id: this.generateErrorId(),
      timestamp: Date.now(),
      url: typeof window !== 'undefined' ?
      /* istanbul ignore next */
      (cov_15fs00cg3g().b[27][0]++, window.location.href) :
      /* istanbul ignore next */
      (cov_15fs00cg3g().b[27][1]++, ''),
      resolved: false,
      ...issue
    });
    /* istanbul ignore next */
    cov_15fs00cg3g().s[99]++;
    this.performanceIssues.set(performanceIssue.id, performanceIssue);
    // Also capture as regular error for unified tracking
    /* istanbul ignore next */
    cov_15fs00cg3g().s[100]++;
    this.captureError(new Error(issue.message), {
      type: 'performance',
      performanceType: issue.type,
      metrics: issue.metrics,
      threshold: issue.threshold,
      actualValue: issue.actualValue
    }, issue.severity, 'performance');
    /* istanbul ignore next */
    cov_15fs00cg3g().s[101]++;
    return performanceIssue.id;
  }
  generateTags(error, context) {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[27]++;
    const tags =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[102]++, []);
    // Add browser info
    /* istanbul ignore next */
    cov_15fs00cg3g().s[103]++;
    if (typeof navigator !== 'undefined') {
      /* istanbul ignore next */
      cov_15fs00cg3g().b[28][0]++;
      cov_15fs00cg3g().s[104]++;
      tags.push(`browser:${this.getBrowserName()}`);
    } else
    /* istanbul ignore next */
    {
      cov_15fs00cg3g().b[28][1]++;
    }
    // Add URL-based tags
    cov_15fs00cg3g().s[105]++;
    if (typeof window !== 'undefined') {
      /* istanbul ignore next */
      cov_15fs00cg3g().b[29][0]++;
      const url =
      /* istanbul ignore next */
      (cov_15fs00cg3g().s[106]++, new URL(window.location.href));
      /* istanbul ignore next */
      cov_15fs00cg3g().s[107]++;
      tags.push(`page:${url.pathname}`);
    } else
    /* istanbul ignore next */
    {
      cov_15fs00cg3g().b[29][1]++;
    }
    // Add context-based tags
    cov_15fs00cg3g().s[108]++;
    if (context) {
      /* istanbul ignore next */
      cov_15fs00cg3g().b[30][0]++;
      cov_15fs00cg3g().s[109]++;
      if (context.component) {
        /* istanbul ignore next */
        cov_15fs00cg3g().b[31][0]++;
        cov_15fs00cg3g().s[110]++;
        tags.push(`component:${context.component}`);
      } else
      /* istanbul ignore next */
      {
        cov_15fs00cg3g().b[31][1]++;
      }
      cov_15fs00cg3g().s[111]++;
      if (context.feature) {
        /* istanbul ignore next */
        cov_15fs00cg3g().b[32][0]++;
        cov_15fs00cg3g().s[112]++;
        tags.push(`feature:${context.feature}`);
      } else
      /* istanbul ignore next */
      {
        cov_15fs00cg3g().b[32][1]++;
      }
      cov_15fs00cg3g().s[113]++;
      if (context.api) {
        /* istanbul ignore next */
        cov_15fs00cg3g().b[33][0]++;
        cov_15fs00cg3g().s[114]++;
        tags.push(`api:${context.api}`);
      } else
      /* istanbul ignore next */
      {
        cov_15fs00cg3g().b[33][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_15fs00cg3g().b[30][1]++;
    }
    cov_15fs00cg3g().s[115]++;
    return tags;
  }
  getBrowserName() {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[28]++;
    cov_15fs00cg3g().s[116]++;
    if (typeof navigator === 'undefined') {
      /* istanbul ignore next */
      cov_15fs00cg3g().b[34][0]++;
      cov_15fs00cg3g().s[117]++;
      return 'unknown';
    } else
    /* istanbul ignore next */
    {
      cov_15fs00cg3g().b[34][1]++;
    }
    const userAgent =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[118]++, navigator.userAgent);
    /* istanbul ignore next */
    cov_15fs00cg3g().s[119]++;
    if (userAgent.includes('Chrome')) {
      /* istanbul ignore next */
      cov_15fs00cg3g().b[35][0]++;
      cov_15fs00cg3g().s[120]++;
      return 'chrome';
    } else
    /* istanbul ignore next */
    {
      cov_15fs00cg3g().b[35][1]++;
    }
    cov_15fs00cg3g().s[121]++;
    if (userAgent.includes('Firefox')) {
      /* istanbul ignore next */
      cov_15fs00cg3g().b[36][0]++;
      cov_15fs00cg3g().s[122]++;
      return 'firefox';
    } else
    /* istanbul ignore next */
    {
      cov_15fs00cg3g().b[36][1]++;
    }
    cov_15fs00cg3g().s[123]++;
    if (userAgent.includes('Safari')) {
      /* istanbul ignore next */
      cov_15fs00cg3g().b[37][0]++;
      cov_15fs00cg3g().s[124]++;
      return 'safari';
    } else
    /* istanbul ignore next */
    {
      cov_15fs00cg3g().b[37][1]++;
    }
    cov_15fs00cg3g().s[125]++;
    if (userAgent.includes('Edge')) {
      /* istanbul ignore next */
      cov_15fs00cg3g().b[38][0]++;
      cov_15fs00cg3g().s[126]++;
      return 'edge';
    } else
    /* istanbul ignore next */
    {
      cov_15fs00cg3g().b[38][1]++;
    }
    cov_15fs00cg3g().s[127]++;
    return 'other';
  }
  cleanupErrors() {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[29]++;
    cov_15fs00cg3g().s[128]++;
    if (this.errors.size <= this.maxErrors) {
      /* istanbul ignore next */
      cov_15fs00cg3g().b[39][0]++;
      cov_15fs00cg3g().s[129]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_15fs00cg3g().b[39][1]++;
    }
    // Remove oldest errors
    const sortedErrors =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[130]++, Array.from(this.errors.entries()).sort(([, a], [, b]) => {
      /* istanbul ignore next */
      cov_15fs00cg3g().f[30]++;
      cov_15fs00cg3g().s[131]++;
      return a.timestamp - b.timestamp;
    }));
    const toRemove =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[132]++, sortedErrors.slice(0, sortedErrors.length - this.maxErrors));
    /* istanbul ignore next */
    cov_15fs00cg3g().s[133]++;
    toRemove.forEach(([fingerprint]) => {
      /* istanbul ignore next */
      cov_15fs00cg3g().f[31]++;
      cov_15fs00cg3g().s[134]++;
      this.errors.delete(fingerprint);
    });
  }
  resolveError(fingerprint) {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[32]++;
    const error =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[135]++, this.errors.get(fingerprint));
    /* istanbul ignore next */
    cov_15fs00cg3g().s[136]++;
    if (error) {
      /* istanbul ignore next */
      cov_15fs00cg3g().b[40][0]++;
      cov_15fs00cg3g().s[137]++;
      error.resolved = true;
      /* istanbul ignore next */
      cov_15fs00cg3g().s[138]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_15fs00cg3g().b[40][1]++;
    }
    cov_15fs00cg3g().s[139]++;
    return false;
  }
  getError(fingerprint) {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[33]++;
    cov_15fs00cg3g().s[140]++;
    return this.errors.get(fingerprint);
  }
  getAllErrors() {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[34]++;
    cov_15fs00cg3g().s[141]++;
    return Array.from(this.errors.values());
  }
  getErrorsByCategory(category) {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[35]++;
    cov_15fs00cg3g().s[142]++;
    return this.getAllErrors().filter(error => {
      /* istanbul ignore next */
      cov_15fs00cg3g().f[36]++;
      cov_15fs00cg3g().s[143]++;
      return error.category === category;
    });
  }
  getErrorsBySeverity(severity) {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[37]++;
    cov_15fs00cg3g().s[144]++;
    return this.getAllErrors().filter(error => {
      /* istanbul ignore next */
      cov_15fs00cg3g().f[38]++;
      cov_15fs00cg3g().s[145]++;
      return error.severity === severity;
    });
  }
  getMetrics() {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[39]++;
    const errors =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[146]++, this.getAllErrors());
    const totalErrors =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[147]++, errors.length);
    const unresolvedErrors =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[148]++, errors.filter(e => {
      /* istanbul ignore next */
      cov_15fs00cg3g().f[40]++;
      cov_15fs00cg3g().s[149]++;
      return !e.resolved;
    }).length);
    // Calculate error rate (errors per session)
    const errorRate =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[150]++, totalErrors);
    // Top errors by occurrence
    const errorCounts =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[151]++, new Map());
    /* istanbul ignore next */
    cov_15fs00cg3g().s[152]++;
    errors.forEach(error => {
      /* istanbul ignore next */
      cov_15fs00cg3g().f[41]++;
      const existing =
      /* istanbul ignore next */
      (cov_15fs00cg3g().s[153]++, errorCounts.get(error.fingerprint));
      /* istanbul ignore next */
      cov_15fs00cg3g().s[154]++;
      if (existing) {
        /* istanbul ignore next */
        cov_15fs00cg3g().b[41][0]++;
        cov_15fs00cg3g().s[155]++;
        existing.count += error.occurrences;
      } else {
        /* istanbul ignore next */
        cov_15fs00cg3g().b[41][1]++;
        cov_15fs00cg3g().s[156]++;
        errorCounts.set(error.fingerprint, {
          count: error.occurrences,
          message: error.message
        });
      }
    });
    const topErrors =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[157]++, Array.from(errorCounts.entries()).map(([fingerprint, data]) => {
      /* istanbul ignore next */
      cov_15fs00cg3g().f[42]++;
      cov_15fs00cg3g().s[158]++;
      return {
        fingerprint,
        ...data
      };
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_15fs00cg3g().f[43]++;
      cov_15fs00cg3g().s[159]++;
      return b.count - a.count;
    }).slice(0, 10));
    // Errors by category
    const errorsByCategory =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[160]++, {});
    /* istanbul ignore next */
    cov_15fs00cg3g().s[161]++;
    errors.forEach(error => {
      /* istanbul ignore next */
      cov_15fs00cg3g().f[44]++;
      cov_15fs00cg3g().s[162]++;
      errorsByCategory[error.category] = (
      /* istanbul ignore next */
      (cov_15fs00cg3g().b[42][0]++, errorsByCategory[error.category]) ||
      /* istanbul ignore next */
      (cov_15fs00cg3g().b[42][1]++, 0)) + 1;
    });
    // Errors by severity
    const errorsBySeverity =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[163]++, {});
    /* istanbul ignore next */
    cov_15fs00cg3g().s[164]++;
    errors.forEach(error => {
      /* istanbul ignore next */
      cov_15fs00cg3g().f[45]++;
      cov_15fs00cg3g().s[165]++;
      errorsBySeverity[error.severity] = (
      /* istanbul ignore next */
      (cov_15fs00cg3g().b[43][0]++, errorsBySeverity[error.severity]) ||
      /* istanbul ignore next */
      (cov_15fs00cg3g().b[43][1]++, 0)) + 1;
    });
    // Average resolution time (mock calculation)
    const resolvedErrors =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[166]++, errors.filter(e => {
      /* istanbul ignore next */
      cov_15fs00cg3g().f[46]++;
      cov_15fs00cg3g().s[167]++;
      return e.resolved;
    }));
    const averageResolutionTime =
    /* istanbul ignore next */
    (cov_15fs00cg3g().s[168]++, resolvedErrors.length > 0 ?
    /* istanbul ignore next */
    (cov_15fs00cg3g().b[44][0]++, 24 * 60 * 60 * 1000) :
    /* istanbul ignore next */
    (cov_15fs00cg3g().b[44][1]++, 0)); // 24 hours mock
    /* istanbul ignore next */
    cov_15fs00cg3g().s[169]++;
    return {
      totalErrors,
      errorRate,
      topErrors,
      errorsByCategory,
      errorsBySeverity,
      averageResolutionTime,
      unresolvedErrors
    };
  }
  getPerformanceIssues() {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[47]++;
    cov_15fs00cg3g().s[170]++;
    return Array.from(this.performanceIssues.values());
  }
  onError(listener) {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[48]++;
    cov_15fs00cg3g().s[171]++;
    this.listeners.push(listener);
    // Return unsubscribe function
    /* istanbul ignore next */
    cov_15fs00cg3g().s[172]++;
    return () => {
      /* istanbul ignore next */
      cov_15fs00cg3g().f[49]++;
      const index =
      /* istanbul ignore next */
      (cov_15fs00cg3g().s[173]++, this.listeners.indexOf(listener));
      /* istanbul ignore next */
      cov_15fs00cg3g().s[174]++;
      if (index > -1) {
        /* istanbul ignore next */
        cov_15fs00cg3g().b[45][0]++;
        cov_15fs00cg3g().s[175]++;
        this.listeners.splice(index, 1);
      } else
      /* istanbul ignore next */
      {
        cov_15fs00cg3g().b[45][1]++;
      }
    };
  }
  clearErrors() {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[50]++;
    cov_15fs00cg3g().s[176]++;
    this.errors.clear();
    /* istanbul ignore next */
    cov_15fs00cg3g().s[177]++;
    this.performanceIssues.clear();
  }
  exportErrors() {
    /* istanbul ignore next */
    cov_15fs00cg3g().f[51]++;
    cov_15fs00cg3g().s[178]++;
    return JSON.stringify({
      errors: this.getAllErrors(),
      performanceIssues: this.getPerformanceIssues(),
      metrics: this.getMetrics(),
      sessionId: this.sessionId,
      exportTime: Date.now()
    }, null, 2);
  }
}
// Global error tracker instance
let globalErrorTracker =
/* istanbul ignore next */
(cov_15fs00cg3g().s[179]++, null);
function getErrorTracker() {
  /* istanbul ignore next */
  cov_15fs00cg3g().f[52]++;
  cov_15fs00cg3g().s[180]++;
  if (!globalErrorTracker) {
    /* istanbul ignore next */
    cov_15fs00cg3g().b[46][0]++;
    cov_15fs00cg3g().s[181]++;
    globalErrorTracker = new ErrorTracker();
  } else
  /* istanbul ignore next */
  {
    cov_15fs00cg3g().b[46][1]++;
  }
  cov_15fs00cg3g().s[182]++;
  return globalErrorTracker;
}
function captureError(error, context, severity, category) {
  /* istanbul ignore next */
  cov_15fs00cg3g().f[53]++;
  cov_15fs00cg3g().s[183]++;
  return getErrorTracker().captureError(error, context, severity, category);
}
function addBreadcrumb(breadcrumb) {
  /* istanbul ignore next */
  cov_15fs00cg3g().f[54]++;
  cov_15fs00cg3g().s[184]++;
  getErrorTracker().addBreadcrumb(breadcrumb);
}
function setUser(userId, userData) {
  /* istanbul ignore next */
  cov_15fs00cg3g().f[55]++;
  cov_15fs00cg3g().s[185]++;
  getErrorTracker().setUser(userId, userData);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,