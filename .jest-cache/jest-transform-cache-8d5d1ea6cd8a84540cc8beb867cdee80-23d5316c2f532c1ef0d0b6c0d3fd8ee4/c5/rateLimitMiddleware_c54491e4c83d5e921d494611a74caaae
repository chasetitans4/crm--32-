2230c239eed69a26e1da6b424a243a3b
"use strict";

/* istanbul ignore next */
function cov_3qcnrehs8() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\middleware\\rateLimitMiddleware.ts";
  var hash = "847ec032db4267e0cc871d921a04fd7f7e32bceb";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\middleware\\rateLimitMiddleware.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 30,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 35
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 38
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 45
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 33
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 35
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 29
        }
      },
      "10": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 38
        }
      },
      "11": {
        start: {
          line: 32,
          column: 22
        },
        end: {
          line: 32,
          column: 54
        }
      },
      "12": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 32
        }
      },
      "13": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 28
        }
      },
      "14": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 55,
          column: 10
        }
      },
      "15": {
        start: {
          line: 51,
          column: 39
        },
        end: {
          line: 51,
          column: 68
        }
      },
      "16": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "17": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 62,
          column: 15
        }
      },
      "18": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 68,
          column: 15
        }
      },
      "19": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "20": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 219
        }
      },
      "21": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 81,
          column: 10
        }
      },
      "22": {
        start: {
          line: 85,
          column: 26
        },
        end: {
          line: 85,
          column: 60
        }
      },
      "23": {
        start: {
          line: 86,
          column: 23
        },
        end: {
          line: 86,
          column: 51
        }
      },
      "24": {
        start: {
          line: 87,
          column: 31
        },
        end: {
          line: 87,
          column: 66
        }
      },
      "25": {
        start: {
          line: 88,
          column: 17
        },
        end: {
          line: 88,
          column: 69
        }
      },
      "26": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "27": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 24
        }
      },
      "28": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "29": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 27
        }
      },
      "30": {
        start: {
          line: 98,
          column: 26
        },
        end: {
          line: 98,
          column: 68
        }
      },
      "31": {
        start: {
          line: 99,
          column: 30
        },
        end: {
          line: 99,
          column: 56
        }
      },
      "32": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 40
        }
      },
      "33": {
        start: {
          line: 103,
          column: 19
        },
        end: {
          line: 103,
          column: 20
        }
      },
      "34": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "35": {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 104,
          column: 21
        }
      },
      "36": {
        start: {
          line: 105,
          column: 25
        },
        end: {
          line: 105,
          column: 42
        }
      },
      "37": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 45
        }
      },
      "38": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 31
        }
      },
      "39": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 43
        }
      },
      "40": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "41": {
        start: {
          line: 113,
          column: 50
        },
        end: {
          line: 113,
          column: 75
        }
      },
      "42": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 25
        }
      },
      "43": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "44": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 84
        }
      },
      "45": {
        start: {
          line: 118,
          column: 57
        },
        end: {
          line: 118,
          column: 82
        }
      },
      "46": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 44
        }
      },
      "47": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 47
        }
      },
      "48": {
        start: {
          line: 124,
          column: 40
        },
        end: {
          line: 124,
          column: 47
        }
      },
      "49": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 37
        }
      },
      "50": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "51": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 43
        }
      },
      "52": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 50
        }
      },
      "53": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 133,
          column: 13
        }
      },
      "54": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 69
        }
      },
      "55": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 119
        }
      },
      "56": {
        start: {
          line: 134,
          column: 81
        },
        end: {
          line: 134,
          column: 86
        }
      },
      "57": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "58": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 30
        }
      },
      "59": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 139,
          column: 84
        }
      },
      "60": {
        start: {
          line: 142,
          column: 27
        },
        end: {
          line: 142,
          column: 69
        }
      },
      "61": {
        start: {
          line: 143,
          column: 25
        },
        end: {
          line: 149,
          column: 10
        }
      },
      "62": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 102
        }
      },
      "63": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 76
        }
      },
      "64": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 85
        }
      },
      "65": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 67
        }
      },
      "66": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 24
        }
      },
      "67": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 163,
          column: 11
        }
      },
      "68": {
        start: {
          line: 166,
          column: 26
        },
        end: {
          line: 166,
          column: 36
        }
      },
      "69": {
        start: {
          line: 167,
          column: 25
        },
        end: {
          line: 167,
          column: 45
        }
      },
      "70": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "71": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 24
        }
      },
      "72": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "73": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 180,
          column: 13
        }
      },
      "74": {
        start: {
          line: 175,
          column: 37
        },
        end: {
          line: 175,
          column: 67
        }
      },
      "75": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 179,
          column: 17
        }
      },
      "76": {
        start: {
          line: 177,
          column: 20
        },
        end: {
          line: 177,
          column: 76
        }
      },
      "77": {
        start: {
          line: 178,
          column: 20
        },
        end: {
          line: 178,
          column: 63
        }
      },
      "78": {
        start: {
          line: 182,
          column: 36
        },
        end: {
          line: 182,
          column: 63
        }
      },
      "79": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 186,
          column: 13
        }
      },
      "80": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 184,
          column: 72
        }
      },
      "81": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 185,
          column: 106
        }
      },
      "82": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 24
        }
      },
      "83": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 65
        }
      },
      "84": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 68
        }
      },
      "85": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 24
        }
      },
      "86": {
        start: {
          line: 197,
          column: 23
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "87": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "88": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 72
        }
      },
      "89": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "90": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 65
        }
      },
      "91": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 22
        }
      },
      "92": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 216,
          column: 10
        }
      },
      "93": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 32
        }
      },
      "94": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 28
        }
      },
      "95": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "96": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 39
        }
      },
      "97": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 39
        }
      },
      "98": {
        start: {
          line: 229,
          column: 23
        },
        end: {
          line: 229,
          column: 27
        }
      },
      "99": {
        start: {
          line: 231,
          column: 4
        },
        end: {
          line: 233,
          column: 5
        }
      },
      "100": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 232,
          column: 35
        }
      },
      "101": {
        start: {
          line: 234,
          column: 4
        },
        end: {
          line: 234,
          column: 55
        }
      },
      "102": {
        start: {
          line: 237,
          column: 4
        },
        end: {
          line: 239,
          column: 5
        }
      },
      "103": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 53
        }
      },
      "104": {
        start: {
          line: 240,
          column: 4
        },
        end: {
          line: 240,
          column: 28
        }
      },
      "105": {
        start: {
          line: 243,
          column: 23
        },
        end: {
          line: 243,
          column: 47
        }
      },
      "106": {
        start: {
          line: 244,
          column: 4
        },
        end: {
          line: 244,
          column: 34
        }
      },
      "107": {
        start: {
          line: 247,
          column: 23
        },
        end: {
          line: 247,
          column: 54
        }
      },
      "108": {
        start: {
          line: 248,
          column: 4
        },
        end: {
          line: 266,
          column: 6
        }
      },
      "109": {
        start: {
          line: 249,
          column: 34
        },
        end: {
          line: 249,
          column: 62
        }
      },
      "110": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "111": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 37
        }
      },
      "112": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "113": {
        start: {
          line: 254,
          column: 29
        },
        end: {
          line: 254,
          column: 47
        }
      },
      "114": {
        start: {
          line: 256,
          column: 36
        },
        end: {
          line: 256,
          column: 76
        }
      },
      "115": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 260,
          column: 13
        }
      },
      "116": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 258,
          column: 116
        }
      },
      "117": {
        start: {
          line: 259,
          column: 16
        },
        end: {
          line: 259,
          column: 67
        }
      },
      "118": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 28
        }
      },
      "119": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 24
        }
      },
      "120": {
        start: {
          line: 268,
          column: 26
        },
        end: {
          line: 302,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 31
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 34
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 41
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 29
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 31
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 25
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        loc: {
          start: {
            line: 34,
            column: 28
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 34
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 51,
            column: 32
          },
          end: {
            line: 51,
            column: 33
          }
        },
        loc: {
          start: {
            line: 51,
            column: 39
          },
          end: {
            line: 51,
            column: 68
          }
        },
        line: 51
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 52,
            column: 28
          },
          end: {
            line: 52,
            column: 29
          }
        },
        loc: {
          start: {
            line: 52,
            column: 32
          },
          end: {
            line: 52,
            column: 34
          }
        },
        line: 52
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        loc: {
          start: {
            line: 83,
            column: 29
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 83
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        loc: {
          start: {
            line: 102,
            column: 20
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 102
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        },
        loc: {
          start: {
            line: 111,
            column: 35
          },
          end: {
            line: 122,
            column: 5
          }
        },
        line: 111
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 113,
            column: 42
          },
          end: {
            line: 113,
            column: 43
          }
        },
        loc: {
          start: {
            line: 113,
            column: 50
          },
          end: {
            line: 113,
            column: 75
          }
        },
        line: 113
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 118,
            column: 49
          },
          end: {
            line: 118,
            column: 50
          }
        },
        loc: {
          start: {
            line: 118,
            column: 57
          },
          end: {
            line: 118,
            column: 82
          }
        },
        line: 118
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        loc: {
          start: {
            line: 123,
            column: 54
          },
          end: {
            line: 140,
            column: 5
          }
        },
        line: 123
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 134,
            column: 73
          },
          end: {
            line: 134,
            column: 74
          }
        },
        loc: {
          start: {
            line: 134,
            column: 81
          },
          end: {
            line: 134,
            column: 86
          }
        },
        line: 134
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        },
        loc: {
          start: {
            line: 141,
            column: 50
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 141
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        },
        loc: {
          start: {
            line: 157,
            column: 35
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 157
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 165,
            column: 5
          }
        },
        loc: {
          start: {
            line: 165,
            column: 22
          },
          end: {
            line: 195,
            column: 5
          }
        },
        line: 165
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        loc: {
          start: {
            line: 196,
            column: 17
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 196
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 209,
            column: 4
          },
          end: {
            line: 209,
            column: 5
          }
        },
        loc: {
          start: {
            line: 209,
            column: 19
          },
          end: {
            line: 219,
            column: 5
          }
        },
        line: 209
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        },
        loc: {
          start: {
            line: 220,
            column: 14
          },
          end: {
            line: 226,
            column: 5
          }
        },
        line: 220
      },
      "23": {
        name: "initializeRateLimitMiddleware",
        decl: {
          start: {
            line: 230,
            column: 9
          },
          end: {
            line: 230,
            column: 38
          }
        },
        loc: {
          start: {
            line: 230,
            column: 52
          },
          end: {
            line: 235,
            column: 1
          }
        },
        line: 230
      },
      "24": {
        name: "getRateLimitMiddleware",
        decl: {
          start: {
            line: 236,
            column: 9
          },
          end: {
            line: 236,
            column: 31
          }
        },
        loc: {
          start: {
            line: 236,
            column: 34
          },
          end: {
            line: 241,
            column: 1
          }
        },
        line: 236
      },
      "25": {
        name: "rateLimitMiddleware",
        decl: {
          start: {
            line: 242,
            column: 15
          },
          end: {
            line: 242,
            column: 34
          }
        },
        loc: {
          start: {
            line: 242,
            column: 40
          },
          end: {
            line: 245,
            column: 1
          }
        },
        line: 242
      },
      "26": {
        name: "withRateLimit",
        decl: {
          start: {
            line: 246,
            column: 9
          },
          end: {
            line: 246,
            column: 22
          }
        },
        loc: {
          start: {
            line: 246,
            column: 40
          },
          end: {
            line: 267,
            column: 1
          }
        },
        line: 246
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 248,
            column: 11
          },
          end: {
            line: 248,
            column: 12
          }
        },
        loc: {
          start: {
            line: 248,
            column: 24
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 248
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 34,
            column: 16
          },
          end: {
            line: 34,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 34,
            column: 25
          },
          end: {
            line: 34,
            column: 27
          }
        }],
        line: 34
      },
      "1": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        }, {
          start: {
            line: 63,
            column: 15
          },
          end: {
            line: 69,
            column: 9
          }
        }],
        line: 57
      },
      "2": {
        loc: {
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "3": {
        loc: {
          start: {
            line: 88,
            column: 17
          },
          end: {
            line: 88,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 17
          },
          end: {
            line: 88,
            column: 41
          }
        }, {
          start: {
            line: 88,
            column: 45
          },
          end: {
            line: 88,
            column: 51
          }
        }, {
          start: {
            line: 88,
            column: 55
          },
          end: {
            line: 88,
            column: 69
          }
        }],
        line: 88
      },
      "4": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "5": {
        loc: {
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 90,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 90,
            column: 15
          }
        }, {
          start: {
            line: 90,
            column: 19
          },
          end: {
            line: 90,
            column: 25
          }
        }],
        line: 90
      },
      "6": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "7": {
        loc: {
          start: {
            line: 98,
            column: 26
          },
          end: {
            line: 98,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 26
          },
          end: {
            line: 98,
            column: 55
          }
        }, {
          start: {
            line: 98,
            column: 59
          },
          end: {
            line: 98,
            column: 68
          }
        }],
        line: 98
      },
      "8": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "9": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "10": {
        loc: {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 124,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 124,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "11": {
        loc: {
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: 128,
            column: 15
          },
          end: {
            line: 135,
            column: 9
          }
        }],
        line: 126
      },
      "12": {
        loc: {
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 133,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 133,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "13": {
        loc: {
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "14": {
        loc: {
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "15": {
        loc: {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 180,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 180,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "16": {
        loc: {
          start: {
            line: 176,
            column: 16
          },
          end: {
            line: 179,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 16
          },
          end: {
            line: 179,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "17": {
        loc: {
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 186,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 186,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "18": {
        loc: {
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "19": {
        loc: {
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "20": {
        loc: {
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        }, {
          start: {
            line: 223,
            column: 15
          },
          end: {
            line: 225,
            column: 9
          }
        }],
        line: 221
      },
      "21": {
        loc: {
          start: {
            line: 230,
            column: 39
          },
          end: {
            line: 230,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 230,
            column: 48
          },
          end: {
            line: 230,
            column: 50
          }
        }],
        line: 230
      },
      "22": {
        loc: {
          start: {
            line: 231,
            column: 4
          },
          end: {
            line: 233,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 4
          },
          end: {
            line: 233,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "23": {
        loc: {
          start: {
            line: 237,
            column: 4
          },
          end: {
            line: 239,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 4
          },
          end: {
            line: 239,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "24": {
        loc: {
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 250
      },
      "25": {
        loc: {
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 260,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 260,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 257
      },
      "26": {
        loc: {
          start: {
            line: 258,
            column: 58
          },
          end: {
            line: 258,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 258,
            column: 58
          },
          end: {
            line: 258,
            column: 106
          }
        }, {
          start: {
            line: 258,
            column: 110
          },
          end: {
            line: 258,
            column: 114
          }
        }],
        line: 258
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\middleware\\rateLimitMiddleware.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport {\n  RateLimiter,\n  AdaptiveRateLimiter,\n  CircuitBreaker,\n  rateLimitConfigs,\n  type RateLimitConfig\n} from '@/utils/rateLimiting';\n\ninterface MiddlewareConfig {\n  rateLimitConfig?: RateLimitConfig;\n  enableAdaptiveRateLimit?: boolean;\n  enableCircuitBreaker?: boolean;\n  circuitBreakerConfig?: {\n    failureThreshold?: number;\n    recoveryTimeout?: number;\n    successThreshold?: number;\n  };\n  excludePaths?: string[];\n  includePaths?: string[];\n  customKeyGenerator?: (req: NextRequest) => string;\n  onLimitReached?: (req: NextRequest) => void;\n  enableMetrics?: boolean;\n}\n\ninterface RequestMetrics {\n  totalRequests: number;\n  blockedRequests: number;\n  averageResponseTime: number;\n  errorRate: number;\n  lastResetTime: number;\n}\n\nclass RateLimitMiddleware {\n  private rateLimiter: RateLimiter | AdaptiveRateLimiter;\n  private circuitBreaker?: CircuitBreaker;\n  private config: Required<MiddlewareConfig>;\n  private metrics: RequestMetrics;\n  private responseTimes: number[] = [];\n  private errorCount: number = 0;\n\n  constructor(config: MiddlewareConfig = {}) {\n    this.config = {\n      rateLimitConfig: rateLimitConfigs.api,\n      enableAdaptiveRateLimit: false,\n      enableCircuitBreaker: true,\n      circuitBreakerConfig: {\n        failureThreshold: 5,\n        recoveryTimeout: 60000,\n        successThreshold: 3\n      },\n      excludePaths: ['/api/health', '/api/metrics'],\n      includePaths: [],\n      customKeyGenerator: (req) => this.getClientIdentifier(req),\n      onLimitReached: () => {},\n      enableMetrics: true,\n      ...config\n    };\n\n    // Initialize rate limiter\n    if (this.config.enableAdaptiveRateLimit) {\n      this.rateLimiter = new AdaptiveRateLimiter({\n        ...this.config.rateLimitConfig,\n        keyGenerator: this.config.customKeyGenerator,\n        onLimitReached: this.config.onLimitReached\n      });\n    } else {\n      this.rateLimiter = new RateLimiter({\n        ...this.config.rateLimitConfig,\n        keyGenerator: this.config.customKeyGenerator,\n        onLimitReached: this.config.onLimitReached\n      });\n    }\n\n    // Initialize circuit breaker\n    if (this.config.enableCircuitBreaker) {\n      this.circuitBreaker = new CircuitBreaker(\n        this.config.circuitBreakerConfig.failureThreshold,\n        this.config.circuitBreakerConfig.recoveryTimeout,\n        this.config.circuitBreakerConfig.successThreshold\n      );\n    }\n\n    // Initialize metrics\n    this.metrics = {\n      totalRequests: 0,\n      blockedRequests: 0,\n      averageResponseTime: 0,\n      errorRate: 0,\n      lastResetTime: Date.now()\n    };\n  }\n\n  private getClientIdentifier(req: NextRequest): string {\n    // Try to get real IP from various headers\n    const forwarded = req.headers.get('x-forwarded-for');\n    const realIp = req.headers.get('x-real-ip');\n    const cfConnectingIp = req.headers.get('cf-connecting-ip');\n    \n    let ip = forwarded?.split(',')[0] || realIp || cfConnectingIp;\n    \n    // Fallback to connection remote address\n    if (!ip && req.ip) {\n      ip = req.ip;\n    }\n    \n    // Final fallback\n    if (!ip) {\n      ip = 'unknown';\n    }\n\n    // Include user agent for more specific identification\n    const userAgent = req.headers.get('user-agent') || 'unknown';\n    const userAgentHash = this.simpleHash(userAgent);\n    \n    return `${ip}:${userAgentHash}`;\n  }\n\n  private simpleHash(str: string): string {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash).toString(36);\n  }\n\n  private shouldApplyRateLimit(pathname: string): boolean {\n    // Check exclude paths\n    if (this.config.excludePaths.some(path => pathname.startsWith(path))) {\n      return false;\n    }\n\n    // Check include paths (if specified, only apply to these paths)\n    if (this.config.includePaths.length > 0) {\n      return this.config.includePaths.some(path => pathname.startsWith(path));\n    }\n\n    // Default: apply to all API routes\n    return pathname.startsWith('/api/');\n  }\n\n  private updateMetrics(responseTime: number, wasBlocked: boolean, wasError: boolean): void {\n    if (!this.config.enableMetrics) return;\n\n    this.metrics.totalRequests++;\n    \n    if (wasBlocked) {\n      this.metrics.blockedRequests++;\n    } else {\n      this.responseTimes.push(responseTime);\n      \n      // Keep only last 1000 response times\n      if (this.responseTimes.length > 1000) {\n        this.responseTimes = this.responseTimes.slice(-1000);\n      }\n      \n      this.metrics.averageResponseTime = \n        this.responseTimes.reduce((a, b) => a + b, 0) / this.responseTimes.length;\n    }\n\n    if (wasError) {\n      this.errorCount++;\n    }\n\n    this.metrics.errorRate = (this.errorCount / this.metrics.totalRequests) * 100;\n  }\n\n  private createRateLimitResponse(remaining: number, resetTime: number): NextResponse {\n    const retryAfter = Math.ceil((resetTime - Date.now()) / 1000);\n    \n    const response = NextResponse.json(\n      {\n        error: 'Too Many Requests',\n        message: 'Rate limit exceeded. Please try again later.',\n        retryAfter\n      },\n      { status: 429 }\n    );\n\n    // Add rate limit headers\n    response.headers.set('X-RateLimit-Limit', this.config.rateLimitConfig.maxRequests.toString());\n    response.headers.set('X-RateLimit-Remaining', remaining.toString());\n    response.headers.set('X-RateLimit-Reset', new Date(resetTime).toISOString());\n    response.headers.set('Retry-After', retryAfter.toString());\n\n    return response;\n  }\n\n  private createCircuitBreakerResponse(): NextResponse {\n    return NextResponse.json(\n      {\n        error: 'Service Unavailable',\n        message: 'Service is temporarily unavailable. Please try again later.'\n      },\n      { status: 503 }\n    );\n  }\n\n  public async handle(req: NextRequest): Promise<NextResponse | null> {\n    const startTime = Date.now();\n    const pathname = req.nextUrl.pathname;\n\n    // Skip rate limiting for excluded paths\n    if (!this.shouldApplyRateLimit(pathname)) {\n      return null;\n    }\n\n    try {\n      // Check circuit breaker\n      if (this.circuitBreaker) {\n        const breakerState = this.circuitBreaker.getState();\n        if (breakerState.state === 'open') {\n          this.updateMetrics(Date.now() - startTime, false, true);\n          return this.createCircuitBreakerResponse();\n        }\n      }\n\n      // Check rate limit\n      const rateLimitResult = this.rateLimiter.check(req);\n      \n      if (!rateLimitResult.allowed) {\n        this.updateMetrics(Date.now() - startTime, true, false);\n        return this.createRateLimitResponse(rateLimitResult.remaining, rateLimitResult.resetTime);\n      }\n\n      // Request is allowed, continue processing\n      return null;\n    } catch (error) {\n      console.error('Rate limit middleware error:', error);\n      this.updateMetrics(Date.now() - startTime, false, true);\n      \n      // Fail open - allow request to continue\n      return null;\n    }\n  }\n\n  public getMetrics(): RequestMetrics & {\n    rateLimiterStats: any;\n    circuitBreakerState?: any;\n    systemLoad?: number;\n  } {\n    const result: any = {\n      ...this.metrics,\n      rateLimiterStats: this.rateLimiter.getStats()\n    };\n\n    if (this.circuitBreaker) {\n      result.circuitBreakerState = this.circuitBreaker.getState();\n    }\n\n    if (this.rateLimiter instanceof AdaptiveRateLimiter) {\n      result.systemLoad = this.rateLimiter.getSystemLoad();\n    }\n\n    return result;\n  }\n\n  public resetMetrics(): void {\n    this.metrics = {\n      totalRequests: 0,\n      blockedRequests: 0,\n      averageResponseTime: 0,\n      errorRate: 0,\n      lastResetTime: Date.now()\n    };\n    this.responseTimes = [];\n    this.errorCount = 0;\n  }\n\n  public destroy(): void {\n    if (this.rateLimiter instanceof AdaptiveRateLimiter) {\n      this.rateLimiter.destroy();\n    } else {\n      this.rateLimiter.destroy();\n    }\n  }\n}\n\n// Global middleware instance\nlet globalMiddleware: RateLimitMiddleware | null = null;\n\n// Initialize global middleware\nexport function initializeRateLimitMiddleware(config: MiddlewareConfig = {}): void {\n  if (globalMiddleware) {\n    globalMiddleware.destroy();\n  }\n  globalMiddleware = new RateLimitMiddleware(config);\n}\n\n// Get global middleware instance\nexport function getRateLimitMiddleware(): RateLimitMiddleware {\n  if (!globalMiddleware) {\n    globalMiddleware = new RateLimitMiddleware();\n  }\n  return globalMiddleware;\n}\n\n// Middleware function for Next.js\nexport async function rateLimitMiddleware(req: NextRequest): Promise<NextResponse | null> {\n  const middleware = getRateLimitMiddleware();\n  return middleware.handle(req);\n}\n\n// API route wrapper for rate limiting\nexport function withRateLimit(\n  handler: (req: NextRequest) => Promise<NextResponse>,\n  config?: MiddlewareConfig\n) {\n  const middleware = new RateLimitMiddleware(config);\n  \n  return async (req: NextRequest): Promise<NextResponse> => {\n    const rateLimitResponse = await middleware.handle(req);\n    \n    if (rateLimitResponse) {\n      return rateLimitResponse;\n    }\n    \n    try {\n      const response = await handler(req);\n      \n      // Add rate limit headers to successful responses\n      const rateLimitResult = middleware.getMetrics().rateLimiterStats;\n      if (rateLimitResult) {\n        response.headers.set('X-RateLimit-Limit', config?.rateLimitConfig?.maxRequests?.toString() || '60');\n        response.headers.set('X-RateLimit-Remaining', '0'); // Would need to track this properly\n      }\n      \n      return response;\n    } catch (error) {\n      // Handle circuit breaker for failed requests\n      throw error;\n    }\n  };\n}\n\n// Predefined middleware configurations\nexport const middlewareConfigs = {\n  strict: {\n    rateLimitConfig: rateLimitConfigs.strict,\n    enableAdaptiveRateLimit: true,\n    enableCircuitBreaker: true\n  },\n  moderate: {\n    rateLimitConfig: rateLimitConfigs.moderate,\n    enableAdaptiveRateLimit: false,\n    enableCircuitBreaker: true\n  },\n  lenient: {\n    rateLimitConfig: rateLimitConfigs.lenient,\n    enableAdaptiveRateLimit: false,\n    enableCircuitBreaker: false\n  },\n  api: {\n    rateLimitConfig: rateLimitConfigs.api,\n    enableAdaptiveRateLimit: true,\n    enableCircuitBreaker: true,\n    includePaths: ['/api/']\n  },\n  auth: {\n    rateLimitConfig: rateLimitConfigs.auth,\n    enableAdaptiveRateLimit: false,\n    enableCircuitBreaker: true,\n    includePaths: ['/api/auth/', '/api/login', '/api/register']\n  }\n};\n\nexport { RateLimitMiddleware };\nexport type { MiddlewareConfig, RequestMetrics };"],
      names: ["RateLimitMiddleware", "getRateLimitMiddleware", "initializeRateLimitMiddleware", "middlewareConfigs", "rateLimitMiddleware", "withRateLimit", "config", "responseTimes", "errorCount", "rateLimitConfig", "rateLimitConfigs", "api", "enableAdaptiveRateLimit", "enableCircuitBreaker", "circuitBreakerConfig", "failureThreshold", "recoveryTimeout", "successThreshold", "excludePaths", "includePaths", "customKeyGenerator", "req", "getClientIdentifier", "onLimitReached", "enableMetrics", "rateLimiter", "AdaptiveRateLimiter", "keyGenerator", "RateLimiter", "circuitBreaker", "CircuitBreaker", "metrics", "totalRequests", "blockedRequests", "averageResponseTime", "errorRate", "lastResetTime", "Date", "now", "forwarded", "headers", "get", "realIp", "cfConnectingIp", "ip", "split", "userAgent", "userAgentHash", "simpleHash", "str", "hash", "i", "length", "char", "charCodeAt", "Math", "abs", "toString", "shouldApplyRateLimit", "pathname", "some", "path", "startsWith", "updateMetrics", "responseTime", "wasBlocked", "wasError", "push", "slice", "reduce", "a", "b", "createRateLimitResponse", "remaining", "resetTime", "retryAfter", "ceil", "response", "NextResponse", "json", "error", "message", "status", "set", "maxRequests", "toISOString", "createCircuitBreakerResponse", "handle", "startTime", "nextUrl", "breakerState", "getState", "state", "rateLimitResult", "check", "allowed", "console", "getMetrics", "result", "rateLimiterStats", "getStats", "circuitBreakerState", "systemLoad", "getSystemLoad", "resetMetrics", "destroy", "globalMiddleware", "middleware", "handler", "rateLimitResponse", "strict", "moderate", "lenient", "auth"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "847ec032db4267e0cc871d921a04fd7f7e32bceb"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_3qcnrehs8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_3qcnrehs8();
cov_3qcnrehs8().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_3qcnrehs8().f[0]++;
  cov_3qcnrehs8().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_3qcnrehs8().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_3qcnrehs8().s[3]++;
_export(exports, {
  get RateLimitMiddleware() {
    /* istanbul ignore next */
    cov_3qcnrehs8().f[1]++;
    cov_3qcnrehs8().s[4]++;
    return RateLimitMiddleware;
  },
  get getRateLimitMiddleware() {
    /* istanbul ignore next */
    cov_3qcnrehs8().f[2]++;
    cov_3qcnrehs8().s[5]++;
    return getRateLimitMiddleware;
  },
  get initializeRateLimitMiddleware() {
    /* istanbul ignore next */
    cov_3qcnrehs8().f[3]++;
    cov_3qcnrehs8().s[6]++;
    return initializeRateLimitMiddleware;
  },
  get middlewareConfigs() {
    /* istanbul ignore next */
    cov_3qcnrehs8().f[4]++;
    cov_3qcnrehs8().s[7]++;
    return middlewareConfigs;
  },
  get rateLimitMiddleware() {
    /* istanbul ignore next */
    cov_3qcnrehs8().f[5]++;
    cov_3qcnrehs8().s[8]++;
    return rateLimitMiddleware;
  },
  get withRateLimit() {
    /* istanbul ignore next */
    cov_3qcnrehs8().f[6]++;
    cov_3qcnrehs8().s[9]++;
    return withRateLimit;
  }
});
const _server =
/* istanbul ignore next */
(cov_3qcnrehs8().s[10]++, require("next/server"));
const _rateLimiting =
/* istanbul ignore next */
(cov_3qcnrehs8().s[11]++, require("../utils/rateLimiting"));
class RateLimitMiddleware {
  constructor(config =
  /* istanbul ignore next */
  (cov_3qcnrehs8().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_3qcnrehs8().f[7]++;
    cov_3qcnrehs8().s[12]++;
    this.responseTimes = [];
    /* istanbul ignore next */
    cov_3qcnrehs8().s[13]++;
    this.errorCount = 0;
    /* istanbul ignore next */
    cov_3qcnrehs8().s[14]++;
    this.config = {
      rateLimitConfig: _rateLimiting.rateLimitConfigs.api,
      enableAdaptiveRateLimit: false,
      enableCircuitBreaker: true,
      circuitBreakerConfig: {
        failureThreshold: 5,
        recoveryTimeout: 60000,
        successThreshold: 3
      },
      excludePaths: ['/api/health', '/api/metrics'],
      includePaths: [],
      customKeyGenerator: req => {
        /* istanbul ignore next */
        cov_3qcnrehs8().f[8]++;
        cov_3qcnrehs8().s[15]++;
        return this.getClientIdentifier(req);
      },
      onLimitReached: () => {
        /* istanbul ignore next */
        cov_3qcnrehs8().f[9]++;
      },
      enableMetrics: true,
      ...config
    };
    // Initialize rate limiter
    /* istanbul ignore next */
    cov_3qcnrehs8().s[16]++;
    if (this.config.enableAdaptiveRateLimit) {
      /* istanbul ignore next */
      cov_3qcnrehs8().b[1][0]++;
      cov_3qcnrehs8().s[17]++;
      this.rateLimiter = new _rateLimiting.AdaptiveRateLimiter({
        ...this.config.rateLimitConfig,
        keyGenerator: this.config.customKeyGenerator,
        onLimitReached: this.config.onLimitReached
      });
    } else {
      /* istanbul ignore next */
      cov_3qcnrehs8().b[1][1]++;
      cov_3qcnrehs8().s[18]++;
      this.rateLimiter = new _rateLimiting.RateLimiter({
        ...this.config.rateLimitConfig,
        keyGenerator: this.config.customKeyGenerator,
        onLimitReached: this.config.onLimitReached
      });
    }
    // Initialize circuit breaker
    /* istanbul ignore next */
    cov_3qcnrehs8().s[19]++;
    if (this.config.enableCircuitBreaker) {
      /* istanbul ignore next */
      cov_3qcnrehs8().b[2][0]++;
      cov_3qcnrehs8().s[20]++;
      this.circuitBreaker = new _rateLimiting.CircuitBreaker(this.config.circuitBreakerConfig.failureThreshold, this.config.circuitBreakerConfig.recoveryTimeout, this.config.circuitBreakerConfig.successThreshold);
    } else
    /* istanbul ignore next */
    {
      cov_3qcnrehs8().b[2][1]++;
    }
    // Initialize metrics
    cov_3qcnrehs8().s[21]++;
    this.metrics = {
      totalRequests: 0,
      blockedRequests: 0,
      averageResponseTime: 0,
      errorRate: 0,
      lastResetTime: Date.now()
    };
  }
  getClientIdentifier(req) {
    /* istanbul ignore next */
    cov_3qcnrehs8().f[10]++;
    // Try to get real IP from various headers
    const forwarded =
    /* istanbul ignore next */
    (cov_3qcnrehs8().s[22]++, req.headers.get('x-forwarded-for'));
    const realIp =
    /* istanbul ignore next */
    (cov_3qcnrehs8().s[23]++, req.headers.get('x-real-ip'));
    const cfConnectingIp =
    /* istanbul ignore next */
    (cov_3qcnrehs8().s[24]++, req.headers.get('cf-connecting-ip'));
    let ip =
    /* istanbul ignore next */
    (cov_3qcnrehs8().s[25]++,
    /* istanbul ignore next */
    (cov_3qcnrehs8().b[3][0]++, forwarded?.split(',')[0]) ||
    /* istanbul ignore next */
    (cov_3qcnrehs8().b[3][1]++, realIp) ||
    /* istanbul ignore next */
    (cov_3qcnrehs8().b[3][2]++, cfConnectingIp));
    // Fallback to connection remote address
    /* istanbul ignore next */
    cov_3qcnrehs8().s[26]++;
    if (
    /* istanbul ignore next */
    (cov_3qcnrehs8().b[5][0]++, !ip) &&
    /* istanbul ignore next */
    (cov_3qcnrehs8().b[5][1]++, req.ip)) {
      /* istanbul ignore next */
      cov_3qcnrehs8().b[4][0]++;
      cov_3qcnrehs8().s[27]++;
      ip = req.ip;
    } else
    /* istanbul ignore next */
    {
      cov_3qcnrehs8().b[4][1]++;
    }
    // Final fallback
    cov_3qcnrehs8().s[28]++;
    if (!ip) {
      /* istanbul ignore next */
      cov_3qcnrehs8().b[6][0]++;
      cov_3qcnrehs8().s[29]++;
      ip = 'unknown';
    } else
    /* istanbul ignore next */
    {
      cov_3qcnrehs8().b[6][1]++;
    }
    // Include user agent for more specific identification
    const userAgent =
    /* istanbul ignore next */
    (cov_3qcnrehs8().s[30]++,
    /* istanbul ignore next */
    (cov_3qcnrehs8().b[7][0]++, req.headers.get('user-agent')) ||
    /* istanbul ignore next */
    (cov_3qcnrehs8().b[7][1]++, 'unknown'));
    const userAgentHash =
    /* istanbul ignore next */
    (cov_3qcnrehs8().s[31]++, this.simpleHash(userAgent));
    /* istanbul ignore next */
    cov_3qcnrehs8().s[32]++;
    return `${ip}:${userAgentHash}`;
  }
  simpleHash(str) {
    /* istanbul ignore next */
    cov_3qcnrehs8().f[11]++;
    let hash =
    /* istanbul ignore next */
    (cov_3qcnrehs8().s[33]++, 0);
    /* istanbul ignore next */
    cov_3qcnrehs8().s[34]++;
    for (let i =
    /* istanbul ignore next */
    (cov_3qcnrehs8().s[35]++, 0); i < str.length; i++) {
      const char =
      /* istanbul ignore next */
      (cov_3qcnrehs8().s[36]++, str.charCodeAt(i));
      /* istanbul ignore next */
      cov_3qcnrehs8().s[37]++;
      hash = (hash << 5) - hash + char;
      /* istanbul ignore next */
      cov_3qcnrehs8().s[38]++;
      hash = hash & hash; // Convert to 32-bit integer
    }
    /* istanbul ignore next */
    cov_3qcnrehs8().s[39]++;
    return Math.abs(hash).toString(36);
  }
  shouldApplyRateLimit(pathname) {
    /* istanbul ignore next */
    cov_3qcnrehs8().f[12]++;
    cov_3qcnrehs8().s[40]++;
    // Check exclude paths
    if (this.config.excludePaths.some(path => {
      /* istanbul ignore next */
      cov_3qcnrehs8().f[13]++;
      cov_3qcnrehs8().s[41]++;
      return pathname.startsWith(path);
    })) {
      /* istanbul ignore next */
      cov_3qcnrehs8().b[8][0]++;
      cov_3qcnrehs8().s[42]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_3qcnrehs8().b[8][1]++;
    }
    // Check include paths (if specified, only apply to these paths)
    cov_3qcnrehs8().s[43]++;
    if (this.config.includePaths.length > 0) {
      /* istanbul ignore next */
      cov_3qcnrehs8().b[9][0]++;
      cov_3qcnrehs8().s[44]++;
      return this.config.includePaths.some(path => {
        /* istanbul ignore next */
        cov_3qcnrehs8().f[14]++;
        cov_3qcnrehs8().s[45]++;
        return pathname.startsWith(path);
      });
    } else
    /* istanbul ignore next */
    {
      cov_3qcnrehs8().b[9][1]++;
    }
    // Default: apply to all API routes
    cov_3qcnrehs8().s[46]++;
    return pathname.startsWith('/api/');
  }
  updateMetrics(responseTime, wasBlocked, wasError) {
    /* istanbul ignore next */
    cov_3qcnrehs8().f[15]++;
    cov_3qcnrehs8().s[47]++;
    if (!this.config.enableMetrics) {
      /* istanbul ignore next */
      cov_3qcnrehs8().b[10][0]++;
      cov_3qcnrehs8().s[48]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_3qcnrehs8().b[10][1]++;
    }
    cov_3qcnrehs8().s[49]++;
    this.metrics.totalRequests++;
    /* istanbul ignore next */
    cov_3qcnrehs8().s[50]++;
    if (wasBlocked) {
      /* istanbul ignore next */
      cov_3qcnrehs8().b[11][0]++;
      cov_3qcnrehs8().s[51]++;
      this.metrics.blockedRequests++;
    } else {
      /* istanbul ignore next */
      cov_3qcnrehs8().b[11][1]++;
      cov_3qcnrehs8().s[52]++;
      this.responseTimes.push(responseTime);
      // Keep only last 1000 response times
      /* istanbul ignore next */
      cov_3qcnrehs8().s[53]++;
      if (this.responseTimes.length > 1000) {
        /* istanbul ignore next */
        cov_3qcnrehs8().b[12][0]++;
        cov_3qcnrehs8().s[54]++;
        this.responseTimes = this.responseTimes.slice(-1000);
      } else
      /* istanbul ignore next */
      {
        cov_3qcnrehs8().b[12][1]++;
      }
      cov_3qcnrehs8().s[55]++;
      this.metrics.averageResponseTime = this.responseTimes.reduce((a, b) => {
        /* istanbul ignore next */
        cov_3qcnrehs8().f[16]++;
        cov_3qcnrehs8().s[56]++;
        return a + b;
      }, 0) / this.responseTimes.length;
    }
    /* istanbul ignore next */
    cov_3qcnrehs8().s[57]++;
    if (wasError) {
      /* istanbul ignore next */
      cov_3qcnrehs8().b[13][0]++;
      cov_3qcnrehs8().s[58]++;
      this.errorCount++;
    } else
    /* istanbul ignore next */
    {
      cov_3qcnrehs8().b[13][1]++;
    }
    cov_3qcnrehs8().s[59]++;
    this.metrics.errorRate = this.errorCount / this.metrics.totalRequests * 100;
  }
  createRateLimitResponse(remaining, resetTime) {
    /* istanbul ignore next */
    cov_3qcnrehs8().f[17]++;
    const retryAfter =
    /* istanbul ignore next */
    (cov_3qcnrehs8().s[60]++, Math.ceil((resetTime - Date.now()) / 1000));
    const response =
    /* istanbul ignore next */
    (cov_3qcnrehs8().s[61]++, _server.NextResponse.json({
      error: 'Too Many Requests',
      message: 'Rate limit exceeded. Please try again later.',
      retryAfter
    }, {
      status: 429
    }));
    // Add rate limit headers
    /* istanbul ignore next */
    cov_3qcnrehs8().s[62]++;
    response.headers.set('X-RateLimit-Limit', this.config.rateLimitConfig.maxRequests.toString());
    /* istanbul ignore next */
    cov_3qcnrehs8().s[63]++;
    response.headers.set('X-RateLimit-Remaining', remaining.toString());
    /* istanbul ignore next */
    cov_3qcnrehs8().s[64]++;
    response.headers.set('X-RateLimit-Reset', new Date(resetTime).toISOString());
    /* istanbul ignore next */
    cov_3qcnrehs8().s[65]++;
    response.headers.set('Retry-After', retryAfter.toString());
    /* istanbul ignore next */
    cov_3qcnrehs8().s[66]++;
    return response;
  }
  createCircuitBreakerResponse() {
    /* istanbul ignore next */
    cov_3qcnrehs8().f[18]++;
    cov_3qcnrehs8().s[67]++;
    return _server.NextResponse.json({
      error: 'Service Unavailable',
      message: 'Service is temporarily unavailable. Please try again later.'
    }, {
      status: 503
    });
  }
  async handle(req) {
    /* istanbul ignore next */
    cov_3qcnrehs8().f[19]++;
    const startTime =
    /* istanbul ignore next */
    (cov_3qcnrehs8().s[68]++, Date.now());
    const pathname =
    /* istanbul ignore next */
    (cov_3qcnrehs8().s[69]++, req.nextUrl.pathname);
    // Skip rate limiting for excluded paths
    /* istanbul ignore next */
    cov_3qcnrehs8().s[70]++;
    if (!this.shouldApplyRateLimit(pathname)) {
      /* istanbul ignore next */
      cov_3qcnrehs8().b[14][0]++;
      cov_3qcnrehs8().s[71]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_3qcnrehs8().b[14][1]++;
    }
    cov_3qcnrehs8().s[72]++;
    try {
      /* istanbul ignore next */
      cov_3qcnrehs8().s[73]++;
      // Check circuit breaker
      if (this.circuitBreaker) {
        /* istanbul ignore next */
        cov_3qcnrehs8().b[15][0]++;
        const breakerState =
        /* istanbul ignore next */
        (cov_3qcnrehs8().s[74]++, this.circuitBreaker.getState());
        /* istanbul ignore next */
        cov_3qcnrehs8().s[75]++;
        if (breakerState.state === 'open') {
          /* istanbul ignore next */
          cov_3qcnrehs8().b[16][0]++;
          cov_3qcnrehs8().s[76]++;
          this.updateMetrics(Date.now() - startTime, false, true);
          /* istanbul ignore next */
          cov_3qcnrehs8().s[77]++;
          return this.createCircuitBreakerResponse();
        } else
        /* istanbul ignore next */
        {
          cov_3qcnrehs8().b[16][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_3qcnrehs8().b[15][1]++;
      }
      // Check rate limit
      const rateLimitResult =
      /* istanbul ignore next */
      (cov_3qcnrehs8().s[78]++, this.rateLimiter.check(req));
      /* istanbul ignore next */
      cov_3qcnrehs8().s[79]++;
      if (!rateLimitResult.allowed) {
        /* istanbul ignore next */
        cov_3qcnrehs8().b[17][0]++;
        cov_3qcnrehs8().s[80]++;
        this.updateMetrics(Date.now() - startTime, true, false);
        /* istanbul ignore next */
        cov_3qcnrehs8().s[81]++;
        return this.createRateLimitResponse(rateLimitResult.remaining, rateLimitResult.resetTime);
      } else
      /* istanbul ignore next */
      {
        cov_3qcnrehs8().b[17][1]++;
      }
      // Request is allowed, continue processing
      cov_3qcnrehs8().s[82]++;
      return null;
    } catch (error) {
      /* istanbul ignore next */
      cov_3qcnrehs8().s[83]++;
      console.error('Rate limit middleware error:', error);
      /* istanbul ignore next */
      cov_3qcnrehs8().s[84]++;
      this.updateMetrics(Date.now() - startTime, false, true);
      // Fail open - allow request to continue
      /* istanbul ignore next */
      cov_3qcnrehs8().s[85]++;
      return null;
    }
  }
  getMetrics() {
    /* istanbul ignore next */
    cov_3qcnrehs8().f[20]++;
    const result =
    /* istanbul ignore next */
    (cov_3qcnrehs8().s[86]++, {
      ...this.metrics,
      rateLimiterStats: this.rateLimiter.getStats()
    });
    /* istanbul ignore next */
    cov_3qcnrehs8().s[87]++;
    if (this.circuitBreaker) {
      /* istanbul ignore next */
      cov_3qcnrehs8().b[18][0]++;
      cov_3qcnrehs8().s[88]++;
      result.circuitBreakerState = this.circuitBreaker.getState();
    } else
    /* istanbul ignore next */
    {
      cov_3qcnrehs8().b[18][1]++;
    }
    cov_3qcnrehs8().s[89]++;
    if (this.rateLimiter instanceof _rateLimiting.AdaptiveRateLimiter) {
      /* istanbul ignore next */
      cov_3qcnrehs8().b[19][0]++;
      cov_3qcnrehs8().s[90]++;
      result.systemLoad = this.rateLimiter.getSystemLoad();
    } else
    /* istanbul ignore next */
    {
      cov_3qcnrehs8().b[19][1]++;
    }
    cov_3qcnrehs8().s[91]++;
    return result;
  }
  resetMetrics() {
    /* istanbul ignore next */
    cov_3qcnrehs8().f[21]++;
    cov_3qcnrehs8().s[92]++;
    this.metrics = {
      totalRequests: 0,
      blockedRequests: 0,
      averageResponseTime: 0,
      errorRate: 0,
      lastResetTime: Date.now()
    };
    /* istanbul ignore next */
    cov_3qcnrehs8().s[93]++;
    this.responseTimes = [];
    /* istanbul ignore next */
    cov_3qcnrehs8().s[94]++;
    this.errorCount = 0;
  }
  destroy() {
    /* istanbul ignore next */
    cov_3qcnrehs8().f[22]++;
    cov_3qcnrehs8().s[95]++;
    if (this.rateLimiter instanceof _rateLimiting.AdaptiveRateLimiter) {
      /* istanbul ignore next */
      cov_3qcnrehs8().b[20][0]++;
      cov_3qcnrehs8().s[96]++;
      this.rateLimiter.destroy();
    } else {
      /* istanbul ignore next */
      cov_3qcnrehs8().b[20][1]++;
      cov_3qcnrehs8().s[97]++;
      this.rateLimiter.destroy();
    }
  }
}
// Global middleware instance
let globalMiddleware =
/* istanbul ignore next */
(cov_3qcnrehs8().s[98]++, null);
function initializeRateLimitMiddleware(config =
/* istanbul ignore next */
(cov_3qcnrehs8().b[21][0]++, {})) {
  /* istanbul ignore next */
  cov_3qcnrehs8().f[23]++;
  cov_3qcnrehs8().s[99]++;
  if (globalMiddleware) {
    /* istanbul ignore next */
    cov_3qcnrehs8().b[22][0]++;
    cov_3qcnrehs8().s[100]++;
    globalMiddleware.destroy();
  } else
  /* istanbul ignore next */
  {
    cov_3qcnrehs8().b[22][1]++;
  }
  cov_3qcnrehs8().s[101]++;
  globalMiddleware = new RateLimitMiddleware(config);
}
function getRateLimitMiddleware() {
  /* istanbul ignore next */
  cov_3qcnrehs8().f[24]++;
  cov_3qcnrehs8().s[102]++;
  if (!globalMiddleware) {
    /* istanbul ignore next */
    cov_3qcnrehs8().b[23][0]++;
    cov_3qcnrehs8().s[103]++;
    globalMiddleware = new RateLimitMiddleware();
  } else
  /* istanbul ignore next */
  {
    cov_3qcnrehs8().b[23][1]++;
  }
  cov_3qcnrehs8().s[104]++;
  return globalMiddleware;
}
async function rateLimitMiddleware(req) {
  /* istanbul ignore next */
  cov_3qcnrehs8().f[25]++;
  const middleware =
  /* istanbul ignore next */
  (cov_3qcnrehs8().s[105]++, getRateLimitMiddleware());
  /* istanbul ignore next */
  cov_3qcnrehs8().s[106]++;
  return middleware.handle(req);
}
function withRateLimit(handler, config) {
  /* istanbul ignore next */
  cov_3qcnrehs8().f[26]++;
  const middleware =
  /* istanbul ignore next */
  (cov_3qcnrehs8().s[107]++, new RateLimitMiddleware(config));
  /* istanbul ignore next */
  cov_3qcnrehs8().s[108]++;
  return async req => {
    /* istanbul ignore next */
    cov_3qcnrehs8().f[27]++;
    const rateLimitResponse =
    /* istanbul ignore next */
    (cov_3qcnrehs8().s[109]++, await middleware.handle(req));
    /* istanbul ignore next */
    cov_3qcnrehs8().s[110]++;
    if (rateLimitResponse) {
      /* istanbul ignore next */
      cov_3qcnrehs8().b[24][0]++;
      cov_3qcnrehs8().s[111]++;
      return rateLimitResponse;
    } else
    /* istanbul ignore next */
    {
      cov_3qcnrehs8().b[24][1]++;
    }
    cov_3qcnrehs8().s[112]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_3qcnrehs8().s[113]++, await handler(req));
      // Add rate limit headers to successful responses
      const rateLimitResult =
      /* istanbul ignore next */
      (cov_3qcnrehs8().s[114]++, middleware.getMetrics().rateLimiterStats);
      /* istanbul ignore next */
      cov_3qcnrehs8().s[115]++;
      if (rateLimitResult) {
        /* istanbul ignore next */
        cov_3qcnrehs8().b[25][0]++;
        cov_3qcnrehs8().s[116]++;
        response.headers.set('X-RateLimit-Limit',
        /* istanbul ignore next */
        (cov_3qcnrehs8().b[26][0]++, config?.rateLimitConfig?.maxRequests?.toString()) ||
        /* istanbul ignore next */
        (cov_3qcnrehs8().b[26][1]++, '60'));
        /* istanbul ignore next */
        cov_3qcnrehs8().s[117]++;
        response.headers.set('X-RateLimit-Remaining', '0'); // Would need to track this properly
      } else
      /* istanbul ignore next */
      {
        cov_3qcnrehs8().b[25][1]++;
      }
      cov_3qcnrehs8().s[118]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_3qcnrehs8().s[119]++;
      // Handle circuit breaker for failed requests
      throw error;
    }
  };
}
const middlewareConfigs =
/* istanbul ignore next */
(cov_3qcnrehs8().s[120]++, {
  strict: {
    rateLimitConfig: _rateLimiting.rateLimitConfigs.strict,
    enableAdaptiveRateLimit: true,
    enableCircuitBreaker: true
  },
  moderate: {
    rateLimitConfig: _rateLimiting.rateLimitConfigs.moderate,
    enableAdaptiveRateLimit: false,
    enableCircuitBreaker: true
  },
  lenient: {
    rateLimitConfig: _rateLimiting.rateLimitConfigs.lenient,
    enableAdaptiveRateLimit: false,
    enableCircuitBreaker: false
  },
  api: {
    rateLimitConfig: _rateLimiting.rateLimitConfigs.api,
    enableAdaptiveRateLimit: true,
    enableCircuitBreaker: true,
    includePaths: ['/api/']
  },
  auth: {
    rateLimitConfig: _rateLimiting.rateLimitConfigs.auth,
    enableAdaptiveRateLimit: false,
    enableCircuitBreaker: true,
    includePaths: ['/api/auth/', '/api/login', '/api/register']
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,