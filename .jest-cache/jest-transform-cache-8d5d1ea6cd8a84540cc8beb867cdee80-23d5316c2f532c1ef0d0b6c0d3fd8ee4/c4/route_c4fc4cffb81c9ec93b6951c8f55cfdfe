d4f4aae55c4898af1e5ae34a17a8b30f
"use strict";

/* istanbul ignore next */
function cov_17n5gbog93() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\app\\api\\clients\\route.ts";
  var hash = "517ead3a4b01eaefe042070b0fbacd0491b941f1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\app\\api\\clients\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 40,
          column: 1
        }
      },
      "8": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 58,
          column: 5
        }
      },
      "9": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 63
        }
      },
      "10": {
        start: {
          line: 44,
          column: 37
        },
        end: {
          line: 44,
          column: 61
        }
      },
      "11": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 49,
          column: 11
        }
      },
      "12": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 56
        }
      },
      "13": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 57,
          column: 11
        }
      },
      "14": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 86,
          column: 5
        }
      },
      "15": {
        start: {
          line: 62,
          column: 21
        },
        end: {
          line: 62,
          column: 41
        }
      },
      "16": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 63
        }
      },
      "17": {
        start: {
          line: 64,
          column: 37
        },
        end: {
          line: 64,
          column: 61
        }
      },
      "18": {
        start: {
          line: 65,
          column: 26
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "19": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 36
        }
      },
      "20": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 77,
          column: 11
        }
      },
      "21": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 55
        }
      },
      "22": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 85,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 41,
            column: 15
          },
          end: {
            line: 41,
            column: 18
          }
        },
        loc: {
          start: {
            line: 41,
            column: 28
          },
          end: {
            line: 59,
            column: 1
          }
        },
        line: 41
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 44,
            column: 26
          },
          end: {
            line: 44,
            column: 27
          }
        },
        loc: {
          start: {
            line: 44,
            column: 37
          },
          end: {
            line: 44,
            column: 61
          }
        },
        line: 44
      },
      "5": {
        name: "POST",
        decl: {
          start: {
            line: 60,
            column: 15
          },
          end: {
            line: 60,
            column: 19
          }
        },
        loc: {
          start: {
            line: 60,
            column: 29
          },
          end: {
            line: 87,
            column: 1
          }
        },
        line: 60
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 64,
            column: 26
          },
          end: {
            line: 64,
            column: 27
          }
        },
        loc: {
          start: {
            line: 64,
            column: 37
          },
          end: {
            line: 64,
            column: 61
          }
        },
        line: 64
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {},
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\app\\api\\clients\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server'\n\n// Mock client data\nconst mockClients = [\n  {\n    id: '1',\n    name: 'Acme Corporation',\n    email: 'contact@acme.com',\n    phone: '+1-555-0123',\n    status: 'active',\n    created_at: '2024-01-15T10:00:00Z',\n    updated_at: '2024-01-20T15:30:00Z'\n  },\n  {\n    id: '2',\n    name: 'TechStart Inc',\n    email: 'hello@techstart.com',\n    phone: '+1-555-0456',\n    status: 'active',\n    created_at: '2024-01-10T09:00:00Z',\n    updated_at: '2024-01-25T11:45:00Z'\n  }\n]\n\n// GET /api/clients\nexport async function GET(request: NextRequest) {\n  try {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 100))\n    \n    return NextResponse.json({\n      success: true,\n      data: mockClients,\n      total: mockClients.length\n    })\n  } catch (error) {\n    console.error('Error fetching clients:', error)\n    return NextResponse.json(\n      { success: false, error: 'Failed to fetch clients' },\n      { status: 500 }\n    )\n  }\n}\n\n// POST /api/clients\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    \n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 200))\n    \n    const newClient = {\n      id: Date.now().toString(),\n      ...body,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    }\n    \n    mockClients.push(newClient)\n    \n    return NextResponse.json({\n      success: true,\n      data: newClient\n    }, { status: 201 })\n  } catch (error) {\n    console.error('Error creating client:', error)\n    return NextResponse.json(\n      { success: false, error: 'Failed to create client' },\n      { status: 500 }\n    )\n  }\n}"],
      names: ["GET", "POST", "mockClients", "id", "name", "email", "phone", "status", "created_at", "updated_at", "request", "Promise", "resolve", "setTimeout", "NextResponse", "json", "success", "data", "total", "length", "error", "console", "body", "newClient", "Date", "now", "toString", "toISOString", "push"],
      mappings: ";;;;;;;;;;;QAyBsBA;eAAAA;;QAoBAC;eAAAA;;;wBA7CoB;AAE1C,mBAAmB;AACnB,MAAMC,cAAc;IAClB;QACEC,IAAI;QACJC,MAAM;QACNC,OAAO;QACPC,OAAO;QACPC,QAAQ;QACRC,YAAY;QACZC,YAAY;IACd;IACA;QACEN,IAAI;QACJC,MAAM;QACNC,OAAO;QACPC,OAAO;QACPC,QAAQ;QACRC,YAAY;QACZC,YAAY;IACd;CACD;AAGM,eAAeT,IAAIU,OAAoB;IAC5C,IAAI;QACF,qBAAqB;QACrB,MAAM,IAAIC,QAAQC,CAAAA,UAAWC,WAAWD,SAAS;QAEjD,OAAOE,oBAAY,CAACC,IAAI,CAAC;YACvBC,SAAS;YACTC,MAAMf;YACNgB,OAAOhB,YAAYiB,MAAM;QAC3B;IACF,EAAE,OAAOC,OAAO;QACdC,QAAQD,KAAK,CAAC,2BAA2BA;QACzC,OAAON,oBAAY,CAACC,IAAI,CACtB;YAAEC,SAAS;YAAOI,OAAO;QAA0B,GACnD;YAAEb,QAAQ;QAAI;IAElB;AACF;AAGO,eAAeN,KAAKS,OAAoB;IAC7C,IAAI;QACF,MAAMY,OAAO,MAAMZ,QAAQK,IAAI;QAE/B,qBAAqB;QACrB,MAAM,IAAIJ,QAAQC,CAAAA,UAAWC,WAAWD,SAAS;QAEjD,MAAMW,YAAY;YAChBpB,IAAIqB,KAAKC,GAAG,GAAGC,QAAQ;YACvB,GAAGJ,IAAI;YACPd,YAAY,IAAIgB,OAAOG,WAAW;YAClClB,YAAY,IAAIe,OAAOG,WAAW;QACpC;QAEAzB,YAAY0B,IAAI,CAACL;QAEjB,OAAOT,oBAAY,CAACC,IAAI,CAAC;YACvBC,SAAS;YACTC,MAAMM;QACR,GAAG;YAAEhB,QAAQ;QAAI;IACnB,EAAE,OAAOa,OAAO;QACdC,QAAQD,KAAK,CAAC,0BAA0BA;QACxC,OAAON,oBAAY,CAACC,IAAI,CACtB;YAAEC,SAAS;YAAOI,OAAO;QAA0B,GACnD;YAAEb,QAAQ;QAAI;IAElB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "517ead3a4b01eaefe042070b0fbacd0491b941f1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_17n5gbog93 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_17n5gbog93();
cov_17n5gbog93().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_17n5gbog93().f[0]++;
  cov_17n5gbog93().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_17n5gbog93().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_17n5gbog93().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_17n5gbog93().f[1]++;
    cov_17n5gbog93().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_17n5gbog93().f[2]++;
    cov_17n5gbog93().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_17n5gbog93().s[6]++, require("next/server"));
// Mock client data
const mockClients =
/* istanbul ignore next */
(cov_17n5gbog93().s[7]++, [{
  id: '1',
  name: 'Acme Corporation',
  email: 'contact@acme.com',
  phone: '+1-555-0123',
  status: 'active',
  created_at: '2024-01-15T10:00:00Z',
  updated_at: '2024-01-20T15:30:00Z'
}, {
  id: '2',
  name: 'TechStart Inc',
  email: 'hello@techstart.com',
  phone: '+1-555-0456',
  status: 'active',
  created_at: '2024-01-10T09:00:00Z',
  updated_at: '2024-01-25T11:45:00Z'
}]);
async function GET(request) {
  /* istanbul ignore next */
  cov_17n5gbog93().f[3]++;
  cov_17n5gbog93().s[8]++;
  try {
    /* istanbul ignore next */
    cov_17n5gbog93().s[9]++;
    // Simulate API delay
    await new Promise(resolve => {
      /* istanbul ignore next */
      cov_17n5gbog93().f[4]++;
      cov_17n5gbog93().s[10]++;
      return setTimeout(resolve, 100);
    });
    /* istanbul ignore next */
    cov_17n5gbog93().s[11]++;
    return _server.NextResponse.json({
      success: true,
      data: mockClients,
      total: mockClients.length
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_17n5gbog93().s[12]++;
    console.error('Error fetching clients:', error);
    /* istanbul ignore next */
    cov_17n5gbog93().s[13]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Failed to fetch clients'
    }, {
      status: 500
    });
  }
}
async function POST(request) {
  /* istanbul ignore next */
  cov_17n5gbog93().f[5]++;
  cov_17n5gbog93().s[14]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_17n5gbog93().s[15]++, await request.json());
    // Simulate API delay
    /* istanbul ignore next */
    cov_17n5gbog93().s[16]++;
    await new Promise(resolve => {
      /* istanbul ignore next */
      cov_17n5gbog93().f[6]++;
      cov_17n5gbog93().s[17]++;
      return setTimeout(resolve, 200);
    });
    const newClient =
    /* istanbul ignore next */
    (cov_17n5gbog93().s[18]++, {
      id: Date.now().toString(),
      ...body,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_17n5gbog93().s[19]++;
    mockClients.push(newClient);
    /* istanbul ignore next */
    cov_17n5gbog93().s[20]++;
    return _server.NextResponse.json({
      success: true,
      data: newClient
    }, {
      status: 201
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_17n5gbog93().s[21]++;
    console.error('Error creating client:', error);
    /* istanbul ignore next */
    cov_17n5gbog93().s[22]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Failed to create client'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHRVQiLCJjb3ZfMTduNWdib2c5MyIsImYiLCJzIiwiUE9TVCIsIm1vY2tDbGllbnRzIiwiaWQiLCJuYW1lIiwiZW1haWwiLCJwaG9uZSIsInN0YXR1cyIsImNyZWF0ZWRfYXQiLCJ1cGRhdGVkX2F0IiwicmVxdWVzdCIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwic3VjY2VzcyIsImRhdGEiLCJ0b3RhbCIsImxlbmd0aCIsImVycm9yIiwiY29uc29sZSIsImJvZHkiLCJuZXdDbGllbnQiLCJEYXRlIiwibm93IiwidG9TdHJpbmciLCJ0b0lTT1N0cmluZyIsInB1c2giXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGNoYXNlXFxEb3dubG9hZHNcXGNybSAoMzIpXFxzcmNcXGFwcFxcYXBpXFxjbGllbnRzXFxyb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInXG5cbi8vIE1vY2sgY2xpZW50IGRhdGFcbmNvbnN0IG1vY2tDbGllbnRzID0gW1xuICB7XG4gICAgaWQ6ICcxJyxcbiAgICBuYW1lOiAnQWNtZSBDb3Jwb3JhdGlvbicsXG4gICAgZW1haWw6ICdjb250YWN0QGFjbWUuY29tJyxcbiAgICBwaG9uZTogJysxLTU1NS0wMTIzJyxcbiAgICBzdGF0dXM6ICdhY3RpdmUnLFxuICAgIGNyZWF0ZWRfYXQ6ICcyMDI0LTAxLTE1VDEwOjAwOjAwWicsXG4gICAgdXBkYXRlZF9hdDogJzIwMjQtMDEtMjBUMTU6MzA6MDBaJ1xuICB9LFxuICB7XG4gICAgaWQ6ICcyJyxcbiAgICBuYW1lOiAnVGVjaFN0YXJ0IEluYycsXG4gICAgZW1haWw6ICdoZWxsb0B0ZWNoc3RhcnQuY29tJyxcbiAgICBwaG9uZTogJysxLTU1NS0wNDU2JyxcbiAgICBzdGF0dXM6ICdhY3RpdmUnLFxuICAgIGNyZWF0ZWRfYXQ6ICcyMDI0LTAxLTEwVDA5OjAwOjAwWicsXG4gICAgdXBkYXRlZF9hdDogJzIwMjQtMDEtMjVUMTE6NDU6MDBaJ1xuICB9XG5dXG5cbi8vIEdFVCAvYXBpL2NsaWVudHNcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICAvLyBTaW11bGF0ZSBBUEkgZGVsYXlcbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwKSlcbiAgICBcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IG1vY2tDbGllbnRzLFxuICAgICAgdG90YWw6IG1vY2tDbGllbnRzLmxlbmd0aFxuICAgIH0pXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgY2xpZW50czonLCBlcnJvcilcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ0ZhaWxlZCB0byBmZXRjaCBjbGllbnRzJyB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKVxuICB9XG59XG5cbi8vIFBPU1QgL2FwaS9jbGllbnRzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKVxuICAgIFxuICAgIC8vIFNpbXVsYXRlIEFQSSBkZWxheVxuICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAyMDApKVxuICAgIFxuICAgIGNvbnN0IG5ld0NsaWVudCA9IHtcbiAgICAgIGlkOiBEYXRlLm5vdygpLnRvU3RyaW5nKCksXG4gICAgICAuLi5ib2R5LFxuICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgfVxuICAgIFxuICAgIG1vY2tDbGllbnRzLnB1c2gobmV3Q2xpZW50KVxuICAgIFxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YTogbmV3Q2xpZW50XG4gICAgfSwgeyBzdGF0dXM6IDIwMSB9KVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIGNsaWVudDonLCBlcnJvcilcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ0ZhaWxlZCB0byBjcmVhdGUgY2xpZW50JyB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKVxuICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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