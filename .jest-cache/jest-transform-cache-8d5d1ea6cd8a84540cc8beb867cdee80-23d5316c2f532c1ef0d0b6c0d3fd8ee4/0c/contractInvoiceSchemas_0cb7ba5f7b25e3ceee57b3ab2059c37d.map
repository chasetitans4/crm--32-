{"version":3,"names":["contractSchema","cov_2a189ctbe3","f","s","invoiceSchema","itemSchema","proposalSchema","quoteDataSchema","quoteSchema","_zod","z","object","id","string","optional","description","min","quantity","number","price","total","clientId","invoiceNumber","clientName","clientEmail","email","clientAddress","issueDate","union","date","dueDate","items","array","subtotal","tax","totalAmount","notes","status","enum","default","quoteId","contractNumber","contractTitle","startDate","endDate","terms","paymentSchedule","scopeOfWork","clientInfo","name","phone","company","address","projectDetails","title","priority","createdAt","updatedAt","templateId","contractContent","dynamicFieldValues","record","unknown","dynamicTerms","clientPhone","businessName","industry","pageCount","features","timeline","budget","projectPriority","finalPrice","totalHours","answers","requirements","additionalNotes"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\schemas\\contractInvoiceSchemas.ts"],"sourcesContent":["import { z } from \"zod\"\n\n// Shared item schema\nexport const itemSchema = z.object({\n  id: z.string().optional(),\n  description: z.string().min(1, \"Description is required\"),\n  quantity: z.number().min(1, \"Quantity must be at least 1\"),\n  price: z.number().min(0, \"Price cannot be negative\"),\n  total: z.number().optional(), // Calculated field: quantity * price\n})\n\n// Invoice specific schema\nexport const invoiceSchema = z.object({\n  id: z.string().optional(),\n  clientId: z.string().optional(),\n  invoiceNumber: z.string().min(1, \"Invoice number is required\"),\n  clientName: z.string().min(1, \"Client name is required\"),\n  clientEmail: z.string().email(\"Invalid email address\"),\n  clientAddress: z.string().min(1, \"Client address is required\"),\n  issueDate: z.union([z.date(), z.string()]),\n  dueDate: z.union([z.date(), z.string()]),\n  items: z.array(itemSchema).min(1, \"At least one item is required\"),\n  subtotal: z.number().optional(),\n  tax: z.number().optional(),\n  totalAmount: z.number().optional(),\n  notes: z.string().optional(),\n  status: z.enum([\"Draft\", \"Sent\", \"Paid\", \"Overdue\"]).default(\"Draft\"),\n})\n\n// Contract specific schema\nexport const contractSchema = z.object({\n  id: z.string().optional(),\n  quoteId: z.string().optional(),\n  clientId: z.string().optional(),\n  contractNumber: z.string().optional(),\n  contractTitle: z.string().min(1, \"Contract title is required\"),\n  clientName: z.string().min(1, \"Client name is required\"),\n  clientEmail: z.string().email(\"Invalid email address\"),\n  startDate: z.union([z.date(), z.string()]),\n  endDate: z.union([z.date(), z.string()]),\n  terms: z.string().min(50, \"Terms must be at least 50 characters\"),\n  totalAmount: z.number().min(0, \"Total amount cannot be negative\"),\n  paymentSchedule: z.string().min(1, \"Payment schedule is required\"),\n  scopeOfWork: z.string().min(20, \"Scope of work must be at least 20 characters\"),\n  clientInfo: z.object({\n    name: z.string(),\n    email: z.string(),\n    phone: z.string().optional(),\n    company: z.string().optional(),\n    address: z.string().optional(),\n  }).optional(),\n  projectDetails: z.object({\n    title: z.string(),\n    description: z.string(),\n  }).optional(),\n  status: z.string().optional(),\n  priority: z.string().optional(),\n  createdAt: z.string().optional(),\n  updatedAt: z.string().optional(),\n  templateId: z.string().optional(),\n  contractContent: z.string().optional(),\n  dynamicFieldValues: z.record(z.unknown()).optional(),\n  dynamicTerms: z.record(z.unknown()).optional(),\n})\n\n// Quote schema\nexport const quoteSchema = z.object({\n  id: z.string(),\n  clientId: z.string().optional(),\n  clientName: z.string().optional(),\n  clientEmail: z.string().optional(),\n  clientPhone: z.string().optional(),\n  clientAddress: z.string().optional(),\n  businessName: z.string(),\n  industry: z.string(),\n  pageCount: z.number(),\n  features: z.array(z.string()),\n  timeline: z.string(),\n  budget: z.string().optional(),\n  projectPriority: z.string().optional(),\n  finalPrice: z.number(),\n  totalHours: z.number().optional(),\n  createdAt: z.string(),\n  status: z.enum([\"draft\", \"sent\", \"approved\", \"accepted\", \"rejected\"]).default(\"draft\"),\n  answers: z.record(z.unknown()).optional(),\n  requirements: z.string().optional(),\n  additionalNotes: z.string().optional(),\n})\n\n// Proposal schema\nexport const proposalSchema = z.object({\n  id: z.string().optional(),\n  clientId: z.string().optional(),\n  clientName: z.string().optional(),\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  items: z.array(itemSchema).optional(),\n  totalAmount: z.number().optional(),\n  status: z.enum([\"draft\", \"sent\", \"approved\", \"rejected\"]).default(\"draft\"),\n  createdAt: z.string().optional(),\n  updatedAt: z.string().optional(),\n})\n\n// Type exports for convenience\nexport type Invoice = z.infer<typeof invoiceSchema>\nexport type Contract = z.infer<typeof contractSchema>\nexport type Item = z.infer<typeof itemSchema>\nexport type Quote = z.infer<typeof quoteSchema>\nexport type Proposal = z.infer<typeof proposalSchema>\n\n// Quote data structure for transfer\nexport const quoteDataSchema = z.object({\n  clientName: z.string().optional(),\n  clientEmail: z.string().optional(),\n  items: z.array(itemSchema).optional(),\n  total: z.number().optional(),\n})\n\nexport type QuoteData = z.infer<typeof quoteDataSchema>\n"],"mappings":"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","ignoreList":[]}