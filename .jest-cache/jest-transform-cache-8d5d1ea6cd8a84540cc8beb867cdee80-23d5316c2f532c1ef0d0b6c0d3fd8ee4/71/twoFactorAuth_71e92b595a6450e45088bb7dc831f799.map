{"version":3,"names":["default","cov_2f62wxhnen","f","s","_default","twoFactorAuthService","TwoFactorAuthService","generateSetup","userEmail","secret","_otplib","authenticator","generateSecret","serviceName","APP_NAME","otpauthUrl","keyuri","qrCodeUrl","_qrcode","toDataURL","backupCodes","generateBackupCodes","error","Error","verifyToken","token","cleanToken","replace","isValid","verify","verifyBackupCode","code","userBackupCodes","cleanCode","toLowerCase","codeIndex","findIndex","backupCode","b","remainingCodes","filter","_","index","codes","i","BACKUP_CODES_COUNT","Math","random","toString","substring","toUpperCase","push","generateNewBackupCodes","is2FARequired","userRole","rolesRequiring2FA","includes","validateSetupCompletion","verificationToken"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\twoFactorAuth.ts"],"sourcesContent":["import { authenticator } from 'otplib';\nimport QRCode from 'qrcode';\n\n// TwoFactorSetup and TwoFactorVerification interfaces removed - components deleted\n// Keeping internal interfaces for service functionality\n\ninterface TwoFactorSetup {\n  secret: string;\n  qrCodeUrl: string;\n  backupCodes: string[];\n}\n\ninterface TwoFactorVerification {\n  isValid: boolean;\n  remainingAttempts?: number;\n}\n\nclass TwoFactorAuthService {\n  private readonly APP_NAME = 'CRM System';\n  private readonly BACKUP_CODES_COUNT = 10;\n\n  /**\n   * Generate a new 2FA secret and QR code for user setup\n   */\n  async generateSetup(userEmail: string): Promise<TwoFactorSetup> {\n    try {\n      // Generate a secret key\n      const secret = authenticator.generateSecret();\n      \n      // Create the service name for the authenticator app\n      const serviceName = `${this.APP_NAME} (${userEmail})`;\n      \n      // Generate the otpauth URL\n      const otpauthUrl = authenticator.keyuri(userEmail, this.APP_NAME, secret);\n      \n      // Generate QR code\n      const qrCodeUrl = await QRCode.toDataURL(otpauthUrl);\n      \n      // Generate backup codes\n      const backupCodes = this.generateBackupCodes();\n      \n      return {\n        secret,\n        qrCodeUrl,\n        backupCodes\n      };\n    } catch (error) {\n      throw new Error('Failed to generate 2FA setup');\n    }\n  }\n\n  /**\n   * Verify a 2FA token\n   */\n  verifyToken(token: string, secret: string): TwoFactorVerification {\n    try {\n      // Remove any spaces or formatting from the token\n      const cleanToken = token.replace(/\\s/g, '');\n      \n      // Verify the token\n      const isValid = authenticator.verify({\n        token: cleanToken,\n        secret: secret\n      });\n      \n      return { isValid };\n    } catch (error) {\n      return { isValid: false };\n    }\n  }\n\n  /**\n   * Verify a backup code\n   */\n  verifyBackupCode(code: string, userBackupCodes: string[]): { isValid: boolean; remainingCodes: string[] } {\n    const cleanCode = code.replace(/\\s/g, '').toLowerCase();\n    const codeIndex = userBackupCodes.findIndex(backupCode => \n      backupCode.toLowerCase() === cleanCode\n    );\n    \n    if (codeIndex === -1) {\n      return { isValid: false, remainingCodes: userBackupCodes };\n    }\n    \n    // Remove the used backup code\n    const remainingCodes = userBackupCodes.filter((_, index) => index !== codeIndex);\n    \n    return { isValid: true, remainingCodes };\n  }\n\n  /**\n   * Generate backup codes for account recovery\n   */\n  private generateBackupCodes(): string[] {\n    const codes: string[] = [];\n    \n    for (let i = 0; i < this.BACKUP_CODES_COUNT; i++) {\n      // Generate 8-character alphanumeric codes\n      const code = Math.random().toString(36).substring(2, 10).toUpperCase();\n      codes.push(code);\n    }\n    \n    return codes;\n  }\n\n  /**\n   * Generate new backup codes (when user requests new ones)\n   */\n  generateNewBackupCodes(): string[] {\n    return this.generateBackupCodes();\n  }\n\n  /**\n   * Check if 2FA is required for the user based on their role\n   */\n  is2FARequired(userRole: string): boolean {\n    const rolesRequiring2FA = ['admin', 'manager', 'owner'];\n    return rolesRequiring2FA.includes(userRole.toLowerCase());\n  }\n\n  /**\n   * Validate 2FA setup completion\n   */\n  validateSetupCompletion(verificationToken: string, secret: string): boolean {\n    return this.verifyToken(verificationToken, secret).isValid;\n  }\n}\n\nexport const twoFactorAuthService = new TwoFactorAuthService();\nexport default twoFactorAuthService;"],"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","ignoreList":[]}