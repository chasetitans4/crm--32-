993b2c1fc17704a24e765c00bcac2133
"use strict";

/* istanbul ignore next */
function cov_2f62wxhnen() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\twoFactorAuth.ts";
  var hash = "4345c53922907f638d28ef6b6f5cd046e2609cff";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\twoFactorAuth.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 24
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 36
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 33
        }
      },
      "7": {
        start: {
          line: 20,
          column: 30
        },
        end: {
          line: 20,
          column: 73
        }
      },
      "8": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 24,
          column: 6
        }
      },
      "9": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "10": {
        start: {
          line: 32,
          column: 27
        },
        end: {
          line: 32,
          column: 65
        }
      },
      "11": {
        start: {
          line: 34,
          column: 32
        },
        end: {
          line: 34,
          column: 65
        }
      },
      "12": {
        start: {
          line: 36,
          column: 31
        },
        end: {
          line: 36,
          column: 93
        }
      },
      "13": {
        start: {
          line: 38,
          column: 30
        },
        end: {
          line: 38,
          column: 73
        }
      },
      "14": {
        start: {
          line: 40,
          column: 32
        },
        end: {
          line: 40,
          column: 58
        }
      },
      "15": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 45,
          column: 14
        }
      },
      "16": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 60
        }
      },
      "17": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "18": {
        start: {
          line: 55,
          column: 31
        },
        end: {
          line: 55,
          column: 55
        }
      },
      "19": {
        start: {
          line: 57,
          column: 28
        },
        end: {
          line: 60,
          column: 14
        }
      },
      "20": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 63,
          column: 14
        }
      },
      "21": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 67,
          column: 14
        }
      },
      "22": {
        start: {
          line: 73,
          column: 26
        },
        end: {
          line: 73,
          column: 63
        }
      },
      "23": {
        start: {
          line: 74,
          column: 26
        },
        end: {
          line: 74,
          column: 105
        }
      },
      "24": {
        start: {
          line: 74,
          column: 66
        },
        end: {
          line: 74,
          column: 104
        }
      },
      "25": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "26": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 79,
          column: 14
        }
      },
      "27": {
        start: {
          line: 82,
          column: 31
        },
        end: {
          line: 82,
          column: 86
        }
      },
      "28": {
        start: {
          line: 82,
          column: 66
        },
        end: {
          line: 82,
          column: 85
        }
      },
      "29": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 86,
          column: 10
        }
      },
      "30": {
        start: {
          line: 91,
          column: 22
        },
        end: {
          line: 91,
          column: 24
        }
      },
      "31": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "32": {
        start: {
          line: 92,
          column: 20
        },
        end: {
          line: 92,
          column: 21
        }
      },
      "33": {
        start: {
          line: 94,
          column: 25
        },
        end: {
          line: 94,
          column: 82
        }
      },
      "34": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 29
        }
      },
      "35": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 21
        }
      },
      "36": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 42
        }
      },
      "37": {
        start: {
          line: 107,
          column: 34
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "38": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 66
        }
      },
      "39": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 67
        }
      },
      "40": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 37
        }
      },
      "41": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 37
        }
      },
      "42": {
        start: {
          line: 124,
          column: 29
        },
        end: {
          line: 124,
          column: 55
        }
      },
      "43": {
        start: {
          line: 125,
          column: 17
        },
        end: {
          line: 125,
          column: 37
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 19
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 32
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 21,
            column: 9
          },
          end: {
            line: 21,
            column: 33
          }
        },
        loc: {
          start: {
            line: 21,
            column: 39
          },
          end: {
            line: 25,
            column: 1
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 29,
            column: 6
          },
          end: {
            line: 29,
            column: 7
          }
        },
        loc: {
          start: {
            line: 29,
            column: 37
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 29
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 52,
            column: 6
          },
          end: {
            line: 52,
            column: 7
          }
        },
        loc: {
          start: {
            line: 52,
            column: 33
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 52
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 72,
            column: 6
          },
          end: {
            line: 72,
            column: 7
          }
        },
        loc: {
          start: {
            line: 72,
            column: 46
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 72
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 74,
            column: 52
          },
          end: {
            line: 74,
            column: 53
          }
        },
        loc: {
          start: {
            line: 74,
            column: 66
          },
          end: {
            line: 74,
            column: 104
          }
        },
        line: 74
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 82,
            column: 54
          },
          end: {
            line: 82,
            column: 55
          }
        },
        loc: {
          start: {
            line: 82,
            column: 66
          },
          end: {
            line: 82,
            column: 85
          }
        },
        line: 82
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 90,
            column: 6
          },
          end: {
            line: 90,
            column: 7
          }
        },
        loc: {
          start: {
            line: 90,
            column: 28
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 90
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 101,
            column: 6
          },
          end: {
            line: 101,
            column: 7
          }
        },
        loc: {
          start: {
            line: 101,
            column: 31
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 101
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 106,
            column: 6
          },
          end: {
            line: 106,
            column: 7
          }
        },
        loc: {
          start: {
            line: 106,
            column: 30
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 106
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 116,
            column: 6
          },
          end: {
            line: 116,
            column: 7
          }
        },
        loc: {
          start: {
            line: 116,
            column: 57
          },
          end: {
            line: 118,
            column: 5
          }
        },
        line: 116
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 119,
            column: 17
          },
          end: {
            line: 122,
            column: 5
          }
        },
        line: 119
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 11
          },
          end: {
            line: 24,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 22,
            column: 35
          },
          end: {
            line: 22,
            column: 38
          }
        }, {
          start: {
            line: 22,
            column: 41
          },
          end: {
            line: 24,
            column: 5
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 22,
            column: 11
          },
          end: {
            line: 22,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 11
          },
          end: {
            line: 22,
            column: 14
          }
        }, {
          start: {
            line: 22,
            column: 18
          },
          end: {
            line: 22,
            column: 32
          }
        }],
        line: 22
      },
      "2": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\twoFactorAuth.ts"],
      sourcesContent: ["import { authenticator } from 'otplib';\nimport QRCode from 'qrcode';\n\n// TwoFactorSetup and TwoFactorVerification interfaces removed - components deleted\n// Keeping internal interfaces for service functionality\n\ninterface TwoFactorSetup {\n  secret: string;\n  qrCodeUrl: string;\n  backupCodes: string[];\n}\n\ninterface TwoFactorVerification {\n  isValid: boolean;\n  remainingAttempts?: number;\n}\n\nclass TwoFactorAuthService {\n  private readonly APP_NAME = 'CRM System';\n  private readonly BACKUP_CODES_COUNT = 10;\n\n  /**\n   * Generate a new 2FA secret and QR code for user setup\n   */\n  async generateSetup(userEmail: string): Promise<TwoFactorSetup> {\n    try {\n      // Generate a secret key\n      const secret = authenticator.generateSecret();\n      \n      // Create the service name for the authenticator app\n      const serviceName = `${this.APP_NAME} (${userEmail})`;\n      \n      // Generate the otpauth URL\n      const otpauthUrl = authenticator.keyuri(userEmail, this.APP_NAME, secret);\n      \n      // Generate QR code\n      const qrCodeUrl = await QRCode.toDataURL(otpauthUrl);\n      \n      // Generate backup codes\n      const backupCodes = this.generateBackupCodes();\n      \n      return {\n        secret,\n        qrCodeUrl,\n        backupCodes\n      };\n    } catch (error) {\n      throw new Error('Failed to generate 2FA setup');\n    }\n  }\n\n  /**\n   * Verify a 2FA token\n   */\n  verifyToken(token: string, secret: string): TwoFactorVerification {\n    try {\n      // Remove any spaces or formatting from the token\n      const cleanToken = token.replace(/\\s/g, '');\n      \n      // Verify the token\n      const isValid = authenticator.verify({\n        token: cleanToken,\n        secret: secret\n      });\n      \n      return { isValid };\n    } catch (error) {\n      return { isValid: false };\n    }\n  }\n\n  /**\n   * Verify a backup code\n   */\n  verifyBackupCode(code: string, userBackupCodes: string[]): { isValid: boolean; remainingCodes: string[] } {\n    const cleanCode = code.replace(/\\s/g, '').toLowerCase();\n    const codeIndex = userBackupCodes.findIndex(backupCode => \n      backupCode.toLowerCase() === cleanCode\n    );\n    \n    if (codeIndex === -1) {\n      return { isValid: false, remainingCodes: userBackupCodes };\n    }\n    \n    // Remove the used backup code\n    const remainingCodes = userBackupCodes.filter((_, index) => index !== codeIndex);\n    \n    return { isValid: true, remainingCodes };\n  }\n\n  /**\n   * Generate backup codes for account recovery\n   */\n  private generateBackupCodes(): string[] {\n    const codes: string[] = [];\n    \n    for (let i = 0; i < this.BACKUP_CODES_COUNT; i++) {\n      // Generate 8-character alphanumeric codes\n      const code = Math.random().toString(36).substring(2, 10).toUpperCase();\n      codes.push(code);\n    }\n    \n    return codes;\n  }\n\n  /**\n   * Generate new backup codes (when user requests new ones)\n   */\n  generateNewBackupCodes(): string[] {\n    return this.generateBackupCodes();\n  }\n\n  /**\n   * Check if 2FA is required for the user based on their role\n   */\n  is2FARequired(userRole: string): boolean {\n    const rolesRequiring2FA = ['admin', 'manager', 'owner'];\n    return rolesRequiring2FA.includes(userRole.toLowerCase());\n  }\n\n  /**\n   * Validate 2FA setup completion\n   */\n  validateSetupCompletion(verificationToken: string, secret: string): boolean {\n    return this.verifyToken(verificationToken, secret).isValid;\n  }\n}\n\nexport const twoFactorAuthService = new TwoFactorAuthService();\nexport default twoFactorAuthService;"],
      names: ["twoFactorAuthService", "TwoFactorAuthService", "generateSetup", "userEmail", "secret", "authenticator", "generateSecret", "serviceName", "APP_NAME", "otpauthUrl", "keyuri", "qrCodeUrl", "QRCode", "toDataURL", "backupCodes", "generateBackupCodes", "error", "Error", "verifyToken", "token", "cleanToken", "replace", "isValid", "verify", "verifyBackupCode", "code", "userBackupCodes", "cleanCode", "toLowerCase", "codeIndex", "findIndex", "backupCode", "remainingCodes", "filter", "_", "index", "codes", "i", "BACKUP_CODES_COUNT", "Math", "random", "toString", "substring", "toUpperCase", "push", "generateNewBackupCodes", "is2FARequired", "userRole", "rolesRequiring2FA", "includes", "validateSetupCompletion", "verificationToken"],
      mappings: ";;;;;;;;;;;QAiIA;eAAA;;QADaA;eAAAA;;;wBAhIiB;+DACX;;;;;;AAgBnB,MAAMC;IAIJ;;GAEC,GACD,MAAMC,cAAcC,SAAiB,EAA2B;QAC9D,IAAI;YACF,wBAAwB;YACxB,MAAMC,SAASC,qBAAa,CAACC,cAAc;YAE3C,oDAAoD;YACpD,MAAMC,cAAc,GAAG,IAAI,CAACC,QAAQ,CAAC,EAAE,EAAEL,UAAU,CAAC,CAAC;YAErD,2BAA2B;YAC3B,MAAMM,aAAaJ,qBAAa,CAACK,MAAM,CAACP,WAAW,IAAI,CAACK,QAAQ,EAAEJ;YAElE,mBAAmB;YACnB,MAAMO,YAAY,MAAMC,eAAM,CAACC,SAAS,CAACJ;YAEzC,wBAAwB;YACxB,MAAMK,cAAc,IAAI,CAACC,mBAAmB;YAE5C,OAAO;gBACLX;gBACAO;gBACAG;YACF;QACF,EAAE,OAAOE,OAAO;YACd,MAAM,IAAIC,MAAM;QAClB;IACF;IAEA;;GAEC,GACDC,YAAYC,KAAa,EAAEf,MAAc,EAAyB;QAChE,IAAI;YACF,iDAAiD;YACjD,MAAMgB,aAAaD,MAAME,OAAO,CAAC,OAAO;YAExC,mBAAmB;YACnB,MAAMC,UAAUjB,qBAAa,CAACkB,MAAM,CAAC;gBACnCJ,OAAOC;gBACPhB,QAAQA;YACV;YAEA,OAAO;gBAAEkB;YAAQ;QACnB,EAAE,OAAON,OAAO;YACd,OAAO;gBAAEM,SAAS;YAAM;QAC1B;IACF;IAEA;;GAEC,GACDE,iBAAiBC,IAAY,EAAEC,eAAyB,EAAkD;QACxG,MAAMC,YAAYF,KAAKJ,OAAO,CAAC,OAAO,IAAIO,WAAW;QACrD,MAAMC,YAAYH,gBAAgBI,SAAS,CAACC,CAAAA,aAC1CA,WAAWH,WAAW,OAAOD;QAG/B,IAAIE,cAAc,CAAC,GAAG;YACpB,OAAO;gBAAEP,SAAS;gBAAOU,gBAAgBN;YAAgB;QAC3D;QAEA,8BAA8B;QAC9B,MAAMM,iBAAiBN,gBAAgBO,MAAM,CAAC,CAACC,GAAGC,QAAUA,UAAUN;QAEtE,OAAO;YAAEP,SAAS;YAAMU;QAAe;IACzC;IAEA;;GAEC,GACD,AAAQjB,sBAAgC;QACtC,MAAMqB,QAAkB,EAAE;QAE1B,IAAK,IAAIC,IAAI,GAAGA,IAAI,IAAI,CAACC,kBAAkB,EAAED,IAAK;YAChD,0CAA0C;YAC1C,MAAMZ,OAAOc,KAAKC,MAAM,GAAGC,QAAQ,CAAC,IAAIC,SAAS,CAAC,GAAG,IAAIC,WAAW;YACpEP,MAAMQ,IAAI,CAACnB;QACb;QAEA,OAAOW;IACT;IAEA;;GAEC,GACDS,yBAAmC;QACjC,OAAO,IAAI,CAAC9B,mBAAmB;IACjC;IAEA;;GAEC,GACD+B,cAAcC,QAAgB,EAAW;QACvC,MAAMC,oBAAoB;YAAC;YAAS;YAAW;SAAQ;QACvD,OAAOA,kBAAkBC,QAAQ,CAACF,SAASnB,WAAW;IACxD;IAEA;;GAEC,GACDsB,wBAAwBC,iBAAyB,EAAE/C,MAAc,EAAW;QAC1E,OAAO,IAAI,CAACc,WAAW,CAACiC,mBAAmB/C,QAAQkB,OAAO;IAC5D;;aA3GiBd,WAAW;aACX8B,qBAAqB;;AA2GxC;AAEO,MAAMtC,uBAAuB,IAAIC;MACxC,WAAeD"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4345c53922907f638d28ef6b6f5cd046e2609cff"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2f62wxhnen = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2f62wxhnen();
cov_2f62wxhnen().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2f62wxhnen().f[0]++;
  cov_2f62wxhnen().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2f62wxhnen().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2f62wxhnen().s[3]++;
_export(exports, {
  get default() {
    /* istanbul ignore next */
    cov_2f62wxhnen().f[1]++;
    cov_2f62wxhnen().s[4]++;
    return _default;
  },
  get twoFactorAuthService() {
    /* istanbul ignore next */
    cov_2f62wxhnen().f[2]++;
    cov_2f62wxhnen().s[5]++;
    return twoFactorAuthService;
  }
});
const _otplib =
/* istanbul ignore next */
(cov_2f62wxhnen().s[6]++, require("otplib"));
const _qrcode =
/* istanbul ignore next */
(/*#__PURE__*/cov_2f62wxhnen().s[7]++, _interop_require_default(require("qrcode")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2f62wxhnen().f[3]++;
  cov_2f62wxhnen().s[8]++;
  return /* istanbul ignore next */(cov_2f62wxhnen().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2f62wxhnen().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2f62wxhnen().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2f62wxhnen().b[0][1]++, {
    default: obj
  });
}
class TwoFactorAuthService {
  /**
  * Generate a new 2FA secret and QR code for user setup
  */
  async generateSetup(userEmail) {
    /* istanbul ignore next */
    cov_2f62wxhnen().f[4]++;
    cov_2f62wxhnen().s[9]++;
    try {
      // Generate a secret key
      const secret =
      /* istanbul ignore next */
      (cov_2f62wxhnen().s[10]++, _otplib.authenticator.generateSecret());
      // Create the service name for the authenticator app
      const serviceName =
      /* istanbul ignore next */
      (cov_2f62wxhnen().s[11]++, `${this.APP_NAME} (${userEmail})`);
      // Generate the otpauth URL
      const otpauthUrl =
      /* istanbul ignore next */
      (cov_2f62wxhnen().s[12]++, _otplib.authenticator.keyuri(userEmail, this.APP_NAME, secret));
      // Generate QR code
      const qrCodeUrl =
      /* istanbul ignore next */
      (cov_2f62wxhnen().s[13]++, await _qrcode.default.toDataURL(otpauthUrl));
      // Generate backup codes
      const backupCodes =
      /* istanbul ignore next */
      (cov_2f62wxhnen().s[14]++, this.generateBackupCodes());
      /* istanbul ignore next */
      cov_2f62wxhnen().s[15]++;
      return {
        secret,
        qrCodeUrl,
        backupCodes
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2f62wxhnen().s[16]++;
      throw new Error('Failed to generate 2FA setup');
    }
  }
  /**
  * Verify a 2FA token
  */
  verifyToken(token, secret) {
    /* istanbul ignore next */
    cov_2f62wxhnen().f[5]++;
    cov_2f62wxhnen().s[17]++;
    try {
      // Remove any spaces or formatting from the token
      const cleanToken =
      /* istanbul ignore next */
      (cov_2f62wxhnen().s[18]++, token.replace(/\s/g, ''));
      // Verify the token
      const isValid =
      /* istanbul ignore next */
      (cov_2f62wxhnen().s[19]++, _otplib.authenticator.verify({
        token: cleanToken,
        secret: secret
      }));
      /* istanbul ignore next */
      cov_2f62wxhnen().s[20]++;
      return {
        isValid
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2f62wxhnen().s[21]++;
      return {
        isValid: false
      };
    }
  }
  /**
  * Verify a backup code
  */
  verifyBackupCode(code, userBackupCodes) {
    /* istanbul ignore next */
    cov_2f62wxhnen().f[6]++;
    const cleanCode =
    /* istanbul ignore next */
    (cov_2f62wxhnen().s[22]++, code.replace(/\s/g, '').toLowerCase());
    const codeIndex =
    /* istanbul ignore next */
    (cov_2f62wxhnen().s[23]++, userBackupCodes.findIndex(backupCode => {
      /* istanbul ignore next */
      cov_2f62wxhnen().f[7]++;
      cov_2f62wxhnen().s[24]++;
      return backupCode.toLowerCase() === cleanCode;
    }));
    /* istanbul ignore next */
    cov_2f62wxhnen().s[25]++;
    if (codeIndex === -1) {
      /* istanbul ignore next */
      cov_2f62wxhnen().b[2][0]++;
      cov_2f62wxhnen().s[26]++;
      return {
        isValid: false,
        remainingCodes: userBackupCodes
      };
    } else
    /* istanbul ignore next */
    {
      cov_2f62wxhnen().b[2][1]++;
    }
    // Remove the used backup code
    const remainingCodes =
    /* istanbul ignore next */
    (cov_2f62wxhnen().s[27]++, userBackupCodes.filter((_, index) => {
      /* istanbul ignore next */
      cov_2f62wxhnen().f[8]++;
      cov_2f62wxhnen().s[28]++;
      return index !== codeIndex;
    }));
    /* istanbul ignore next */
    cov_2f62wxhnen().s[29]++;
    return {
      isValid: true,
      remainingCodes
    };
  }
  /**
  * Generate backup codes for account recovery
  */
  generateBackupCodes() {
    /* istanbul ignore next */
    cov_2f62wxhnen().f[9]++;
    const codes =
    /* istanbul ignore next */
    (cov_2f62wxhnen().s[30]++, []);
    /* istanbul ignore next */
    cov_2f62wxhnen().s[31]++;
    for (let i =
    /* istanbul ignore next */
    (cov_2f62wxhnen().s[32]++, 0); i < this.BACKUP_CODES_COUNT; i++) {
      // Generate 8-character alphanumeric codes
      const code =
      /* istanbul ignore next */
      (cov_2f62wxhnen().s[33]++, Math.random().toString(36).substring(2, 10).toUpperCase());
      /* istanbul ignore next */
      cov_2f62wxhnen().s[34]++;
      codes.push(code);
    }
    /* istanbul ignore next */
    cov_2f62wxhnen().s[35]++;
    return codes;
  }
  /**
  * Generate new backup codes (when user requests new ones)
  */
  generateNewBackupCodes() {
    /* istanbul ignore next */
    cov_2f62wxhnen().f[10]++;
    cov_2f62wxhnen().s[36]++;
    return this.generateBackupCodes();
  }
  /**
  * Check if 2FA is required for the user based on their role
  */
  is2FARequired(userRole) {
    /* istanbul ignore next */
    cov_2f62wxhnen().f[11]++;
    const rolesRequiring2FA =
    /* istanbul ignore next */
    (cov_2f62wxhnen().s[37]++, ['admin', 'manager', 'owner']);
    /* istanbul ignore next */
    cov_2f62wxhnen().s[38]++;
    return rolesRequiring2FA.includes(userRole.toLowerCase());
  }
  /**
  * Validate 2FA setup completion
  */
  validateSetupCompletion(verificationToken, secret) {
    /* istanbul ignore next */
    cov_2f62wxhnen().f[12]++;
    cov_2f62wxhnen().s[39]++;
    return this.verifyToken(verificationToken, secret).isValid;
  }
  constructor() {
    /* istanbul ignore next */
    cov_2f62wxhnen().f[13]++;
    cov_2f62wxhnen().s[40]++;
    this.APP_NAME = 'CRM System';
    /* istanbul ignore next */
    cov_2f62wxhnen().s[41]++;
    this.BACKUP_CODES_COUNT = 10;
  }
}
const twoFactorAuthService =
/* istanbul ignore next */
(cov_2f62wxhnen().s[42]++, new TwoFactorAuthService());
const _default =
/* istanbul ignore next */
(cov_2f62wxhnen().s[43]++, twoFactorAuthService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,