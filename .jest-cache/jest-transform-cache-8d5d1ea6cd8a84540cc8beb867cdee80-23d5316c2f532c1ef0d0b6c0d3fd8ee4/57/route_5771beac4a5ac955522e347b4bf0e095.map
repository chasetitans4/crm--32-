{"version":3,"names":["GET","cov_6823453kr","f","s","POST","mockDashboards","request","params","userId","config","b","_server","NextResponse","json","success","data","error","console","status","body"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\app\\api\\dashboards\\[userId]\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\n// Mock dashboard configs (in a real app, use database)\nconst mockDashboards: Record<string, any> = {};\n\n// GET /api/dashboards/[userId]\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ userId: string }> }\n) {\n  try {\n    const { userId } = await params;\n    const config = mockDashboards[userId] || {};\n    return NextResponse.json({ success: true, data: config });\n  } catch (error) {\n    console.error('Error fetching dashboard config:', error);\n    return NextResponse.json({ success: false, error: 'Failed to fetch config' }, { status: 500 });\n  }\n}\n\n// POST /api/dashboards/[userId]\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ userId: string }> }\n) {\n  try {\n    const { userId } = await params;\n    const body = await request.json();\n    mockDashboards[userId] = body;\n    return NextResponse.json({ success: true, data: body });\n  } catch (error) {\n    console.error('Error saving dashboard config:', error);\n    return NextResponse.json({ success: false, error: 'Failed to save config' }, { status: 500 });\n  }\n}"],"mappings":"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","ignoreList":[]}