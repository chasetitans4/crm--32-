{"version":3,"names":["default","cov_1bgot77ta9","f","s","_default","performanceOptimizationService","PerformanceOptimizationService","createLazyComponent","importFn","_react","lazy","preloadComponent","setCache","key","data","customTTL","ttl","b","cacheConfig","timestamp","Date","now","evictIfNecessary","cache","set","getCache","cached","get","updateCacheHitRate","delete","clearCache","clear","maxEntries","Math","floor","maxSize","size","oldestKey","keys","next","value","hit","cacheHits","cacheMisses","totalRequests","performanceMetrics","cacheHitRate","optimizeImage","src","options","defaultOptions","quality","format","params","URLSearchParams","q","toString","width","w","height","h","createIntersectionObserver","callback","IntersectionObserver","rootMargin","threshold","measureLoadTime","startTime","loadTime","performance","measureRenderTime","componentName","renderFn","renderTime","console","log","toFixed","analyzeBundleSize","Promise","resolve","setTimeout","estimatedSize","random","bundleSize","addResourceHints","resources","forEach","resource","link","document","createElement","rel","href","as","type","head","appendChild","inlineCriticalCSS","css","style","textContent","setAttribute","registerServiceWorker","swPath","navigator","serviceWorker","register","then","registration","catch","error","getPerformanceMetrics","measureWebVitals","fcp","lcp","fid","cls","getMemoryUsage","memory","used","usedJSHeapSize","total","totalJSHeapSize","percentage","updateCacheConfig","config","getCacheStats","hitRate","logPerformanceMetric","initializePerformanceMonitoring","enableResourceHints","Map","strategy","imageOptimizationSavings"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\performanceOptimization.ts"],"sourcesContent":["import { lazy, useMemo, useCallback } from 'react'\n\n// Performance metrics interface\nexport interface PerformanceMetrics {\n  loadTime: number\n  renderTime: number\n  bundleSize: number\n  cacheHitRate: number\n  imageOptimizationSavings: number\n}\n\n// Cache configuration\nexport interface CacheConfig {\n  ttl: number // Time to live in milliseconds\n  maxSize: number // Maximum cache size in MB\n  strategy: 'lru' | 'fifo' | 'lfu'\n}\n\n// Image optimization options\nexport interface ImageOptimizationOptions {\n  quality: number\n  format: 'webp' | 'avif' | 'jpeg' | 'png'\n  width?: number\n  height?: number\n  lazy: boolean\n}\n\nclass PerformanceOptimizationService {\n  private cache = new Map<string, { data: any; timestamp: number; ttl: number }>()\n  private cacheConfig: CacheConfig = {\n    ttl: 300000, // 5 minutes\n    maxSize: 50, // 50MB\n    strategy: 'lru'\n  }\n  private performanceMetrics: PerformanceMetrics = {\n    loadTime: 0,\n    renderTime: 0,\n    bundleSize: 0,\n    cacheHitRate: 0,\n    imageOptimizationSavings: 0\n  }\n\n  // Code splitting utilities\n  createLazyComponent(importFn: () => Promise<any>) {\n    return lazy(importFn)\n  }\n\n  // Preload critical components\n  preloadComponent(importFn: () => Promise<any>) {\n    return importFn()\n  }\n\n  // Cache management\n  setCache(key: string, data: any, customTTL?: number): void {\n    const ttl = customTTL || this.cacheConfig.ttl\n    const timestamp = Date.now()\n    \n    // Check cache size and evict if necessary\n    this.evictIfNecessary()\n    \n    this.cache.set(key, { data, timestamp, ttl })\n  }\n\n  getCache(key: string): any | null {\n    const cached = this.cache.get(key)\n    \n    if (!cached) {\n      this.updateCacheHitRate(false)\n      return null\n    }\n    \n    // Check if cache has expired\n    if (Date.now() - cached.timestamp > cached.ttl) {\n      this.cache.delete(key)\n      this.updateCacheHitRate(false)\n      return null\n    }\n    \n    // Update cache hit rate\n    this.updateCacheHitRate(true)\n    return cached.data\n  }\n\n  clearCache(): void {\n    this.cache.clear()\n  }\n\n  private evictIfNecessary(): void {\n    const maxEntries = Math.floor(this.cacheConfig.maxSize * 1024 * 1024 / 1000) // Rough estimation\n    \n    if (this.cache.size >= maxEntries) {\n      // Implement LRU eviction\n      const oldestKey = this.cache.keys().next().value\n      if (oldestKey) {\n        this.cache.delete(oldestKey)\n      }\n    }\n  }\n\n  private cacheHits = 0\n  private cacheMisses = 0\n\n  private updateCacheHitRate(hit: boolean): void {\n    if (hit) {\n      this.cacheHits++\n    } else {\n      this.cacheMisses++\n    }\n    \n    const totalRequests = this.cacheHits + this.cacheMisses\n    this.performanceMetrics.cacheHitRate = totalRequests > 0 ? this.cacheHits / totalRequests : 0\n  }\n\n  // Image optimization\n  optimizeImage(src: string, options: Partial<ImageOptimizationOptions> = {}): string {\n    const defaultOptions: ImageOptimizationOptions = {\n      quality: 80,\n      format: 'webp',\n      lazy: true,\n      ...options\n    }\n\n    // In a real implementation, this would integrate with an image optimization service\n    // For now, we'll return a mock optimized URL\n    const params = new URLSearchParams({\n      q: defaultOptions.quality.toString(),\n      f: defaultOptions.format,\n      ...(defaultOptions.width && { w: defaultOptions.width.toString() }),\n      ...(defaultOptions.height && { h: defaultOptions.height.toString() })\n    })\n\n    return `${src}?${params.toString()}`\n  }\n\n  // Lazy loading utilities\n  createIntersectionObserver(callback: IntersectionObserverCallback): IntersectionObserver {\n    return new IntersectionObserver(callback, {\n      rootMargin: '50px 0px',\n      threshold: 0.1\n    })\n  }\n\n  // Performance monitoring\n  measureLoadTime(startTime: number): number {\n    const loadTime = performance.now() - startTime\n    this.performanceMetrics.loadTime = loadTime\n    return loadTime\n  }\n\n  measureRenderTime(componentName: string, renderFn: () => void): number {\n    const startTime = performance.now()\n    renderFn()\n    const renderTime = performance.now() - startTime\n    \n    console.log(`${componentName} render time: ${renderTime.toFixed(2)}ms`)\n    this.performanceMetrics.renderTime = renderTime\n    return renderTime\n  }\n\n  // Bundle analysis\n  analyzeBundleSize(): Promise<number> {\n    return new Promise((resolve) => {\n      // In a real implementation, this would analyze the actual bundle\n      // For now, we'll simulate bundle size analysis\n      setTimeout(() => {\n        const estimatedSize = Math.random() * 1000 + 500 // 500-1500 KB\n        this.performanceMetrics.bundleSize = estimatedSize\n        resolve(estimatedSize)\n      }, 100)\n    })\n  }\n\n  // Resource hints\n  addResourceHints(resources: { href: string; as: string; type?: string }[]): void {\n    resources.forEach(resource => {\n      const link = document.createElement('link')\n      link.rel = 'preload'\n      link.href = resource.href\n      link.as = resource.as\n      if (resource.type) {\n        link.type = resource.type\n      }\n      document.head.appendChild(link)\n    })\n  }\n\n  // Critical CSS inlining\n  inlineCriticalCSS(css: string): void {\n    const style = document.createElement('style')\n    style.textContent = css\n    style.setAttribute('data-critical', 'true')\n    document.head.appendChild(style)\n  }\n\n  // Service Worker registration for caching\n  registerServiceWorker(swPath: string = '/sw.js'): Promise<ServiceWorkerRegistration | null> {\n    if ('serviceWorker' in navigator) {\n      return navigator.serviceWorker.register(swPath)\n        .then(registration => {\n          console.log('Service Worker registered successfully:', registration)\n          return registration\n        })\n        .catch(error => {\n          console.error('Service Worker registration failed:', error)\n          return null\n        })\n    }\n    return Promise.resolve(null)\n  }\n\n  // Performance metrics getter\n  getPerformanceMetrics(): PerformanceMetrics {\n    return { ...this.performanceMetrics }\n  }\n\n  // Web Vitals monitoring\n  measureWebVitals(): Promise<{\n    fcp: number // First Contentful Paint\n    lcp: number // Largest Contentful Paint\n    fid: number // First Input Delay\n    cls: number // Cumulative Layout Shift\n  }> {\n    return new Promise((resolve) => {\n      // Simulate Web Vitals measurement\n      // In a real implementation, you'd use the web-vitals library\n      setTimeout(() => {\n        resolve({\n          fcp: Math.random() * 2000 + 500,\n          lcp: Math.random() * 3000 + 1000,\n          fid: Math.random() * 100 + 10,\n          cls: Math.random() * 0.1\n        })\n      }, 100)\n    })\n  }\n\n  // Memory usage monitoring\n  getMemoryUsage(): {\n    used: number\n    total: number\n    percentage: number\n  } {\n    if ('memory' in performance) {\n      const memory = (performance as any).memory\n      return {\n        used: memory.usedJSHeapSize,\n        total: memory.totalJSHeapSize,\n        percentage: (memory.usedJSHeapSize / memory.totalJSHeapSize) * 100\n      }\n    }\n    \n    return {\n      used: 0,\n      total: 0,\n      percentage: 0\n    }\n  }\n\n  // Configuration updates\n  updateCacheConfig(config: Partial<CacheConfig>): void {\n    this.cacheConfig = { ...this.cacheConfig, ...config }\n  }\n\n  // Missing methods for PerformanceMonitor compatibility\n  getCacheStats(): Promise<{ hitRate: number; size: number }> {\n    return Promise.resolve({\n      hitRate: this.performanceMetrics.cacheHitRate * 100,\n      size: this.cache.size * 1024 // Convert to bytes\n    })\n  }\n\n  logPerformanceMetric(type: string, data: any): void {\n    console.log(`Performance metric [${type}]:`, data)\n    // In a real implementation, this would send data to analytics service\n  }\n\n  initializePerformanceMonitoring(): void {\n    // Initialize performance monitoring setup\n    console.log('Performance monitoring initialized')\n  }\n\n  enableResourceHints(): void {\n    // Enable resource hints for performance optimization\n    console.log('Resource hints enabled')\n  }\n}\n\nexport const performanceOptimizationService = new PerformanceOptimizationService()\nexport default performanceOptimizationService"],"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","ignoreList":[]}