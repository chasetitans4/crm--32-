{"version":3,"names":["cov_1kyhjihk44","actualCoverage","s","useEventActions","f","state","dispatch","_AppContext","useAppContext","addEvent","newEvent","Promise","resolve","setTimeout","Math","random","b","Error","type","payload","updateEvent","id","updates","existingEvent","events","find","event","updatedEvent","deleteEvent","getEvent","getEventsByDate","date","filter","getEventsByDateRange","startDate","endDate","getEventsByClient","clientId","relatedTo","getEventsByType"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\useEventActions.ts"],"sourcesContent":["\"use client\"\n\nimport { useAppContext } from '../context/AppContext'\nimport type { Event, NewEvent } from '../types'\n\nexport const useEventActions = () => {\n  const { state, dispatch } = useAppContext()\n\n  const addEvent = async (newEvent: NewEvent): Promise<void> => {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500))\n    \n    // Simulate 5% chance of network error\n    if (Math.random() < 0.05) {\n      throw new Error('Network error: Failed to create event')\n    }\n\n    // AppContext reducer assigns the id\n    dispatch({ type: 'ADD_EVENT', payload: newEvent })\n  }\n\n  const updateEvent = async (id: string, updates: Partial<NewEvent>): Promise<Event> => {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500))\n    \n    // Simulate 5% chance of network error\n    if (Math.random() < 0.05) {\n      throw new Error('Network error: Failed to update event')\n    }\n\n    const existingEvent = state.events.find(event => event.id === id)\n    if (!existingEvent) {\n      throw new Error('Event not found')\n    }\n\n    const updatedEvent: Event = {\n      ...existingEvent,\n      ...updates\n    }\n\n    dispatch({ type: 'UPDATE_EVENT', payload: { id, event: updates } })\n    return updatedEvent\n  }\n\n  const deleteEvent = async (id: string): Promise<void> => {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500))\n    \n    // Simulate 5% chance of network error\n    if (Math.random() < 0.05) {\n      throw new Error('Network error: Failed to delete event')\n    }\n\n    const existingEvent = state.events.find(event => event.id === id)\n    if (!existingEvent) {\n      throw new Error('Event not found')\n    }\n\n    dispatch({ type: 'DELETE_EVENT', payload: id })\n  }\n\n  const getEvent = (id: string): Event | undefined => {\n    return state.events.find(event => event.id === id)\n  }\n\n  const getEventsByDate = (date: string): Event[] => {\n    return state.events.filter(event => event.date === date)\n  }\n\n  const getEventsByDateRange = (startDate: string, endDate: string): Event[] => {\n    return state.events.filter(event => {\n      return event.date >= startDate && event.date <= endDate\n    })\n  }\n\n  const getEventsByClient = (clientId: string): Event[] => {\n    return state.events.filter(event => \n      event.relatedTo?.type === 'client' && event.relatedTo.id === clientId\n    )\n  }\n\n  const getEventsByType = (type: Event['type']): Event[] => {\n    return state.events.filter(event => event.type === type)\n  }\n\n  return {\n    addEvent,\n    updateEvent,\n    deleteEvent,\n    getEvent,\n    getEventsByDate,\n    getEventsByDateRange,\n    getEventsByClient,\n    getEventsByType\n  }\n}\n"],"mappingscAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;+BAJS;;;;;;WAAAC,eAAA;;;;;kCAHiB;AAAA;AAAAH,cAAA,GAAAE,CAAA;AAGvB,MAAMC,eAAA,GAAkBA,CAAA;EAAA;EAAAH,cAAA,GAAAI,CAAA;EAC7B,MAAM;IAAEC,KAAK;IAAEC;EAAQ,CAAE;EAAA;EAAA,CAAAN,cAAA,GAAAE,CAAA,OAAG,IAAAK,WAAA,CAAAC,aAAa;EAAA;EAAAR,cAAA,GAAAE,CAAA;EAEzC,MAAMO,QAAA,GAAW,MAAOC,QAAA;IAAA;IAAAV,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACtB;IACA,MAAM,IAAIS,OAAA,CAAQC,OAAA,IAAW;MAAA;MAAAZ,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MAAA,OAAAW,UAAA,CAAWD,OAAA,EAAS;IAAA;IAEjD;IAAA;IAAAZ,cAAA,GAAAE,CAAA;IACA,IAAIY,IAAA,CAAKC,MAAM,KAAK,MAAM;MAAA;MAAAf,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAE,CAAA;MACxB,MAAM,IAAIe,KAAA,CAAM;IAClB;IAAA;IAAA;MAAAjB,cAAA,GAAAgB,CAAA;IAAA;IAEA;IAAAhB,cAAA,GAAAE,CAAA;IACAI,QAAA,CAAS;MAAEY,IAAA,EAAM;MAAaC,OAAA,EAAST;IAAS;EAClD;EAAA;EAAAV,cAAA,GAAAE,CAAA;EAEA,MAAMkB,WAAA,GAAc,MAAAA,CAAOC,EAAA,EAAYC,OAAA;IAAA;IAAAtB,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACrC;IACA,MAAM,IAAIS,OAAA,CAAQC,OAAA,IAAW;MAAA;MAAAZ,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MAAA,OAAAW,UAAA,CAAWD,OAAA,EAAS;IAAA;IAEjD;IAAA;IAAAZ,cAAA,GAAAE,CAAA;IACA,IAAIY,IAAA,CAAKC,MAAM,KAAK,MAAM;MAAA;MAAAf,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAE,CAAA;MACxB,MAAM,IAAIe,KAAA,CAAM;IAClB;IAAA;IAAA;MAAAjB,cAAA,GAAAgB,CAAA;IAAA;IAEA,MAAMO,aAAA;IAAA;IAAA,CAAAvB,cAAA,GAAAE,CAAA,QAAgBG,KAAA,CAAMmB,MAAM,CAACC,IAAI,CAACC,KAAA,IAAS;MAAA;MAAA1B,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MAAA,OAAAwB,KAAA,CAAML,EAAE,KAAKA,EAAA;IAAA;IAAA;IAAArB,cAAA,GAAAE,CAAA;IAC9D,IAAI,CAACqB,aAAA,EAAe;MAAA;MAAAvB,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAE,CAAA;MAClB,MAAM,IAAIe,KAAA,CAAM;IAClB;IAAA;IAAA;MAAAjB,cAAA,GAAAgB,CAAA;IAAA;IAEA,MAAMW,YAAA;IAAA;IAAA,CAAA3B,cAAA,GAAAE,CAAA,QAAsB;MAC1B,GAAGqB,aAAa;MAChB,GAAGD;IACL;IAAA;IAAAtB,cAAA,GAAAE,CAAA;IAEAI,QAAA,CAAS;MAAEY,IAAA,EAAM;MAAgBC,OAAA,EAAS;QAAEE,EAAA;QAAIK,KAAA,EAAOJ;MAAQ;IAAE;IAAA;IAAAtB,cAAA,GAAAE,CAAA;IACjE,OAAOyB,YAAA;EACT;EAAA;EAAA3B,cAAA,GAAAE,CAAA;EAEA,MAAM0B,WAAA,GAAc,MAAOP,EAAA;IAAA;IAAArB,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACzB;IACA,MAAM,IAAIS,OAAA,CAAQC,OAAA,IAAW;MAAA;MAAAZ,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MAAA,OAAAW,UAAA,CAAWD,OAAA,EAAS;IAAA;IAEjD;IAAA;IAAAZ,cAAA,GAAAE,CAAA;IACA,IAAIY,IAAA,CAAKC,MAAM,KAAK,MAAM;MAAA;MAAAf,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAE,CAAA;MACxB,MAAM,IAAIe,KAAA,CAAM;IAClB;IAAA;IAAA;MAAAjB,cAAA,GAAAgB,CAAA;IAAA;IAEA,MAAMO,aAAA;IAAA;IAAA,CAAAvB,cAAA,GAAAE,CAAA,QAAgBG,KAAA,CAAMmB,MAAM,CAACC,IAAI,CAACC,KAAA,IAAS;MAAA;MAAA1B,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MAAA,OAAAwB,KAAA,CAAML,EAAE,KAAKA,EAAA;IAAA;IAAA;IAAArB,cAAA,GAAAE,CAAA;IAC9D,IAAI,CAACqB,aAAA,EAAe;MAAA;MAAAvB,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAE,CAAA;MAClB,MAAM,IAAIe,KAAA,CAAM;IAClB;IAAA;IAAA;MAAAjB,cAAA,GAAAgB,CAAA;IAAA;IAAAhB,cAAA,GAAAE,CAAA;IAEAI,QAAA,CAAS;MAAEY,IAAA,EAAM;MAAgBC,OAAA,EAASE;IAAG;EAC/C;EAAA;EAAArB,cAAA,GAAAE,CAAA;EAEA,MAAM2B,QAAA,GAAYR,EAAA;IAAA;IAAArB,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IAChB,OAAOG,KAAA,CAAMmB,MAAM,CAACC,IAAI,CAACC,KAAA,IAAS;MAAA;MAAA1B,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MAAA,OAAAwB,KAAA,CAAML,EAAE,KAAKA,EAAA;IAAA;EACjD;EAAA;EAAArB,cAAA,GAAAE,CAAA;EAEA,MAAM4B,eAAA,GAAmBC,IAAA;IAAA;IAAA/B,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACvB,OAAOG,KAAA,CAAMmB,MAAM,CAACQ,MAAM,CAACN,KAAA,IAAS;MAAA;MAAA1B,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MAAA,OAAAwB,KAAA,CAAMK,IAAI,KAAKA,IAAA;IAAA;EACrD;EAAA;EAAA/B,cAAA,GAAAE,CAAA;EAEA,MAAM+B,oBAAA,GAAuBA,CAACC,SAAA,EAAmBC,OAAA;IAAA;IAAAnC,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IAC/C,OAAOG,KAAA,CAAMmB,MAAM,CAACQ,MAAM,CAACN,KAAA;MAAA;MAAA1B,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MACzB,OAAO,2BAAAF,cAAA,GAAAgB,CAAA,UAAAU,KAAA,CAAMK,IAAI,IAAIG,SAAA;MAAA;MAAA,CAAAlC,cAAA,GAAAgB,CAAA,UAAaU,KAAA,CAAMK,IAAI,IAAII,OAAA;IAClD;EACF;EAAA;EAAAnC,cAAA,GAAAE,CAAA;EAEA,MAAMkC,iBAAA,GAAqBC,QAAA;IAAA;IAAArC,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACzB,OAAOG,KAAA,CAAMmB,MAAM,CAACQ,MAAM,CAACN,KAAA,IACzB;MAAA;MAAA1B,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MAAA,kCAAAF,cAAA,GAAAgB,CAAA,UAAAU,KAAA,CAAMY,SAAS,EAAEpB,IAAA,KAAS;MAAA;MAAA,CAAAlB,cAAA,GAAAgB,CAAA,UAAYU,KAAA,CAAMY,SAAS,CAACjB,EAAE,KAAKgB,QAAA;IAAA;EAEjE;EAAA;EAAArC,cAAA,GAAAE,CAAA;EAEA,MAAMqC,eAAA,GAAmBrB,IAAA;IAAA;IAAAlB,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACvB,OAAOG,KAAA,CAAMmB,MAAM,CAACQ,MAAM,CAACN,KAAA,IAAS;MAAA;MAAA1B,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MAAA,OAAAwB,KAAA,CAAMR,IAAI,KAAKA,IAAA;IAAA;EACrD;EAAA;EAAAlB,cAAA,GAAAE,CAAA;EAEA,OAAO;IACLO,QAAA;IACAW,WAAA;IACAQ,WAAA;IACAC,QAAA;IACAC,eAAA;IACAG,oBAAA;IACAG,iBAAA;IACAG;EACF;AACF","ignoreList":[]}