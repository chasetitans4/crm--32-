{"version":3,"names":["crmEmailService","cov_244aboelxv","f","s","default","_default","CRMEmailService","sendWelcomeEmail","clientId","customVariables","client","_database","databaseService","getClientById","b","Error","variables","client_name","name","company_name","defaultSender","account_manager","_mailjet","mailjetService","sendEmail","from","to","email","subject","templateId","getTemplateId","customId","eventPayload","JSON","stringify","type","error","sendProjectUpdate","projectId","updateMessage","project_name","project_status","progress_percentage","update_message","next_milestone","sendInvoiceEmail","invoiceNumber","amount","dueDate","paymentLink","invoice_number","invoice_amount","due_date","payment_link","sendMeetingReminder","meetingTitle","meetingDate","meetingTime","meetingLocation","agenda","meeting_title","meeting_date","meeting_time","meeting_location","meeting_agenda","Date","now","sendCustomEmail","recipients","htmlContent","textContent","attachments","options","htmlPart","textPart","undefined","sendMarketingCampaign","clientIds","campaignName","clients","Promise","all","map","id","validClients","filter","emails","sendBulkEmail","getEmailStats","stats","stat","parse","getClientEmailHistory","initializeTemplates","initializeCRMTemplates","templateName","templates","getTemplates","template","find","t","setupEmailAutomation","process","env","SENDER_EMAIL","SENDER_NAME"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\crmEmailService.ts"],"sourcesContent":["import { mailjetService, type EmailOptions, type EmailRecipient } from \"./mailjet\"\nimport { databaseService } from \"./database\"\n\nexport interface CRMEmailOptions {\n  clientId?: string\n  projectId?: string\n  taskId?: string\n  invoiceId?: string\n  templateName?: string\n  customVariables?: Record<string, unknown>\n}\n\nexport interface EmailTemplate {\n  id: string\n  name: string\n  subject: string\n  htmlContent: string\n  textContent?: string\n  variables: string[]\n  category: \"client\" | \"project\" | \"invoice\" | \"marketing\" | \"system\"\n}\n\nclass CRMEmailService {\n  private defaultSender = {\n    // Security: Server-side only email configuration\n    email: process.env.SENDER_EMAIL || \"noreply@yourcrm.com\",\n    name: process.env.SENDER_NAME || \"CRM System\",\n  }\n\n  // Send welcome email to new client\n  async sendWelcomeEmail(clientId: string, customVariables?: Record<string, unknown>): Promise<unknown> {\n    try {\n      const client = await databaseService.getClientById(clientId)\n      if (!client) throw new Error(\"Client not found\")\n\n      const variables = {\n        client_name: client.name,\n        company_name: this.defaultSender.name,\n        account_manager: \"Your Account Manager\",\n        ...customVariables,\n      }\n\n      return await mailjetService.sendEmail({\n        from: this.defaultSender,\n        to: [{ email: client.email, name: client.name, variables }],\n        subject: `Welcome to ${this.defaultSender.name}!`,\n        templateId: await this.getTemplateId(\"Welcome Client\"),\n        variables,\n        customId: `welcome_${clientId}`,\n        eventPayload: JSON.stringify({ type: \"welcome\", clientId }),\n      })\n    } catch (error) {\n      // Silent error handling: Failed to send welcome email\n      throw error\n    }\n  }\n\n  // Send project update email\n  async sendProjectUpdate(\n    clientId: string,\n    projectId: string,\n    updateMessage: string,\n    customVariables?: Record<string, any>,\n  ): Promise<any> {\n    try {\n      const client = await databaseService.getClientById(clientId)\n      if (!client) throw new Error(\"Client not found\")\n\n      const variables = {\n        client_name: client.name,\n        project_name: `Project #${projectId}`,\n        project_status: \"In Progress\",\n        progress_percentage: \"75\",\n        update_message: updateMessage,\n        next_milestone: \"Design Review\",\n        account_manager: \"Your Account Manager\",\n        ...customVariables,\n      }\n\n      return await mailjetService.sendEmail({\n        from: this.defaultSender,\n        to: [{ email: client.email, name: client.name, variables }],\n        subject: `Project Update: ${variables.project_name}`,\n        templateId: await this.getTemplateId(\"Project Update\"),\n        variables,\n        customId: `project_update_${projectId}`,\n        eventPayload: JSON.stringify({ type: \"project_update\", clientId, projectId }),\n      })\n    } catch (error) {\n      // Silent error handling: Failed to send project update\n      throw error\n    }\n  }\n\n  // Send invoice email\n  async sendInvoiceEmail(\n    clientId: string,\n    invoiceNumber: string,\n    amount: string,\n    dueDate: string,\n    paymentLink?: string,\n  ): Promise<any> {\n    try {\n      const client = await databaseService.getClientById(clientId)\n      if (!client) throw new Error(\"Client not found\")\n\n      const variables = {\n        client_name: client.name,\n        company_name: this.defaultSender.name,\n        invoice_number: invoiceNumber,\n        invoice_amount: amount,\n        due_date: dueDate,\n        payment_link: paymentLink || \"#\",\n      }\n\n      return await mailjetService.sendEmail({\n        from: this.defaultSender,\n        to: [{ email: client.email, name: client.name, variables }],\n        subject: `Invoice ${invoiceNumber} from ${this.defaultSender.name}`,\n        templateId: await this.getTemplateId(\"Invoice Notification\"),\n        variables,\n        customId: `invoice_${invoiceNumber}`,\n        eventPayload: JSON.stringify({ type: \"invoice\", clientId, invoiceNumber }),\n      })\n    } catch (error) {\n      // Silent error handling: Failed to send invoice email\n      throw error\n    }\n  }\n\n  // Send meeting reminder\n  async sendMeetingReminder(\n    clientId: string,\n    meetingTitle: string,\n    meetingDate: string,\n    meetingTime: string,\n    meetingLocation: string,\n    agenda?: string,\n  ): Promise<any> {\n    try {\n      const client = await databaseService.getClientById(clientId)\n      if (!client) throw new Error(\"Client not found\")\n\n      const variables = {\n        client_name: client.name,\n        meeting_title: meetingTitle,\n        meeting_date: meetingDate,\n        meeting_time: meetingTime,\n        meeting_location: meetingLocation,\n        meeting_agenda: agenda || \"We will discuss your project progress and next steps.\",\n        account_manager: \"Your Account Manager\",\n      }\n\n      return await mailjetService.sendEmail({\n        from: this.defaultSender,\n        to: [{ email: client.email, name: client.name, variables }],\n        subject: `Meeting Reminder: ${meetingTitle}`,\n        templateId: await this.getTemplateId(\"Meeting Reminder\"),\n        variables,\n        customId: `meeting_${clientId}_${Date.now()}`,\n        eventPayload: JSON.stringify({ type: \"meeting_reminder\", clientId }),\n      })\n    } catch (error) {\n      // Silent error handling: Failed to send meeting reminder\n      throw error\n    }\n  }\n\n  // Send custom email\n  async sendCustomEmail(\n    recipients: EmailRecipient[],\n    subject: string,\n    htmlContent: string,\n    textContent?: string,\n    attachments?: any[],\n    options?: CRMEmailOptions,\n  ): Promise<any> {\n    try {\n      return await mailjetService.sendEmail({\n        from: this.defaultSender,\n        to: recipients,\n        subject,\n        htmlPart: htmlContent,\n        textPart: textContent,\n        attachments,\n        customId: options?.clientId ? `custom_${options.clientId}_${Date.now()}` : undefined,\n        eventPayload: options ? JSON.stringify(options) : undefined,\n      })\n    } catch (error) {\n      // Silent error handling: Failed to send custom email\n      throw error\n    }\n  }\n\n  // Send bulk marketing email\n  async sendMarketingCampaign(\n    clientIds: string[],\n    subject: string,\n    htmlContent: string,\n    campaignName: string,\n  ): Promise<any> {\n    try {\n      const clients = await Promise.all(clientIds.map((id) => databaseService.getClientById(id)))\n\n      const validClients = clients.filter((client) => client && client.email)\n\n      const emails: EmailOptions[] = validClients.map((client) => ({\n        from: this.defaultSender,\n        to: [{ email: client!.email, name: client!.name }],\n        subject,\n        htmlPart: htmlContent,\n        customId: `campaign_${campaignName}_${client!.id}`,\n        eventPayload: JSON.stringify({\n          type: \"marketing_campaign\",\n          campaignName,\n          clientId: client!.id,\n        }),\n      }))\n\n      return await mailjetService.sendBulkEmail(emails)\n    } catch (error) {\n      // Silent error handling: Failed to send marketing campaign\n      throw error\n    }\n  }\n\n  // Get email statistics\n  async getEmailStats(customId?: string): Promise<any> {\n    try {\n      const stats = await mailjetService.getEmailStats()\n      // Filter by customId if provided\n      if (customId) {\n        return stats.filter(stat => stat.eventPayload && JSON.parse(stat.eventPayload).customId === customId)\n      }\n      return stats\n    } catch (error) {\n      // Silent error handling: Failed to get email stats\n      throw error\n    }\n  }\n\n  // Get client email history\n  async getClientEmailHistory(clientId: string): Promise<any[]> {\n    try {\n      const stats = await mailjetService.getEmailStats()\n      return stats.filter((stat) => stat.eventPayload && JSON.parse(stat.eventPayload).clientId === clientId)\n    } catch (error) {\n      // Silent error handling: Failed to get client email history\n      return []\n    }\n  }\n\n  // Initialize CRM email templates\n  async initializeTemplates(): Promise<void> {\n    try {\n      await mailjetService.initializeCRMTemplates()\n    } catch (error) {\n      // Silent error handling: Failed to initialize templates\n    }\n  }\n\n  // Helper method to get template ID by name\n  private async getTemplateId(templateName: string): Promise<number | undefined> {\n    try {\n      const templates = await mailjetService.getTemplates()\n      const template = templates.find((t) => t.name === templateName)\n      return template?.id\n    } catch (error) {\n      // Silent error handling: Failed to get template ID\n      return undefined\n    }\n  }\n\n  // Email automation workflows\n  async setupEmailAutomation(): Promise<void> {\n    // Silent logging: Email automation workflows would be set up here\n  }\n}\n\nexport const crmEmailService = new CRMEmailService()\nexport default crmEmailService\n"],"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","ignoreList":[]}