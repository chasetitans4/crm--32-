1d8b4c86ac11f6e8e93f77eb238f50ab
"use strict";

/* istanbul ignore next */
function cov_pjk3zuuny() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\api.ts";
  var hash = "89ebdf60153810a1596a87ff519725781a3062d3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\api.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 28,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 26
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 24
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 33
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 25
        }
      },
      "8": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 24
        }
      },
      "9": {
        start: {
          line: 29,
          column: 29
        },
        end: {
          line: 29,
          column: 71
        }
      },
      "10": {
        start: {
          line: 30,
          column: 23
        },
        end: {
          line: 30,
          column: 56
        }
      },
      "11": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 34,
          column: 6
        }
      },
      "12": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 42,
          column: 2
        }
      },
      "13": {
        start: {
          line: 44,
          column: 0
        },
        end: {
          line: 50,
          column: 35
        }
      },
      "14": {
        start: {
          line: 45,
          column: 18
        },
        end: {
          line: 45,
          column: 68
        }
      },
      "15": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 48,
          column: 5
        }
      },
      "16": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 57
        }
      },
      "17": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 18
        }
      },
      "18": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 33
        }
      },
      "19": {
        start: {
          line: 52,
          column: 0
        },
        end: {
          line: 60,
          column: 3
        }
      },
      "20": {
        start: {
          line: 52,
          column: 42
        },
        end: {
          line: 52,
          column: 50
        }
      },
      "21": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 58,
          column: 5
        }
      },
      "22": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 62
        }
      },
      "23": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 40
        }
      },
      "24": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 33
        }
      },
      "25": {
        start: {
          line: 61,
          column: 19
        },
        end: {
          line: 117,
          column: 1
        }
      },
      "26": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "27": {
        start: {
          line: 64,
          column: 29
        },
        end: {
          line: 64,
          column: 54
        }
      },
      "28": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 33
        }
      },
      "29": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 24
        }
      },
      "30": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "31": {
        start: {
          line: 73,
          column: 29
        },
        end: {
          line: 73,
          column: 60
        }
      },
      "32": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 33
        }
      },
      "33": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 24
        }
      },
      "34": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "35": {
        start: {
          line: 82,
          column: 29
        },
        end: {
          line: 82,
          column: 68
        }
      },
      "36": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 33
        }
      },
      "37": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 24
        }
      },
      "38": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "39": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 47
        }
      },
      "40": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 24
        }
      },
      "41": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "42": {
        start: {
          line: 99,
          column: 29
        },
        end: {
          line: 99,
          column: 79
        }
      },
      "43": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 33
        }
      },
      "44": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 24
        }
      },
      "45": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "46": {
        start: {
          line: 108,
          column: 29
        },
        end: {
          line: 110,
          column: 14
        }
      },
      "47": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 33
        }
      },
      "48": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 24
        }
      },
      "49": {
        start: {
          line: 118,
          column: 17
        },
        end: {
          line: 174,
          column: 1
        }
      },
      "50": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "51": {
        start: {
          line: 121,
          column: 29
        },
        end: {
          line: 121,
          column: 52
        }
      },
      "52": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 33
        }
      },
      "53": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 24
        }
      },
      "54": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "55": {
        start: {
          line: 130,
          column: 29
        },
        end: {
          line: 130,
          column: 58
        }
      },
      "56": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 33
        }
      },
      "57": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 24
        }
      },
      "58": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "59": {
        start: {
          line: 139,
          column: 29
        },
        end: {
          line: 139,
          column: 59
        }
      },
      "60": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 33
        }
      },
      "61": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 24
        }
      },
      "62": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "63": {
        start: {
          line: 148,
          column: 29
        },
        end: {
          line: 148,
          column: 66
        }
      },
      "64": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 33
        }
      },
      "65": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 24
        }
      },
      "66": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "67": {
        start: {
          line: 157,
          column: 29
        },
        end: {
          line: 159,
          column: 14
        }
      },
      "68": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 33
        }
      },
      "69": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 24
        }
      },
      "70": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "71": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 45
        }
      },
      "72": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 24
        }
      },
      "73": {
        start: {
          line: 175,
          column: 18
        },
        end: {
          line: 211,
          column: 1
        }
      },
      "74": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "75": {
        start: {
          line: 178,
          column: 29
        },
        end: {
          line: 178,
          column: 53
        }
      },
      "76": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 33
        }
      },
      "77": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 24
        }
      },
      "78": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "79": {
        start: {
          line: 187,
          column: 29
        },
        end: {
          line: 187,
          column: 61
        }
      },
      "80": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 33
        }
      },
      "81": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 24
        }
      },
      "82": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 201,
          column: 9
        }
      },
      "83": {
        start: {
          line: 196,
          column: 29
        },
        end: {
          line: 196,
          column: 67
        }
      },
      "84": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 33
        }
      },
      "85": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 24
        }
      },
      "86": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "87": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 46
        }
      },
      "88": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 24
        }
      },
      "89": {
        start: {
          line: 212,
          column: 26
        },
        end: {
          line: 248,
          column: 1
        }
      },
      "90": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "91": {
        start: {
          line: 215,
          column: 29
        },
        end: {
          line: 215,
          column: 62
        }
      },
      "92": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 33
        }
      },
      "93": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 24
        }
      },
      "94": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "95": {
        start: {
          line: 224,
          column: 29
        },
        end: {
          line: 224,
          column: 73
        }
      },
      "96": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 33
        }
      },
      "97": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 24
        }
      },
      "98": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "99": {
        start: {
          line: 233,
          column: 29
        },
        end: {
          line: 233,
          column: 76
        }
      },
      "100": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 33
        }
      },
      "101": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 24
        }
      },
      "102": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "103": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 55
        }
      },
      "104": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 24
        }
      },
      "105": {
        start: {
          line: 249,
          column: 17
        },
        end: {
          line: 254,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 22
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 29
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 21
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 20
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "6": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 31,
            column: 9
          },
          end: {
            line: 31,
            column: 33
          }
        },
        loc: {
          start: {
            line: 31,
            column: 39
          },
          end: {
            line: 35,
            column: 1
          }
        },
        line: 31
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 44,
            column: 29
          },
          end: {
            line: 44,
            column: 30
          }
        },
        loc: {
          start: {
            line: 44,
            column: 39
          },
          end: {
            line: 50,
            column: 1
          }
        },
        line: 44
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 50,
            column: 3
          },
          end: {
            line: 50,
            column: 4
          }
        },
        loc: {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 50,
            column: 33
          }
        },
        line: 50
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 52,
            column: 30
          },
          end: {
            line: 52,
            column: 31
          }
        },
        loc: {
          start: {
            line: 52,
            column: 42
          },
          end: {
            line: 52,
            column: 50
          }
        },
        line: 52
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 52,
            column: 52
          },
          end: {
            line: 52,
            column: 53
          }
        },
        loc: {
          start: {
            line: 52,
            column: 61
          },
          end: {
            line: 60,
            column: 1
          }
        },
        line: 52
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        },
        loc: {
          start: {
            line: 62,
            column: 22
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 62
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 71,
            column: 13
          },
          end: {
            line: 71,
            column: 14
          }
        },
        loc: {
          start: {
            line: 71,
            column: 25
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 71
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        },
        loc: {
          start: {
            line: 80,
            column: 30
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 80
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        },
        loc: {
          start: {
            line: 89,
            column: 24
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 89
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 97,
            column: 13
          },
          end: {
            line: 97,
            column: 14
          }
        },
        loc: {
          start: {
            line: 97,
            column: 37
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 97
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 106,
            column: 17
          },
          end: {
            line: 106,
            column: 18
          }
        },
        loc: {
          start: {
            line: 106,
            column: 42
          },
          end: {
            line: 116,
            column: 5
          }
        },
        line: 106
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        },
        loc: {
          start: {
            line: 119,
            column: 22
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 119
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 128,
            column: 13
          },
          end: {
            line: 128,
            column: 14
          }
        },
        loc: {
          start: {
            line: 128,
            column: 25
          },
          end: {
            line: 136,
            column: 5
          }
        },
        line: 128
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        },
        loc: {
          start: {
            line: 137,
            column: 26
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 137
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 146,
            column: 13
          }
        },
        loc: {
          start: {
            line: 146,
            column: 30
          },
          end: {
            line: 154,
            column: 5
          }
        },
        line: 146
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 155,
            column: 18
          },
          end: {
            line: 155,
            column: 19
          }
        },
        loc: {
          start: {
            line: 155,
            column: 38
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 155
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        },
        loc: {
          start: {
            line: 166,
            column: 24
          },
          end: {
            line: 173,
            column: 5
          }
        },
        line: 166
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        },
        loc: {
          start: {
            line: 176,
            column: 22
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 176
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 185,
            column: 13
          }
        },
        loc: {
          start: {
            line: 185,
            column: 27
          },
          end: {
            line: 193,
            column: 5
          }
        },
        line: 185
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 194,
            column: 13
          }
        },
        loc: {
          start: {
            line: 194,
            column: 30
          },
          end: {
            line: 202,
            column: 5
          }
        },
        line: 194
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 203,
            column: 13
          }
        },
        loc: {
          start: {
            line: 203,
            column: 24
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 203
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 213,
            column: 12
          },
          end: {
            line: 213,
            column: 13
          }
        },
        loc: {
          start: {
            line: 213,
            column: 22
          },
          end: {
            line: 221,
            column: 5
          }
        },
        line: 213
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 222,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        },
        loc: {
          start: {
            line: 222,
            column: 30
          },
          end: {
            line: 230,
            column: 5
          }
        },
        line: 222
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 231,
            column: 13
          }
        },
        loc: {
          start: {
            line: 231,
            column: 30
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 231
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 240,
            column: 12
          },
          end: {
            line: 240,
            column: 13
          }
        },
        loc: {
          start: {
            line: 240,
            column: 24
          },
          end: {
            line: 247,
            column: 5
          }
        },
        line: 240
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 32,
            column: 11
          },
          end: {
            line: 34,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 32,
            column: 35
          },
          end: {
            line: 32,
            column: 38
          }
        }, {
          start: {
            line: 32,
            column: 41
          },
          end: {
            line: 34,
            column: 5
          }
        }],
        line: 32
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 11
          },
          end: {
            line: 32,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 11
          },
          end: {
            line: 32,
            column: 14
          }
        }, {
          start: {
            line: 32,
            column: 18
          },
          end: {
            line: 32,
            column: 32
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 38,
            column: 13
          },
          end: {
            line: 38,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 13
          },
          end: {
            line: 38,
            column: 44
          }
        }, {
          start: {
            line: 38,
            column: 48
          },
          end: {
            line: 38,
            column: 54
          }
        }],
        line: 38
      },
      "3": {
        loc: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "4": {
        loc: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\api.ts"],
      sourcesContent: ["import axios from \"axios\"\nimport { toast } from \"react-hot-toast\"\nimport { secureStorage } from \"../utils/secureStorage\"\nimport type { Client, Task, Event, EmailTemplate, NewTask, NewEvent } from \"../types\"\n\n// Create an axios instance with default config\nconst api = axios.create({\n  baseURL: process.env.NEXT_PUBLIC_API_URL || \"/api\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n})\n\n// Add request interceptor for authentication\napi.interceptors.request.use(\n  (config) => {\n    const token = secureStorage.getItem(\"auth_token\")\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n    return config\n  },\n  (error) => Promise.reject(error),\n)\n\n// Add response interceptor for error handling\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Handle specific error cases\n    if (error.response?.status === 401) {\n      // Handle unauthorized access\n      secureStorage.removeItem(\"auth_token\")\n      window.location.href = \"/login\"\n    }\n    return Promise.reject(error)\n  },\n)\n\n// Client API endpoints\nexport const clientsApi = {\n  getAll: async (): Promise<Client[]> => {\n    try {\n      const response = await api.get(\"/clients\")\n      return response.data\n    } catch (error) {\n      // Error fetching clients - error handled silently\n      throw error\n    }\n  },\n\n  getById: async (id: string): Promise<Client> => {\n    try {\n      const response = await api.get(`/clients/${id}`)\n      return response.data\n    } catch (error) {\n      // Error fetching client - error handled silently\n      throw error\n    }\n  },\n\n  update: async (id: string, data: Partial<Client>): Promise<Client> => {\n    try {\n      const response = await api.patch(`/clients/${id}`, data)\n      return response.data\n    } catch (error) {\n      // Error updating client - error handled silently\n      throw error\n    }\n  },\n\n  delete: async (id: string): Promise<void> => {\n    try {\n      await api.delete(`/clients/${id}`)\n    } catch (error) {\n      // Error deleting client - error handled silently\n      throw error\n    }\n  },\n\n  addNote: async (clientId: string, note: { type: \"call\" | \"email\" | \"meeting\"; content: string }): Promise<Client> => {\n    try {\n      const response = await api.post(`/clients/${clientId}/notes`, note)\n      return response.data\n    } catch (error) {\n      // Error adding note to client - error handled silently\n      throw error\n    }\n  },\n\n  updateStage: async (clientId: string, stage: string): Promise<Client> => {\n    try {\n      const response = await api.patch(`/clients/${clientId}`, { stage })\n      return response.data\n    } catch (error) {\n      // Error updating stage for client - error handled silently\n      throw error\n    }\n  },\n}\n\n// Task API endpoints\nexport const tasksApi = {\n  getAll: async (): Promise<Task[]> => {\n    try {\n      const response = await api.get(\"/tasks\")\n      return response.data\n    } catch (error) {\n      // Error fetching tasks - error handled silently\n      throw error\n    }\n  },\n\n  getById: async (id: string): Promise<Task> => {\n    try {\n      const response = await api.get(`/tasks/${id}`)\n      return response.data\n    } catch (error) {\n      // Error fetching task - error handled silently\n      throw error\n    }\n  },\n\n  create: async (task: NewTask): Promise<Task> => {\n    try {\n      const response = await api.post(\"/tasks\", task)\n      return response.data\n    } catch (error) {\n      // Error creating task - error handled silently\n      throw error\n    }\n  },\n\n  update: async (id: string, data: Partial<Task>): Promise<Task> => {\n    try {\n      const response = await api.patch(`/tasks/${id}`, data)\n      return response.data\n    } catch (error) {\n      // Error updating task - error handled silently\n      throw error\n    }\n  },\n\n  updateStatus: async (id: string, status: \"pending\" | \"in-progress\" | \"completed\"): Promise<Task> => {\n    try {\n      const response = await api.patch(`/tasks/${id}`, { status })\n      return response.data\n    } catch (error) {\n      // Error updating status for task - error handled silently\n      throw error\n    }\n  },\n\n  delete: async (id: string): Promise<void> => {\n    try {\n      await api.delete(`/tasks/${id}`)\n    } catch (error) {\n      // Error deleting task - error handled silently\n      throw error\n    }\n  },\n}\n\n// Event API endpoints\nexport const eventsApi = {\n  getAll: async (): Promise<Event[]> => {\n    try {\n      const response = await api.get(\"/events\")\n      return response.data\n    } catch (error) {\n      // Error fetching events - error handled silently\n      throw error\n    }\n  },\n\n  create: async (event: NewEvent): Promise<Event> => {\n    try {\n      const response = await api.post(\"/events\", event)\n      return response.data\n    } catch (error) {\n      // Error creating event - error handled silently\n      throw error\n    }\n  },\n\n  update: async (id: string, data: Partial<Event>): Promise<Event> => {\n    try {\n      const response = await api.patch(`/events/${id}`, data)\n      return response.data\n    } catch (error) {\n      // Error updating event - error handled silently\n      throw error\n    }\n  },\n\n  delete: async (id: string): Promise<void> => {\n    try {\n      await api.delete(`/events/${id}`)\n    } catch (error) {\n      // Error deleting event - error handled silently\n      throw error\n    }\n  },\n}\n\n// Email templates API endpoints\nexport const emailTemplatesApi = {\n  getAll: async (): Promise<EmailTemplate[]> => {\n    try {\n      const response = await api.get(\"/email-templates\")\n      return response.data\n    } catch (error) {\n      // Error fetching email templates - error handled silently\n      throw error\n    }\n  },\n\n  create: async (template: Omit<EmailTemplate, \"id\">): Promise<EmailTemplate> => {\n    try {\n      const response = await api.post(\"/email-templates\", template)\n      return response.data\n    } catch (error) {\n      // Error creating email template - error handled silently\n      throw error\n    }\n  },\n\n  update: async (id: number, data: Partial<EmailTemplate>): Promise<EmailTemplate> => {\n    try {\n      const response = await api.patch(`/email-templates/${id}`, data)\n      return response.data\n    } catch (error) {\n      // Error updating email template - error handled silently\n      throw error\n    }\n  },\n\n  delete: async (id: number): Promise<void> => {\n    try {\n      await api.delete(`/email-templates/${id}`)\n    } catch (error) {\n      // Error deleting email template - error handled silently\n      throw error\n    }\n  },\n}\n\n// Export a default object with all APIs\nexport default {\n  clients: clientsApi,\n  tasks: tasksApi,\n  events: eventsApi,\n  emailTemplates: emailTemplatesApi,\n}\n"],
      names: ["clientsApi", "emailTemplatesApi", "eventsApi", "tasksApi", "api", "axios", "create", "baseURL", "process", "env", "NEXT_PUBLIC_API_URL", "headers", "interceptors", "request", "use", "config", "token", "secureStorage", "getItem", "Authorization", "error", "Promise", "reject", "response", "status", "removeItem", "window", "location", "href", "getAll", "get", "data", "getById", "id", "update", "patch", "delete", "addNote", "clientId", "note", "post", "updateStage", "stage", "task", "updateStatus", "event", "template", "clients", "tasks", "events", "emailTemplates"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "89ebdf60153810a1596a87ff519725781a3062d3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_pjk3zuuny = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_pjk3zuuny();
cov_pjk3zuuny().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_pjk3zuuny().f[0]++;
  cov_pjk3zuuny().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_pjk3zuuny().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_pjk3zuuny().s[3]++;
_export(exports, {
  get clientsApi() {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[1]++;
    cov_pjk3zuuny().s[4]++;
    return clientsApi;
  },
  get
  // Export a default object with all APIs
  default() {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[2]++;
    cov_pjk3zuuny().s[5]++;
    return _default;
  },
  get emailTemplatesApi() {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[3]++;
    cov_pjk3zuuny().s[6]++;
    return emailTemplatesApi;
  },
  get eventsApi() {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[4]++;
    cov_pjk3zuuny().s[7]++;
    return eventsApi;
  },
  get tasksApi() {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[5]++;
    cov_pjk3zuuny().s[8]++;
    return tasksApi;
  }
});
const _axios =
/* istanbul ignore next */
(/*#__PURE__*/cov_pjk3zuuny().s[9]++, _interop_require_default(require("axios")));
const _secureStorage =
/* istanbul ignore next */
(cov_pjk3zuuny().s[10]++, require("../utils/secureStorage"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_pjk3zuuny().f[6]++;
  cov_pjk3zuuny().s[11]++;
  return /* istanbul ignore next */(cov_pjk3zuuny().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_pjk3zuuny().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_pjk3zuuny().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_pjk3zuuny().b[0][1]++, {
    default: obj
  });
}
// Create an axios instance with default config
const api =
/* istanbul ignore next */
(cov_pjk3zuuny().s[12]++, _axios.default.create({
  baseURL:
  /* istanbul ignore next */
  (cov_pjk3zuuny().b[2][0]++, process.env.NEXT_PUBLIC_API_URL) ||
  /* istanbul ignore next */
  (cov_pjk3zuuny().b[2][1]++, "/api"),
  headers: {
    "Content-Type": "application/json"
  }
}));
// Add request interceptor for authentication
/* istanbul ignore next */
cov_pjk3zuuny().s[13]++;
api.interceptors.request.use(config => {
  /* istanbul ignore next */
  cov_pjk3zuuny().f[7]++;
  const token =
  /* istanbul ignore next */
  (cov_pjk3zuuny().s[14]++, _secureStorage.secureStorage.getItem("auth_token"));
  /* istanbul ignore next */
  cov_pjk3zuuny().s[15]++;
  if (token) {
    /* istanbul ignore next */
    cov_pjk3zuuny().b[3][0]++;
    cov_pjk3zuuny().s[16]++;
    config.headers.Authorization = `Bearer ${token}`;
  } else
  /* istanbul ignore next */
  {
    cov_pjk3zuuny().b[3][1]++;
  }
  cov_pjk3zuuny().s[17]++;
  return config;
}, error => {
  /* istanbul ignore next */
  cov_pjk3zuuny().f[8]++;
  cov_pjk3zuuny().s[18]++;
  return Promise.reject(error);
});
// Add response interceptor for error handling
/* istanbul ignore next */
cov_pjk3zuuny().s[19]++;
api.interceptors.response.use(response => {
  /* istanbul ignore next */
  cov_pjk3zuuny().f[9]++;
  cov_pjk3zuuny().s[20]++;
  return response;
}, error => {
  /* istanbul ignore next */
  cov_pjk3zuuny().f[10]++;
  cov_pjk3zuuny().s[21]++;
  // Handle specific error cases
  if (error.response?.status === 401) {
    /* istanbul ignore next */
    cov_pjk3zuuny().b[4][0]++;
    cov_pjk3zuuny().s[22]++;
    // Handle unauthorized access
    _secureStorage.secureStorage.removeItem("auth_token");
    /* istanbul ignore next */
    cov_pjk3zuuny().s[23]++;
    window.location.href = "/login";
  } else
  /* istanbul ignore next */
  {
    cov_pjk3zuuny().b[4][1]++;
  }
  cov_pjk3zuuny().s[24]++;
  return Promise.reject(error);
});
const clientsApi =
/* istanbul ignore next */
(cov_pjk3zuuny().s[25]++, {
  getAll: async () => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[11]++;
    cov_pjk3zuuny().s[26]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[27]++, await api.get("/clients"));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[28]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[29]++;
      // Error fetching clients - error handled silently
      throw error;
    }
  },
  getById: async id => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[12]++;
    cov_pjk3zuuny().s[30]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[31]++, await api.get(`/clients/${id}`));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[32]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[33]++;
      // Error fetching client - error handled silently
      throw error;
    }
  },
  update: async (id, data) => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[13]++;
    cov_pjk3zuuny().s[34]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[35]++, await api.patch(`/clients/${id}`, data));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[36]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[37]++;
      // Error updating client - error handled silently
      throw error;
    }
  },
  delete: async id => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[14]++;
    cov_pjk3zuuny().s[38]++;
    try {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[39]++;
      await api.delete(`/clients/${id}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[40]++;
      // Error deleting client - error handled silently
      throw error;
    }
  },
  addNote: async (clientId, note) => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[15]++;
    cov_pjk3zuuny().s[41]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[42]++, await api.post(`/clients/${clientId}/notes`, note));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[43]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[44]++;
      // Error adding note to client - error handled silently
      throw error;
    }
  },
  updateStage: async (clientId, stage) => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[16]++;
    cov_pjk3zuuny().s[45]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[46]++, await api.patch(`/clients/${clientId}`, {
        stage
      }));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[47]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[48]++;
      // Error updating stage for client - error handled silently
      throw error;
    }
  }
});
const tasksApi =
/* istanbul ignore next */
(cov_pjk3zuuny().s[49]++, {
  getAll: async () => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[17]++;
    cov_pjk3zuuny().s[50]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[51]++, await api.get("/tasks"));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[52]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[53]++;
      // Error fetching tasks - error handled silently
      throw error;
    }
  },
  getById: async id => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[18]++;
    cov_pjk3zuuny().s[54]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[55]++, await api.get(`/tasks/${id}`));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[56]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[57]++;
      // Error fetching task - error handled silently
      throw error;
    }
  },
  create: async task => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[19]++;
    cov_pjk3zuuny().s[58]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[59]++, await api.post("/tasks", task));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[60]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[61]++;
      // Error creating task - error handled silently
      throw error;
    }
  },
  update: async (id, data) => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[20]++;
    cov_pjk3zuuny().s[62]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[63]++, await api.patch(`/tasks/${id}`, data));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[64]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[65]++;
      // Error updating task - error handled silently
      throw error;
    }
  },
  updateStatus: async (id, status) => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[21]++;
    cov_pjk3zuuny().s[66]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[67]++, await api.patch(`/tasks/${id}`, {
        status
      }));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[68]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[69]++;
      // Error updating status for task - error handled silently
      throw error;
    }
  },
  delete: async id => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[22]++;
    cov_pjk3zuuny().s[70]++;
    try {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[71]++;
      await api.delete(`/tasks/${id}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[72]++;
      // Error deleting task - error handled silently
      throw error;
    }
  }
});
const eventsApi =
/* istanbul ignore next */
(cov_pjk3zuuny().s[73]++, {
  getAll: async () => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[23]++;
    cov_pjk3zuuny().s[74]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[75]++, await api.get("/events"));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[76]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[77]++;
      // Error fetching events - error handled silently
      throw error;
    }
  },
  create: async event => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[24]++;
    cov_pjk3zuuny().s[78]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[79]++, await api.post("/events", event));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[80]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[81]++;
      // Error creating event - error handled silently
      throw error;
    }
  },
  update: async (id, data) => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[25]++;
    cov_pjk3zuuny().s[82]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[83]++, await api.patch(`/events/${id}`, data));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[84]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[85]++;
      // Error updating event - error handled silently
      throw error;
    }
  },
  delete: async id => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[26]++;
    cov_pjk3zuuny().s[86]++;
    try {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[87]++;
      await api.delete(`/events/${id}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[88]++;
      // Error deleting event - error handled silently
      throw error;
    }
  }
});
const emailTemplatesApi =
/* istanbul ignore next */
(cov_pjk3zuuny().s[89]++, {
  getAll: async () => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[27]++;
    cov_pjk3zuuny().s[90]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[91]++, await api.get("/email-templates"));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[92]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[93]++;
      // Error fetching email templates - error handled silently
      throw error;
    }
  },
  create: async template => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[28]++;
    cov_pjk3zuuny().s[94]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[95]++, await api.post("/email-templates", template));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[96]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[97]++;
      // Error creating email template - error handled silently
      throw error;
    }
  },
  update: async (id, data) => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[29]++;
    cov_pjk3zuuny().s[98]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[99]++, await api.patch(`/email-templates/${id}`, data));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[100]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[101]++;
      // Error updating email template - error handled silently
      throw error;
    }
  },
  delete: async id => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[30]++;
    cov_pjk3zuuny().s[102]++;
    try {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[103]++;
      await api.delete(`/email-templates/${id}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[104]++;
      // Error deleting email template - error handled silently
      throw error;
    }
  }
});
const _default =
/* istanbul ignore next */
(cov_pjk3zuuny().s[105]++, {
  clients: clientsApi,
  tasks: tasksApi,
  events: eventsApi,
  emailTemplates: emailTemplatesApi
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,