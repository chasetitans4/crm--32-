{"version":3,"names":["AdvancedEncryption","cov_unkz90byx","f","s","advancedEncryption","decryptApiKey","decryptData","encryptApiKey","encryptData","ENCRYPTION_CONFIG","algorithm","keyLength","ivLength","saltLength","tagLength","iterations","keyDerivationAlgorithm","hashAlgorithm","constructor","masterPassword","version","isInitialized","b","process","env","ENCRYPTION_MASTER_KEY","NEXT_PUBLIC_ENCRYPTION_FALLBACK","console","warn","initialize","masterKeyHex","getMasterKeyWithManagement","masterKey","hexToArrayBuffer","cryptoKey","crypto","subtle","importKey","name","log","scheduleKeyRotationCheck","error","Error","encoder","TextEncoder","data","encode","hashBuffer","digest","arrayBufferToHex","rotateEncryptionKey","getHealthStatus","initialized","keyPresent","hex","bytes","Uint8Array","length","i","parseInt","substr","buffer","Array","from","byte","toString","padStart","join","deriveKey","salt","passwordKey","hash","generateSalt","getRandomValues","generateIV","arrayBufferToBase64","binary","byteLength","String","fromCharCode","btoa","base64ToArrayBuffer","base64","atob","charCodeAt","encrypt","plaintext","iv","key","encodedPlaintext","encryptedBuffer","encryptedArray","encryptedData","slice","tag","result","JSON","stringify","decrypt","parse","encrypted","encryptedWithTag","set","decryptedBuffer","TextDecoder","decode","apiKey","metadata","dataToEncrypt","timestamp","Date","now","keyType","encryptedApiKey","decryptedData","isEncrypted","parsed","generateSecureKey","array","hashSensitiveData","dataBuffer"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\encryption.ts"],"sourcesContent":["/**\n * Advanced Encryption Module for CRM Platform\n * Implements AES-256-GCM encryption with PBKDF2 key derivation\n * Provides industry-standard security for sensitive data\n */\n\n// Encryption configuration constants\nconst ENCRYPTION_CONFIG = {\n  algorithm: 'AES-GCM' as const,\n  keyLength: 256,\n  ivLength: 12, // 96 bits for GCM\n  saltLength: 32, // 256 bits\n  tagLength: 16, // 128 bits\n  iterations: 100000, // PBKDF2 iterations (OWASP recommended minimum)\n  keyDerivationAlgorithm: 'PBKDF2' as const,\n  hashAlgorithm: 'SHA-256' as const,\n} as const\n\n// Type definitions for encryption operations\ninterface EncryptionResult {\n  encryptedData: string\n  iv: string\n  salt: string\n  tag: string\n  version: string\n}\n\ninterface DecryptionInput {\n  encryptedData: string\n  iv: string\n  salt: string\n  tag: string\n  version?: string\n}\n\ninterface KeyDerivationResult {\n  key: CryptoKey\n  salt: Uint8Array\n}\n\n/**\n * Advanced Encryption Service Class\n * Provides secure encryption/decryption with proper key management\n */\nexport class AdvancedEncryption {\n  private readonly masterPassword: string\n  private readonly version = '1.0'\n\n  private isInitialized = false\n  private masterKey?: ArrayBuffer\n  private cryptoKey?: CryptoKey\n\n  constructor(masterPassword?: string) {\n    // Use environment variable or provided password\n    this.masterPassword = masterPassword || \n      process.env.ENCRYPTION_MASTER_KEY || \n      process.env.NEXT_PUBLIC_ENCRYPTION_FALLBACK || \n      'default-secure-key-change-in-production'\n    \n    if (this.masterPassword === 'default-secure-key-change-in-production') {\n      console.warn('‚ö†Ô∏è  Using default encryption key. Set ENCRYPTION_MASTER_KEY in production!')\n    }\n  }\n\n  /**\n   * Initialize the encryption system with key management\n   */\n  private async initialize(): Promise<void> {\n    if (this.isInitialized) return\n\n    try {\n      // Get or create master key with key management\n      const masterKeyHex = await this.getMasterKeyWithManagement()\n      this.masterKey = this.hexToArrayBuffer(masterKeyHex)\n      \n      // Import the key for use with Web Crypto API\n      this.cryptoKey = await crypto.subtle.importKey(\n        'raw',\n        this.masterKey,\n        { name: 'AES-GCM' },\n        false,\n        ['encrypt', 'decrypt']\n      )\n      \n      this.isInitialized = true\n      console.log('üîê Advanced encryption system initialized with key management')\n      \n      // Schedule periodic key rotation check\n      this.scheduleKeyRotationCheck()\n    } catch (error) {\n      console.error('Failed to initialize encryption system:', error)\n      throw new Error('Encryption initialization failed')\n    }\n  }\n\n  /**\n   * Get or create master key with management capabilities\n   */\n  private async getMasterKeyWithManagement(): Promise<string> {\n    // For now, derive from master password - in production this would use secure key storage\n    const encoder = new TextEncoder()\n    const data = encoder.encode(this.masterPassword)\n    const hashBuffer = await crypto.subtle.digest('SHA-256', data)\n    return this.arrayBufferToHex(hashBuffer)\n  }\n\n  /**\n   * Schedule periodic key rotation checks\n   */\n  private scheduleKeyRotationCheck(): void {\n    // Implementation would depend on your key rotation policy\n    console.log('Key rotation check scheduled')\n  }\n\n  /**\n   * Integrate with key management for automatic rotation\n   */\n  async rotateEncryptionKey(): Promise<void> {\n    try {\n      // Force re-initialization with new key\n      this.isInitialized = false\n      await this.initialize()\n      console.log('üîÑ Encryption key rotated successfully')\n    } catch (error) {\n      console.error('Failed to rotate encryption key:', error)\n      throw new Error('Key rotation failed')\n    }\n  }\n\n  /**\n   * Get encryption health status\n   */\n  getHealthStatus(): {\n    initialized: boolean\n    keyPresent: boolean\n    version: string\n  } {\n    return {\n      initialized: this.isInitialized,\n      keyPresent: !!this.cryptoKey,\n      version: this.version\n    }\n  }\n\n  /**\n   * Convert hex string to ArrayBuffer\n   */\n  private hexToArrayBuffer(hex: string): ArrayBuffer {\n    const bytes = new Uint8Array(hex.length / 2)\n    for (let i = 0; i < hex.length; i += 2) {\n      bytes[i / 2] = parseInt(hex.substr(i, 2), 16)\n    }\n    return bytes.buffer\n  }\n\n  /**\n   * Convert ArrayBuffer to hex string\n   */\n  private arrayBufferToHex(buffer: ArrayBuffer): string {\n    const bytes = new Uint8Array(buffer)\n    return Array.from(bytes, byte => byte.toString(16).padStart(2, '0')).join('')\n  }\n\n  /**\n   * Derives a cryptographic key from the master password using PBKDF2\n   */\n  private async deriveKey(salt: Uint8Array): Promise<CryptoKey> {\n    if (!crypto.subtle) {\n      throw new Error('Web Crypto API not available. Secure encryption requires HTTPS.')\n    }\n\n    // Import the master password as a key\n    const passwordKey = await crypto.subtle.importKey(\n      'raw',\n      new TextEncoder().encode(this.masterPassword),\n      { name: ENCRYPTION_CONFIG.keyDerivationAlgorithm },\n      false,\n      ['deriveKey']\n    )\n\n    // Derive the actual encryption key\n    return await crypto.subtle.deriveKey(\n      {\n        name: ENCRYPTION_CONFIG.keyDerivationAlgorithm,\n        salt: salt.buffer as ArrayBuffer,\n        iterations: ENCRYPTION_CONFIG.iterations,\n        hash: ENCRYPTION_CONFIG.hashAlgorithm,\n      },\n      passwordKey,\n      {\n        name: ENCRYPTION_CONFIG.algorithm,\n        length: ENCRYPTION_CONFIG.keyLength,\n      },\n      false,\n      ['encrypt', 'decrypt']\n    )\n  }\n\n  /**\n   * Generates a cryptographically secure random salt\n   */\n  private generateSalt(): Uint8Array {\n    return crypto.getRandomValues(new Uint8Array(ENCRYPTION_CONFIG.saltLength))\n  }\n\n  /**\n   * Generates a cryptographically secure random IV\n   */\n  private generateIV(): Uint8Array {\n    return crypto.getRandomValues(new Uint8Array(ENCRYPTION_CONFIG.ivLength))\n  }\n\n  /**\n   * Converts Uint8Array to base64 string for storage\n   */\n  private arrayBufferToBase64(buffer: ArrayBuffer | Uint8Array | ArrayBufferLike): string {\n    const bytes = buffer instanceof Uint8Array ? buffer : new Uint8Array(buffer as ArrayBuffer)\n    let binary = ''\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i])\n    }\n    return btoa(binary)\n  }\n\n  /**\n   * Converts base64 string back to Uint8Array\n   */\n  private base64ToArrayBuffer(base64: string): ArrayBuffer {\n    const binary = atob(base64)\n    const bytes = new Uint8Array(binary.length)\n    for (let i = 0; i < binary.length; i++) {\n      bytes[i] = binary.charCodeAt(i)\n    }\n    return bytes.buffer\n  }\n\n  /**\n   * Encrypts data using AES-256-GCM with PBKDF2 key derivation\n   */\n  async encrypt(plaintext: string): Promise<string> {\n    try {\n      if (!crypto.subtle) {\n        throw new Error('Web Crypto API not available')\n      }\n\n      // Generate random salt and IV\n      const salt = this.generateSalt()\n      const iv = this.generateIV()\n\n      // Derive encryption key\n      const key = await this.deriveKey(salt)\n\n      // Encrypt the data\n      const encodedPlaintext = new TextEncoder().encode(plaintext)\n      const encryptedBuffer = await crypto.subtle.encrypt(\n        {\n          name: ENCRYPTION_CONFIG.algorithm,\n          iv: iv.buffer as ArrayBuffer,\n        },\n        key,\n        encodedPlaintext\n      )\n\n      // Extract the encrypted data and authentication tag\n      const encryptedArray = new Uint8Array(encryptedBuffer)\n      const encryptedData = encryptedArray.slice(0, -ENCRYPTION_CONFIG.tagLength)\n      const tag = encryptedArray.slice(-ENCRYPTION_CONFIG.tagLength)\n\n      // Create result object\n      const result: EncryptionResult = {\n        encryptedData: this.arrayBufferToBase64(encryptedData.buffer),\n        iv: this.arrayBufferToBase64(iv.buffer),\n        salt: this.arrayBufferToBase64(salt.buffer),\n        tag: this.arrayBufferToBase64(tag.buffer),\n        version: this.version,\n      }\n\n      // Return as JSON string for storage\n      return JSON.stringify(result)\n    } catch (error) {\n      console.error('Encryption failed:', error)\n      throw new Error('Failed to encrypt data')\n    }\n  }\n\n  /**\n   * Decrypts data encrypted with AES-256-GCM\n   */\n  async decrypt(encryptedData: string): Promise<string> {\n    try {\n      if (!crypto.subtle) {\n        throw new Error('Web Crypto API not available')\n      }\n\n      // Parse the encrypted data\n      const data: DecryptionInput = JSON.parse(encryptedData)\n      \n      // Convert base64 strings back to ArrayBuffers\n      const salt = new Uint8Array(this.base64ToArrayBuffer(data.salt))\n      const iv = new Uint8Array(this.base64ToArrayBuffer(data.iv))\n      const encrypted = new Uint8Array(this.base64ToArrayBuffer(data.encryptedData))\n      const tag = new Uint8Array(this.base64ToArrayBuffer(data.tag))\n\n      // Derive the same key using the stored salt\n      const key = await this.deriveKey(salt)\n\n      // Combine encrypted data and tag for decryption\n      const encryptedWithTag = new Uint8Array(encrypted.length + tag.length)\n      encryptedWithTag.set(encrypted)\n      encryptedWithTag.set(tag, encrypted.length)\n\n      // Decrypt the data\n      const decryptedBuffer = await crypto.subtle.decrypt(\n        {\n          name: ENCRYPTION_CONFIG.algorithm,\n          iv: iv,\n        },\n        key,\n        encryptedWithTag\n      )\n\n      // Convert back to string\n      return new TextDecoder().decode(decryptedBuffer)\n    } catch (error) {\n      console.error('Decryption failed:', error)\n      throw new Error('Failed to decrypt data')\n    }\n  }\n\n  /**\n   * Encrypts data for API keys and tokens with additional metadata\n   */\n  async encryptApiKey(apiKey: string, metadata?: Record<string, any>): Promise<string> {\n    const dataToEncrypt = {\n      apiKey,\n      metadata: metadata || {},\n      timestamp: Date.now(),\n      keyType: 'api_key',\n    }\n    return await this.encrypt(JSON.stringify(dataToEncrypt))\n  }\n\n  /**\n   * Decrypts API keys and returns the key with metadata\n   */\n  async decryptApiKey(encryptedApiKey: string): Promise<{\n    apiKey: string\n    metadata: Record<string, any>\n    timestamp: number\n    keyType: string\n  }> {\n    const decryptedData = await this.decrypt(encryptedApiKey)\n    return JSON.parse(decryptedData)\n  }\n\n  /**\n   * Validates if data is properly encrypted (has correct structure)\n   */\n  isEncrypted(data: string): boolean {\n    try {\n      const parsed = JSON.parse(data)\n      return !!(\n        parsed.encryptedData &&\n        parsed.iv &&\n        parsed.salt &&\n        parsed.tag &&\n        parsed.version\n      )\n    } catch {\n      return false\n    }\n  }\n\n  /**\n   * Generates a secure random encryption key for key rotation\n   */\n  generateSecureKey(length: number = 32): string {\n    const array = crypto.getRandomValues(new Uint8Array(length))\n    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('')\n  }\n\n  /**\n   * Hashes sensitive data for comparison without storing plaintext\n   */\n  async hashSensitiveData(data: string): Promise<string> {\n    const encoder = new TextEncoder()\n    const dataBuffer = encoder.encode(data)\n    const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer)\n    return this.arrayBufferToBase64(hashBuffer)\n  }\n}\n\n// Create singleton instance\nexport const advancedEncryption = new AdvancedEncryption()\n\n// Export convenience functions for backward compatibility\nexport const encryptData = (data: string): Promise<string> => advancedEncryption.encrypt(data)\nexport const decryptData = (encryptedData: string): Promise<string> => advancedEncryption.decrypt(encryptedData)\nexport const encryptApiKey = (apiKey: string): Promise<string> => advancedEncryption.encryptApiKey(apiKey)\nexport const decryptApiKey = (encryptedApiKey: string): Promise<{\n  apiKey: string\n  metadata: Record<string, any>\n  timestamp: number\n  keyType: string\n}> => advancedEncryption.decryptApiKey(encryptedApiKey)\n\n// Export types for external use\nexport type { EncryptionResult, DecryptionInput, KeyDerivationResult }"],"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","ignoreList":[]}