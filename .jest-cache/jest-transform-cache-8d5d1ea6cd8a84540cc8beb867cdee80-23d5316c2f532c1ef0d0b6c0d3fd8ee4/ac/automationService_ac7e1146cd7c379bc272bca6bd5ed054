70752c6b2e9d983aad0762e73647d3bd
"use client";
"use strict";

/* istanbul ignore next */
function cov_27l0vpc7cp() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\automationService.ts";
  var hash = "492241bd376bf3908e288109fd66dacc6ba719f9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\automationService.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 20,
          column: 3
        }
      },
      "4": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 24
        }
      },
      "5": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 36
        }
      },
      "6": {
        start: {
          line: 21,
          column: 15
        },
        end: {
          line: 21,
          column: 31
        }
      },
      "7": {
        start: {
          line: 22,
          column: 18
        },
        end: {
          line: 22,
          column: 44
        }
      },
      "8": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 118,
          column: 5
        }
      },
      "9": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 47,
          column: 13
        }
      },
      "10": {
        start: {
          line: 29,
          column: 36
        },
        end: {
          line: 29,
          column: 49
        }
      },
      "11": {
        start: {
          line: 33,
          column: 16
        },
        end: {
          line: 35,
          column: 17
        }
      },
      "12": {
        start: {
          line: 34,
          column: 20
        },
        end: {
          line: 34,
          column: 102
        }
      },
      "13": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 71
        }
      },
      "14": {
        start: {
          line: 37,
          column: 45
        },
        end: {
          line: 37,
          column: 69
        }
      },
      "15": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 42,
          column: 19
        }
      },
      "16": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 117
        }
      },
      "17": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 18
        }
      },
      "18": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "19": {
        start: {
          line: 52,
          column: 31
        },
        end: {
          line: 52,
          column: 44
        }
      },
      "20": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 55,
          column: 17
        }
      },
      "21": {
        start: {
          line: 54,
          column: 20
        },
        end: {
          line: 54,
          column: 89
        }
      },
      "22": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 61,
          column: 19
        }
      },
      "23": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 111
        }
      },
      "24": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 18
        }
      },
      "25": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 74,
          column: 13
        }
      },
      "26": {
        start: {
          line: 69,
          column: 31
        },
        end: {
          line: 69,
          column: 44
        }
      },
      "27": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 99
        }
      },
      "28": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 120
        }
      },
      "29": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 18
        }
      },
      "30": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 84,
          column: 13
        }
      },
      "31": {
        start: {
          line: 79,
          column: 31
        },
        end: {
          line: 79,
          column: 44
        }
      },
      "32": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 81,
          column: 98
        }
      },
      "33": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 120
        }
      },
      "34": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 18
        }
      },
      "35": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 114,
          column: 13
        }
      },
      "36": {
        start: {
          line: 89,
          column: 43
        },
        end: {
          line: 89,
          column: 56
        }
      },
      "37": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 92,
          column: 17
        }
      },
      "38": {
        start: {
          line: 91,
          column: 20
        },
        end: {
          line: 91,
          column: 98
        }
      },
      "39": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 94,
          column: 71
        }
      },
      "40": {
        start: {
          line: 94,
          column: 45
        },
        end: {
          line: 94,
          column: 69
        }
      },
      "41": {
        start: {
          line: 95,
          column: 37
        },
        end: {
          line: 105,
          column: 17
        }
      },
      "42": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 77
        }
      },
      "43": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 113,
          column: 124
        }
      },
      "44": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 18
        }
      },
      "45": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 64
        }
      },
      "46": {
        start: {
          line: 121,
          column: 22
        },
        end: {
          line: 153,
          column: 1
        }
      },
      "47": {
        start: {
          line: 154,
          column: 23
        },
        end: {
          line: 170,
          column: 1
        }
      },
      "48": {
        start: {
          line: 171,
          column: 29
        },
        end: {
          line: 415,
          column: 1
        }
      },
      "49": {
        start: {
          line: 172,
          column: 38
        },
        end: {
          line: 172,
          column: 65
        }
      },
      "50": {
        start: {
          line: 173,
          column: 30
        },
        end: {
          line: 173,
          column: 56
        }
      },
      "51": {
        start: {
          line: 174,
          column: 27
        },
        end: {
          line: 194,
          column: 10
        }
      },
      "52": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 27
        }
      },
      "53": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 23
        }
      },
      "54": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "55": {
        start: {
          line: 179,
          column: 32
        },
        end: {
          line: 185,
          column: 13
        }
      },
      "56": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 31
        }
      },
      "57": {
        start: {
          line: 188,
          column: 33
        },
        end: {
          line: 188,
          column: 97
        }
      },
      "58": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 35
        }
      },
      "59": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 42
        }
      },
      "60": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 32
        }
      },
      "61": {
        start: {
          line: 195,
          column: 27
        },
        end: {
          line: 218,
          column: 10
        }
      },
      "62": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 27
        }
      },
      "63": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 23
        }
      },
      "64": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "65": {
        start: {
          line: 200,
          column: 37
        },
        end: {
          line: 200,
          column: 73
        }
      },
      "66": {
        start: {
          line: 200,
          column: 61
        },
        end: {
          line: 200,
          column: 72
        }
      },
      "67": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 203,
          column: 13
        }
      },
      "68": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 68
        }
      },
      "69": {
        start: {
          line: 204,
          column: 36
        },
        end: {
          line: 209,
          column: 13
        }
      },
      "70": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 35
        }
      },
      "71": {
        start: {
          line: 212,
          column: 33
        },
        end: {
          line: 212,
          column: 97
        }
      },
      "72": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 35
        }
      },
      "73": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 42
        }
      },
      "74": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 32
        }
      },
      "75": {
        start: {
          line: 219,
          column: 27
        },
        end: {
          line: 239,
          column: 10
        }
      },
      "76": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 27
        }
      },
      "77": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 221,
          column: 23
        }
      },
      "78": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "79": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 225,
          column: 13
        }
      },
      "80": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 67
        }
      },
      "81": {
        start: {
          line: 226,
          column: 44
        },
        end: {
          line: 226,
          column: 125
        }
      },
      "82": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 49
        }
      },
      "83": {
        start: {
          line: 227,
          column: 30
        },
        end: {
          line: 227,
          column: 49
        }
      },
      "84": {
        start: {
          line: 228,
          column: 43
        },
        end: {
          line: 228,
          column: 123
        }
      },
      "85": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 47
        }
      },
      "86": {
        start: {
          line: 229,
          column: 29
        },
        end: {
          line: 229,
          column: 47
        }
      },
      "87": {
        start: {
          line: 230,
          column: 39
        },
        end: {
          line: 230,
          column: 103
        }
      },
      "88": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 39
        }
      },
      "89": {
        start: {
          line: 231,
          column: 25
        },
        end: {
          line: 231,
          column: 39
        }
      },
      "90": {
        start: {
          line: 233,
          column: 33
        },
        end: {
          line: 233,
          column: 97
        }
      },
      "91": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 35
        }
      },
      "92": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 42
        }
      },
      "93": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 32
        }
      },
      "94": {
        start: {
          line: 240,
          column: 28
        },
        end: {
          line: 274,
          column: 10
        }
      },
      "95": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 241,
          column: 27
        }
      },
      "96": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 23
        }
      },
      "97": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 273,
          column: 9
        }
      },
      "98": {
        start: {
          line: 245,
          column: 29
        },
        end: {
          line: 245,
          column: 65
        }
      },
      "99": {
        start: {
          line: 245,
          column: 53
        },
        end: {
          line: 245,
          column: 64
        }
      },
      "100": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 248,
          column: 13
        }
      },
      "101": {
        start: {
          line: 247,
          column: 16
        },
        end: {
          line: 247,
          column: 68
        }
      },
      "102": {
        start: {
          line: 249,
          column: 30
        },
        end: {
          line: 263,
          column: 13
        }
      },
      "103": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 68
        }
      },
      "104": {
        start: {
          line: 265,
          column: 41
        },
        end: {
          line: 265,
          column: 66
        }
      },
      "105": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 29
        }
      },
      "106": {
        start: {
          line: 268,
          column: 33
        },
        end: {
          line: 268,
          column: 98
        }
      },
      "107": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 35
        }
      },
      "108": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 270,
          column: 42
        }
      },
      "109": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 32
        }
      },
      "110": {
        start: {
          line: 275,
          column: 25
        },
        end: {
          line: 325,
          column: 10
        }
      },
      "111": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 27
        }
      },
      "112": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 277,
          column: 23
        }
      },
      "113": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 324,
          column: 9
        }
      },
      "114": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 283,
          column: 13
        }
      },
      "115": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 73
        }
      },
      "116": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 37
        }
      },
      "117": {
        start: {
          line: 284,
          column: 47
        },
        end: {
          line: 284,
          column: 101
        }
      },
      "118": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 288,
          column: 13
        }
      },
      "119": {
        start: {
          line: 286,
          column: 16
        },
        end: {
          line: 286,
          column: 97
        }
      },
      "120": {
        start: {
          line: 287,
          column: 16
        },
        end: {
          line: 287,
          column: 37
        }
      },
      "121": {
        start: {
          line: 290,
          column: 34
        },
        end: {
          line: 316,
          column: 15
        }
      },
      "122": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 293,
          column: 17
        }
      },
      "123": {
        start: {
          line: 292,
          column: 20
        },
        end: {
          line: 292,
          column: 71
        }
      },
      "124": {
        start: {
          line: 294,
          column: 42
        },
        end: {
          line: 294,
          column: 138
        }
      },
      "125": {
        start: {
          line: 295,
          column: 42
        },
        end: {
          line: 295,
          column: 128
        }
      },
      "126": {
        start: {
          line: 297,
          column: 63
        },
        end: {
          line: 297,
          column: 153
        }
      },
      "127": {
        start: {
          line: 298,
          column: 39
        },
        end: {
          line: 298,
          column: 78
        }
      },
      "128": {
        start: {
          line: 299,
          column: 16
        },
        end: {
          line: 315,
          column: 18
        }
      },
      "129": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 33
        }
      },
      "130": {
        start: {
          line: 319,
          column: 33
        },
        end: {
          line: 319,
          column: 97
        }
      },
      "131": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 35
        }
      },
      "132": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 321,
          column: 42
        }
      },
      "133": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 323,
          column: 32
        }
      },
      "134": {
        start: {
          line: 326,
          column: 25
        },
        end: {
          line: 343,
          column: 10
        }
      },
      "135": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 327,
          column: 27
        }
      },
      "136": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 328,
          column: 23
        }
      },
      "137": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 342,
          column: 9
        }
      },
      "138": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 332,
          column: 13
        }
      },
      "139": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 331,
          column: 67
        }
      },
      "140": {
        start: {
          line: 333,
          column: 36
        },
        end: {
          line: 333,
          column: 99
        }
      },
      "141": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 35
        }
      },
      "142": {
        start: {
          line: 334,
          column: 23
        },
        end: {
          line: 334,
          column: 35
        }
      },
      "143": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 335,
          column: 24
        }
      },
      "144": {
        start: {
          line: 337,
          column: 33
        },
        end: {
          line: 337,
          column: 97
        }
      },
      "145": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 35
        }
      },
      "146": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 42
        }
      },
      "147": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 32
        }
      },
      "148": {
        start: {
          line: 344,
          column: 26
        },
        end: {
          line: 361,
          column: 10
        }
      },
      "149": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 345,
          column: 27
        }
      },
      "150": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 346,
          column: 23
        }
      },
      "151": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 360,
          column: 9
        }
      },
      "152": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 350,
          column: 13
        }
      },
      "153": {
        start: {
          line: 349,
          column: 16
        },
        end: {
          line: 349,
          column: 79
        }
      },
      "154": {
        start: {
          line: 349,
          column: 50
        },
        end: {
          line: 349,
          column: 77
        }
      },
      "155": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 353,
          column: 14
        }
      },
      "156": {
        start: {
          line: 355,
          column: 33
        },
        end: {
          line: 355,
          column: 98
        }
      },
      "157": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 356,
          column: 35
        }
      },
      "158": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 357,
          column: 42
        }
      },
      "159": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 359,
          column: 32
        }
      },
      "160": {
        start: {
          line: 362,
          column: 25
        },
        end: {
          line: 402,
          column: 10
        }
      },
      "161": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 363,
          column: 27
        }
      },
      "162": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 364,
          column: 23
        }
      },
      "163": {
        start: {
          line: 365,
          column: 8
        },
        end: {
          line: 401,
          column: 9
        }
      },
      "164": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 394,
          column: 14
        }
      },
      "165": {
        start: {
          line: 368,
          column: 59
        },
        end: {
          line: 368,
          column: 69
        }
      },
      "166": {
        start: {
          line: 370,
          column: 65
        },
        end: {
          line: 370,
          column: 89
        }
      },
      "167": {
        start: {
          line: 371,
          column: 61
        },
        end: {
          line: 371,
          column: 82
        }
      },
      "168": {
        start: {
          line: 396,
          column: 33
        },
        end: {
          line: 396,
          column: 97
        }
      },
      "169": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 397,
          column: 35
        }
      },
      "170": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 398,
          column: 42
        }
      },
      "171": {
        start: {
          line: 400,
          column: 12
        },
        end: {
          line: 400,
          column: 32
        }
      },
      "172": {
        start: {
          line: 403,
          column: 4
        },
        end: {
          line: 414,
          column: 6
        }
      },
      "173": {
        start: {
          line: 416,
          column: 17
        },
        end: {
          line: 418,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 15
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 32
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "3": {
        name: "executeWorkflowAction",
        decl: {
          start: {
            line: 24,
            column: 15
          },
          end: {
            line: 24,
            column: 36
          }
        },
        loc: {
          start: {
            line: 24,
            column: 45
          },
          end: {
            line: 119,
            column: 1
          }
        },
        line: 24
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 37,
            column: 34
          },
          end: {
            line: 37,
            column: 35
          }
        },
        loc: {
          start: {
            line: 37,
            column: 45
          },
          end: {
            line: 37,
            column: 69
          }
        },
        line: 37
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 94,
            column: 34
          },
          end: {
            line: 94,
            column: 35
          }
        },
        loc: {
          start: {
            line: 94,
            column: 45
          },
          end: {
            line: 94,
            column: 69
          }
        },
        line: 94
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 171,
            column: 29
          },
          end: {
            line: 171,
            column: 30
          }
        },
        loc: {
          start: {
            line: 171,
            column: 33
          },
          end: {
            line: 415,
            column: 1
          }
        },
        line: 171
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 174,
            column: 51
          },
          end: {
            line: 174,
            column: 52
          }
        },
        loc: {
          start: {
            line: 174,
            column: 69
          },
          end: {
            line: 194,
            column: 5
          }
        },
        line: 174
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 195,
            column: 51
          },
          end: {
            line: 195,
            column: 52
          }
        },
        loc: {
          start: {
            line: 195,
            column: 72
          },
          end: {
            line: 218,
            column: 5
          }
        },
        line: 195
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 200,
            column: 56
          },
          end: {
            line: 200,
            column: 57
          }
        },
        loc: {
          start: {
            line: 200,
            column: 61
          },
          end: {
            line: 200,
            column: 72
          }
        },
        line: 200
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 219,
            column: 51
          },
          end: {
            line: 219,
            column: 52
          }
        },
        loc: {
          start: {
            line: 219,
            column: 63
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 219
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 240,
            column: 52
          },
          end: {
            line: 240,
            column: 53
          }
        },
        loc: {
          start: {
            line: 240,
            column: 73
          },
          end: {
            line: 274,
            column: 5
          }
        },
        line: 240
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 245,
            column: 48
          },
          end: {
            line: 245,
            column: 49
          }
        },
        loc: {
          start: {
            line: 245,
            column: 53
          },
          end: {
            line: 245,
            column: 64
          }
        },
        line: 245
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 265,
            column: 30
          },
          end: {
            line: 265,
            column: 31
          }
        },
        loc: {
          start: {
            line: 265,
            column: 41
          },
          end: {
            line: 265,
            column: 66
          }
        },
        line: 265
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 275,
            column: 49
          },
          end: {
            line: 275,
            column: 50
          }
        },
        loc: {
          start: {
            line: 275,
            column: 59
          },
          end: {
            line: 325,
            column: 5
          }
        },
        line: 275
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 290,
            column: 66
          },
          end: {
            line: 290,
            column: 67
          }
        },
        loc: {
          start: {
            line: 290,
            column: 78
          },
          end: {
            line: 316,
            column: 13
          }
        },
        line: 290
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 326,
            column: 49
          },
          end: {
            line: 326,
            column: 50
          }
        },
        loc: {
          start: {
            line: 326,
            column: 59
          },
          end: {
            line: 343,
            column: 5
          }
        },
        line: 326
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 344,
            column: 50
          },
          end: {
            line: 344,
            column: 51
          }
        },
        loc: {
          start: {
            line: 344,
            column: 70
          },
          end: {
            line: 361,
            column: 5
          }
        },
        line: 344
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 349,
            column: 45
          },
          end: {
            line: 349,
            column: 46
          }
        },
        loc: {
          start: {
            line: 349,
            column: 50
          },
          end: {
            line: 349,
            column: 77
          }
        },
        line: 349
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 362,
            column: 49
          },
          end: {
            line: 362,
            column: 50
          }
        },
        loc: {
          start: {
            line: 362,
            column: 59
          },
          end: {
            line: 402,
            column: 5
          }
        },
        line: 362
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 368,
            column: 54
          },
          end: {
            line: 368,
            column: 55
          }
        },
        loc: {
          start: {
            line: 368,
            column: 59
          },
          end: {
            line: 368,
            column: 69
          }
        },
        line: 368
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 370,
            column: 60
          },
          end: {
            line: 370,
            column: 61
          }
        },
        loc: {
          start: {
            line: 370,
            column: 65
          },
          end: {
            line: 370,
            column: 89
          }
        },
        line: 370
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 371,
            column: 56
          },
          end: {
            line: 371,
            column: 57
          }
        },
        loc: {
          start: {
            line: 371,
            column: 61
          },
          end: {
            line: 371,
            column: 82
          }
        },
        line: 371
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 48,
            column: 18
          }
        }, {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 65,
            column: 18
          }
        }, {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 75,
            column: 18
          }
        }, {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 85,
            column: 18
          }
        }, {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 115,
            column: 18
          }
        }, {
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 117,
            column: 64
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 33,
            column: 16
          },
          end: {
            line: 35,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 16
          },
          end: {
            line: 35,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "2": {
        loc: {
          start: {
            line: 33,
            column: 20
          },
          end: {
            line: 33,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 20
          },
          end: {
            line: 33,
            column: 35
          }
        }, {
          start: {
            line: 33,
            column: 39
          },
          end: {
            line: 33,
            column: 59
          }
        }, {
          start: {
            line: 33,
            column: 63
          },
          end: {
            line: 33,
            column: 80
          }
        }],
        line: 33
      },
      "3": {
        loc: {
          start: {
            line: 41,
            column: 26
          },
          end: {
            line: 41,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 26
          },
          end: {
            line: 41,
            column: 42
          }
        }, {
          start: {
            line: 41,
            column: 46
          },
          end: {
            line: 41,
            column: 63
          }
        }],
        line: 41
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 57
          },
          end: {
            line: 46,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 46,
            column: 82
          },
          end: {
            line: 46,
            column: 95
          }
        }, {
          start: {
            line: 46,
            column: 98
          },
          end: {
            line: 46,
            column: 113
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 53,
            column: 16
          },
          end: {
            line: 55,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 16
          },
          end: {
            line: 55,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "6": {
        loc: {
          start: {
            line: 63,
            column: 51
          },
          end: {
            line: 63,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 63,
            column: 76
          },
          end: {
            line: 63,
            column: 89
          }
        }, {
          start: {
            line: 63,
            column: 92
          },
          end: {
            line: 63,
            column: 107
          }
        }],
        line: 63
      },
      "7": {
        loc: {
          start: {
            line: 73,
            column: 60
          },
          end: {
            line: 73,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 73,
            column: 85
          },
          end: {
            line: 73,
            column: 98
          }
        }, {
          start: {
            line: 73,
            column: 101
          },
          end: {
            line: 73,
            column: 116
          }
        }],
        line: 73
      },
      "8": {
        loc: {
          start: {
            line: 83,
            column: 60
          },
          end: {
            line: 83,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 83,
            column: 85
          },
          end: {
            line: 83,
            column: 98
          }
        }, {
          start: {
            line: 83,
            column: 101
          },
          end: {
            line: 83,
            column: 116
          }
        }],
        line: 83
      },
      "9": {
        loc: {
          start: {
            line: 90,
            column: 16
          },
          end: {
            line: 92,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 16
          },
          end: {
            line: 92,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "10": {
        loc: {
          start: {
            line: 97,
            column: 26
          },
          end: {
            line: 97,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 26
          },
          end: {
            line: 97,
            column: 49
          }
        }, {
          start: {
            line: 97,
            column: 53
          },
          end: {
            line: 97,
            column: 59
          }
        }],
        line: 97
      },
      "11": {
        loc: {
          start: {
            line: 98,
            column: 32
          },
          end: {
            line: 100,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 32
          },
          end: {
            line: 98,
            column: 61
          }
        }, {
          start: {
            line: 98,
            column: 65
          },
          end: {
            line: 100,
            column: 21
          }
        }],
        line: 98
      },
      "12": {
        loc: {
          start: {
            line: 101,
            column: 30
          },
          end: {
            line: 103,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 30
          },
          end: {
            line: 101,
            column: 57
          }
        }, {
          start: {
            line: 101,
            column: 61
          },
          end: {
            line: 103,
            column: 21
          }
        }],
        line: 101
      },
      "13": {
        loc: {
          start: {
            line: 113,
            column: 64
          },
          end: {
            line: 113,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 113,
            column: 89
          },
          end: {
            line: 113,
            column: 102
          }
        }, {
          start: {
            line: 113,
            column: 105
          },
          end: {
            line: 113,
            column: 120
          }
        }],
        line: 113
      },
      "14": {
        loc: {
          start: {
            line: 188,
            column: 33
          },
          end: {
            line: 188,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 188,
            column: 56
          },
          end: {
            line: 188,
            column: 67
          }
        }, {
          start: {
            line: 188,
            column: 70
          },
          end: {
            line: 188,
            column: 97
          }
        }],
        line: 188
      },
      "15": {
        loc: {
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 203,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 203,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "16": {
        loc: {
          start: {
            line: 212,
            column: 33
          },
          end: {
            line: 212,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 212,
            column: 56
          },
          end: {
            line: 212,
            column: 67
          }
        }, {
          start: {
            line: 212,
            column: 70
          },
          end: {
            line: 212,
            column: 97
          }
        }],
        line: 212
      },
      "17": {
        loc: {
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 225,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 225,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "18": {
        loc: {
          start: {
            line: 227,
            column: 12
          },
          end: {
            line: 227,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 12
          },
          end: {
            line: 227,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "19": {
        loc: {
          start: {
            line: 229,
            column: 12
          },
          end: {
            line: 229,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 229,
            column: 12
          },
          end: {
            line: 229,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 229
      },
      "20": {
        loc: {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 231,
            column: 39
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 231,
            column: 39
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "21": {
        loc: {
          start: {
            line: 233,
            column: 33
          },
          end: {
            line: 233,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 233,
            column: 56
          },
          end: {
            line: 233,
            column: 67
          }
        }, {
          start: {
            line: 233,
            column: 70
          },
          end: {
            line: 233,
            column: 97
          }
        }],
        line: 233
      },
      "22": {
        loc: {
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 248,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 248,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "23": {
        loc: {
          start: {
            line: 268,
            column: 33
          },
          end: {
            line: 268,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 268,
            column: 56
          },
          end: {
            line: 268,
            column: 67
          }
        }, {
          start: {
            line: 268,
            column: 70
          },
          end: {
            line: 268,
            column: 98
          }
        }],
        line: 268
      },
      "24": {
        loc: {
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 283,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 283,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "25": {
        loc: {
          start: {
            line: 285,
            column: 12
          },
          end: {
            line: 288,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 12
          },
          end: {
            line: 288,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "26": {
        loc: {
          start: {
            line: 291,
            column: 16
          },
          end: {
            line: 293,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 291,
            column: 16
          },
          end: {
            line: 293,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 291
      },
      "27": {
        loc: {
          start: {
            line: 298,
            column: 39
          },
          end: {
            line: 298,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 298,
            column: 51
          },
          end: {
            line: 298,
            column: 52
          }
        }, {
          start: {
            line: 298,
            column: 55
          },
          end: {
            line: 298,
            column: 78
          }
        }],
        line: 298
      },
      "28": {
        loc: {
          start: {
            line: 298,
            column: 55
          },
          end: {
            line: 298,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 298,
            column: 55
          },
          end: {
            line: 298,
            column: 73
          }
        }, {
          start: {
            line: 298,
            column: 77
          },
          end: {
            line: 298,
            column: 78
          }
        }],
        line: 298
      },
      "29": {
        loc: {
          start: {
            line: 302,
            column: 33
          },
          end: {
            line: 302,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 302,
            column: 33
          },
          end: {
            line: 302,
            column: 47
          }
        }, {
          start: {
            line: 302,
            column: 51
          },
          end: {
            line: 302,
            column: 53
          }
        }],
        line: 302
      },
      "30": {
        loc: {
          start: {
            line: 303,
            column: 29
          },
          end: {
            line: 308,
            column: 21
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 303,
            column: 39
          },
          end: {
            line: 303,
            column: 46
          }
        }, {
          start: {
            line: 303,
            column: 49
          },
          end: {
            line: 308,
            column: 21
          }
        }],
        line: 303
      },
      "31": {
        loc: {
          start: {
            line: 309,
            column: 29
          },
          end: {
            line: 309,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 309,
            column: 29
          },
          end: {
            line: 309,
            column: 36
          }
        }, {
          start: {
            line: 309,
            column: 40
          },
          end: {
            line: 309,
            column: 42
          }
        }],
        line: 309
      },
      "32": {
        loc: {
          start: {
            line: 310,
            column: 30
          },
          end: {
            line: 310,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 310,
            column: 30
          },
          end: {
            line: 310,
            column: 42
          }
        }, {
          start: {
            line: 310,
            column: 46
          },
          end: {
            line: 310,
            column: 51
          }
        }],
        line: 310
      },
      "33": {
        loc: {
          start: {
            line: 311,
            column: 31
          },
          end: {
            line: 311,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 311,
            column: 31
          },
          end: {
            line: 311,
            column: 44
          }
        }, {
          start: {
            line: 311,
            column: 48
          },
          end: {
            line: 311,
            column: 72
          }
        }],
        line: 311
      },
      "34": {
        loc: {
          start: {
            line: 312,
            column: 31
          },
          end: {
            line: 312,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 312,
            column: 31
          },
          end: {
            line: 312,
            column: 44
          }
        }, {
          start: {
            line: 312,
            column: 48
          },
          end: {
            line: 312,
            column: 72
          }
        }],
        line: 312
      },
      "35": {
        loc: {
          start: {
            line: 319,
            column: 33
          },
          end: {
            line: 319,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 319,
            column: 56
          },
          end: {
            line: 319,
            column: 67
          }
        }, {
          start: {
            line: 319,
            column: 70
          },
          end: {
            line: 319,
            column: 97
          }
        }],
        line: 319
      },
      "36": {
        loc: {
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 332,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 332,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "37": {
        loc: {
          start: {
            line: 334,
            column: 12
          },
          end: {
            line: 334,
            column: 35
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 334,
            column: 12
          },
          end: {
            line: 334,
            column: 35
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 334
      },
      "38": {
        loc: {
          start: {
            line: 337,
            column: 33
          },
          end: {
            line: 337,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 337,
            column: 56
          },
          end: {
            line: 337,
            column: 67
          }
        }, {
          start: {
            line: 337,
            column: 70
          },
          end: {
            line: 337,
            column: 97
          }
        }],
        line: 337
      },
      "39": {
        loc: {
          start: {
            line: 348,
            column: 12
          },
          end: {
            line: 350,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 348,
            column: 12
          },
          end: {
            line: 350,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 348
      },
      "40": {
        loc: {
          start: {
            line: 355,
            column: 33
          },
          end: {
            line: 355,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 355,
            column: 56
          },
          end: {
            line: 355,
            column: 67
          }
        }, {
          start: {
            line: 355,
            column: 70
          },
          end: {
            line: 355,
            column: 98
          }
        }],
        line: 355
      },
      "41": {
        loc: {
          start: {
            line: 396,
            column: 33
          },
          end: {
            line: 396,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 396,
            column: 56
          },
          end: {
            line: 396,
            column: 67
          }
        }, {
          start: {
            line: 396,
            column: 70
          },
          end: {
            line: 396,
            column: 97
          }
        }],
        line: 396
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {
      "0": [0, 0, 0, 0, 0, 0],
      "1": [0, 0],
      "2": [0, 0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\automationService.ts"],
      sourcesContent: ["\"use client\"\n\nimport { useState, useCallback } from \"react\"\nimport { supabase } from \"../lib/supabase\"\nimport type { Database } from \"../lib/supabase\"\nimport { authService } from \"./auth\"\n\ntype WorkflowRow = Database[\"public\"][\"Tables\"][\"workflows\"][\"Row\"]\ntype WorkflowTriggerRow = Database[\"public\"][\"Tables\"][\"workflow_triggers\"][\"Row\"]\ntype WorkflowActionRow = Database[\"public\"][\"Tables\"][\"workflow_actions\"][\"Row\"]\ntype WorkflowExecutionRow = Database[\"public\"][\"Tables\"][\"workflow_executions\"][\"Row\"]\n\n// Helper function to execute individual workflow actions\nasync function executeWorkflowAction(action: WorkflowAction): Promise<void> {\n  switch (action.type) {\n    case \"email\":\n      // Send email action\n      try {\n        const emailConfig = action.config as {\n          to: string\n          subject: string\n          body: string\n          from?: string\n        }\n        \n        // In a real implementation, you would integrate with an email service like:\n        // - SendGrid, Mailgun, AWS SES, etc.\n        // For now, we'll simulate the email sending\n        \n        if (!emailConfig.to || !emailConfig.subject || !emailConfig.body) {\n          throw new Error('Email configuration missing required fields: to, subject, body')\n        }\n        \n        // Simulate email sending delay\n        await new Promise(resolve => setTimeout(resolve, 500))\n        \n        console.log(`Email sent successfully:`, {\n          to: emailConfig.to,\n          subject: emailConfig.subject,\n          from: emailConfig.from || 'noreply@crm.com'\n        })\n        \n        // In production, you would call your email service API here:\n        // await emailService.send(emailConfig)\n        \n      } catch (error) {\n        throw new Error(`Failed to send email: ${error instanceof Error ? error.message : 'Unknown error'}`)\n      }\n      break\n    case \"webhook\":\n      // Webhook action - simulated for now\n      try {\n        const config = action.config as {\n          url: string\n          data?: Record<string, any>\n          headers?: Record<string, string>\n        }\n        \n        if (!config.url) {\n          throw new Error('Webhook configuration missing required field: url')\n        }\n        \n        // Simulate webhook call\n        console.log(`Webhook called successfully:`, {\n          url: config.url,\n          data: config.data,\n          headers: config.headers\n        })\n      } catch (error) {\n        throw new Error(`Webhook failed: ${error instanceof Error ? error.message : 'Unknown error'}`)\n      }\n      break\n    case \"database\":\n      // Database action - simulated for now\n      try {\n        const config = action.config as {\n          table: string\n          data: Record<string, any>\n        }\n        \n        // Simulate database insert\n        console.log(`Record inserted successfully in table: ${config.table}`, config.data)\n      } catch (error) {\n        throw new Error(`Failed to insert record: ${error instanceof Error ? error.message : 'Unknown error'}`)\n      }\n      break\n    case \"update_record\":\n      // Update database record - simulated for now\n      try {\n        const config = action.config as {\n          table: string\n          data: Record<string, any>\n        }\n        \n        // Simulate database update\n        console.log(`Record updated successfully in table: ${config.table}`, config.data)\n      } catch (error) {\n        throw new Error(`Failed to update record: ${error instanceof Error ? error.message : 'Unknown error'}`)\n      }\n      break\n    case \"notification\":\n      // Send notification action\n      try {\n        const notificationConfig = action.config as {\n          message: string\n          type?: 'info' | 'success' | 'warning' | 'error'\n          recipients?: string[]\n          channels?: ('email' | 'sms' | 'push' | 'in-app')[]\n        }\n        \n        if (!notificationConfig.message) {\n          throw new Error('Notification configuration missing required field: message')\n        }\n        \n        // Simulate notification sending delay\n        await new Promise(resolve => setTimeout(resolve, 300))\n        \n        const notification = {\n          message: notificationConfig.message,\n          type: notificationConfig.type || 'info',\n          recipients: notificationConfig.recipients || ['system'],\n          channels: notificationConfig.channels || ['in-app'],\n          timestamp: new Date().toISOString()\n        }\n        \n        console.log(`Notification sent successfully:`, notification)\n        \n        // In production, you would integrate with notification services like:\n        // - Firebase Cloud Messaging for push notifications\n        // - Twilio for SMS\n        // - Your in-app notification system\n        // await notificationService.send(notification)\n        \n      } catch (error) {\n        throw new Error(`Failed to send notification: ${error instanceof Error ? error.message : 'Unknown error'}`)\n      }\n      break\n    default:\n      console.warn(`Unknown action type: ${action.type}`)\n  }\n}\n\n// Types for automation workflows\nexport interface Workflow {\n  id: string\n  name: string\n  description: string\n  trigger: WorkflowTrigger\n  actions: WorkflowAction[]\n  isActive: boolean\n  createdAt: string\n  updatedAt: string\n  lastExecuted?: string\n  executionCount: number\n  tags: string[]\n}\n\nexport interface WorkflowTrigger {\n  type: \"schedule\" | \"event\" | \"webhook\" | \"manual\"\n  config: {\n    schedule?: string // cron expression\n    event?: string\n    webhookUrl?: string\n    conditions?: Record<string, unknown>\n  }\n}\n\nexport interface WorkflowAction {\n  id: string\n  type: \"email\" | \"task\" | \"notification\" | \"webhook\" | \"update_record\" | \"database\"\n  config: Record<string, unknown>\n  order: number\n}\n\nexport interface WorkflowTemplate {\n  id: string\n  name: string\n  description: string\n  category: string\n  trigger: WorkflowTrigger\n  actions: WorkflowAction[]\n  isPopular: boolean\n  usageCount: number\n}\n\nexport interface WorkflowExecution {\n  id: string\n  workflowId: string\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\"\n  startedAt: string\n  completedAt?: string\n  error?: string\n  logs: ExecutionLog[]\n}\n\nexport interface ExecutionLog {\n  id: string\n  timestamp: string\n  level: \"info\" | \"warning\" | \"error\"\n  message: string\n  data?: Record<string, unknown>\n}\n\n// Mock data for development\nconst mockWorkflows: Workflow[] = [\n  {\n    id: \"1\",\n    name: \"Welcome Email Sequence\",\n    description: \"Send welcome emails to new clients\",\n    trigger: {\n      type: \"event\",\n      config: {\n        event: \"client_created\"\n      }\n    },\n    actions: [\n      {\n        id: \"1\",\n        type: \"email\",\n        config: {\n          to: \"{{client.email}}\",\n          subject: \"Welcome to our CRM!\",\n          body: \"Thank you for joining us!\"\n        },\n        order: 1\n      }\n    ],\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    executionCount: 5,\n    tags: [\"email\", \"onboarding\"]\n  }\n]\n\nconst mockExecutions: WorkflowExecution[] = [\n  {\n    id: \"1\",\n    workflowId: \"1\",\n    status: \"completed\",\n    startedAt: new Date().toISOString(),\n    completedAt: new Date().toISOString(),\n    logs: [\n      {\n        id: \"1\",\n        timestamp: new Date().toISOString(),\n        level: \"info\",\n        message: \"Workflow execution started\"\n      }\n    ]\n  }\n]\n\n// Automation Service Hook\nexport const useAutomationService = () => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  const createWorkflow = useCallback(\n    async (workflow: Omit<Workflow, \"id\" | \"createdAt\" | \"updatedAt\" | \"executionCount\">): Promise<Workflow> => {\n      setIsLoading(true)\n      setError(null)\n      try {\n        // For now, simulate workflow creation with mock data\n        const newWorkflow: Workflow = {\n          ...workflow,\n          id: Date.now().toString(),\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          executionCount: 0\n        }\n\n        return newWorkflow\n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : \"Failed to create workflow\"\n        setError(errorMessage)\n        throw new Error(errorMessage)\n      } finally {\n        setIsLoading(false)\n      }\n    },\n    [],\n  )\n\n  const updateWorkflow = useCallback(async (id: string, updates: Partial<Workflow>): Promise<Workflow> => {\n    setIsLoading(true)\n    setError(null)\n    try {\n      // For now, simulate workflow update with mock data\n      const existingWorkflow = mockWorkflows.find(w => w.id === id)\n      if (!existingWorkflow) {\n        throw new Error(`Workflow with id ${id} not found`)\n      }\n\n      const updatedWorkflow: Workflow = {\n        ...existingWorkflow,\n        ...updates,\n        id,\n        updatedAt: new Date().toISOString()\n      }\n\n      return updatedWorkflow\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : \"Failed to update workflow\"\n      setError(errorMessage)\n      throw new Error(errorMessage)\n    } finally {\n      setIsLoading(false)\n    }\n  }, [])\n\n  const deleteWorkflow = useCallback(async (id: string): Promise<void> => {\n    setIsLoading(true)\n    setError(null)\n    try {\n      if (!supabase) {\n        throw new Error(\"Supabase client not initialized\")\n      }\n      \n      const { error: triggerError } = await supabase.from(\"workflow_triggers\").delete().eq(\"workflow_id\", id)\n      if (triggerError) throw triggerError\n\n      const { error: actionError } = await supabase.from(\"workflow_actions\").delete().eq(\"workflow_id\", id)\n      if (actionError) throw actionError\n\n      const { error: wfError } = await supabase.from(\"workflows\").delete().eq(\"id\", id)\n      if (wfError) throw wfError\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : \"Failed to delete workflow\"\n      setError(errorMessage)\n      throw new Error(errorMessage)\n    } finally {\n      setIsLoading(false)\n    }\n  }, [])\n\n  const executeWorkflow = useCallback(async (id: string, context?: Record<string, any>): Promise<WorkflowExecution> => {\n    setIsLoading(true)\n    setError(null)\n    try {\n      // For now, simulate workflow execution with mock data\n      const workflow = mockWorkflows.find(w => w.id === id)\n      if (!workflow) {\n        throw new Error(`Workflow with id ${id} not found`)\n      }\n\n      const execution: WorkflowExecution = {\n        id: Date.now().toString(),\n        workflowId: id,\n        status: \"completed\",\n        startedAt: new Date().toISOString(),\n        completedAt: new Date().toISOString(),\n        logs: [\n          {\n            id: \"1\",\n            timestamp: new Date().toISOString(),\n            level: \"info\",\n            message: `Workflow ${workflow.name} executed successfully`\n          }\n        ]\n      }\n\n      // Simulate execution time\n      await new Promise(resolve => setTimeout(resolve, 1000))\n\n      return execution\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : \"Failed to execute workflow\"\n      setError(errorMessage)\n      throw new Error(errorMessage)\n    } finally {\n      setIsLoading(false)\n    }\n  }, [])\n\n  const getWorkflows = useCallback(async (): Promise<Workflow[]> => {\n    setIsLoading(true)\n    setError(null)\n    try {\n      // Check if Supabase is properly configured\n      if (!supabase) {\n        console.warn('Supabase not configured, using mock data')\n        return mockWorkflows\n      }\n      \n      const { data: workflows, error } = await supabase.from(\"workflows\").select(\"*\")\n      if (error) {\n        console.warn('Failed to fetch workflows from database, using mock data:', error)\n        return mockWorkflows\n      }\n\n      // Fetch triggers and actions for each workflow\n      const fullWorkflows = await Promise.all((workflows as WorkflowRow[]).map(async (wf) => {\n        if (!supabase) {\n          throw new Error(\"Supabase client not initialized\")\n        }\n        \n        const { data: trigger } = await supabase.from(\"workflow_triggers\").select(\"*\").eq(\"workflow_id\", wf.id).single()\n        const { data: actions } = await supabase.from(\"workflow_actions\").select(\"*\").eq(\"workflow_id\", wf.id)\n        \n        // Calculate execution count from workflow_executions table\n        const { data: executions, error: execError } = await supabase\n          .from(\"workflow_executions\")\n          .select(\"id\")\n          .eq(\"workflow_id\", wf.id)\n        \n        const executionCount = execError ? 0 : (executions?.length || 0)\n        \n        return {\n          id: wf.id,\n          name: wf.name,\n          description: wf.description || '',\n          trigger: trigger ? (trigger as WorkflowTrigger) : {\n            id: '',\n            type: 'manual',\n            config: {},\n            workflowId: wf.id\n          },\n          actions: (actions || []) as WorkflowAction[],\n          isActive: wf.is_active || false,\n          createdAt: wf.created_at || new Date().toISOString(),\n          updatedAt: wf.updated_at || new Date().toISOString(),\n          executionCount,\n          tags: [] // Note: tags field not in current schema, using empty array\n        } as Workflow\n      }))\n\n      return fullWorkflows\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : \"Failed to fetch workflows\"\n      setError(errorMessage)\n      throw new Error(errorMessage)\n    } finally {\n      setIsLoading(false)\n    }\n  }, [])\n\n  const getTemplates = useCallback(async (): Promise<WorkflowTemplate[]> => {\n    setIsLoading(true)\n    setError(null)\n    try {\n      if (!supabase) {\n        throw new Error(\"Supabase client not initialized\")\n      }\n      \n      const { data, error } = await supabase.from(\"workflow_templates\").select(\"*\")\n      if (error) throw error\n      return data\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : \"Failed to fetch templates\"\n      setError(errorMessage)\n      throw new Error(errorMessage)\n    } finally {\n      setIsLoading(false)\n    }\n  }, [])\n\n  const getExecutions = useCallback(async (workflowId?: string): Promise<WorkflowExecution[]> => {\n    setIsLoading(true)\n    setError(null)\n    try {\n      if (workflowId) {\n        return mockExecutions.filter((e) => e.workflowId === workflowId)\n      }\n      return [...mockExecutions]\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : \"Failed to fetch executions\"\n      setError(errorMessage)\n      throw new Error(errorMessage)\n    } finally {\n      setIsLoading(false)\n    }\n  }, [])\n\n  const getAnalytics = useCallback(async (): Promise<any> => {\n    setIsLoading(true)\n    setError(null)\n    try {\n      return {\n        totalWorkflows: mockWorkflows.length,\n        activeWorkflows: mockWorkflows.filter((w) => w.isActive).length,\n        totalExecutions: mockExecutions.length,\n        successfulExecutions: mockExecutions.filter((e) => e.status === \"completed\").length,\n        failedExecutions: mockExecutions.filter((e) => e.status === \"failed\").length,\n        executionTrend: [\n          { date: \"2024-01-01\", count: 5 },\n          { date: \"2024-01-02\", count: 8 },\n          { date: \"2024-01-03\", count: 12 },\n          { date: \"2024-01-04\", count: 15 },\n          { date: \"2024-01-05\", count: 10 },\n        ],\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : \"Failed to fetch analytics\"\n      setError(errorMessage)\n      throw new Error(errorMessage)\n    } finally {\n      setIsLoading(false)\n    }\n  }, [])\n\n  return {\n    isLoading,\n    error,\n    createWorkflow,\n    updateWorkflow,\n    deleteWorkflow,\n    executeWorkflow,\n    getWorkflows,\n    getTemplates,\n    getExecutions,\n    getAnalytics,\n  }\n}\n\n// Export default service instance\nexport default {\n  useAutomationService,\n}\n"],
      names: ["useAutomationService", "executeWorkflowAction", "action", "type", "emailConfig", "config", "to", "subject", "body", "Error", "Promise", "resolve", "setTimeout", "console", "log", "from", "error", "message", "url", "data", "headers", "table", "notificationConfig", "notification", "recipients", "channels", "timestamp", "Date", "toISOString", "warn", "mockWorkflows", "id", "name", "description", "trigger", "event", "actions", "order", "isActive", "createdAt", "updatedAt", "executionCount", "tags", "mockExecutions", "workflowId", "status", "startedAt", "completedAt", "logs", "level", "isLoading", "setIsLoading", "useState", "setError", "createWorkflow", "useCallback", "workflow", "newWorkflow", "now", "toString", "err", "errorMessage", "updateWorkflow", "updates", "existingWorkflow", "find", "w", "updatedWorkflow", "deleteWorkflow", "supabase", "triggerError", "delete", "eq", "actionError", "wfError", "executeWorkflow", "context", "execution", "getWorkflows", "workflows", "select", "fullWorkflows", "all", "map", "wf", "single", "executions", "execError", "length", "is_active", "created_at", "updated_at", "getTemplates", "getExecutions", "filter", "e", "getAnalytics", "totalWorkflows", "activeWorkflows", "totalExecutions", "successfulExecutions", "failedExecutions", "executionTrend", "date", "count"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "492241bd376bf3908e288109fd66dacc6ba719f9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_27l0vpc7cp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_27l0vpc7cp();
cov_27l0vpc7cp().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_27l0vpc7cp().f[0]++;
  cov_27l0vpc7cp().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_27l0vpc7cp().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_27l0vpc7cp().s[3]++;
_export(exports, {
  get
  // Export default service instance
  default() {
    /* istanbul ignore next */
    cov_27l0vpc7cp().f[1]++;
    cov_27l0vpc7cp().s[4]++;
    return _default;
  },
  get useAutomationService() {
    /* istanbul ignore next */
    cov_27l0vpc7cp().f[2]++;
    cov_27l0vpc7cp().s[5]++;
    return useAutomationService;
  }
});
const _react =
/* istanbul ignore next */
(cov_27l0vpc7cp().s[6]++, require("react"));
const _supabase =
/* istanbul ignore next */
(cov_27l0vpc7cp().s[7]++, require("../lib/supabase"));
// Helper function to execute individual workflow actions
async function executeWorkflowAction(action) {
  /* istanbul ignore next */
  cov_27l0vpc7cp().f[3]++;
  cov_27l0vpc7cp().s[8]++;
  switch (action.type) {
    case "email":
      /* istanbul ignore next */
      cov_27l0vpc7cp().b[0][0]++;
      cov_27l0vpc7cp().s[9]++;
      // Send email action
      try {
        const emailConfig =
        /* istanbul ignore next */
        (cov_27l0vpc7cp().s[10]++, action.config);
        // In a real implementation, you would integrate with an email service like:
        // - SendGrid, Mailgun, AWS SES, etc.
        // For now, we'll simulate the email sending
        /* istanbul ignore next */
        cov_27l0vpc7cp().s[11]++;
        if (
        /* istanbul ignore next */
        (cov_27l0vpc7cp().b[2][0]++, !emailConfig.to) ||
        /* istanbul ignore next */
        (cov_27l0vpc7cp().b[2][1]++, !emailConfig.subject) ||
        /* istanbul ignore next */
        (cov_27l0vpc7cp().b[2][2]++, !emailConfig.body)) {
          /* istanbul ignore next */
          cov_27l0vpc7cp().b[1][0]++;
          cov_27l0vpc7cp().s[12]++;
          throw new Error('Email configuration missing required fields: to, subject, body');
        } else
        /* istanbul ignore next */
        {
          cov_27l0vpc7cp().b[1][1]++;
        }
        // Simulate email sending delay
        cov_27l0vpc7cp().s[13]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_27l0vpc7cp().f[4]++;
          cov_27l0vpc7cp().s[14]++;
          return setTimeout(resolve, 500);
        });
        /* istanbul ignore next */
        cov_27l0vpc7cp().s[15]++;
        console.log(`Email sent successfully:`, {
          to: emailConfig.to,
          subject: emailConfig.subject,
          from:
          /* istanbul ignore next */
          (cov_27l0vpc7cp().b[3][0]++, emailConfig.from) ||
          /* istanbul ignore next */
          (cov_27l0vpc7cp().b[3][1]++, 'noreply@crm.com')
        });
        // In production, you would call your email service API here:
        // await emailService.send(emailConfig)
      } catch (error) {
        /* istanbul ignore next */
        cov_27l0vpc7cp().s[16]++;
        throw new Error(`Failed to send email: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_27l0vpc7cp().b[4][0]++, error.message) :
        /* istanbul ignore next */
        (cov_27l0vpc7cp().b[4][1]++, 'Unknown error')}`);
      }
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[17]++;
      break;
    case "webhook":
      /* istanbul ignore next */
      cov_27l0vpc7cp().b[0][1]++;
      cov_27l0vpc7cp().s[18]++;
      // Webhook action - simulated for now
      try {
        const config =
        /* istanbul ignore next */
        (cov_27l0vpc7cp().s[19]++, action.config);
        /* istanbul ignore next */
        cov_27l0vpc7cp().s[20]++;
        if (!config.url) {
          /* istanbul ignore next */
          cov_27l0vpc7cp().b[5][0]++;
          cov_27l0vpc7cp().s[21]++;
          throw new Error('Webhook configuration missing required field: url');
        } else
        /* istanbul ignore next */
        {
          cov_27l0vpc7cp().b[5][1]++;
        }
        // Simulate webhook call
        cov_27l0vpc7cp().s[22]++;
        console.log(`Webhook called successfully:`, {
          url: config.url,
          data: config.data,
          headers: config.headers
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_27l0vpc7cp().s[23]++;
        throw new Error(`Webhook failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_27l0vpc7cp().b[6][0]++, error.message) :
        /* istanbul ignore next */
        (cov_27l0vpc7cp().b[6][1]++, 'Unknown error')}`);
      }
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[24]++;
      break;
    case "database":
      /* istanbul ignore next */
      cov_27l0vpc7cp().b[0][2]++;
      cov_27l0vpc7cp().s[25]++;
      // Database action - simulated for now
      try {
        const config =
        /* istanbul ignore next */
        (cov_27l0vpc7cp().s[26]++, action.config);
        // Simulate database insert
        /* istanbul ignore next */
        cov_27l0vpc7cp().s[27]++;
        console.log(`Record inserted successfully in table: ${config.table}`, config.data);
      } catch (error) {
        /* istanbul ignore next */
        cov_27l0vpc7cp().s[28]++;
        throw new Error(`Failed to insert record: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_27l0vpc7cp().b[7][0]++, error.message) :
        /* istanbul ignore next */
        (cov_27l0vpc7cp().b[7][1]++, 'Unknown error')}`);
      }
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[29]++;
      break;
    case "update_record":
      /* istanbul ignore next */
      cov_27l0vpc7cp().b[0][3]++;
      cov_27l0vpc7cp().s[30]++;
      // Update database record - simulated for now
      try {
        const config =
        /* istanbul ignore next */
        (cov_27l0vpc7cp().s[31]++, action.config);
        // Simulate database update
        /* istanbul ignore next */
        cov_27l0vpc7cp().s[32]++;
        console.log(`Record updated successfully in table: ${config.table}`, config.data);
      } catch (error) {
        /* istanbul ignore next */
        cov_27l0vpc7cp().s[33]++;
        throw new Error(`Failed to update record: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_27l0vpc7cp().b[8][0]++, error.message) :
        /* istanbul ignore next */
        (cov_27l0vpc7cp().b[8][1]++, 'Unknown error')}`);
      }
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[34]++;
      break;
    case "notification":
      /* istanbul ignore next */
      cov_27l0vpc7cp().b[0][4]++;
      cov_27l0vpc7cp().s[35]++;
      // Send notification action
      try {
        const notificationConfig =
        /* istanbul ignore next */
        (cov_27l0vpc7cp().s[36]++, action.config);
        /* istanbul ignore next */
        cov_27l0vpc7cp().s[37]++;
        if (!notificationConfig.message) {
          /* istanbul ignore next */
          cov_27l0vpc7cp().b[9][0]++;
          cov_27l0vpc7cp().s[38]++;
          throw new Error('Notification configuration missing required field: message');
        } else
        /* istanbul ignore next */
        {
          cov_27l0vpc7cp().b[9][1]++;
        }
        // Simulate notification sending delay
        cov_27l0vpc7cp().s[39]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_27l0vpc7cp().f[5]++;
          cov_27l0vpc7cp().s[40]++;
          return setTimeout(resolve, 300);
        });
        const notification =
        /* istanbul ignore next */
        (cov_27l0vpc7cp().s[41]++, {
          message: notificationConfig.message,
          type:
          /* istanbul ignore next */
          (cov_27l0vpc7cp().b[10][0]++, notificationConfig.type) ||
          /* istanbul ignore next */
          (cov_27l0vpc7cp().b[10][1]++, 'info'),
          recipients:
          /* istanbul ignore next */
          (cov_27l0vpc7cp().b[11][0]++, notificationConfig.recipients) ||
          /* istanbul ignore next */
          (cov_27l0vpc7cp().b[11][1]++, ['system']),
          channels:
          /* istanbul ignore next */
          (cov_27l0vpc7cp().b[12][0]++, notificationConfig.channels) ||
          /* istanbul ignore next */
          (cov_27l0vpc7cp().b[12][1]++, ['in-app']),
          timestamp: new Date().toISOString()
        });
        /* istanbul ignore next */
        cov_27l0vpc7cp().s[42]++;
        console.log(`Notification sent successfully:`, notification);
        // In production, you would integrate with notification services like:
        // - Firebase Cloud Messaging for push notifications
        // - Twilio for SMS
        // - Your in-app notification system
        // await notificationService.send(notification)
      } catch (error) {
        /* istanbul ignore next */
        cov_27l0vpc7cp().s[43]++;
        throw new Error(`Failed to send notification: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_27l0vpc7cp().b[13][0]++, error.message) :
        /* istanbul ignore next */
        (cov_27l0vpc7cp().b[13][1]++, 'Unknown error')}`);
      }
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[44]++;
      break;
    default:
      /* istanbul ignore next */
      cov_27l0vpc7cp().b[0][5]++;
      cov_27l0vpc7cp().s[45]++;
      console.warn(`Unknown action type: ${action.type}`);
  }
}
// Mock data for development
const mockWorkflows =
/* istanbul ignore next */
(cov_27l0vpc7cp().s[46]++, [{
  id: "1",
  name: "Welcome Email Sequence",
  description: "Send welcome emails to new clients",
  trigger: {
    type: "event",
    config: {
      event: "client_created"
    }
  },
  actions: [{
    id: "1",
    type: "email",
    config: {
      to: "{{client.email}}",
      subject: "Welcome to our CRM!",
      body: "Thank you for joining us!"
    },
    order: 1
  }],
  isActive: true,
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString(),
  executionCount: 5,
  tags: ["email", "onboarding"]
}]);
const mockExecutions =
/* istanbul ignore next */
(cov_27l0vpc7cp().s[47]++, [{
  id: "1",
  workflowId: "1",
  status: "completed",
  startedAt: new Date().toISOString(),
  completedAt: new Date().toISOString(),
  logs: [{
    id: "1",
    timestamp: new Date().toISOString(),
    level: "info",
    message: "Workflow execution started"
  }]
}]);
/* istanbul ignore next */
cov_27l0vpc7cp().s[48]++;
const useAutomationService = () => {
  /* istanbul ignore next */
  cov_27l0vpc7cp().f[6]++;
  const [isLoading, setIsLoading] =
  /* istanbul ignore next */
  (cov_27l0vpc7cp().s[49]++, (0, _react.useState)(false));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_27l0vpc7cp().s[50]++, (0, _react.useState)(null));
  const createWorkflow =
  /* istanbul ignore next */
  (cov_27l0vpc7cp().s[51]++, (0, _react.useCallback)(async workflow => {
    /* istanbul ignore next */
    cov_27l0vpc7cp().f[7]++;
    cov_27l0vpc7cp().s[52]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_27l0vpc7cp().s[53]++;
    setError(null);
    /* istanbul ignore next */
    cov_27l0vpc7cp().s[54]++;
    try {
      // For now, simulate workflow creation with mock data
      const newWorkflow =
      /* istanbul ignore next */
      (cov_27l0vpc7cp().s[55]++, {
        ...workflow,
        id: Date.now().toString(),
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        executionCount: 0
      });
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[56]++;
      return newWorkflow;
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_27l0vpc7cp().s[57]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_27l0vpc7cp().b[14][0]++, err.message) :
      /* istanbul ignore next */
      (cov_27l0vpc7cp().b[14][1]++, "Failed to create workflow"));
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[58]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[59]++;
      throw new Error(errorMessage);
    } finally {
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[60]++;
      setIsLoading(false);
    }
  }, []));
  const updateWorkflow =
  /* istanbul ignore next */
  (cov_27l0vpc7cp().s[61]++, (0, _react.useCallback)(async (id, updates) => {
    /* istanbul ignore next */
    cov_27l0vpc7cp().f[8]++;
    cov_27l0vpc7cp().s[62]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_27l0vpc7cp().s[63]++;
    setError(null);
    /* istanbul ignore next */
    cov_27l0vpc7cp().s[64]++;
    try {
      // For now, simulate workflow update with mock data
      const existingWorkflow =
      /* istanbul ignore next */
      (cov_27l0vpc7cp().s[65]++, mockWorkflows.find(w => {
        /* istanbul ignore next */
        cov_27l0vpc7cp().f[9]++;
        cov_27l0vpc7cp().s[66]++;
        return w.id === id;
      }));
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[67]++;
      if (!existingWorkflow) {
        /* istanbul ignore next */
        cov_27l0vpc7cp().b[15][0]++;
        cov_27l0vpc7cp().s[68]++;
        throw new Error(`Workflow with id ${id} not found`);
      } else
      /* istanbul ignore next */
      {
        cov_27l0vpc7cp().b[15][1]++;
      }
      const updatedWorkflow =
      /* istanbul ignore next */
      (cov_27l0vpc7cp().s[69]++, {
        ...existingWorkflow,
        ...updates,
        id,
        updatedAt: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[70]++;
      return updatedWorkflow;
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_27l0vpc7cp().s[71]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_27l0vpc7cp().b[16][0]++, err.message) :
      /* istanbul ignore next */
      (cov_27l0vpc7cp().b[16][1]++, "Failed to update workflow"));
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[72]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[73]++;
      throw new Error(errorMessage);
    } finally {
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[74]++;
      setIsLoading(false);
    }
  }, []));
  const deleteWorkflow =
  /* istanbul ignore next */
  (cov_27l0vpc7cp().s[75]++, (0, _react.useCallback)(async id => {
    /* istanbul ignore next */
    cov_27l0vpc7cp().f[10]++;
    cov_27l0vpc7cp().s[76]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_27l0vpc7cp().s[77]++;
    setError(null);
    /* istanbul ignore next */
    cov_27l0vpc7cp().s[78]++;
    try {
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[79]++;
      if (!_supabase.supabase) {
        /* istanbul ignore next */
        cov_27l0vpc7cp().b[17][0]++;
        cov_27l0vpc7cp().s[80]++;
        throw new Error("Supabase client not initialized");
      } else
      /* istanbul ignore next */
      {
        cov_27l0vpc7cp().b[17][1]++;
      }
      const {
        error: triggerError
      } =
      /* istanbul ignore next */
      (cov_27l0vpc7cp().s[81]++, await _supabase.supabase.from("workflow_triggers").delete().eq("workflow_id", id));
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[82]++;
      if (triggerError) {
        /* istanbul ignore next */
        cov_27l0vpc7cp().b[18][0]++;
        cov_27l0vpc7cp().s[83]++;
        throw triggerError;
      } else
      /* istanbul ignore next */
      {
        cov_27l0vpc7cp().b[18][1]++;
      }
      const {
        error: actionError
      } =
      /* istanbul ignore next */
      (cov_27l0vpc7cp().s[84]++, await _supabase.supabase.from("workflow_actions").delete().eq("workflow_id", id));
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[85]++;
      if (actionError) {
        /* istanbul ignore next */
        cov_27l0vpc7cp().b[19][0]++;
        cov_27l0vpc7cp().s[86]++;
        throw actionError;
      } else
      /* istanbul ignore next */
      {
        cov_27l0vpc7cp().b[19][1]++;
      }
      const {
        error: wfError
      } =
      /* istanbul ignore next */
      (cov_27l0vpc7cp().s[87]++, await _supabase.supabase.from("workflows").delete().eq("id", id));
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[88]++;
      if (wfError) {
        /* istanbul ignore next */
        cov_27l0vpc7cp().b[20][0]++;
        cov_27l0vpc7cp().s[89]++;
        throw wfError;
      } else
      /* istanbul ignore next */
      {
        cov_27l0vpc7cp().b[20][1]++;
      }
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_27l0vpc7cp().s[90]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_27l0vpc7cp().b[21][0]++, err.message) :
      /* istanbul ignore next */
      (cov_27l0vpc7cp().b[21][1]++, "Failed to delete workflow"));
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[91]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[92]++;
      throw new Error(errorMessage);
    } finally {
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[93]++;
      setIsLoading(false);
    }
  }, []));
  const executeWorkflow =
  /* istanbul ignore next */
  (cov_27l0vpc7cp().s[94]++, (0, _react.useCallback)(async (id, context) => {
    /* istanbul ignore next */
    cov_27l0vpc7cp().f[11]++;
    cov_27l0vpc7cp().s[95]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_27l0vpc7cp().s[96]++;
    setError(null);
    /* istanbul ignore next */
    cov_27l0vpc7cp().s[97]++;
    try {
      // For now, simulate workflow execution with mock data
      const workflow =
      /* istanbul ignore next */
      (cov_27l0vpc7cp().s[98]++, mockWorkflows.find(w => {
        /* istanbul ignore next */
        cov_27l0vpc7cp().f[12]++;
        cov_27l0vpc7cp().s[99]++;
        return w.id === id;
      }));
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[100]++;
      if (!workflow) {
        /* istanbul ignore next */
        cov_27l0vpc7cp().b[22][0]++;
        cov_27l0vpc7cp().s[101]++;
        throw new Error(`Workflow with id ${id} not found`);
      } else
      /* istanbul ignore next */
      {
        cov_27l0vpc7cp().b[22][1]++;
      }
      const execution =
      /* istanbul ignore next */
      (cov_27l0vpc7cp().s[102]++, {
        id: Date.now().toString(),
        workflowId: id,
        status: "completed",
        startedAt: new Date().toISOString(),
        completedAt: new Date().toISOString(),
        logs: [{
          id: "1",
          timestamp: new Date().toISOString(),
          level: "info",
          message: `Workflow ${workflow.name} executed successfully`
        }]
      });
      // Simulate execution time
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[103]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_27l0vpc7cp().f[13]++;
        cov_27l0vpc7cp().s[104]++;
        return setTimeout(resolve, 1000);
      });
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[105]++;
      return execution;
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_27l0vpc7cp().s[106]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_27l0vpc7cp().b[23][0]++, err.message) :
      /* istanbul ignore next */
      (cov_27l0vpc7cp().b[23][1]++, "Failed to execute workflow"));
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[107]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[108]++;
      throw new Error(errorMessage);
    } finally {
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[109]++;
      setIsLoading(false);
    }
  }, []));
  const getWorkflows =
  /* istanbul ignore next */
  (cov_27l0vpc7cp().s[110]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_27l0vpc7cp().f[14]++;
    cov_27l0vpc7cp().s[111]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_27l0vpc7cp().s[112]++;
    setError(null);
    /* istanbul ignore next */
    cov_27l0vpc7cp().s[113]++;
    try {
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[114]++;
      // Check if Supabase is properly configured
      if (!_supabase.supabase) {
        /* istanbul ignore next */
        cov_27l0vpc7cp().b[24][0]++;
        cov_27l0vpc7cp().s[115]++;
        console.warn('Supabase not configured, using mock data');
        /* istanbul ignore next */
        cov_27l0vpc7cp().s[116]++;
        return mockWorkflows;
      } else
      /* istanbul ignore next */
      {
        cov_27l0vpc7cp().b[24][1]++;
      }
      const {
        data: workflows,
        error
      } =
      /* istanbul ignore next */
      (cov_27l0vpc7cp().s[117]++, await _supabase.supabase.from("workflows").select("*"));
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[118]++;
      if (error) {
        /* istanbul ignore next */
        cov_27l0vpc7cp().b[25][0]++;
        cov_27l0vpc7cp().s[119]++;
        console.warn('Failed to fetch workflows from database, using mock data:', error);
        /* istanbul ignore next */
        cov_27l0vpc7cp().s[120]++;
        return mockWorkflows;
      } else
      /* istanbul ignore next */
      {
        cov_27l0vpc7cp().b[25][1]++;
      }
      // Fetch triggers and actions for each workflow
      const fullWorkflows =
      /* istanbul ignore next */
      (cov_27l0vpc7cp().s[121]++, await Promise.all(workflows.map(async wf => {
        /* istanbul ignore next */
        cov_27l0vpc7cp().f[15]++;
        cov_27l0vpc7cp().s[122]++;
        if (!_supabase.supabase) {
          /* istanbul ignore next */
          cov_27l0vpc7cp().b[26][0]++;
          cov_27l0vpc7cp().s[123]++;
          throw new Error("Supabase client not initialized");
        } else
        /* istanbul ignore next */
        {
          cov_27l0vpc7cp().b[26][1]++;
        }
        const {
          data: trigger
        } =
        /* istanbul ignore next */
        (cov_27l0vpc7cp().s[124]++, await _supabase.supabase.from("workflow_triggers").select("*").eq("workflow_id", wf.id).single());
        const {
          data: actions
        } =
        /* istanbul ignore next */
        (cov_27l0vpc7cp().s[125]++, await _supabase.supabase.from("workflow_actions").select("*").eq("workflow_id", wf.id));
        // Calculate execution count from workflow_executions table
        const {
          data: executions,
          error: execError
        } =
        /* istanbul ignore next */
        (cov_27l0vpc7cp().s[126]++, await _supabase.supabase.from("workflow_executions").select("id").eq("workflow_id", wf.id));
        const executionCount =
        /* istanbul ignore next */
        (cov_27l0vpc7cp().s[127]++, execError ?
        /* istanbul ignore next */
        (cov_27l0vpc7cp().b[27][0]++, 0) :
        /* istanbul ignore next */
        (cov_27l0vpc7cp().b[27][1]++,
        /* istanbul ignore next */
        (cov_27l0vpc7cp().b[28][0]++, executions?.length) ||
        /* istanbul ignore next */
        (cov_27l0vpc7cp().b[28][1]++, 0)));
        /* istanbul ignore next */
        cov_27l0vpc7cp().s[128]++;
        return {
          id: wf.id,
          name: wf.name,
          description:
          /* istanbul ignore next */
          (cov_27l0vpc7cp().b[29][0]++, wf.description) ||
          /* istanbul ignore next */
          (cov_27l0vpc7cp().b[29][1]++, ''),
          trigger: trigger ?
          /* istanbul ignore next */
          (cov_27l0vpc7cp().b[30][0]++, trigger) :
          /* istanbul ignore next */
          (cov_27l0vpc7cp().b[30][1]++, {
            id: '',
            type: 'manual',
            config: {},
            workflowId: wf.id
          }),
          actions:
          /* istanbul ignore next */
          (cov_27l0vpc7cp().b[31][0]++, actions) ||
          /* istanbul ignore next */
          (cov_27l0vpc7cp().b[31][1]++, []),
          isActive:
          /* istanbul ignore next */
          (cov_27l0vpc7cp().b[32][0]++, wf.is_active) ||
          /* istanbul ignore next */
          (cov_27l0vpc7cp().b[32][1]++, false),
          createdAt:
          /* istanbul ignore next */
          (cov_27l0vpc7cp().b[33][0]++, wf.created_at) ||
          /* istanbul ignore next */
          (cov_27l0vpc7cp().b[33][1]++, new Date().toISOString()),
          updatedAt:
          /* istanbul ignore next */
          (cov_27l0vpc7cp().b[34][0]++, wf.updated_at) ||
          /* istanbul ignore next */
          (cov_27l0vpc7cp().b[34][1]++, new Date().toISOString()),
          executionCount,
          tags: [] // Note: tags field not in current schema, using empty array
        };
      })));
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[129]++;
      return fullWorkflows;
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_27l0vpc7cp().s[130]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_27l0vpc7cp().b[35][0]++, err.message) :
      /* istanbul ignore next */
      (cov_27l0vpc7cp().b[35][1]++, "Failed to fetch workflows"));
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[131]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[132]++;
      throw new Error(errorMessage);
    } finally {
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[133]++;
      setIsLoading(false);
    }
  }, []));
  const getTemplates =
  /* istanbul ignore next */
  (cov_27l0vpc7cp().s[134]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_27l0vpc7cp().f[16]++;
    cov_27l0vpc7cp().s[135]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_27l0vpc7cp().s[136]++;
    setError(null);
    /* istanbul ignore next */
    cov_27l0vpc7cp().s[137]++;
    try {
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[138]++;
      if (!_supabase.supabase) {
        /* istanbul ignore next */
        cov_27l0vpc7cp().b[36][0]++;
        cov_27l0vpc7cp().s[139]++;
        throw new Error("Supabase client not initialized");
      } else
      /* istanbul ignore next */
      {
        cov_27l0vpc7cp().b[36][1]++;
      }
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_27l0vpc7cp().s[140]++, await _supabase.supabase.from("workflow_templates").select("*"));
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[141]++;
      if (error) {
        /* istanbul ignore next */
        cov_27l0vpc7cp().b[37][0]++;
        cov_27l0vpc7cp().s[142]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_27l0vpc7cp().b[37][1]++;
      }
      cov_27l0vpc7cp().s[143]++;
      return data;
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_27l0vpc7cp().s[144]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_27l0vpc7cp().b[38][0]++, err.message) :
      /* istanbul ignore next */
      (cov_27l0vpc7cp().b[38][1]++, "Failed to fetch templates"));
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[145]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[146]++;
      throw new Error(errorMessage);
    } finally {
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[147]++;
      setIsLoading(false);
    }
  }, []));
  const getExecutions =
  /* istanbul ignore next */
  (cov_27l0vpc7cp().s[148]++, (0, _react.useCallback)(async workflowId => {
    /* istanbul ignore next */
    cov_27l0vpc7cp().f[17]++;
    cov_27l0vpc7cp().s[149]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_27l0vpc7cp().s[150]++;
    setError(null);
    /* istanbul ignore next */
    cov_27l0vpc7cp().s[151]++;
    try {
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[152]++;
      if (workflowId) {
        /* istanbul ignore next */
        cov_27l0vpc7cp().b[39][0]++;
        cov_27l0vpc7cp().s[153]++;
        return mockExecutions.filter(e => {
          /* istanbul ignore next */
          cov_27l0vpc7cp().f[18]++;
          cov_27l0vpc7cp().s[154]++;
          return e.workflowId === workflowId;
        });
      } else
      /* istanbul ignore next */
      {
        cov_27l0vpc7cp().b[39][1]++;
      }
      cov_27l0vpc7cp().s[155]++;
      return [...mockExecutions];
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_27l0vpc7cp().s[156]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_27l0vpc7cp().b[40][0]++, err.message) :
      /* istanbul ignore next */
      (cov_27l0vpc7cp().b[40][1]++, "Failed to fetch executions"));
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[157]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[158]++;
      throw new Error(errorMessage);
    } finally {
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[159]++;
      setIsLoading(false);
    }
  }, []));
  const getAnalytics =
  /* istanbul ignore next */
  (cov_27l0vpc7cp().s[160]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_27l0vpc7cp().f[19]++;
    cov_27l0vpc7cp().s[161]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_27l0vpc7cp().s[162]++;
    setError(null);
    /* istanbul ignore next */
    cov_27l0vpc7cp().s[163]++;
    try {
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[164]++;
      return {
        totalWorkflows: mockWorkflows.length,
        activeWorkflows: mockWorkflows.filter(w => {
          /* istanbul ignore next */
          cov_27l0vpc7cp().f[20]++;
          cov_27l0vpc7cp().s[165]++;
          return w.isActive;
        }).length,
        totalExecutions: mockExecutions.length,
        successfulExecutions: mockExecutions.filter(e => {
          /* istanbul ignore next */
          cov_27l0vpc7cp().f[21]++;
          cov_27l0vpc7cp().s[166]++;
          return e.status === "completed";
        }).length,
        failedExecutions: mockExecutions.filter(e => {
          /* istanbul ignore next */
          cov_27l0vpc7cp().f[22]++;
          cov_27l0vpc7cp().s[167]++;
          return e.status === "failed";
        }).length,
        executionTrend: [{
          date: "2024-01-01",
          count: 5
        }, {
          date: "2024-01-02",
          count: 8
        }, {
          date: "2024-01-03",
          count: 12
        }, {
          date: "2024-01-04",
          count: 15
        }, {
          date: "2024-01-05",
          count: 10
        }]
      };
    } catch (err) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_27l0vpc7cp().s[168]++, err instanceof Error ?
      /* istanbul ignore next */
      (cov_27l0vpc7cp().b[41][0]++, err.message) :
      /* istanbul ignore next */
      (cov_27l0vpc7cp().b[41][1]++, "Failed to fetch analytics"));
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[169]++;
      setError(errorMessage);
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[170]++;
      throw new Error(errorMessage);
    } finally {
      /* istanbul ignore next */
      cov_27l0vpc7cp().s[171]++;
      setIsLoading(false);
    }
  }, []));
  /* istanbul ignore next */
  cov_27l0vpc7cp().s[172]++;
  return {
    isLoading,
    error,
    createWorkflow,
    updateWorkflow,
    deleteWorkflow,
    executeWorkflow,
    getWorkflows,
    getTemplates,
    getExecutions,
    getAnalytics
  };
};
const _default =
/* istanbul ignore next */
(cov_27l0vpc7cp().s[173]++, {
  useAutomationService
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,