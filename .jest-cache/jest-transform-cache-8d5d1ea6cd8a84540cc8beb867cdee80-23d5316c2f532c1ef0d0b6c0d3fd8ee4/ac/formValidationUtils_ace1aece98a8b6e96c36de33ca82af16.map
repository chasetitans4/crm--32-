{"version":3,"names":["cov_2rk82y87nx","actualCoverage","s","commonSchemas","f","createClientFormSchema","createProjectFormSchema","createSubmissionHandler","getFieldError","hasFieldError","hasFormDataChanged","useFormValidation","useModalState","email","_zod","z","string","phone","regex","required","fieldName","min","minLength","positiveNumber","number","currency","date","refine","isNaN","Date","parse","object","clientName","clientEmail","clientPhone","optional","businessName","industry","projectTitle","description","timeline","budget","requirements","initialData","schema","options","b","validateOnChange","resetOnSubmit","formData","setFormData","_react","useState","errors","setErrors","isDirty","setIsDirty","isSubmitting","setIsSubmitting","originalData","validateField","useCallback","field","fieldSchema","shape","prev","newErrors","error","ZodError","message","validateForm","forEach","err","path","length","updateField","value","setTimeout","updateFields","fields","resetForm","newData","resetData","hasUnsavedChanges","JSON","stringify","isValid","useMemo","Object","keys","formState","data","formActions","setSubmitting","isOpen","setIsOpen","isClosing","setIsClosing","openModal","closeModal","confirmClose","confirmed","window","confirm","submitFn","onSuccess","onError","resetOnSuccess","showSuccessMessage","showErrorMessage","result","console","log","current","original","Boolean"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\formValidationUtils.ts"],"sourcesContent":["\"use client\"\n\nimport { z } from \"zod\"\nimport { useState, useCallback, useMemo } from \"react\"\n\n// Common validation schemas\nexport const commonSchemas = {\n  email: z.string().email(\"Please enter a valid email address\"),\n  phone: z.string().regex(/^[\\+]?[1-9][\\d]{0,15}$/, \"Please enter a valid phone number\"),\n  required: (fieldName: string) => z.string().min(1, `${fieldName} is required`),\n  minLength: (fieldName: string, min: number) => \n    z.string().min(min, `${fieldName} must be at least ${min} characters`),\n  positiveNumber: (fieldName: string) => \n    z.number().min(0, `${fieldName} must be a positive number`),\n  currency: z.number().min(0, \"Amount must be positive\"),\n  date: z.string().refine((date) => !isNaN(Date.parse(date)), \"Please enter a valid date\")\n}\n\n// Common form validation patterns\nexport const createClientFormSchema = () => z.object({\n  clientName: commonSchemas.required(\"Client name\"),\n  clientEmail: commonSchemas.email,\n  clientPhone: commonSchemas.phone.optional(),\n  businessName: commonSchemas.required(\"Business name\"),\n  industry: commonSchemas.required(\"Industry\")\n})\n\nexport const createProjectFormSchema = () => z.object({\n  projectTitle: commonSchemas.minLength(\"Project title\", 5),\n  description: commonSchemas.minLength(\"Description\", 10),\n  timeline: commonSchemas.required(\"Timeline\"),\n  budget: commonSchemas.required(\"Budget\"),\n  requirements: commonSchemas.minLength(\"Requirements\", 10)\n})\n\n// Form state management hook\nexport interface FormState<T> {\n  data: T\n  errors: Record<string, string>\n  isValid: boolean\n  isDirty: boolean\n  isSubmitting: boolean\n}\n\nexport interface FormActions<T> {\n  updateField: (field: keyof T, value: unknown) => void\n  updateFields: (fields: Partial<T>) => void\n  validateField: (field: keyof T) => boolean\n  validateForm: () => boolean\n  resetForm: (newData?: Partial<T>) => void\n  setSubmitting: (submitting: boolean) => void\n  hasUnsavedChanges: () => boolean\n}\n\nexport function useFormValidation<T extends Record<string, unknown>>(\n  initialData: T,\n  schema: z.ZodSchema<T>,\n  options: {\n    validateOnChange?: boolean\n    resetOnSubmit?: boolean\n  } = {}\n): [FormState<T>, FormActions<T>] {\n  const { validateOnChange = true, resetOnSubmit = false } = options\n  \n  const [formData, setFormData] = useState<T>(initialData)\n  const [errors, setErrors] = useState<Record<string, string>>({})\n  const [isDirty, setIsDirty] = useState(false)\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [originalData] = useState<T>(initialData)\n\n  const validateField = useCallback((field: keyof T): boolean => {\n    try {\n      const fieldSchema = (schema as any).shape?.[field as string]\n      if (fieldSchema) {\n        fieldSchema.parse(formData[field])\n        setErrors(prev => {\n          const newErrors = { ...prev }\n          delete newErrors[field as string]\n          return newErrors\n        })\n        return true\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        setErrors(prev => ({\n          ...prev,\n          [field as string]: error.errors[0]?.message || \"Invalid value\"\n        }))\n      }\n    }\n    return false\n  }, [formData, schema])\n\n  const validateForm = useCallback((): boolean => {\n    try {\n      schema.parse(formData)\n      setErrors({})\n      return true\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        const newErrors: Record<string, string> = {}\n        error.errors.forEach(err => {\n          if (err.path.length > 0) {\n            newErrors[err.path[0] as string] = err.message\n          }\n        })\n        setErrors(newErrors)\n      }\n      return false\n    }\n  }, [formData, schema])\n\n  const updateField = useCallback((field: keyof T, value: unknown) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n    setIsDirty(true)\n    \n    if (validateOnChange) {\n      // Validate after a short delay to avoid excessive validation\n      setTimeout(() => validateField(field), 100)\n    }\n  }, [validateField, validateOnChange])\n\n  const updateFields = useCallback((fields: Partial<T>) => {\n    setFormData(prev => ({ ...prev, ...fields }))\n    setIsDirty(true)\n    \n    if (validateOnChange) {\n      setTimeout(() => validateForm(), 100)\n    }\n  }, [validateForm, validateOnChange])\n\n  const resetForm = useCallback((newData?: Partial<T>) => {\n    const resetData = newData ? { ...initialData, ...newData } : initialData\n    setFormData(resetData)\n    setErrors({})\n    setIsDirty(false)\n    setIsSubmitting(false)\n  }, [initialData])\n\n  const hasUnsavedChanges = useCallback((): boolean => {\n    return JSON.stringify(formData) !== JSON.stringify(originalData)\n  }, [formData, originalData])\n\n  const isValid = useMemo(() => {\n    return Object.keys(errors).length === 0 && isDirty\n  }, [errors, isDirty])\n\n  const formState: FormState<T> = {\n    data: formData,\n    errors,\n    isValid,\n    isDirty,\n    isSubmitting\n  }\n\n  const formActions: FormActions<T> = {\n    updateField,\n    updateFields,\n    validateField,\n    validateForm,\n    resetForm,\n    setSubmitting: setIsSubmitting,\n    hasUnsavedChanges\n  }\n\n  return [formState, formActions]\n}\n\n// Modal state management hook\nexport interface ModalState {\n  isOpen: boolean\n  isClosing: boolean\n}\n\nexport interface ModalActions {\n  openModal: () => void\n  closeModal: () => void\n  confirmClose: (hasUnsavedChanges: boolean, message?: string) => Promise<boolean>\n}\n\nexport function useModalState(): [ModalState, ModalActions] {\n  const [isOpen, setIsOpen] = useState(false)\n  const [isClosing, setIsClosing] = useState(false)\n\n  const openModal = useCallback(() => {\n    setIsOpen(true)\n    setIsClosing(false)\n  }, [])\n\n  const closeModal = useCallback(() => {\n    setIsClosing(true)\n    setTimeout(() => {\n      setIsOpen(false)\n      setIsClosing(false)\n    }, 150) // Animation delay\n  }, [])\n\n  const confirmClose = useCallback(async (\n    hasUnsavedChanges: boolean, \n    message = \"You have unsaved changes. Are you sure you want to close this form? All data will be lost.\"\n  ): Promise<boolean> => {\n    if (hasUnsavedChanges) {\n      const confirmed = window.confirm(message)\n      if (confirmed) {\n        closeModal()\n        return true\n      }\n      return false\n    }\n    closeModal()\n    return true\n  }, [closeModal])\n\n  return [\n    { isOpen, isClosing },\n    { openModal, closeModal, confirmClose }\n  ]\n}\n\n// Form submission helper\nexport interface SubmissionOptions<T> {\n  onSuccess?: (data: T) => void\n  onError?: (error: Error) => void\n  resetOnSuccess?: boolean\n  showSuccessMessage?: boolean\n  showErrorMessage?: boolean\n}\n\nexport function createSubmissionHandler<T>(\n  formActions: FormActions<T>,\n  submitFn: (data: T) => Promise<unknown>,\n  options: SubmissionOptions<T> = {}\n) {\n  return async (data: T) => {\n    const { \n      onSuccess, \n      onError, \n      resetOnSuccess = false,\n      showSuccessMessage = true,\n      showErrorMessage = true \n    } = options\n\n    if (!formActions.validateForm()) {\n      return\n    }\n\n    formActions.setSubmitting(true)\n\n    try {\n      const result = await submitFn(data)\n      \n      if (showSuccessMessage) {\n        // You can integrate with your toast system here\n        console.log('Form submitted successfully')\n      }\n      \n      if (resetOnSuccess) {\n        formActions.resetForm()\n      }\n      \n      onSuccess?.(data)\n      return result\n    } catch (error) {\n      if (showErrorMessage) {\n        console.error('Form submission failed:', error)\n      }\n      \n      onError?.(error as Error)\n      throw error\n    } finally {\n      formActions.setSubmitting(false)\n    }\n  }\n}\n\n// Utility for checking if form data has changed\nexport function hasFormDataChanged<T extends Record<string, unknown>>(\n  current: T, \n  original: T\n): boolean {\n  return JSON.stringify(current) !== JSON.stringify(original)\n}\n\n// Utility for extracting form errors for display\nexport function getFieldError(\n  errors: Record<string, string>, \n  fieldName: string\n): string | undefined {\n  return errors[fieldName]\n}\n\n// Utility for checking if a field has an error\nexport function hasFieldError(\n  errors: Record<string, string>, \n  fieldName: string\n): boolean {\n  return Boolean(errors[fieldName])\n}"],"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","ignoreList":[]}