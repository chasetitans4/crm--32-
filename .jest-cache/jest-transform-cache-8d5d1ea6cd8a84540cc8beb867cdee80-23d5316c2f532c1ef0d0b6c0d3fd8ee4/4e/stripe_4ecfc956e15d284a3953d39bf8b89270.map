{"version":3,"names":["cov_25ap0awrik","actualCoverage","s","_default","StripeService","constructor","apiKey","f","mockData","customers","paymentIntents","invoices","createCustomer","params","Promise","resolve","setTimeout","customer","id","Math","random","toString","substring","email","name","phone","metadata","push","getCustomer","customerId","b","find","c","createPaymentIntent","paymentIntent","amount","status","client_secret","created","Date","now","currency","description","confirmPaymentIntent","paymentIntentId","pi","Error","createInvoice","invoice","amount_due","amount_paid","due_date","number","floor","finalizeInvoice","invoiceId","inv","payInvoice","stripe","process","env","STRIPE_SECRET_KEY"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\stripe.ts"],"sourcesContent":["// This is a mock Stripe service for demonstration purposes\n// In a real application, you would use the actual Stripe SDK\n\nexport interface StripePaymentIntent {\n  id: string\n  amount: number\n  status:\n    | \"requires_payment_method\"\n    | \"requires_confirmation\"\n    | \"requires_action\"\n    | \"processing\"\n    | \"requires_capture\"\n    | \"canceled\"\n    | \"succeeded\"\n  client_secret: string\n  created: number\n  currency: string\n  customer?: string\n  description?: string\n  metadata?: Record<string, string>\n}\n\nexport interface StripeCustomer {\n  id: string\n  email: string\n  name?: string\n  phone?: string\n  metadata?: Record<string, string>\n}\n\nexport interface StripeInvoice {\n  id: string\n  customer: string\n  amount_due: number\n  amount_paid: number\n  currency: string\n  status: \"draft\" | \"open\" | \"paid\" | \"uncollectible\" | \"void\"\n  due_date?: number\n  number?: string\n  description?: string\n  metadata?: Record<string, string>\n}\n\nclass StripeService {\n  private apiKey: string\n  private mockData: {\n    customers: StripeCustomer[]\n    paymentIntents: StripePaymentIntent[]\n    invoices: StripeInvoice[]\n  }\n\n  constructor(apiKey: string) {\n    this.apiKey = apiKey\n\n    // Mock data for demonstration\n    this.mockData = {\n      customers: [],\n      paymentIntents: [],\n      invoices: [],\n    }\n  }\n\n  // Customer methods\n  async createCustomer(params: {\n    email: string\n    name?: string\n    phone?: string\n    metadata?: Record<string, string>\n  }): Promise<StripeCustomer> {\n    // Simulate API call\n    await new Promise((resolve) => setTimeout(resolve, 500))\n\n    const customer: StripeCustomer = {\n      id: `cus_${Math.random().toString(36).substring(2, 10)}`,\n      email: params.email,\n      name: params.name,\n      phone: params.phone,\n      metadata: params.metadata,\n    }\n\n    this.mockData.customers.push(customer)\n\n    return customer\n  }\n\n  async getCustomer(customerId: string): Promise<StripeCustomer | null> {\n    // Simulate API call\n    await new Promise((resolve) => setTimeout(resolve, 300))\n\n    return this.mockData.customers.find((c) => c.id === customerId) || null\n  }\n\n  // Payment Intent methods\n  async createPaymentIntent(params: {\n    amount: number\n    currency: string\n    customer?: string\n    description?: string\n    metadata?: Record<string, string>\n  }): Promise<StripePaymentIntent> {\n    // Simulate API call\n    await new Promise((resolve) => setTimeout(resolve, 500))\n\n    const paymentIntent: StripePaymentIntent = {\n      id: `pi_${Math.random().toString(36).substring(2, 10)}`,\n      amount: params.amount,\n      status: \"requires_payment_method\",\n      client_secret: `pi_${Math.random().toString(36).substring(2, 10)}_secret_${Math.random().toString(36).substring(2, 10)}`,\n      created: Date.now(),\n      currency: params.currency,\n      customer: params.customer,\n      description: params.description,\n      metadata: params.metadata,\n    }\n\n    this.mockData.paymentIntents.push(paymentIntent)\n\n    return paymentIntent\n  }\n\n  async confirmPaymentIntent(paymentIntentId: string): Promise<StripePaymentIntent> {\n    // Simulate API call\n    await new Promise((resolve) => setTimeout(resolve, 700))\n\n    const paymentIntent = this.mockData.paymentIntents.find((pi) => pi.id === paymentIntentId)\n\n    if (!paymentIntent) {\n      throw new Error(`Payment intent ${paymentIntentId} not found`)\n    }\n\n    // Simulate successful payment\n    paymentIntent.status = \"succeeded\"\n\n    return paymentIntent\n  }\n\n  // Invoice methods\n  async createInvoice(params: {\n    customer: string\n    amount: number\n    currency: string\n    description?: string\n    due_date?: number\n    metadata?: Record<string, string>\n  }): Promise<StripeInvoice> {\n    // Simulate API call\n    await new Promise((resolve) => setTimeout(resolve, 600))\n\n    const invoice: StripeInvoice = {\n      id: `in_${Math.random().toString(36).substring(2, 10)}`,\n      customer: params.customer,\n      amount_due: params.amount,\n      amount_paid: 0,\n      currency: params.currency,\n      status: \"draft\",\n      due_date: params.due_date,\n      number: `INV-${Math.floor(Math.random() * 10000)}`,\n      description: params.description,\n      metadata: params.metadata,\n    }\n\n    this.mockData.invoices.push(invoice)\n\n    return invoice\n  }\n\n  async finalizeInvoice(invoiceId: string): Promise<StripeInvoice> {\n    // Simulate API call\n    await new Promise((resolve) => setTimeout(resolve, 400))\n\n    const invoice = this.mockData.invoices.find((inv) => inv.id === invoiceId)\n\n    if (!invoice) {\n      throw new Error(`Invoice ${invoiceId} not found`)\n    }\n\n    invoice.status = \"open\"\n\n    return invoice\n  }\n\n  async payInvoice(invoiceId: string): Promise<StripeInvoice> {\n    // Simulate API call\n    await new Promise((resolve) => setTimeout(resolve, 800))\n\n    const invoice = this.mockData.invoices.find((inv) => inv.id === invoiceId)\n\n    if (!invoice) {\n      throw new Error(`Invoice ${invoiceId} not found`)\n    }\n\n    invoice.status = \"paid\"\n    invoice.amount_paid = invoice.amount_due\n\n    return invoice\n  }\n}\n\n// Create a singleton instance\nconst stripe = new StripeService(process.env.STRIPE_SECRET_KEY || \"sk_test_mock_key\")\n\nexport default stripe\n"],"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","ignoreList":[]}