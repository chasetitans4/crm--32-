{"version":3,"names":["cov_23n0kfhsez","actualCoverage","s","useAdaptiveRateLimit","f","useApiRequestManager","useCircuitBreaker","useRateLimit","useRateLimitMetrics","useRequestThrottler","config","state","setState","_react","useState","isLimited","remaining","maxRequests","resetTime","Date","now","windowMs","retryAfter","rateLimiterRef","useRef","useEffect","current","_rateLimiting","RateLimiter","destroy","checkLimit","useCallback","request","b","ip","allowed","result","check","Math","ceil","resetLimit","reset","prev","getStats","totalKeys","totalRequests","isThrottling","queueLength","activeRequests","totalProcessed","throttlerRef","updateStatsInterval","RequestThrottler","setInterval","stats","clearInterval","clear","throttleRequest","priority","throttle","clearQueue","systemLoad","setSystemLoad","adaptedConfig","setAdaptedConfig","rateLimitState","adaptiveLimiterRef","AdaptiveRateLimiter","loadInterval","load","getSystemLoad","loadFactor","floor","originalConfig","failureThreshold","recoveryTimeout","successThreshold","failures","lastFailureTime","isAvailable","circuitBreakerRef","CircuitBreaker","execute","operation","breakerState","getState","error","rateLimitConfig","rateLimitConfigs","api","throttleConfig","delay","maxConcurrent","enableCircuitBreaker","circuitBreakerConfig","rateLimit","throttler","circuitBreaker","makeRequest","options","bypassRateLimit","bypassThrottle","bypassCircuitBreaker","limitResult","Error","executeRequest","metrics","setMetrics","blockedRequests","averageResponseTime","peakRequestsPerMinute","currentRequestsPerMinute","requestTimes","requestTimestamps","blockedCount","totalCount","recordRequest","responseTime","wasBlocked","push","length","slice","reduce","a","oneMinuteAgo","recentRequests","filter","timestamp","max","resetMetrics"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\useRateLimiting.ts"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport {\n  RateLimiter,\n  RequestThrottler,\n  AdaptiveRateLimiter,\n  CircuitBreaker,\n  rateLimitConfigs,\n  type RateLimitConfig,\n  type ThrottleConfig\n} from '@/utils/rateLimiting';\n\ninterface RateLimitState {\n  isLimited: boolean;\n  remaining: number;\n  resetTime: number;\n  retryAfter: number;\n}\n\ninterface ThrottleState {\n  isThrottling: boolean;\n  queueLength: number;\n  activeRequests: number;\n  totalProcessed: number;\n}\n\ninterface CircuitBreakerState {\n  state: 'closed' | 'open' | 'half-open';\n  failures: number;\n  lastFailureTime: number;\n  isAvailable: boolean;\n}\n\n// Hook for rate limiting\nexport function useRateLimit(config: RateLimitConfig) {\n  const [state, setState] = useState<RateLimitState>({\n    isLimited: false,\n    remaining: config.maxRequests,\n    resetTime: Date.now() + config.windowMs,\n    retryAfter: 0\n  });\n\n  const rateLimiterRef = useRef<RateLimiter>();\n\n  // Initialize rate limiter\n  useEffect(() => {\n    rateLimiterRef.current = new RateLimiter(config);\n    \n    return () => {\n      rateLimiterRef.current?.destroy();\n    };\n  }, [config]);\n\n  // Check rate limit\n  const checkLimit = useCallback((request: any = { ip: 'default' }) => {\n    if (!rateLimiterRef.current) return { allowed: true, remaining: config.maxRequests, resetTime: Date.now() };\n    \n    const result = rateLimiterRef.current.check(request);\n    \n    setState({\n      isLimited: !result.allowed,\n      remaining: result.remaining,\n      resetTime: result.resetTime,\n      retryAfter: result.allowed ? 0 : Math.ceil((result.resetTime - Date.now()) / 1000)\n    });\n    \n    return result;\n  }, [config.maxRequests]);\n\n  // Reset rate limit for a specific request\n  const resetLimit = useCallback((request: any = { ip: 'default' }) => {\n    rateLimiterRef.current?.reset(request);\n    setState(prev => ({\n      ...prev,\n      isLimited: false,\n      remaining: config.maxRequests,\n      retryAfter: 0\n    }));\n  }, [config.maxRequests]);\n\n  // Get rate limiter stats\n  const getStats = useCallback(() => {\n    return rateLimiterRef.current?.getStats() || { totalKeys: 0, totalRequests: 0 };\n  }, []);\n\n  return {\n    ...state,\n    checkLimit,\n    resetLimit,\n    getStats\n  };\n}\n\n// Hook for request throttling\nexport function useRequestThrottler(config: ThrottleConfig) {\n  const [state, setState] = useState<ThrottleState>({\n    isThrottling: false,\n    queueLength: 0,\n    activeRequests: 0,\n    totalProcessed: 0\n  });\n\n  const throttlerRef = useRef<RequestThrottler>();\n  const updateStatsInterval = useRef<NodeJS.Timeout>();\n\n  // Initialize throttler\n  useEffect(() => {\n    throttlerRef.current = new RequestThrottler(config);\n    \n    // Update stats periodically\n    updateStatsInterval.current = setInterval(() => {\n      if (throttlerRef.current) {\n        const stats = throttlerRef.current.getStats();\n        setState({\n          isThrottling: stats.queueLength > 0 || stats.activeRequests > 0,\n          queueLength: stats.queueLength,\n          activeRequests: stats.activeRequests,\n          totalProcessed: stats.totalProcessed\n        });\n      }\n    }, 1000);\n    \n    return () => {\n      if (updateStatsInterval.current) {\n        clearInterval(updateStatsInterval.current);\n      }\n      throttlerRef.current?.clear();\n    };\n  }, [config]);\n\n  // Throttle a request\n  const throttleRequest = useCallback(async <T>(\n    request: () => Promise<T>,\n    priority: number = 0\n  ): Promise<T> => {\n    if (!throttlerRef.current) {\n      return request();\n    }\n    \n    return throttlerRef.current.throttle(request, priority);\n  }, []);\n\n  // Clear throttle queue\n  const clearQueue = useCallback(() => {\n    throttlerRef.current?.clear();\n    setState(prev => ({\n      ...prev,\n      queueLength: 0,\n      isThrottling: false\n    }));\n  }, []);\n\n  return {\n    ...state,\n    throttleRequest,\n    clearQueue\n  };\n}\n\n// Hook for adaptive rate limiting\nexport function useAdaptiveRateLimit(config: RateLimitConfig) {\n  const [systemLoad, setSystemLoad] = useState(0);\n  const [adaptedConfig, setAdaptedConfig] = useState(config);\n  \n  const rateLimitState = useRateLimit(adaptedConfig);\n  const adaptiveLimiterRef = useRef<AdaptiveRateLimiter>();\n\n  // Initialize adaptive rate limiter\n  useEffect(() => {\n    adaptiveLimiterRef.current = new AdaptiveRateLimiter(config);\n    \n    // Monitor system load\n    const loadInterval = setInterval(() => {\n      if (adaptiveLimiterRef.current) {\n        const load = adaptiveLimiterRef.current.getSystemLoad();\n        setSystemLoad(load);\n        \n        // Update adapted config based on system load\n        const loadFactor = 1 - (load * 0.5);\n        setAdaptedConfig({\n          ...config,\n          maxRequests: Math.floor(config.maxRequests * loadFactor),\n          windowMs: Math.floor(config.windowMs * (1 + load * 0.5))\n        });\n      }\n    }, 30000);\n    \n    return () => {\n      clearInterval(loadInterval);\n      adaptiveLimiterRef.current?.destroy();\n    };\n  }, [config]);\n\n  return {\n    ...rateLimitState,\n    systemLoad,\n    adaptedConfig,\n    originalConfig: config\n  };\n}\n\n// Hook for circuit breaker\nexport function useCircuitBreaker(\n  failureThreshold: number = 5,\n  recoveryTimeout: number = 60000,\n  successThreshold: number = 3\n) {\n  const [state, setState] = useState<CircuitBreakerState>({\n    state: 'closed',\n    failures: 0,\n    lastFailureTime: 0,\n    isAvailable: true\n  });\n\n  const circuitBreakerRef = useRef<CircuitBreaker>();\n\n  // Initialize circuit breaker\n  useEffect(() => {\n    circuitBreakerRef.current = new CircuitBreaker(\n      failureThreshold,\n      recoveryTimeout,\n      successThreshold\n    );\n  }, [failureThreshold, recoveryTimeout, successThreshold]);\n\n  // Execute operation with circuit breaker\n  const execute = useCallback(async <T>(operation: () => Promise<T>): Promise<T> => {\n    if (!circuitBreakerRef.current) {\n      return operation();\n    }\n    \n    try {\n      const result = await circuitBreakerRef.current.execute(operation);\n      \n      // Update state after successful execution\n      const breakerState = circuitBreakerRef.current.getState();\n      setState({\n        state: breakerState.state as 'closed' | 'open' | 'half-open',\n        failures: breakerState.failures,\n        lastFailureTime: breakerState.lastFailureTime,\n        isAvailable: breakerState.state !== 'open'\n      });\n      \n      return result;\n    } catch (error) {\n      // Update state after failure\n      const breakerState = circuitBreakerRef.current.getState();\n      setState({\n        state: breakerState.state as 'closed' | 'open' | 'half-open',\n        failures: breakerState.failures,\n        lastFailureTime: breakerState.lastFailureTime,\n        isAvailable: breakerState.state !== 'open'\n      });\n      \n      throw error;\n    }\n  }, []);\n\n  // Reset circuit breaker\n  const reset = useCallback(() => {\n    circuitBreakerRef.current?.reset();\n    setState({\n      state: 'closed',\n      failures: 0,\n      lastFailureTime: 0,\n      isAvailable: true\n    });\n  }, []);\n\n  return {\n    ...state,\n    execute,\n    reset\n  };\n}\n\n// Hook for API request management with rate limiting and throttling\nexport function useApiRequestManager({\n  rateLimitConfig = rateLimitConfigs.api,\n  throttleConfig = { delay: 100, maxConcurrent: 5 },\n  useCircuitBreaker: enableCircuitBreaker = true,\n  circuitBreakerConfig = {}\n}: {\n  rateLimitConfig?: RateLimitConfig;\n  throttleConfig?: ThrottleConfig;\n  useCircuitBreaker?: boolean;\n  circuitBreakerConfig?: {\n    failureThreshold?: number;\n    recoveryTimeout?: number;\n    successThreshold?: number;\n  };\n} = {}) {\n  const rateLimit = useRateLimit(rateLimitConfig);\n  const throttler = useRequestThrottler(throttleConfig);\n  const circuitBreaker = useCircuitBreaker(\n    circuitBreakerConfig.failureThreshold,\n    circuitBreakerConfig.recoveryTimeout,\n    circuitBreakerConfig.successThreshold\n  );\n\n  // Make API request with all protections\n  const makeRequest = useCallback(async <T>(\n    request: () => Promise<T>,\n    options: {\n      priority?: number;\n      bypassRateLimit?: boolean;\n      bypassThrottle?: boolean;\n      bypassCircuitBreaker?: boolean;\n    } = {}\n  ): Promise<T> => {\n    const {\n      priority = 0,\n      bypassRateLimit = false,\n      bypassThrottle = false,\n      bypassCircuitBreaker = false\n    } = options;\n\n    // Check rate limit\n    if (!bypassRateLimit) {\n      const limitResult = rateLimit.checkLimit();\n      if (!limitResult.allowed) {\n        throw new Error(`Rate limit exceeded. Retry after ${rateLimit.retryAfter} seconds.`);\n      }\n    }\n\n    // Check circuit breaker\n    if (!bypassCircuitBreaker && enableCircuitBreaker && !circuitBreaker.isAvailable) {\n      throw new Error('Service temporarily unavailable (circuit breaker open)');\n    }\n\n    // Execute request with throttling and circuit breaker\n    const executeRequest = async () => {\n      if (bypassThrottle) {\n        return request();\n      }\n      return throttler.throttleRequest(request, priority);\n    };\n\n    if (bypassCircuitBreaker || !enableCircuitBreaker) {\n      return executeRequest();\n    }\n\n    return circuitBreaker.execute(executeRequest);\n  }, [rateLimit, throttler, circuitBreaker, enableCircuitBreaker]);\n\n  // Get comprehensive stats\n  const getStats = useCallback(() => {\n    return {\n      rateLimit: {\n        ...rateLimit,\n        stats: rateLimit.getStats()\n      },\n      throttler: {\n        isThrottling: throttler.isThrottling,\n        queueLength: throttler.queueLength,\n        activeRequests: throttler.activeRequests,\n        totalProcessed: throttler.totalProcessed\n      },\n      circuitBreaker: {\n        state: circuitBreaker.state,\n        failures: circuitBreaker.failures,\n        isAvailable: circuitBreaker.isAvailable\n      }\n    };\n  }, [rateLimit, throttler, circuitBreaker]);\n\n  return {\n    makeRequest,\n    getStats,\n    rateLimit,\n    throttler,\n    circuitBreaker\n  };\n}\n\n// Hook for monitoring rate limiting metrics\nexport function useRateLimitMetrics() {\n  const [metrics, setMetrics] = useState({\n    totalRequests: 0,\n    blockedRequests: 0,\n    averageResponseTime: 0,\n    peakRequestsPerMinute: 0,\n    currentRequestsPerMinute: 0\n  });\n\n  const requestTimes = useRef<number[]>([]);\n  const requestTimestamps = useRef<number[]>([]);\n  const blockedCount = useRef(0);\n  const totalCount = useRef(0);\n\n  // Record request\n  const recordRequest = useCallback((responseTime: number, wasBlocked: boolean = false) => {\n    const now = Date.now();\n    \n    totalCount.current++;\n    if (wasBlocked) {\n      blockedCount.current++;\n    } else {\n      requestTimes.current.push(responseTime);\n      requestTimestamps.current.push(now);\n    }\n\n    // Keep only last 1000 requests for performance\n    if (requestTimes.current.length > 1000) {\n      requestTimes.current = requestTimes.current.slice(-1000);\n    }\n    if (requestTimestamps.current.length > 1000) {\n      requestTimestamps.current = requestTimestamps.current.slice(-1000);\n    }\n\n    // Calculate metrics\n    const averageResponseTime = requestTimes.current.length > 0\n      ? requestTimes.current.reduce((a, b) => a + b, 0) / requestTimes.current.length\n      : 0;\n\n    // Calculate requests per minute\n    const oneMinuteAgo = now - 60000;\n    const recentRequests = requestTimestamps.current.filter(timestamp => timestamp > oneMinuteAgo);\n    const currentRequestsPerMinute = recentRequests.length;\n\n    setMetrics(prev => ({\n      totalRequests: totalCount.current,\n      blockedRequests: blockedCount.current,\n      averageResponseTime,\n      peakRequestsPerMinute: Math.max(prev.peakRequestsPerMinute, currentRequestsPerMinute),\n      currentRequestsPerMinute\n    }));\n  }, []);\n\n  // Reset metrics\n  const resetMetrics = useCallback(() => {\n    requestTimes.current = [];\n    requestTimestamps.current = [];\n    blockedCount.current = 0;\n    totalCount.current = 0;\n    setMetrics({\n      totalRequests: 0,\n      blockedRequests: 0,\n      averageResponseTime: 0,\n      peakRequestsPerMinute: 0,\n      currentRequestsPerMinute: 0\n    });\n  }, []);\n\n  return {\n    metrics,\n    recordRequest,\n    resetMetrics\n  };\n}\n\n// Export types\nexport type {\n  RateLimitState,\n  ThrottleState,\n  CircuitBreakerState\n};"],"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","ignoreList":[]}