{"version":3,"names":["cov_tulznt8tc","actualCoverage","s","GET","mockData","sales","labels","data","clients","stages","Prospect","Proposal","Negotiation","tasks","status","Completed","Pending","revenue","total","monthly","request","params","f","metric","b","_server","NextResponse","json","success","error","console"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\app\\api\\analytics\\[metric]\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\n// Mock data generators\nconst mockData: Record<string, any> = {\n  sales: { labels: ['Jan', 'Feb', 'Mar'], data: [12, 19, 15] },\n  clients: { stages: { Prospect: 5, Proposal: 3, Negotiation: 2 } },\n  tasks: { status: { Completed: 45, Pending: 20 } },\n  revenue: { total: 83200, monthly: [15000, 22000, 18000] }\n};\n\n// GET /api/analytics/[metric]\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ metric: string }> }\n) {\n  try {\n    const { metric } = await params;\n    const data = mockData[metric] || {};\n    if (!data) {\n      return NextResponse.json({ success: false, error: 'Metric not found' }, { status: 404 });\n    }\n    return NextResponse.json({ success: true, data });\n  } catch (error) {\n    console.error('Error fetching analytics data:', error);\n    return NextResponse.json({ success: false, error: 'Failed to fetch data' }, { status: 500 });\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIoB;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAAAA,aAAA,GAAAE,CAAA;;;;;;+BAOE;;;;;;WAAAC,GAAA;;;;;iCAXoB;AAE1C;AACA,MAAMC,QAAA;AAAA;AAAA,CAAAJ,aAAA,GAAAE,CAAA,OAAgC;EACpCG,KAAA,EAAO;IAAEC,MAAA,EAAQ,CAAC,OAAO,OAAO,MAAM;IAAEC,IAAA,EAAM,CAAC,IAAI,IAAI;EAAI;EAC3DC,OAAA,EAAS;IAAEC,MAAA,EAAQ;MAAEC,QAAA,EAAU;MAAGC,QAAA,EAAU;MAAGC,WAAA,EAAa;IAAE;EAAE;EAChEC,KAAA,EAAO;IAAEC,MAAA,EAAQ;MAAEC,SAAA,EAAW;MAAIC,OAAA,EAAS;IAAG;EAAE;EAChDC,OAAA,EAAS;IAAEC,KAAA,EAAO;IAAOC,OAAA,EAAS,CAAC,OAAO,OAAO;EAAO;AAC1D;AAGO,eAAehB,IACpBiB,OAAoB,EACpB;EAAEC;AAAM,CAA2C;EAAA;EAAArB,aAAA,GAAAsB,CAAA;EAAAtB,aAAA,GAAAE,CAAA;EAEnD,IAAI;IACF,MAAM;MAAEqB;IAAM,CAAE;IAAA;IAAA,CAAAvB,aAAA,GAAAE,CAAA,OAAG,MAAMmB,MAAA;IACzB,MAAMd,IAAA;IAAA;IAAA,CAAAP,aAAA,GAAAE,CAAA;IAAO;IAAA,CAAAF,aAAA,GAAAwB,CAAA,UAAApB,QAAQ,CAACmB,MAAA,CAAO;IAAA;IAAA,CAAAvB,aAAA,GAAAwB,CAAA,UAAI,CAAC;IAAA;IAAAxB,aAAA,GAAAE,CAAA;IAClC,IAAI,CAACK,IAAA,EAAM;MAAA;MAAAP,aAAA,GAAAwB,CAAA;MAAAxB,aAAA,GAAAE,CAAA;MACT,OAAOuB,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;QAAEC,OAAA,EAAS;QAAOC,KAAA,EAAO;MAAmB,GAAG;QAAEf,MAAA,EAAQ;MAAI;IACxF;IAAA;IAAA;MAAAd,aAAA,GAAAwB,CAAA;IAAA;IAAAxB,aAAA,GAAAE,CAAA;IACA,OAAOuB,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MAAEC,OAAA,EAAS;MAAMrB;IAAK;EACjD,EAAE,OAAOsB,KAAA,EAAO;IAAA;IAAA7B,aAAA,GAAAE,CAAA;IACd4B,OAAA,CAAQD,KAAK,CAAC,kCAAkCA,KAAA;IAAA;IAAA7B,aAAA,GAAAE,CAAA;IAChD,OAAOuB,OAAA,CAAAC,YAAY,CAACC,IAAI,CAAC;MAAEC,OAAA,EAAS;MAAOC,KAAA,EAAO;IAAuB,GAAG;MAAEf,MAAA,EAAQ;IAAI;EAC5F;AACF","ignoreList":[]}