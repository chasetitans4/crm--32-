7f81bcba9524eabee49a4058f8fefe5f
// Audit logging service for tracking user actions and system events
"use strict";

/* istanbul ignore next */
function cov_1s326ho2fp() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\auditLogService.ts";
  var hash = "a17ed964976e0a001b1a1e8eef02611c9fb1de12";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\auditLogService.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 31
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 24
        }
      },
      "6": {
        start: {
          line: 20,
          column: 23
        },
        end: {
          line: 20,
          column: 49
        }
      },
      "7": {
        start: {
          line: 21,
          column: 23
        },
        end: {
          line: 21,
          column: 56
        }
      },
      "8": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "9": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 41
        }
      },
      "10": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 38
        }
      },
      "11": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 36
        }
      },
      "12": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 40,
          column: 15
        }
      },
      "13": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 24
        }
      },
      "14": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "15": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 19
        }
      },
      "16": {
        start: {
          line: 51,
          column: 25
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "17": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 33
        }
      },
      "18": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 40
        }
      },
      "19": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "20": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 60
        }
      },
      "21": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 29
        }
      },
      "22": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "23": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 31
        }
      },
      "24": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "25": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 31
        }
      },
      "26": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 43
        }
      },
      "27": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 89,
          column: 11
        }
      },
      "28": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 102,
          column: 11
        }
      },
      "29": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 119,
          column: 11
        }
      },
      "30": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 130,
          column: 11
        }
      },
      "31": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 140,
          column: 11
        }
      },
      "32": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 157,
          column: 11
        }
      },
      "33": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 174,
          column: 11
        }
      },
      "34": {
        start: {
          line: 178,
          column: 27
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "35": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "36": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 84
        }
      },
      "37": {
        start: {
          line: 182,
          column: 54
        },
        end: {
          line: 182,
          column: 82
        }
      },
      "38": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "39": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 90
        }
      },
      "40": {
        start: {
          line: 185,
          column: 54
        },
        end: {
          line: 185,
          column: 88
        }
      },
      "41": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "42": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 88
        }
      },
      "43": {
        start: {
          line: 188,
          column: 54
        },
        end: {
          line: 188,
          column: 86
        }
      },
      "44": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "45": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 88
        }
      },
      "46": {
        start: {
          line: 191,
          column: 54
        },
        end: {
          line: 191,
          column: 86
        }
      },
      "47": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "48": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 88
        }
      },
      "49": {
        start: {
          line: 194,
          column: 54
        },
        end: {
          line: 194,
          column: 86
        }
      },
      "50": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "51": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 86
        }
      },
      "52": {
        start: {
          line: 197,
          column: 54
        },
        end: {
          line: 197,
          column: 84
        }
      },
      "53": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 201,
          column: 9
        }
      },
      "54": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 89
        }
      },
      "55": {
        start: {
          line: 200,
          column: 54
        },
        end: {
          line: 200,
          column: 87
        }
      },
      "56": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "57": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 87
        }
      },
      "58": {
        start: {
          line: 203,
          column: 54
        },
        end: {
          line: 203,
          column: 85
        }
      },
      "59": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 81
        }
      },
      "60": {
        start: {
          line: 206,
          column: 34
        },
        end: {
          line: 206,
          column: 79
        }
      },
      "61": {
        start: {
          line: 208,
          column: 23
        },
        end: {
          line: 208,
          column: 41
        }
      },
      "62": {
        start: {
          line: 209,
          column: 22
        },
        end: {
          line: 209,
          column: 41
        }
      },
      "63": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 58
        }
      },
      "64": {
        start: {
          line: 213,
          column: 21
        },
        end: {
          line: 216,
          column: 10
        }
      },
      "65": {
        start: {
          line: 217,
          column: 34
        },
        end: {
          line: 217,
          column: 36
        }
      },
      "66": {
        start: {
          line: 218,
          column: 34
        },
        end: {
          line: 218,
          column: 36
        }
      },
      "67": {
        start: {
          line: 219,
          column: 29
        },
        end: {
          line: 219,
          column: 31
        }
      },
      "68": {
        start: {
          line: 220,
          column: 27
        },
        end: {
          line: 220,
          column: 29
        }
      },
      "69": {
        start: {
          line: 221,
          column: 27
        },
        end: {
          line: 221,
          column: 28
        }
      },
      "70": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 243,
          column: 11
        }
      },
      "71": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 89
        }
      },
      "72": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 89
        }
      },
      "73": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 75
        }
      },
      "74": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 238,
          column: 13
        }
      },
      "75": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 236,
          column: 17
        }
      },
      "76": {
        start: {
          line: 232,
          column: 20
        },
        end: {
          line: 235,
          column: 22
        }
      },
      "77": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 237,
          column: 47
        }
      },
      "78": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 242,
          column: 13
        }
      },
      "79": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 31
        }
      },
      "80": {
        start: {
          line: 244,
          column: 27
        },
        end: {
          line: 247,
          column: 15
        }
      },
      "81": {
        start: {
          line: 244,
          column: 77
        },
        end: {
          line: 244,
          column: 82
        }
      },
      "82": {
        start: {
          line: 244,
          column: 121
        },
        end: {
          line: 247,
          column: 13
        }
      },
      "83": {
        start: {
          line: 248,
          column: 25
        },
        end: {
          line: 252,
          column: 15
        }
      },
      "84": {
        start: {
          line: 248,
          column: 73
        },
        end: {
          line: 248,
          column: 90
        }
      },
      "85": {
        start: {
          line: 248,
          column: 128
        },
        end: {
          line: 252,
          column: 13
        }
      },
      "86": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 261,
          column: 10
        }
      },
      "87": {
        start: {
          line: 264,
          column: 21
        },
        end: {
          line: 264,
          column: 47
        }
      },
      "88": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 267,
          column: 9
        }
      },
      "89": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 43
        }
      },
      "90": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 268,
          column: 45
        }
      },
      "91": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 272,
          column: 80
        }
      },
      "92": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 281,
          column: 9
        }
      },
      "93": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 278,
          column: 31
        }
      },
      "94": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 29
        }
      },
      "95": {
        start: {
          line: 284,
          column: 24
        },
        end: {
          line: 284,
          column: 66
        }
      },
      "96": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 288,
          column: 9
        }
      },
      "97": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 91
        }
      },
      "98": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 287,
          column: 66
        }
      },
      "99": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 289,
          column: 25
        }
      },
      "100": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 292,
          column: 31
        }
      },
      "101": {
        start: {
          line: 292,
          column: 19
        },
        end: {
          line: 292,
          column: 31
        }
      },
      "102": {
        start: {
          line: 293,
          column: 32
        },
        end: {
          line: 299,
          column: 9
        }
      },
      "103": {
        start: {
          line: 300,
          column: 26
        },
        end: {
          line: 300,
          column: 58
        }
      },
      "104": {
        start: {
          line: 301,
          column: 31
        },
        end: {
          line: 311,
          column: 9
        }
      },
      "105": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 68
        }
      },
      "106": {
        start: {
          line: 302,
          column: 57
        },
        end: {
          line: 302,
          column: 68
        }
      },
      "107": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 309,
          column: 13
        }
      },
      "108": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 308,
          column: 17
        }
      },
      "109": {
        start: {
          line: 304,
          column: 50
        },
        end: {
          line: 304,
          column: 83
        }
      },
      "110": {
        start: {
          line: 305,
          column: 20
        },
        end: {
          line: 305,
          column: 44
        }
      },
      "111": {
        start: {
          line: 306,
          column: 23
        },
        end: {
          line: 308,
          column: 17
        }
      },
      "112": {
        start: {
          line: 307,
          column: 20
        },
        end: {
          line: 307,
          column: 56
        }
      },
      "113": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 23
        }
      },
      "114": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 312,
          column: 41
        }
      },
      "115": {
        start: {
          line: 315,
          column: 24
        },
        end: {
          line: 315,
          column: 26
        }
      },
      "116": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 49
        }
      },
      "117": {
        start: {
          line: 316,
          column: 34
        },
        end: {
          line: 316,
          column: 49
        }
      },
      "118": {
        start: {
          line: 317,
          column: 24
        },
        end: {
          line: 320,
          column: 10
        }
      },
      "119": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 328,
          column: 11
        }
      },
      "120": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 327,
          column: 13
        }
      },
      "121": {
        start: {
          line: 323,
          column: 16
        },
        end: {
          line: 326,
          column: 18
        }
      },
      "122": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 329,
          column: 23
        }
      },
      "123": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 342,
          column: 9
        }
      },
      "124": {
        start: {
          line: 333,
          column: 25
        },
        end: {
          line: 333,
          column: 75
        }
      },
      "125": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 339,
          column: 13
        }
      },
      "126": {
        start: {
          line: 335,
          column: 16
        },
        end: {
          line: 338,
          column: 24
        }
      },
      "127": {
        start: {
          line: 335,
          column: 45
        },
        end: {
          line: 338,
          column: 21
        }
      },
      "128": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 349,
          column: 9
        }
      },
      "129": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 346,
          column: 100
        }
      },
      "130": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 359,
          column: 18
        }
      },
      "131": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 358,
          column: 13
        }
      },
      "132": {
        start: {
          line: 355,
          column: 16
        },
        end: {
          line: 357,
          column: 19
        }
      },
      "133": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 362,
          column: 50
        }
      },
      "134": {
        start: {
          line: 362,
          column: 43
        },
        end: {
          line: 362,
          column: 50
        }
      },
      "135": {
        start: {
          line: 363,
          column: 28
        },
        end: {
          line: 365,
          column: 9
        }
      },
      "136": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 366,
          column: 30
        }
      },
      "137": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 379,
          column: 9
        }
      },
      "138": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 372,
          column: 13
        }
      },
      "139": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 374,
          column: 56
        }
      },
      "140": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 377,
          column: 53
        }
      },
      "141": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 378,
          column: 24
        }
      },
      "142": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 390,
          column: 9
        }
      },
      "143": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 386,
          column: 45
        }
      },
      "144": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 387,
          column: 45
        }
      },
      "145": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 393,
          column: 41
        }
      },
      "146": {
        start: {
          line: 393,
          column: 31
        },
        end: {
          line: 393,
          column: 41
        }
      },
      "147": {
        start: {
          line: 394,
          column: 24
        },
        end: {
          line: 409,
          column: 9
        }
      },
      "148": {
        start: {
          line: 410,
          column: 21
        },
        end: {
          line: 425,
          column: 14
        }
      },
      "149": {
        start: {
          line: 410,
          column: 37
        },
        end: {
          line: 425,
          column: 13
        }
      },
      "150": {
        start: {
          line: 426,
          column: 8
        },
        end: {
          line: 429,
          column: 103
        }
      },
      "151": {
        start: {
          line: 429,
          column: 21
        },
        end: {
          line: 429,
          column: 90
        }
      },
      "152": {
        start: {
          line: 429,
          column: 37
        },
        end: {
          line: 429,
          column: 79
        }
      },
      "153": {
        start: {
          line: 432,
          column: 8
        },
        end: {
          line: 461,
          column: 9
        }
      },
      "154": {
        start: {
          line: 438,
          column: 28
        },
        end: {
          line: 445,
          column: 13
        }
      },
      "155": {
        start: {
          line: 441,
          column: 39
        },
        end: {
          line: 444,
          column: 21
        }
      },
      "156": {
        start: {
          line: 447,
          column: 12
        },
        end: {
          line: 457,
          column: 13
        }
      },
      "157": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 460,
          column: 24
        }
      },
      "158": {
        start: {
          line: 464,
          column: 8
        },
        end: {
          line: 489,
          column: 9
        }
      },
      "159": {
        start: {
          line: 466,
          column: 30
        },
        end: {
          line: 480,
          column: 13
        }
      },
      "160": {
        start: {
          line: 481,
          column: 12
        },
        end: {
          line: 486,
          column: 13
        }
      },
      "161": {
        start: {
          line: 492,
          column: 8
        },
        end: {
          line: 542,
          column: 9
        }
      },
      "162": {
        start: {
          line: 494,
          column: 33
        },
        end: {
          line: 528,
          column: 13
        }
      },
      "163": {
        start: {
          line: 529,
          column: 12
        },
        end: {
          line: 539,
          column: 13
        }
      },
      "164": {
        start: {
          line: 546,
          column: 8
        },
        end: {
          line: 549,
          column: 9
        }
      },
      "165": {
        start: {
          line: 547,
          column: 12
        },
        end: {
          line: 547,
          column: 43
        }
      },
      "166": {
        start: {
          line: 548,
          column: 12
        },
        end: {
          line: 548,
          column: 35
        }
      },
      "167": {
        start: {
          line: 552,
          column: 8
        },
        end: {
          line: 552,
          column: 23
        }
      },
      "168": {
        start: {
          line: 553,
          column: 8
        },
        end: {
          line: 553,
          column: 33
        }
      },
      "169": {
        start: {
          line: 554,
          column: 8
        },
        end: {
          line: 554,
          column: 28
        }
      },
      "170": {
        start: {
          line: 555,
          column: 8
        },
        end: {
          line: 555,
          column: 30
        }
      },
      "171": {
        start: {
          line: 556,
          column: 8
        },
        end: {
          line: 556,
          column: 31
        }
      },
      "172": {
        start: {
          line: 557,
          column: 8
        },
        end: {
          line: 557,
          column: 33
        }
      },
      "173": {
        start: {
          line: 560,
          column: 24
        },
        end: {
          line: 560,
          column: 45
        }
      },
      "174": {
        start: {
          line: 561,
          column: 17
        },
        end: {
          line: 561,
          column: 32
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 27
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 19
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 23
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 23
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 21
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 47
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 63
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 79
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 87
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 91
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        loc: {
          start: {
            line: 104,
            column: 97
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 104
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 121,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        loc: {
          start: {
            line: 121,
            column: 71
          },
          end: {
            line: 131,
            column: 5
          }
        },
        line: 121
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        },
        loc: {
          start: {
            line: 132,
            column: 58
          },
          end: {
            line: 141,
            column: 5
          }
        },
        line: 132
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 142,
            column: 5
          }
        },
        loc: {
          start: {
            line: 142,
            column: 69
          },
          end: {
            line: 158,
            column: 5
          }
        },
        line: 142
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        loc: {
          start: {
            line: 159,
            column: 48
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 159
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 177,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        },
        loc: {
          start: {
            line: 177,
            column: 31
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 177
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 182,
            column: 47
          },
          end: {
            line: 182,
            column: 48
          }
        },
        loc: {
          start: {
            line: 182,
            column: 54
          },
          end: {
            line: 182,
            column: 82
          }
        },
        line: 182
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 185,
            column: 47
          },
          end: {
            line: 185,
            column: 48
          }
        },
        loc: {
          start: {
            line: 185,
            column: 54
          },
          end: {
            line: 185,
            column: 88
          }
        },
        line: 185
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 188,
            column: 47
          },
          end: {
            line: 188,
            column: 48
          }
        },
        loc: {
          start: {
            line: 188,
            column: 54
          },
          end: {
            line: 188,
            column: 86
          }
        },
        line: 188
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 191,
            column: 47
          },
          end: {
            line: 191,
            column: 48
          }
        },
        loc: {
          start: {
            line: 191,
            column: 54
          },
          end: {
            line: 191,
            column: 86
          }
        },
        line: 191
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 194,
            column: 47
          },
          end: {
            line: 194,
            column: 48
          }
        },
        loc: {
          start: {
            line: 194,
            column: 54
          },
          end: {
            line: 194,
            column: 86
          }
        },
        line: 194
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 197,
            column: 47
          },
          end: {
            line: 197,
            column: 48
          }
        },
        loc: {
          start: {
            line: 197,
            column: 54
          },
          end: {
            line: 197,
            column: 84
          }
        },
        line: 197
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 200,
            column: 47
          },
          end: {
            line: 200,
            column: 48
          }
        },
        loc: {
          start: {
            line: 200,
            column: 54
          },
          end: {
            line: 200,
            column: 87
          }
        },
        line: 200
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 203,
            column: 47
          },
          end: {
            line: 203,
            column: 48
          }
        },
        loc: {
          start: {
            line: 203,
            column: 54
          },
          end: {
            line: 203,
            column: 85
          }
        },
        line: 203
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 206,
            column: 26
          },
          end: {
            line: 206,
            column: 27
          }
        },
        loc: {
          start: {
            line: 206,
            column: 34
          },
          end: {
            line: 206,
            column: 79
          }
        },
        line: 206
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 212,
            column: 5
          }
        },
        loc: {
          start: {
            line: 212,
            column: 30
          },
          end: {
            line: 262,
            column: 5
          }
        },
        line: 212
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 222,
            column: 21
          },
          end: {
            line: 222,
            column: 22
          }
        },
        loc: {
          start: {
            line: 222,
            column: 28
          },
          end: {
            line: 243,
            column: 9
          }
        },
        line: 222
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 244,
            column: 61
          },
          end: {
            line: 244,
            column: 62
          }
        },
        loc: {
          start: {
            line: 244,
            column: 77
          },
          end: {
            line: 244,
            column: 82
          }
        },
        line: 244
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 244,
            column: 101
          },
          end: {
            line: 244,
            column: 102
          }
        },
        loc: {
          start: {
            line: 244,
            column: 121
          },
          end: {
            line: 247,
            column: 13
          }
        },
        line: 244
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 248,
            column: 57
          },
          end: {
            line: 248,
            column: 58
          }
        },
        loc: {
          start: {
            line: 248,
            column: 73
          },
          end: {
            line: 248,
            column: 90
          }
        },
        line: 248
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 248,
            column: 109
          },
          end: {
            line: 248,
            column: 110
          }
        },
        loc: {
          start: {
            line: 248,
            column: 128
          },
          end: {
            line: 252,
            column: 13
          }
        },
        line: 248
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 263,
            column: 4
          },
          end: {
            line: 263,
            column: 5
          }
        },
        loc: {
          start: {
            line: 263,
            column: 51
          },
          end: {
            line: 269,
            column: 5
          }
        },
        line: 263
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 271,
            column: 4
          },
          end: {
            line: 271,
            column: 5
          }
        },
        loc: {
          start: {
            line: 271,
            column: 17
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 271
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 274,
            column: 5
          }
        },
        loc: {
          start: {
            line: 274,
            column: 24
          },
          end: {
            line: 282,
            column: 5
          }
        },
        line: 274
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 283,
            column: 4
          },
          end: {
            line: 283,
            column: 5
          }
        },
        loc: {
          start: {
            line: 283,
            column: 19
          },
          end: {
            line: 290,
            column: 5
          }
        },
        line: 283
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 291,
            column: 4
          },
          end: {
            line: 291,
            column: 5
          }
        },
        loc: {
          start: {
            line: 291,
            column: 23
          },
          end: {
            line: 313,
            column: 5
          }
        },
        line: 291
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 301,
            column: 31
          },
          end: {
            line: 301,
            column: 32
          }
        },
        loc: {
          start: {
            line: 301,
            column: 38
          },
          end: {
            line: 311,
            column: 9
          }
        },
        line: 301
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 304,
            column: 41
          },
          end: {
            line: 304,
            column: 42
          }
        },
        loc: {
          start: {
            line: 304,
            column: 50
          },
          end: {
            line: 304,
            column: 83
          }
        },
        line: 304
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 314,
            column: 4
          },
          end: {
            line: 314,
            column: 5
          }
        },
        loc: {
          start: {
            line: 314,
            column: 33
          },
          end: {
            line: 330,
            column: 5
          }
        },
        line: 314
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 321,
            column: 24
          },
          end: {
            line: 321,
            column: 25
          }
        },
        loc: {
          start: {
            line: 321,
            column: 31
          },
          end: {
            line: 328,
            column: 9
          }
        },
        line: 321
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 331,
            column: 4
          },
          end: {
            line: 331,
            column: 5
          }
        },
        loc: {
          start: {
            line: 331,
            column: 28
          },
          end: {
            line: 343,
            column: 5
          }
        },
        line: 331
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 335,
            column: 37
          },
          end: {
            line: 335,
            column: 38
          }
        },
        loc: {
          start: {
            line: 335,
            column: 45
          },
          end: {
            line: 338,
            column: 21
          }
        },
        line: 335
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 344,
            column: 4
          },
          end: {
            line: 344,
            column: 5
          }
        },
        loc: {
          start: {
            line: 344,
            column: 20
          },
          end: {
            line: 350,
            column: 5
          }
        },
        line: 344
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 351,
            column: 4
          },
          end: {
            line: 351,
            column: 5
          }
        },
        loc: {
          start: {
            line: 351,
            column: 25
          },
          end: {
            line: 360,
            column: 5
          }
        },
        line: 351
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 353,
            column: 38
          },
          end: {
            line: 353,
            column: 39
          }
        },
        loc: {
          start: {
            line: 353,
            column: 42
          },
          end: {
            line: 359,
            column: 9
          }
        },
        line: 353
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 355,
            column: 35
          },
          end: {
            line: 355,
            column: 36
          }
        },
        loc: {
          start: {
            line: 355,
            column: 44
          },
          end: {
            line: 357,
            column: 17
          }
        },
        line: 355
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 361,
            column: 4
          },
          end: {
            line: 361,
            column: 5
          }
        },
        loc: {
          start: {
            line: 361,
            column: 18
          },
          end: {
            line: 380,
            column: 5
          }
        },
        line: 361
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 381,
            column: 4
          },
          end: {
            line: 381,
            column: 5
          }
        },
        loc: {
          start: {
            line: 381,
            column: 27
          },
          end: {
            line: 391,
            column: 5
          }
        },
        line: 381
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 392,
            column: 4
          },
          end: {
            line: 392,
            column: 5
          }
        },
        loc: {
          start: {
            line: 392,
            column: 23
          },
          end: {
            line: 430,
            column: 5
          }
        },
        line: 392
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 410,
            column: 30
          },
          end: {
            line: 410,
            column: 31
          }
        },
        loc: {
          start: {
            line: 410,
            column: 37
          },
          end: {
            line: 425,
            column: 13
          }
        },
        line: 410
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 429,
            column: 14
          },
          end: {
            line: 429,
            column: 15
          }
        },
        loc: {
          start: {
            line: 429,
            column: 21
          },
          end: {
            line: 429,
            column: 90
          }
        },
        line: 429
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 429,
            column: 29
          },
          end: {
            line: 429,
            column: 30
          }
        },
        loc: {
          start: {
            line: 429,
            column: 37
          },
          end: {
            line: 429,
            column: 79
          }
        },
        line: 429
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 431,
            column: 4
          },
          end: {
            line: 431,
            column: 5
          }
        },
        loc: {
          start: {
            line: 431,
            column: 36
          },
          end: {
            line: 462,
            column: 5
          }
        },
        line: 431
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 441,
            column: 31
          },
          end: {
            line: 441,
            column: 32
          }
        },
        loc: {
          start: {
            line: 441,
            column: 39
          },
          end: {
            line: 444,
            column: 21
          }
        },
        line: 441
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 463,
            column: 4
          },
          end: {
            line: 463,
            column: 5
          }
        },
        loc: {
          start: {
            line: 463,
            column: 32
          },
          end: {
            line: 490,
            column: 5
          }
        },
        line: 463
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 491,
            column: 4
          },
          end: {
            line: 491,
            column: 5
          }
        },
        loc: {
          start: {
            line: 491,
            column: 32
          },
          end: {
            line: 543,
            column: 5
          }
        },
        line: 491
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 545,
            column: 4
          },
          end: {
            line: 545,
            column: 5
          }
        },
        loc: {
          start: {
            line: 545,
            column: 14
          },
          end: {
            line: 550,
            column: 5
          }
        },
        line: 545
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 551,
            column: 4
          },
          end: {
            line: 551,
            column: 5
          }
        },
        loc: {
          start: {
            line: 551,
            column: 17
          },
          end: {
            line: 558,
            column: 5
          }
        },
        line: 551
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 50,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "1": {
        loc: {
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "2": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "3": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "4": {
        loc: {
          start: {
            line: 86,
            column: 22
          },
          end: {
            line: 86,
            column: 46
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 86,
            column: 32
          },
          end: {
            line: 86,
            column: 37
          }
        }, {
          start: {
            line: 86,
            column: 40
          },
          end: {
            line: 86,
            column: 46
          }
        }],
        line: 86
      },
      "5": {
        loc: {
          start: {
            line: 91,
            column: 73
          },
          end: {
            line: 91,
            column: 85
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 91,
            column: 83
          },
          end: {
            line: 91,
            column: 85
          }
        }],
        line: 91
      },
      "6": {
        loc: {
          start: {
            line: 121,
            column: 44
          },
          end: {
            line: 121,
            column: 61
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 121,
            column: 55
          },
          end: {
            line: 121,
            column: 61
          }
        }],
        line: 121
      },
      "7": {
        loc: {
          start: {
            line: 132,
            column: 42
          },
          end: {
            line: 132,
            column: 56
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 132,
            column: 52
          },
          end: {
            line: 132,
            column: 56
          }
        }],
        line: 132
      },
      "8": {
        loc: {
          start: {
            line: 137,
            column: 22
          },
          end: {
            line: 137,
            column: 48
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 137,
            column: 32
          },
          end: {
            line: 137,
            column: 37
          }
        }, {
          start: {
            line: 137,
            column: 40
          },
          end: {
            line: 137,
            column: 48
          }
        }],
        line: 137
      },
      "9": {
        loc: {
          start: {
            line: 154,
            column: 22
          },
          end: {
            line: 154,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 154,
            column: 42
          },
          end: {
            line: 154,
            column: 50
          }
        }, {
          start: {
            line: 154,
            column: 53
          },
          end: {
            line: 154,
            column: 58
          }
        }],
        line: 154
      },
      "10": {
        loc: {
          start: {
            line: 159,
            column: 26
          },
          end: {
            line: 159,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 159,
            column: 36
          },
          end: {
            line: 159,
            column: 38
          }
        }],
        line: 159
      },
      "11": {
        loc: {
          start: {
            line: 177,
            column: 18
          },
          end: {
            line: 177,
            column: 29
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 177,
            column: 27
          },
          end: {
            line: 177,
            column: 29
          }
        }],
        line: 177
      },
      "12": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "13": {
        loc: {
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "14": {
        loc: {
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 8
          },
          end: {
            line: 189,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "15": {
        loc: {
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 192,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 192,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "16": {
        loc: {
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "17": {
        loc: {
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 196
      },
      "18": {
        loc: {
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 201,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 201,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "19": {
        loc: {
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "20": {
        loc: {
          start: {
            line: 208,
            column: 23
          },
          end: {
            line: 208,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 208,
            column: 23
          },
          end: {
            line: 208,
            column: 36
          }
        }, {
          start: {
            line: 208,
            column: 40
          },
          end: {
            line: 208,
            column: 41
          }
        }],
        line: 208
      },
      "21": {
        loc: {
          start: {
            line: 209,
            column: 22
          },
          end: {
            line: 209,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 209,
            column: 22
          },
          end: {
            line: 209,
            column: 34
          }
        }, {
          start: {
            line: 209,
            column: 38
          },
          end: {
            line: 209,
            column: 41
          }
        }],
        line: 209
      },
      "22": {
        loc: {
          start: {
            line: 224,
            column: 47
          },
          end: {
            line: 224,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 224,
            column: 47
          },
          end: {
            line: 224,
            column: 78
          }
        }, {
          start: {
            line: 224,
            column: 82
          },
          end: {
            line: 224,
            column: 83
          }
        }],
        line: 224
      },
      "23": {
        loc: {
          start: {
            line: 226,
            column: 47
          },
          end: {
            line: 226,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 226,
            column: 47
          },
          end: {
            line: 226,
            column: 78
          }
        }, {
          start: {
            line: 226,
            column: 82
          },
          end: {
            line: 226,
            column: 83
          }
        }],
        line: 226
      },
      "24": {
        loc: {
          start: {
            line: 228,
            column: 40
          },
          end: {
            line: 228,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 228,
            column: 40
          },
          end: {
            line: 228,
            column: 64
          }
        }, {
          start: {
            line: 228,
            column: 68
          },
          end: {
            line: 228,
            column: 69
          }
        }],
        line: 228
      },
      "25": {
        loc: {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 238,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 238,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "26": {
        loc: {
          start: {
            line: 231,
            column: 16
          },
          end: {
            line: 236,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 16
          },
          end: {
            line: 236,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "27": {
        loc: {
          start: {
            line: 233,
            column: 31
          },
          end: {
            line: 233,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 233,
            column: 31
          },
          end: {
            line: 233,
            column: 44
          }
        }, {
          start: {
            line: 233,
            column: 48
          },
          end: {
            line: 233,
            column: 50
          }
        }],
        line: 233
      },
      "28": {
        loc: {
          start: {
            line: 240,
            column: 12
          },
          end: {
            line: 242,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 12
          },
          end: {
            line: 242,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      },
      "29": {
        loc: {
          start: {
            line: 257,
            column: 25
          },
          end: {
            line: 257,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 257,
            column: 43
          },
          end: {
            line: 257,
            column: 75
          }
        }, {
          start: {
            line: 257,
            column: 78
          },
          end: {
            line: 257,
            column: 79
          }
        }],
        line: 257
      },
      "30": {
        loc: {
          start: {
            line: 263,
            column: 21
          },
          end: {
            line: 263,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 263,
            column: 30
          },
          end: {
            line: 263,
            column: 32
          }
        }],
        line: 263
      },
      "31": {
        loc: {
          start: {
            line: 263,
            column: 34
          },
          end: {
            line: 263,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 263,
            column: 43
          },
          end: {
            line: 263,
            column: 49
          }
        }],
        line: 263
      },
      "32": {
        loc: {
          start: {
            line: 265,
            column: 8
          },
          end: {
            line: 267,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 8
          },
          end: {
            line: 267,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "33": {
        loc: {
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 288,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 288,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "34": {
        loc: {
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 292,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 292,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "35": {
        loc: {
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 302,
            column: 68
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 302,
            column: 68
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "36": {
        loc: {
          start: {
            line: 302,
            column: 16
          },
          end: {
            line: 302,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 302,
            column: 16
          },
          end: {
            line: 302,
            column: 39
          }
        }, {
          start: {
            line: 302,
            column: 43
          },
          end: {
            line: 302,
            column: 55
          }
        }],
        line: 302
      },
      "37": {
        loc: {
          start: {
            line: 304,
            column: 16
          },
          end: {
            line: 308,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 16
          },
          end: {
            line: 308,
            column: 17
          }
        }, {
          start: {
            line: 306,
            column: 23
          },
          end: {
            line: 308,
            column: 17
          }
        }],
        line: 304
      },
      "38": {
        loc: {
          start: {
            line: 306,
            column: 23
          },
          end: {
            line: 308,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 23
          },
          end: {
            line: 308,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "39": {
        loc: {
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 316,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 316,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 316
      },
      "40": {
        loc: {
          start: {
            line: 316,
            column: 12
          },
          end: {
            line: 316,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 316,
            column: 12
          },
          end: {
            line: 316,
            column: 20
          }
        }, {
          start: {
            line: 316,
            column: 24
          },
          end: {
            line: 316,
            column: 32
          }
        }],
        line: 316
      },
      "41": {
        loc: {
          start: {
            line: 322,
            column: 12
          },
          end: {
            line: 327,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 322,
            column: 12
          },
          end: {
            line: 327,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 322
      },
      "42": {
        loc: {
          start: {
            line: 334,
            column: 12
          },
          end: {
            line: 339,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 334,
            column: 12
          },
          end: {
            line: 339,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 334
      },
      "43": {
        loc: {
          start: {
            line: 334,
            column: 16
          },
          end: {
            line: 334,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 334,
            column: 16
          },
          end: {
            line: 334,
            column: 20
          }
        }, {
          start: {
            line: 334,
            column: 24
          },
          end: {
            line: 334,
            column: 43
          }
        }],
        line: 334
      },
      "44": {
        loc: {
          start: {
            line: 354,
            column: 12
          },
          end: {
            line: 358,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 354,
            column: 12
          },
          end: {
            line: 358,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 354
      },
      "45": {
        loc: {
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 362,
            column: 50
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 362,
            column: 50
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 362
      },
      "46": {
        loc: {
          start: {
            line: 370,
            column: 12
          },
          end: {
            line: 372,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 370,
            column: 12
          },
          end: {
            line: 372,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 370
      },
      "47": {
        loc: {
          start: {
            line: 393,
            column: 8
          },
          end: {
            line: 393,
            column: 41
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 393,
            column: 8
          },
          end: {
            line: 393,
            column: 41
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 393
      },
      "48": {
        loc: {
          start: {
            line: 413,
            column: 16
          },
          end: {
            line: 413,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 413,
            column: 16
          },
          end: {
            line: 413,
            column: 26
          }
        }, {
          start: {
            line: 413,
            column: 30
          },
          end: {
            line: 413,
            column: 32
          }
        }],
        line: 413
      },
      "49": {
        loc: {
          start: {
            line: 414,
            column: 16
          },
          end: {
            line: 414,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 414,
            column: 16
          },
          end: {
            line: 414,
            column: 29
          }
        }, {
          start: {
            line: 414,
            column: 33
          },
          end: {
            line: 414,
            column: 35
          }
        }],
        line: 414
      },
      "50": {
        loc: {
          start: {
            line: 417,
            column: 16
          },
          end: {
            line: 417,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 417,
            column: 16
          },
          end: {
            line: 417,
            column: 30
          }
        }, {
          start: {
            line: 417,
            column: 34
          },
          end: {
            line: 417,
            column: 36
          }
        }],
        line: 417
      },
      "51": {
        loc: {
          start: {
            line: 421,
            column: 16
          },
          end: {
            line: 421,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 421,
            column: 16
          },
          end: {
            line: 421,
            column: 29
          }
        }, {
          start: {
            line: 421,
            column: 33
          },
          end: {
            line: 421,
            column: 35
          }
        }],
        line: 421
      },
      "52": {
        loc: {
          start: {
            line: 422,
            column: 16
          },
          end: {
            line: 422,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 422,
            column: 16
          },
          end: {
            line: 422,
            column: 29
          }
        }, {
          start: {
            line: 422,
            column: 33
          },
          end: {
            line: 422,
            column: 35
          }
        }],
        line: 422
      },
      "53": {
        loc: {
          start: {
            line: 423,
            column: 16
          },
          end: {
            line: 423,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 423,
            column: 16
          },
          end: {
            line: 423,
            column: 29
          }
        }, {
          start: {
            line: 423,
            column: 33
          },
          end: {
            line: 423,
            column: 35
          }
        }],
        line: 423
      },
      "54": {
        loc: {
          start: {
            line: 447,
            column: 12
          },
          end: {
            line: 457,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 447,
            column: 12
          },
          end: {
            line: 457,
            column: 13
          }
        }, {
          start: {
            line: 449,
            column: 19
          },
          end: {
            line: 457,
            column: 13
          }
        }],
        line: 447
      },
      "55": {
        loc: {
          start: {
            line: 474,
            column: 18
          },
          end: {
            line: 474,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 474,
            column: 18
          },
          end: {
            line: 474,
            column: 33
          }
        }, {
          start: {
            line: 474,
            column: 37
          },
          end: {
            line: 474,
            column: 46
          }
        }],
        line: 474
      },
      "56": {
        loc: {
          start: {
            line: 481,
            column: 12
          },
          end: {
            line: 486,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 481,
            column: 12
          },
          end: {
            line: 486,
            column: 13
          }
        }, {
          start: {
            line: 483,
            column: 19
          },
          end: {
            line: 486,
            column: 13
          }
        }],
        line: 481
      },
      "57": {
        loc: {
          start: {
            line: 512,
            column: 39
          },
          end: {
            line: 512,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 512,
            column: 39
          },
          end: {
            line: 512,
            column: 54
          }
        }, {
          start: {
            line: 512,
            column: 58
          },
          end: {
            line: 512,
            column: 67
          }
        }],
        line: 512
      },
      "58": {
        loc: {
          start: {
            line: 529,
            column: 12
          },
          end: {
            line: 539,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 529,
            column: 12
          },
          end: {
            line: 539,
            column: 13
          }
        }, {
          start: {
            line: 531,
            column: 19
          },
          end: {
            line: 539,
            column: 13
          }
        }],
        line: 529
      },
      "59": {
        loc: {
          start: {
            line: 546,
            column: 8
          },
          end: {
            line: 549,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 546,
            column: 8
          },
          end: {
            line: 549,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 546
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0],
      "31": [0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\auditLogService.ts"],
      sourcesContent: ["// Audit logging service for tracking user actions and system events\nimport { configService } from \"./configService\"\nimport { secureStorage } from \"../utils/secureStorage\"\n\nexport interface AuditLogEntry {\n  id: string\n  timestamp: Date\n  userId?: string\n  userEmail?: string\n  action: string\n  resource: string\n  resourceId?: string\n  details: Record<string, unknown>\n  ipAddress?: string\n  userAgent?: string\n  sessionId?: string\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\"\n  category: \"auth\" | \"data\" | \"system\" | \"security\" | \"user\" | \"api\"\n  success: boolean\n  errorMessage?: string\n  metadata?: Record<string, unknown>\n}\n\nexport interface AuditLogFilter {\n  userId?: string\n  action?: string\n  resource?: string\n  category?: string\n  severity?: string\n  startDate?: Date\n  endDate?: Date\n  success?: boolean\n  limit?: number\n  offset?: number\n}\n\nexport interface AuditLogStats {\n  totalEntries: number\n  entriesByCategory: Record<string, number>\n  entriesBySeverity: Record<string, number>\n  failureRate: number\n  topActions: Array<{ action: string; count: number }>\n  topUsers: Array<{ userId: string; userEmail: string; count: number }>\n  recentActivity: AuditLogEntry[]\n}\n\nclass AuditLogService {\n  private logs: AuditLogEntry[] = []\n  private maxLocalLogs = 1000\n  private batchSize = 50\n  private pendingLogs: AuditLogEntry[] = []\n  private flushTimer: NodeJS.Timeout | null = null\n  private initialized = false\n\n  async initialize(): Promise<void> {\n    try {\n      // Load existing logs from localStorage\n      await this.loadFromStorage()\n\n      // Start periodic flush to remote storage\n      this.startPeriodicFlush()\n\n      this.initialized = true\n\n      // Log the initialization\n      await this.log({\n        action: \"audit_service_initialized\",\n        resource: \"system\",\n        details: { service: \"AuditLogService\" },\n        severity: \"low\",\n        category: \"system\",\n        success: true,\n      })\n\n      // Silent logging - Audit log service initialized\n    } catch (error) {\n      // Silent error handling - Failed to initialize audit log service\n      throw error\n    }\n  }\n\n  async log(entry: Omit<AuditLogEntry, \"id\" | \"timestamp\">): Promise<void> {\n    if (!configService.getFeature(\"enableAuditLog\")) {\n      return\n    }\n\n    const logEntry: AuditLogEntry = {\n      id: this.generateId(),\n      timestamp: new Date(),\n      ipAddress: await this.getClientIP(),\n      userAgent: navigator.userAgent,\n      sessionId: this.getSessionId(),\n      ...entry,\n    }\n\n    // Add to local storage immediately\n    this.logs.push(logEntry)\n    this.pendingLogs.push(logEntry)\n\n    // Maintain local log size limit\n    if (this.logs.length > this.maxLocalLogs) {\n      this.logs = this.logs.slice(-this.maxLocalLogs)\n    }\n\n    // Save to localStorage\n    this.saveToStorage()\n\n    // Flush if batch is full\n    if (this.pendingLogs.length >= this.batchSize) {\n      await this.flush()\n    }\n\n    // Log critical events immediately\n    if (entry.severity === \"critical\") {\n      await this.flush()\n      await this.sendAlert(logEntry)\n    }\n  }\n\n  // Convenience methods for common log types\n  async logAuth(\n    action: string,\n    details: Record<string, any>,\n    success: boolean,\n    userId?: string,\n    userEmail?: string,\n  ): Promise<void> {\n    await this.log({\n      userId,\n      userEmail,\n      action,\n      resource: \"authentication\",\n      details,\n      severity: success ? \"low\" : \"high\",\n      category: \"auth\",\n      success,\n    })\n  }\n\n  async logDataAccess(\n    action: string,\n    resource: string,\n    resourceId: string,\n    userId: string,\n    userEmail: string,\n    details: Record<string, any> = {},\n  ): Promise<void> {\n    await this.log({\n      userId,\n      userEmail,\n      action,\n      resource,\n      resourceId,\n      details,\n      severity: \"medium\",\n      category: \"data\",\n      success: true,\n    })\n  }\n\n  async logDataModification(\n    action: string,\n    resource: string,\n    resourceId: string,\n    userId: string,\n    userEmail: string,\n    oldData: any,\n    newData: any,\n  ): Promise<void> {\n    await this.log({\n      userId,\n      userEmail,\n      action,\n      resource,\n      resourceId,\n      details: {\n        oldData: this.sanitizeData(oldData),\n        newData: this.sanitizeData(newData),\n        changes: this.getChanges(oldData, newData),\n      },\n      severity: \"medium\",\n      category: \"data\",\n      success: true,\n    })\n  }\n\n  async logSecurityEvent(\n    action: string,\n    details: Record<string, any>,\n    severity: \"medium\" | \"high\" | \"critical\" = \"high\",\n    userId?: string,\n  ): Promise<void> {\n    await this.log({\n      userId,\n      action,\n      resource: \"security\",\n      details,\n      severity,\n      category: \"security\",\n      success: false,\n    })\n  }\n\n  async logSystemEvent(action: string, details: Record<string, any>, success = true): Promise<void> {\n    await this.log({\n      action,\n      resource: \"system\",\n      details,\n      severity: success ? \"low\" : \"medium\",\n      category: \"system\",\n      success,\n    })\n  }\n\n  async logApiCall(\n    method: string,\n    endpoint: string,\n    statusCode: number,\n    userId?: string,\n    duration?: number,\n  ): Promise<void> {\n    await this.log({\n      userId,\n      action: `api_${method.toLowerCase()}`,\n      resource: \"api\",\n      resourceId: endpoint,\n      details: {\n        method,\n        endpoint,\n        statusCode,\n        duration,\n      },\n      severity: statusCode >= 400 ? \"medium\" : \"low\",\n      category: \"api\",\n      success: statusCode < 400,\n    })\n  }\n\n  async logError(error: Error, context: Record<string, any> = {}, userId?: string): Promise<void> {\n    await this.log({\n      userId,\n      action: \"error_occurred\",\n      resource: \"system\",\n      details: {\n        errorName: error.name,\n        errorMessage: error.message,\n        errorStack: error.stack,\n        context,\n      },\n      severity: \"high\",\n      category: \"system\",\n      success: false,\n      errorMessage: error.message,\n    })\n  }\n\n  // Query methods\n  async getLogs(filter: AuditLogFilter = {}): Promise<AuditLogEntry[]> {\n    let filteredLogs = [...this.logs]\n\n    if (filter.userId) {\n      filteredLogs = filteredLogs.filter((log) => log.userId === filter.userId)\n    }\n    if (filter.action) {\n      filteredLogs = filteredLogs.filter((log) => log.action.includes(filter.action!))\n    }\n    if (filter.resource) {\n      filteredLogs = filteredLogs.filter((log) => log.resource === filter.resource)\n    }\n    if (filter.category) {\n      filteredLogs = filteredLogs.filter((log) => log.category === filter.category)\n    }\n    if (filter.severity) {\n      filteredLogs = filteredLogs.filter((log) => log.severity === filter.severity)\n    }\n    if (filter.success !== undefined) {\n      filteredLogs = filteredLogs.filter((log) => log.success === filter.success)\n    }\n    if (filter.startDate) {\n      filteredLogs = filteredLogs.filter((log) => log.timestamp >= filter.startDate!)\n    }\n    if (filter.endDate) {\n      filteredLogs = filteredLogs.filter((log) => log.timestamp <= filter.endDate!)\n    }\n\n    // Sort by timestamp (newest first)\n    filteredLogs.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n\n    // Apply pagination\n    const offset = filter.offset || 0\n    const limit = filter.limit || 100\n    return filteredLogs.slice(offset, offset + limit)\n  }\n\n  async getStats(timeRange: { start: Date; end: Date }): Promise<AuditLogStats> {\n    const logs = await this.getLogs({\n      startDate: timeRange.start,\n      endDate: timeRange.end,\n    })\n\n    const entriesByCategory: Record<string, number> = {}\n    const entriesBySeverity: Record<string, number> = {}\n    const actionCounts: Record<string, number> = {}\n    const userCounts: Record<string, { email: string; count: number }> = {}\n    let failureCount = 0\n\n    logs.forEach((log) => {\n      // Category stats\n      entriesByCategory[log.category] = (entriesByCategory[log.category] || 0) + 1\n\n      // Severity stats\n      entriesBySeverity[log.severity] = (entriesBySeverity[log.severity] || 0) + 1\n\n      // Action stats\n      actionCounts[log.action] = (actionCounts[log.action] || 0) + 1\n\n      // User stats\n      if (log.userId) {\n        if (!userCounts[log.userId]) {\n          userCounts[log.userId] = { email: log.userEmail || \"\", count: 0 }\n        }\n        userCounts[log.userId].count++\n      }\n\n      // Failure stats\n      if (!log.success) {\n        failureCount++\n      }\n    })\n\n    const topActions = Object.entries(actionCounts)\n      .sort(([, a], [, b]) => b - a)\n      .slice(0, 10)\n      .map(([action, count]) => ({ action, count }))\n\n    const topUsers = Object.entries(userCounts)\n      .sort(([, a], [, b]) => b.count - a.count)\n      .slice(0, 10)\n      .map(([userId, data]) => ({ userId, userEmail: data.email, count: data.count }))\n\n    return {\n      totalEntries: logs.length,\n      entriesByCategory,\n      entriesBySeverity,\n      failureRate: logs.length > 0 ? (failureCount / logs.length) * 100 : 0,\n      topActions,\n      topUsers,\n      recentActivity: logs.slice(0, 20),\n    }\n  }\n\n  async exportLogs(filter: AuditLogFilter = {}, format: \"json\" | \"csv\" = \"json\"): Promise<string> {\n    const logs = await this.getLogs(filter)\n\n    if (format === \"csv\") {\n      return this.convertToCSV(logs)\n    }\n\n    return JSON.stringify(logs, null, 2)\n  }\n\n  // Private methods\n  private generateId(): string {\n    return `audit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  private async getClientIP(): Promise<string> {\n    try {\n      // In a real application, this would get the actual client IP\n      // For now, return a placeholder\n      return \"localhost\"\n    } catch {\n      return \"unknown\"\n    }\n  }\n\n  private getSessionId(): string {\n    let sessionId = sessionStorage.getItem(\"audit_session_id\")\n    if (!sessionId) {\n      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n      sessionStorage.setItem(\"audit_session_id\", sessionId)\n    }\n    return sessionId\n  }\n\n  private sanitizeData(data: any): any {\n    if (!data) return data\n\n    const sensitiveFields = [\"password\", \"token\", \"secret\", \"key\", \"auth\"]\n    const sanitized = JSON.parse(JSON.stringify(data))\n\n    const sanitizeObject = (obj: any): any => {\n      if (typeof obj !== \"object\" || obj === null) return obj\n\n      for (const key in obj) {\n        if (sensitiveFields.some((field) => key.toLowerCase().includes(field))) {\n          obj[key] = \"[REDACTED]\"\n        } else if (typeof obj[key] === \"object\") {\n          obj[key] = sanitizeObject(obj[key])\n        }\n      }\n\n      return obj\n    }\n\n    return sanitizeObject(sanitized)\n  }\n\n  private getChanges(oldData: any, newData: any): Record<string, { old: any; new: any }> {\n    const changes: Record<string, { old: any; new: any }> = {}\n\n    if (!oldData || !newData) return changes\n\n    const allKeys = new Set([...Object.keys(oldData), ...Object.keys(newData)])\n\n    allKeys.forEach((key) => {\n      if (JSON.stringify(oldData[key]) !== JSON.stringify(newData[key])) {\n        changes[key] = {\n          old: oldData[key],\n          new: newData[key],\n        }\n      }\n    })\n\n    return changes\n  }\n\n  private async loadFromStorage(): Promise<void> {\n    try {\n      const logs = secureStorage.getJSON(\"audit_logs\")\n      if (logs && Array.isArray(logs)) {\n        this.logs = logs.map((log: any) => ({\n          ...log,\n          timestamp: new Date(log.timestamp),\n        }))\n      }\n    } catch (error) {\n      // Silent error handling - Failed to load audit logs from storage\n    }\n  }\n\n  private saveToStorage(): void {\n    try {\n      secureStorage.setJSON(\"audit_logs\", this.logs.slice(-this.maxLocalLogs))\n    } catch (error) {\n      // Silent error handling - Failed to save audit logs to storage\n    }\n  }\n\n  private startPeriodicFlush(): void {\n    // Flush pending logs every 30 seconds\n    this.flushTimer = setInterval(() => {\n      if (this.pendingLogs.length > 0) {\n        this.flush().catch((error) => {\n          // Silent error handling - Failed to flush audit logs\n        })\n      }\n    }, 30000)\n  }\n\n  private async flush(): Promise<void> {\n    if (this.pendingLogs.length === 0) return\n\n    const logsToFlush = [...this.pendingLogs]\n    this.pendingLogs = []\n\n    try {\n      // In a real application, this would send logs to a remote service\n      // For now, we'll just log to console in development\n      if (configService.isDevelopment()) {\n        // Silent handling - Flushing audit logs\n      }\n\n      // Send logs to remote service\n      await this.sendToRemoteService(logsToFlush)\n    } catch (error) {\n      // If flush fails, add logs back to pending\n      this.pendingLogs.unshift(...logsToFlush)\n      throw error\n    }\n  }\n\n  private async sendAlert(entry: AuditLogEntry): Promise<void> {\n    try {\n      // In a real application, this would send alerts for critical events\n      // Silent handling - CRITICAL AUDIT EVENT\n\n      // Implement actual alerting\n      await this.sendEmailAlert(entry)\n      await this.sendSlackAlert(entry)\n    } catch (error) {\n      // Silent error handling - Failed to send audit alert\n    }\n  }\n\n  private convertToCSV(logs: AuditLogEntry[]): string {\n    if (logs.length === 0) return \"\"\n\n    const headers = [\n      \"ID\",\n      \"Timestamp\",\n      \"User ID\",\n      \"User Email\",\n      \"Action\",\n      \"Resource\",\n      \"Resource ID\",\n      \"Category\",\n      \"Severity\",\n      \"Success\",\n      \"IP Address\",\n      \"User Agent\",\n      \"Session ID\",\n      \"Details\",\n    ]\n\n    const rows = logs.map((log) => [\n      log.id,\n      log.timestamp.toISOString(),\n      log.userId || \"\",\n      log.userEmail || \"\",\n      log.action,\n      log.resource,\n      log.resourceId || \"\",\n      log.category,\n      log.severity,\n      log.success.toString(),\n      log.ipAddress || \"\",\n      log.userAgent || \"\",\n      log.sessionId || \"\",\n      JSON.stringify(log.details),\n    ])\n\n    return [headers, ...rows]\n      .map((row) => row.map((cell) => `\"${cell.toString().replace(/\"/g, '\"\"')}\"`).join(\",\"))\n      .join(\"\\n\")\n  }\n\n  private async sendToRemoteService(logs: AuditLogEntry[]): Promise<void> {\n    try {\n      // In a production environment, this would send logs to a service like:\n      // - AWS CloudWatch\n      // - Elasticsearch\n      // - Splunk\n      // - Custom logging API\n      \n      const payload = {\n        timestamp: new Date().toISOString(),\n        source: 'crm-application',\n        logs: logs.map(log => ({\n          ...log,\n          timestamp: log.timestamp.toISOString()\n        }))\n      }\n\n      // Simulate API call to remote logging service\n      if (configService.isDevelopment()) {\n        // Silent handling - Sending logs to remote service\n      } else {\n        // In production, make actual HTTP request\n        // const response = await fetch('/api/audit-logs', {\n        //   method: 'POST',\n        //   headers: { 'Content-Type': 'application/json' },\n        //   body: JSON.stringify(payload)\n        // })\n        // if (!response.ok) throw new Error('Failed to send logs')\n      }\n    } catch (error) {\n      // Silent error handling - Failed to send logs to remote service\n      throw error\n    }\n  }\n\n  private async sendEmailAlert(entry: AuditLogEntry): Promise<void> {\n    try {\n      // In production, integrate with email service like SendGrid, AWS SES, etc.\n      const alertData = {\n        to: 'admin@company.com',\n        subject: `CRITICAL AUDIT ALERT: ${entry.action}`,\n        body: `\n          Critical audit event detected:\n          \n          Action: ${entry.action}\n          Resource: ${entry.resource}\n          User: ${entry.userEmail || 'Unknown'}\n          Timestamp: ${entry.timestamp.toISOString()}\n          Details: ${JSON.stringify(entry.details, null, 2)}\n          \n          Please investigate immediately.\n        `\n      }\n\n      if (configService.isDevelopment()) {\n        // Silent logging - Email alert would be sent\n      } else {\n        // In production, send actual email\n        // await emailService.sendAlert(alertData)\n      }\n    } catch (error) {\n      // Silent error handling - Failed to send email alert\n    }\n  }\n\n  private async sendSlackAlert(entry: AuditLogEntry): Promise<void> {\n    try {\n      // In production, integrate with Slack webhook\n      const slackMessage = {\n        text: `\uD83D\uDEA8 CRITICAL AUDIT ALERT`,\n        attachments: [\n          {\n            color: 'danger',\n            fields: [\n              { title: 'Action', value: entry.action, short: true },\n              { title: 'Resource', value: entry.resource, short: true },\n              { title: 'User', value: entry.userEmail || 'Unknown', short: true },\n              { title: 'Timestamp', value: entry.timestamp.toISOString(), short: true },\n              { title: 'Details', value: JSON.stringify(entry.details), short: false }\n            ]\n          }\n        ]\n      }\n\n      if (configService.isDevelopment()) {\n        // Silent logging - Slack alert would be sent\n      } else {\n        // In production, send to Slack webhook\n        // const webhookUrl = process.env.SLACK_WEBHOOK_URL\n        // await fetch(webhookUrl, {\n        //   method: 'POST',\n        //   headers: { 'Content-Type': 'application/json' },\n        //   body: JSON.stringify(slackMessage)\n        // })\n      }\n    } catch (error) {\n      // Silent error handling - Failed to send Slack alert\n    }\n  }\n\n  // Cleanup method\n  destroy(): void {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer)\n      this.flushTimer = null\n    }\n  }\n}\n\n// Create and export singleton instance\nexport const auditLogService = new AuditLogService()\nexport default auditLogService\n"],
      names: ["auditLogService", "AuditLogService", "initialize", "loadFromStorage", "startPeriodicFlush", "initialized", "log", "action", "resource", "details", "service", "severity", "category", "success", "error", "entry", "configService", "getFeature", "logEntry", "id", "generateId", "timestamp", "Date", "ipAddress", "getClientIP", "userAgent", "navigator", "sessionId", "getSessionId", "logs", "push", "pendingLogs", "length", "maxLocalLogs", "slice", "saveToStorage", "batchSize", "flush", "sendAlert", "logAuth", "userId", "userEmail", "logDataAccess", "resourceId", "logDataModification", "oldData", "newData", "sanitizeData", "changes", "getChanges", "logSecurityEvent", "logSystemEvent", "logApiCall", "method", "endpoint", "statusCode", "duration", "toLowerCase", "logError", "context", "errorName", "name", "errorMessage", "message", "errorStack", "stack", "getLogs", "filter", "filteredLogs", "includes", "undefined", "startDate", "endDate", "sort", "a", "b", "getTime", "offset", "limit", "getStats", "timeRange", "start", "end", "entriesByCategory", "entriesBySeverity", "actionCounts", "userCounts", "failureCount", "forEach", "email", "count", "topActions", "Object", "entries", "map", "topUsers", "data", "totalEntries", "failureRate", "recentActivity", "exportLogs", "format", "convertToCSV", "JSON", "stringify", "now", "Math", "random", "toString", "substr", "sessionStorage", "getItem", "setItem", "sensitiveFields", "sanitized", "parse", "sanitizeObject", "obj", "key", "some", "field", "allKeys", "Set", "keys", "old", "new", "secureStorage", "getJSON", "Array", "isArray", "setJSON", "flushTimer", "setInterval", "catch", "logsToFlush", "isDevelopment", "sendToRemoteService", "unshift", "sendEmailAlert", "sendSlackAlert", "headers", "rows", "toISOString", "row", "cell", "replace", "join", "payload", "source", "alertData", "to", "subject", "body", "slackMessage", "text", "attachments", "color", "fields", "title", "value", "short", "destroy", "clearInterval"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a17ed964976e0a001b1a1e8eef02611c9fb1de12"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1s326ho2fp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1s326ho2fp();
cov_1s326ho2fp().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1s326ho2fp().f[0]++;
  cov_1s326ho2fp().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1s326ho2fp().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1s326ho2fp().s[3]++;
_export(exports, {
  get auditLogService() {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[1]++;
    cov_1s326ho2fp().s[4]++;
    return auditLogService;
  },
  get default() {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[2]++;
    cov_1s326ho2fp().s[5]++;
    return _default;
  }
});
const _configService =
/* istanbul ignore next */
(cov_1s326ho2fp().s[6]++, require("./configService"));
const _secureStorage =
/* istanbul ignore next */
(cov_1s326ho2fp().s[7]++, require("../utils/secureStorage"));
class AuditLogService {
  async initialize() {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[3]++;
    cov_1s326ho2fp().s[8]++;
    try {
      /* istanbul ignore next */
      cov_1s326ho2fp().s[9]++;
      // Load existing logs from localStorage
      await this.loadFromStorage();
      // Start periodic flush to remote storage
      /* istanbul ignore next */
      cov_1s326ho2fp().s[10]++;
      this.startPeriodicFlush();
      /* istanbul ignore next */
      cov_1s326ho2fp().s[11]++;
      this.initialized = true;
      // Log the initialization
      /* istanbul ignore next */
      cov_1s326ho2fp().s[12]++;
      await this.log({
        action: "audit_service_initialized",
        resource: "system",
        details: {
          service: "AuditLogService"
        },
        severity: "low",
        category: "system",
        success: true
      });
      // Silent logging - Audit log service initialized
    } catch (error) {
      /* istanbul ignore next */
      cov_1s326ho2fp().s[13]++;
      // Silent error handling - Failed to initialize audit log service
      throw error;
    }
  }
  async log(entry) {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[4]++;
    cov_1s326ho2fp().s[14]++;
    if (!_configService.configService.getFeature("enableAuditLog")) {
      /* istanbul ignore next */
      cov_1s326ho2fp().b[0][0]++;
      cov_1s326ho2fp().s[15]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1s326ho2fp().b[0][1]++;
    }
    const logEntry =
    /* istanbul ignore next */
    (cov_1s326ho2fp().s[16]++, {
      id: this.generateId(),
      timestamp: new Date(),
      ipAddress: await this.getClientIP(),
      userAgent: navigator.userAgent,
      sessionId: this.getSessionId(),
      ...entry
    });
    // Add to local storage immediately
    /* istanbul ignore next */
    cov_1s326ho2fp().s[17]++;
    this.logs.push(logEntry);
    /* istanbul ignore next */
    cov_1s326ho2fp().s[18]++;
    this.pendingLogs.push(logEntry);
    // Maintain local log size limit
    /* istanbul ignore next */
    cov_1s326ho2fp().s[19]++;
    if (this.logs.length > this.maxLocalLogs) {
      /* istanbul ignore next */
      cov_1s326ho2fp().b[1][0]++;
      cov_1s326ho2fp().s[20]++;
      this.logs = this.logs.slice(-this.maxLocalLogs);
    } else
    /* istanbul ignore next */
    {
      cov_1s326ho2fp().b[1][1]++;
    }
    // Save to localStorage
    cov_1s326ho2fp().s[21]++;
    this.saveToStorage();
    // Flush if batch is full
    /* istanbul ignore next */
    cov_1s326ho2fp().s[22]++;
    if (this.pendingLogs.length >= this.batchSize) {
      /* istanbul ignore next */
      cov_1s326ho2fp().b[2][0]++;
      cov_1s326ho2fp().s[23]++;
      await this.flush();
    } else
    /* istanbul ignore next */
    {
      cov_1s326ho2fp().b[2][1]++;
    }
    // Log critical events immediately
    cov_1s326ho2fp().s[24]++;
    if (entry.severity === "critical") {
      /* istanbul ignore next */
      cov_1s326ho2fp().b[3][0]++;
      cov_1s326ho2fp().s[25]++;
      await this.flush();
      /* istanbul ignore next */
      cov_1s326ho2fp().s[26]++;
      await this.sendAlert(logEntry);
    } else
    /* istanbul ignore next */
    {
      cov_1s326ho2fp().b[3][1]++;
    }
  }
  // Convenience methods for common log types
  async logAuth(action, details, success, userId, userEmail) {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[5]++;
    cov_1s326ho2fp().s[27]++;
    await this.log({
      userId,
      userEmail,
      action,
      resource: "authentication",
      details,
      severity: success ?
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[4][0]++, "low") :
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[4][1]++, "high"),
      category: "auth",
      success
    });
  }
  async logDataAccess(action, resource, resourceId, userId, userEmail, details =
  /* istanbul ignore next */
  (cov_1s326ho2fp().b[5][0]++, {})) {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[6]++;
    cov_1s326ho2fp().s[28]++;
    await this.log({
      userId,
      userEmail,
      action,
      resource,
      resourceId,
      details,
      severity: "medium",
      category: "data",
      success: true
    });
  }
  async logDataModification(action, resource, resourceId, userId, userEmail, oldData, newData) {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[7]++;
    cov_1s326ho2fp().s[29]++;
    await this.log({
      userId,
      userEmail,
      action,
      resource,
      resourceId,
      details: {
        oldData: this.sanitizeData(oldData),
        newData: this.sanitizeData(newData),
        changes: this.getChanges(oldData, newData)
      },
      severity: "medium",
      category: "data",
      success: true
    });
  }
  async logSecurityEvent(action, details, severity =
  /* istanbul ignore next */
  (cov_1s326ho2fp().b[6][0]++, "high"), userId) {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[8]++;
    cov_1s326ho2fp().s[30]++;
    await this.log({
      userId,
      action,
      resource: "security",
      details,
      severity,
      category: "security",
      success: false
    });
  }
  async logSystemEvent(action, details, success =
  /* istanbul ignore next */
  (cov_1s326ho2fp().b[7][0]++, true)) {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[9]++;
    cov_1s326ho2fp().s[31]++;
    await this.log({
      action,
      resource: "system",
      details,
      severity: success ?
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[8][0]++, "low") :
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[8][1]++, "medium"),
      category: "system",
      success
    });
  }
  async logApiCall(method, endpoint, statusCode, userId, duration) {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[10]++;
    cov_1s326ho2fp().s[32]++;
    await this.log({
      userId,
      action: `api_${method.toLowerCase()}`,
      resource: "api",
      resourceId: endpoint,
      details: {
        method,
        endpoint,
        statusCode,
        duration
      },
      severity: statusCode >= 400 ?
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[9][0]++, "medium") :
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[9][1]++, "low"),
      category: "api",
      success: statusCode < 400
    });
  }
  async logError(error, context =
  /* istanbul ignore next */
  (cov_1s326ho2fp().b[10][0]++, {}), userId) {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[11]++;
    cov_1s326ho2fp().s[33]++;
    await this.log({
      userId,
      action: "error_occurred",
      resource: "system",
      details: {
        errorName: error.name,
        errorMessage: error.message,
        errorStack: error.stack,
        context
      },
      severity: "high",
      category: "system",
      success: false,
      errorMessage: error.message
    });
  }
  // Query methods
  async getLogs(filter =
  /* istanbul ignore next */
  (cov_1s326ho2fp().b[11][0]++, {})) {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[12]++;
    let filteredLogs =
    /* istanbul ignore next */
    (cov_1s326ho2fp().s[34]++, [...this.logs]);
    /* istanbul ignore next */
    cov_1s326ho2fp().s[35]++;
    if (filter.userId) {
      /* istanbul ignore next */
      cov_1s326ho2fp().b[12][0]++;
      cov_1s326ho2fp().s[36]++;
      filteredLogs = filteredLogs.filter(log => {
        /* istanbul ignore next */
        cov_1s326ho2fp().f[13]++;
        cov_1s326ho2fp().s[37]++;
        return log.userId === filter.userId;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1s326ho2fp().b[12][1]++;
    }
    cov_1s326ho2fp().s[38]++;
    if (filter.action) {
      /* istanbul ignore next */
      cov_1s326ho2fp().b[13][0]++;
      cov_1s326ho2fp().s[39]++;
      filteredLogs = filteredLogs.filter(log => {
        /* istanbul ignore next */
        cov_1s326ho2fp().f[14]++;
        cov_1s326ho2fp().s[40]++;
        return log.action.includes(filter.action);
      });
    } else
    /* istanbul ignore next */
    {
      cov_1s326ho2fp().b[13][1]++;
    }
    cov_1s326ho2fp().s[41]++;
    if (filter.resource) {
      /* istanbul ignore next */
      cov_1s326ho2fp().b[14][0]++;
      cov_1s326ho2fp().s[42]++;
      filteredLogs = filteredLogs.filter(log => {
        /* istanbul ignore next */
        cov_1s326ho2fp().f[15]++;
        cov_1s326ho2fp().s[43]++;
        return log.resource === filter.resource;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1s326ho2fp().b[14][1]++;
    }
    cov_1s326ho2fp().s[44]++;
    if (filter.category) {
      /* istanbul ignore next */
      cov_1s326ho2fp().b[15][0]++;
      cov_1s326ho2fp().s[45]++;
      filteredLogs = filteredLogs.filter(log => {
        /* istanbul ignore next */
        cov_1s326ho2fp().f[16]++;
        cov_1s326ho2fp().s[46]++;
        return log.category === filter.category;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1s326ho2fp().b[15][1]++;
    }
    cov_1s326ho2fp().s[47]++;
    if (filter.severity) {
      /* istanbul ignore next */
      cov_1s326ho2fp().b[16][0]++;
      cov_1s326ho2fp().s[48]++;
      filteredLogs = filteredLogs.filter(log => {
        /* istanbul ignore next */
        cov_1s326ho2fp().f[17]++;
        cov_1s326ho2fp().s[49]++;
        return log.severity === filter.severity;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1s326ho2fp().b[16][1]++;
    }
    cov_1s326ho2fp().s[50]++;
    if (filter.success !== undefined) {
      /* istanbul ignore next */
      cov_1s326ho2fp().b[17][0]++;
      cov_1s326ho2fp().s[51]++;
      filteredLogs = filteredLogs.filter(log => {
        /* istanbul ignore next */
        cov_1s326ho2fp().f[18]++;
        cov_1s326ho2fp().s[52]++;
        return log.success === filter.success;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1s326ho2fp().b[17][1]++;
    }
    cov_1s326ho2fp().s[53]++;
    if (filter.startDate) {
      /* istanbul ignore next */
      cov_1s326ho2fp().b[18][0]++;
      cov_1s326ho2fp().s[54]++;
      filteredLogs = filteredLogs.filter(log => {
        /* istanbul ignore next */
        cov_1s326ho2fp().f[19]++;
        cov_1s326ho2fp().s[55]++;
        return log.timestamp >= filter.startDate;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1s326ho2fp().b[18][1]++;
    }
    cov_1s326ho2fp().s[56]++;
    if (filter.endDate) {
      /* istanbul ignore next */
      cov_1s326ho2fp().b[19][0]++;
      cov_1s326ho2fp().s[57]++;
      filteredLogs = filteredLogs.filter(log => {
        /* istanbul ignore next */
        cov_1s326ho2fp().f[20]++;
        cov_1s326ho2fp().s[58]++;
        return log.timestamp <= filter.endDate;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1s326ho2fp().b[19][1]++;
    }
    // Sort by timestamp (newest first)
    cov_1s326ho2fp().s[59]++;
    filteredLogs.sort((a, b) => {
      /* istanbul ignore next */
      cov_1s326ho2fp().f[21]++;
      cov_1s326ho2fp().s[60]++;
      return b.timestamp.getTime() - a.timestamp.getTime();
    });
    // Apply pagination
    const offset =
    /* istanbul ignore next */
    (cov_1s326ho2fp().s[61]++,
    /* istanbul ignore next */
    (cov_1s326ho2fp().b[20][0]++, filter.offset) ||
    /* istanbul ignore next */
    (cov_1s326ho2fp().b[20][1]++, 0));
    const limit =
    /* istanbul ignore next */
    (cov_1s326ho2fp().s[62]++,
    /* istanbul ignore next */
    (cov_1s326ho2fp().b[21][0]++, filter.limit) ||
    /* istanbul ignore next */
    (cov_1s326ho2fp().b[21][1]++, 100));
    /* istanbul ignore next */
    cov_1s326ho2fp().s[63]++;
    return filteredLogs.slice(offset, offset + limit);
  }
  async getStats(timeRange) {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[22]++;
    const logs =
    /* istanbul ignore next */
    (cov_1s326ho2fp().s[64]++, await this.getLogs({
      startDate: timeRange.start,
      endDate: timeRange.end
    }));
    const entriesByCategory =
    /* istanbul ignore next */
    (cov_1s326ho2fp().s[65]++, {});
    const entriesBySeverity =
    /* istanbul ignore next */
    (cov_1s326ho2fp().s[66]++, {});
    const actionCounts =
    /* istanbul ignore next */
    (cov_1s326ho2fp().s[67]++, {});
    const userCounts =
    /* istanbul ignore next */
    (cov_1s326ho2fp().s[68]++, {});
    let failureCount =
    /* istanbul ignore next */
    (cov_1s326ho2fp().s[69]++, 0);
    /* istanbul ignore next */
    cov_1s326ho2fp().s[70]++;
    logs.forEach(log => {
      /* istanbul ignore next */
      cov_1s326ho2fp().f[23]++;
      cov_1s326ho2fp().s[71]++;
      // Category stats
      entriesByCategory[log.category] = (
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[22][0]++, entriesByCategory[log.category]) ||
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[22][1]++, 0)) + 1;
      // Severity stats
      /* istanbul ignore next */
      cov_1s326ho2fp().s[72]++;
      entriesBySeverity[log.severity] = (
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[23][0]++, entriesBySeverity[log.severity]) ||
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[23][1]++, 0)) + 1;
      // Action stats
      /* istanbul ignore next */
      cov_1s326ho2fp().s[73]++;
      actionCounts[log.action] = (
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[24][0]++, actionCounts[log.action]) ||
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[24][1]++, 0)) + 1;
      // User stats
      /* istanbul ignore next */
      cov_1s326ho2fp().s[74]++;
      if (log.userId) {
        /* istanbul ignore next */
        cov_1s326ho2fp().b[25][0]++;
        cov_1s326ho2fp().s[75]++;
        if (!userCounts[log.userId]) {
          /* istanbul ignore next */
          cov_1s326ho2fp().b[26][0]++;
          cov_1s326ho2fp().s[76]++;
          userCounts[log.userId] = {
            email:
            /* istanbul ignore next */
            (cov_1s326ho2fp().b[27][0]++, log.userEmail) ||
            /* istanbul ignore next */
            (cov_1s326ho2fp().b[27][1]++, ""),
            count: 0
          };
        } else
        /* istanbul ignore next */
        {
          cov_1s326ho2fp().b[26][1]++;
        }
        cov_1s326ho2fp().s[77]++;
        userCounts[log.userId].count++;
      } else
      /* istanbul ignore next */
      {
        cov_1s326ho2fp().b[25][1]++;
      }
      // Failure stats
      cov_1s326ho2fp().s[78]++;
      if (!log.success) {
        /* istanbul ignore next */
        cov_1s326ho2fp().b[28][0]++;
        cov_1s326ho2fp().s[79]++;
        failureCount++;
      } else
      /* istanbul ignore next */
      {
        cov_1s326ho2fp().b[28][1]++;
      }
    });
    const topActions =
    /* istanbul ignore next */
    (cov_1s326ho2fp().s[80]++, Object.entries(actionCounts).sort(([, a], [, b]) => {
      /* istanbul ignore next */
      cov_1s326ho2fp().f[24]++;
      cov_1s326ho2fp().s[81]++;
      return b - a;
    }).slice(0, 10).map(([action, count]) => {
      /* istanbul ignore next */
      cov_1s326ho2fp().f[25]++;
      cov_1s326ho2fp().s[82]++;
      return {
        action,
        count
      };
    }));
    const topUsers =
    /* istanbul ignore next */
    (cov_1s326ho2fp().s[83]++, Object.entries(userCounts).sort(([, a], [, b]) => {
      /* istanbul ignore next */
      cov_1s326ho2fp().f[26]++;
      cov_1s326ho2fp().s[84]++;
      return b.count - a.count;
    }).slice(0, 10).map(([userId, data]) => {
      /* istanbul ignore next */
      cov_1s326ho2fp().f[27]++;
      cov_1s326ho2fp().s[85]++;
      return {
        userId,
        userEmail: data.email,
        count: data.count
      };
    }));
    /* istanbul ignore next */
    cov_1s326ho2fp().s[86]++;
    return {
      totalEntries: logs.length,
      entriesByCategory,
      entriesBySeverity,
      failureRate: logs.length > 0 ?
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[29][0]++, failureCount / logs.length * 100) :
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[29][1]++, 0),
      topActions,
      topUsers,
      recentActivity: logs.slice(0, 20)
    };
  }
  async exportLogs(filter =
  /* istanbul ignore next */
  (cov_1s326ho2fp().b[30][0]++, {}), format =
  /* istanbul ignore next */
  (cov_1s326ho2fp().b[31][0]++, "json")) {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[28]++;
    const logs =
    /* istanbul ignore next */
    (cov_1s326ho2fp().s[87]++, await this.getLogs(filter));
    /* istanbul ignore next */
    cov_1s326ho2fp().s[88]++;
    if (format === "csv") {
      /* istanbul ignore next */
      cov_1s326ho2fp().b[32][0]++;
      cov_1s326ho2fp().s[89]++;
      return this.convertToCSV(logs);
    } else
    /* istanbul ignore next */
    {
      cov_1s326ho2fp().b[32][1]++;
    }
    cov_1s326ho2fp().s[90]++;
    return JSON.stringify(logs, null, 2);
  }
  // Private methods
  generateId() {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[29]++;
    cov_1s326ho2fp().s[91]++;
    return `audit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  async getClientIP() {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[30]++;
    cov_1s326ho2fp().s[92]++;
    try {
      /* istanbul ignore next */
      cov_1s326ho2fp().s[93]++;
      // In a real application, this would get the actual client IP
      // For now, return a placeholder
      return "localhost";
    } catch {
      /* istanbul ignore next */
      cov_1s326ho2fp().s[94]++;
      return "unknown";
    }
  }
  getSessionId() {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[31]++;
    let sessionId =
    /* istanbul ignore next */
    (cov_1s326ho2fp().s[95]++, sessionStorage.getItem("audit_session_id"));
    /* istanbul ignore next */
    cov_1s326ho2fp().s[96]++;
    if (!sessionId) {
      /* istanbul ignore next */
      cov_1s326ho2fp().b[33][0]++;
      cov_1s326ho2fp().s[97]++;
      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      /* istanbul ignore next */
      cov_1s326ho2fp().s[98]++;
      sessionStorage.setItem("audit_session_id", sessionId);
    } else
    /* istanbul ignore next */
    {
      cov_1s326ho2fp().b[33][1]++;
    }
    cov_1s326ho2fp().s[99]++;
    return sessionId;
  }
  sanitizeData(data) {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[32]++;
    cov_1s326ho2fp().s[100]++;
    if (!data) {
      /* istanbul ignore next */
      cov_1s326ho2fp().b[34][0]++;
      cov_1s326ho2fp().s[101]++;
      return data;
    } else
    /* istanbul ignore next */
    {
      cov_1s326ho2fp().b[34][1]++;
    }
    const sensitiveFields =
    /* istanbul ignore next */
    (cov_1s326ho2fp().s[102]++, ["password", "token", "secret", "key", "auth"]);
    const sanitized =
    /* istanbul ignore next */
    (cov_1s326ho2fp().s[103]++, JSON.parse(JSON.stringify(data)));
    /* istanbul ignore next */
    cov_1s326ho2fp().s[104]++;
    const sanitizeObject = obj => {
      /* istanbul ignore next */
      cov_1s326ho2fp().f[33]++;
      cov_1s326ho2fp().s[105]++;
      if (
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[36][0]++, typeof obj !== "object") ||
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[36][1]++, obj === null)) {
        /* istanbul ignore next */
        cov_1s326ho2fp().b[35][0]++;
        cov_1s326ho2fp().s[106]++;
        return obj;
      } else
      /* istanbul ignore next */
      {
        cov_1s326ho2fp().b[35][1]++;
      }
      cov_1s326ho2fp().s[107]++;
      for (const key in obj) {
        /* istanbul ignore next */
        cov_1s326ho2fp().s[108]++;
        if (sensitiveFields.some(field => {
          /* istanbul ignore next */
          cov_1s326ho2fp().f[34]++;
          cov_1s326ho2fp().s[109]++;
          return key.toLowerCase().includes(field);
        })) {
          /* istanbul ignore next */
          cov_1s326ho2fp().b[37][0]++;
          cov_1s326ho2fp().s[110]++;
          obj[key] = "[REDACTED]";
        } else {
          /* istanbul ignore next */
          cov_1s326ho2fp().b[37][1]++;
          cov_1s326ho2fp().s[111]++;
          if (typeof obj[key] === "object") {
            /* istanbul ignore next */
            cov_1s326ho2fp().b[38][0]++;
            cov_1s326ho2fp().s[112]++;
            obj[key] = sanitizeObject(obj[key]);
          } else
          /* istanbul ignore next */
          {
            cov_1s326ho2fp().b[38][1]++;
          }
        }
      }
      /* istanbul ignore next */
      cov_1s326ho2fp().s[113]++;
      return obj;
    };
    /* istanbul ignore next */
    cov_1s326ho2fp().s[114]++;
    return sanitizeObject(sanitized);
  }
  getChanges(oldData, newData) {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[35]++;
    const changes =
    /* istanbul ignore next */
    (cov_1s326ho2fp().s[115]++, {});
    /* istanbul ignore next */
    cov_1s326ho2fp().s[116]++;
    if (
    /* istanbul ignore next */
    (cov_1s326ho2fp().b[40][0]++, !oldData) ||
    /* istanbul ignore next */
    (cov_1s326ho2fp().b[40][1]++, !newData)) {
      /* istanbul ignore next */
      cov_1s326ho2fp().b[39][0]++;
      cov_1s326ho2fp().s[117]++;
      return changes;
    } else
    /* istanbul ignore next */
    {
      cov_1s326ho2fp().b[39][1]++;
    }
    const allKeys =
    /* istanbul ignore next */
    (cov_1s326ho2fp().s[118]++, new Set([...Object.keys(oldData), ...Object.keys(newData)]));
    /* istanbul ignore next */
    cov_1s326ho2fp().s[119]++;
    allKeys.forEach(key => {
      /* istanbul ignore next */
      cov_1s326ho2fp().f[36]++;
      cov_1s326ho2fp().s[120]++;
      if (JSON.stringify(oldData[key]) !== JSON.stringify(newData[key])) {
        /* istanbul ignore next */
        cov_1s326ho2fp().b[41][0]++;
        cov_1s326ho2fp().s[121]++;
        changes[key] = {
          old: oldData[key],
          new: newData[key]
        };
      } else
      /* istanbul ignore next */
      {
        cov_1s326ho2fp().b[41][1]++;
      }
    });
    /* istanbul ignore next */
    cov_1s326ho2fp().s[122]++;
    return changes;
  }
  async loadFromStorage() {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[37]++;
    cov_1s326ho2fp().s[123]++;
    try {
      const logs =
      /* istanbul ignore next */
      (cov_1s326ho2fp().s[124]++, _secureStorage.secureStorage.getJSON("audit_logs"));
      /* istanbul ignore next */
      cov_1s326ho2fp().s[125]++;
      if (
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[43][0]++, logs) &&
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[43][1]++, Array.isArray(logs))) {
        /* istanbul ignore next */
        cov_1s326ho2fp().b[42][0]++;
        cov_1s326ho2fp().s[126]++;
        this.logs = logs.map(log => {
          /* istanbul ignore next */
          cov_1s326ho2fp().f[38]++;
          cov_1s326ho2fp().s[127]++;
          return {
            ...log,
            timestamp: new Date(log.timestamp)
          };
        });
      } else
      /* istanbul ignore next */
      {
        cov_1s326ho2fp().b[42][1]++;
      }
    } catch (error) {
      // Silent error handling - Failed to load audit logs from storage
    }
  }
  saveToStorage() {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[39]++;
    cov_1s326ho2fp().s[128]++;
    try {
      /* istanbul ignore next */
      cov_1s326ho2fp().s[129]++;
      _secureStorage.secureStorage.setJSON("audit_logs", this.logs.slice(-this.maxLocalLogs));
    } catch (error) {
      // Silent error handling - Failed to save audit logs to storage
    }
  }
  startPeriodicFlush() {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[40]++;
    cov_1s326ho2fp().s[130]++;
    // Flush pending logs every 30 seconds
    this.flushTimer = setInterval(() => {
      /* istanbul ignore next */
      cov_1s326ho2fp().f[41]++;
      cov_1s326ho2fp().s[131]++;
      if (this.pendingLogs.length > 0) {
        /* istanbul ignore next */
        cov_1s326ho2fp().b[44][0]++;
        cov_1s326ho2fp().s[132]++;
        this.flush().catch(error => {
          /* istanbul ignore next */
          cov_1s326ho2fp().f[42]++;
        } // Silent error handling - Failed to flush audit logs
        );
      } else
      /* istanbul ignore next */
      {
        cov_1s326ho2fp().b[44][1]++;
      }
    }, 30000);
  }
  async flush() {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[43]++;
    cov_1s326ho2fp().s[133]++;
    if (this.pendingLogs.length === 0) {
      /* istanbul ignore next */
      cov_1s326ho2fp().b[45][0]++;
      cov_1s326ho2fp().s[134]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1s326ho2fp().b[45][1]++;
    }
    const logsToFlush =
    /* istanbul ignore next */
    (cov_1s326ho2fp().s[135]++, [...this.pendingLogs]);
    /* istanbul ignore next */
    cov_1s326ho2fp().s[136]++;
    this.pendingLogs = [];
    /* istanbul ignore next */
    cov_1s326ho2fp().s[137]++;
    try {
      /* istanbul ignore next */
      cov_1s326ho2fp().s[138]++;
      // In a real application, this would send logs to a remote service
      // For now, we'll just log to console in development
      if (_configService.configService.isDevelopment()) {
        /* istanbul ignore next */
        cov_1s326ho2fp().b[46][0]++;
      } // Silent handling - Flushing audit logs
      else
      /* istanbul ignore next */
      {
        cov_1s326ho2fp().b[46][1]++;
      }
      // Send logs to remote service
      cov_1s326ho2fp().s[139]++;
      await this.sendToRemoteService(logsToFlush);
    } catch (error) {
      /* istanbul ignore next */
      cov_1s326ho2fp().s[140]++;
      // If flush fails, add logs back to pending
      this.pendingLogs.unshift(...logsToFlush);
      /* istanbul ignore next */
      cov_1s326ho2fp().s[141]++;
      throw error;
    }
  }
  async sendAlert(entry) {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[44]++;
    cov_1s326ho2fp().s[142]++;
    try {
      /* istanbul ignore next */
      cov_1s326ho2fp().s[143]++;
      // In a real application, this would send alerts for critical events
      // Silent handling - CRITICAL AUDIT EVENT
      // Implement actual alerting
      await this.sendEmailAlert(entry);
      /* istanbul ignore next */
      cov_1s326ho2fp().s[144]++;
      await this.sendSlackAlert(entry);
    } catch (error) {
      // Silent error handling - Failed to send audit alert
    }
  }
  convertToCSV(logs) {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[45]++;
    cov_1s326ho2fp().s[145]++;
    if (logs.length === 0) {
      /* istanbul ignore next */
      cov_1s326ho2fp().b[47][0]++;
      cov_1s326ho2fp().s[146]++;
      return "";
    } else
    /* istanbul ignore next */
    {
      cov_1s326ho2fp().b[47][1]++;
    }
    const headers =
    /* istanbul ignore next */
    (cov_1s326ho2fp().s[147]++, ["ID", "Timestamp", "User ID", "User Email", "Action", "Resource", "Resource ID", "Category", "Severity", "Success", "IP Address", "User Agent", "Session ID", "Details"]);
    const rows =
    /* istanbul ignore next */
    (cov_1s326ho2fp().s[148]++, logs.map(log => {
      /* istanbul ignore next */
      cov_1s326ho2fp().f[46]++;
      cov_1s326ho2fp().s[149]++;
      return [log.id, log.timestamp.toISOString(),
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[48][0]++, log.userId) ||
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[48][1]++, ""),
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[49][0]++, log.userEmail) ||
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[49][1]++, ""), log.action, log.resource,
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[50][0]++, log.resourceId) ||
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[50][1]++, ""), log.category, log.severity, log.success.toString(),
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[51][0]++, log.ipAddress) ||
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[51][1]++, ""),
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[52][0]++, log.userAgent) ||
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[52][1]++, ""),
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[53][0]++, log.sessionId) ||
      /* istanbul ignore next */
      (cov_1s326ho2fp().b[53][1]++, ""), JSON.stringify(log.details)];
    }));
    /* istanbul ignore next */
    cov_1s326ho2fp().s[150]++;
    return [headers, ...rows].map(row => {
      /* istanbul ignore next */
      cov_1s326ho2fp().f[47]++;
      cov_1s326ho2fp().s[151]++;
      return row.map(cell => {
        /* istanbul ignore next */
        cov_1s326ho2fp().f[48]++;
        cov_1s326ho2fp().s[152]++;
        return `"${cell.toString().replace(/"/g, '""')}"`;
      }).join(",");
    }).join("\n");
  }
  async sendToRemoteService(logs) {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[49]++;
    cov_1s326ho2fp().s[153]++;
    try {
      // In a production environment, this would send logs to a service like:
      // - AWS CloudWatch
      // - Elasticsearch
      // - Splunk
      // - Custom logging API
      const payload =
      /* istanbul ignore next */
      (cov_1s326ho2fp().s[154]++, {
        timestamp: new Date().toISOString(),
        source: 'crm-application',
        logs: logs.map(log => {
          /* istanbul ignore next */
          cov_1s326ho2fp().f[50]++;
          cov_1s326ho2fp().s[155]++;
          return {
            ...log,
            timestamp: log.timestamp.toISOString()
          };
        })
      });
      // Simulate API call to remote logging service
      /* istanbul ignore next */
      cov_1s326ho2fp().s[156]++;
      if (_configService.configService.isDevelopment()) {
        /* istanbul ignore next */
        cov_1s326ho2fp().b[54][0]++;
      } // Silent handling - Sending logs to remote service
      else {
        /* istanbul ignore next */
        cov_1s326ho2fp().b[54][1]++;
      } // In production, make actual HTTP request
      // const response = await fetch('/api/audit-logs', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify(payload)
      // })
      // if (!response.ok) throw new Error('Failed to send logs')
    } catch (error) {
      /* istanbul ignore next */
      cov_1s326ho2fp().s[157]++;
      // Silent error handling - Failed to send logs to remote service
      throw error;
    }
  }
  async sendEmailAlert(entry) {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[51]++;
    cov_1s326ho2fp().s[158]++;
    try {
      // In production, integrate with email service like SendGrid, AWS SES, etc.
      const alertData =
      /* istanbul ignore next */
      (cov_1s326ho2fp().s[159]++, {
        to: 'admin@company.com',
        subject: `CRITICAL AUDIT ALERT: ${entry.action}`,
        body: `
          Critical audit event detected:
          
          Action: ${entry.action}
          Resource: ${entry.resource}
          User: ${
        /* istanbul ignore next */
        (cov_1s326ho2fp().b[55][0]++, entry.userEmail) ||
        /* istanbul ignore next */
        (cov_1s326ho2fp().b[55][1]++, 'Unknown')}
          Timestamp: ${entry.timestamp.toISOString()}
          Details: ${JSON.stringify(entry.details, null, 2)}
          
          Please investigate immediately.
        `
      });
      /* istanbul ignore next */
      cov_1s326ho2fp().s[160]++;
      if (_configService.configService.isDevelopment()) {
        /* istanbul ignore next */
        cov_1s326ho2fp().b[56][0]++;
      } // Silent logging - Email alert would be sent
      else {
        /* istanbul ignore next */
        cov_1s326ho2fp().b[56][1]++;
      } // In production, send actual email
      // await emailService.sendAlert(alertData)
    } catch (error) {
      // Silent error handling - Failed to send email alert
    }
  }
  async sendSlackAlert(entry) {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[52]++;
    cov_1s326ho2fp().s[161]++;
    try {
      // In production, integrate with Slack webhook
      const slackMessage =
      /* istanbul ignore next */
      (cov_1s326ho2fp().s[162]++, {
        text: `🚨 CRITICAL AUDIT ALERT`,
        attachments: [{
          color: 'danger',
          fields: [{
            title: 'Action',
            value: entry.action,
            short: true
          }, {
            title: 'Resource',
            value: entry.resource,
            short: true
          }, {
            title: 'User',
            value:
            /* istanbul ignore next */
            (cov_1s326ho2fp().b[57][0]++, entry.userEmail) ||
            /* istanbul ignore next */
            (cov_1s326ho2fp().b[57][1]++, 'Unknown'),
            short: true
          }, {
            title: 'Timestamp',
            value: entry.timestamp.toISOString(),
            short: true
          }, {
            title: 'Details',
            value: JSON.stringify(entry.details),
            short: false
          }]
        }]
      });
      /* istanbul ignore next */
      cov_1s326ho2fp().s[163]++;
      if (_configService.configService.isDevelopment()) {
        /* istanbul ignore next */
        cov_1s326ho2fp().b[58][0]++;
      } // Silent logging - Slack alert would be sent
      else {
        /* istanbul ignore next */
        cov_1s326ho2fp().b[58][1]++;
      } // In production, send to Slack webhook
      // const webhookUrl = process.env.SLACK_WEBHOOK_URL
      // await fetch(webhookUrl, {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify(slackMessage)
      // })
    } catch (error) {
      // Silent error handling - Failed to send Slack alert
    }
  }
  // Cleanup method
  destroy() {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[53]++;
    cov_1s326ho2fp().s[164]++;
    if (this.flushTimer) {
      /* istanbul ignore next */
      cov_1s326ho2fp().b[59][0]++;
      cov_1s326ho2fp().s[165]++;
      clearInterval(this.flushTimer);
      /* istanbul ignore next */
      cov_1s326ho2fp().s[166]++;
      this.flushTimer = null;
    } else
    /* istanbul ignore next */
    {
      cov_1s326ho2fp().b[59][1]++;
    }
  }
  constructor() {
    /* istanbul ignore next */
    cov_1s326ho2fp().f[54]++;
    cov_1s326ho2fp().s[167]++;
    this.logs = [];
    /* istanbul ignore next */
    cov_1s326ho2fp().s[168]++;
    this.maxLocalLogs = 1000;
    /* istanbul ignore next */
    cov_1s326ho2fp().s[169]++;
    this.batchSize = 50;
    /* istanbul ignore next */
    cov_1s326ho2fp().s[170]++;
    this.pendingLogs = [];
    /* istanbul ignore next */
    cov_1s326ho2fp().s[171]++;
    this.flushTimer = null;
    /* istanbul ignore next */
    cov_1s326ho2fp().s[172]++;
    this.initialized = false;
  }
}
const auditLogService =
/* istanbul ignore next */
(cov_1s326ho2fp().s[173]++, new AuditLogService());
const _default =
/* istanbul ignore next */
(cov_1s326ho2fp().s[174]++, auditLogService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,