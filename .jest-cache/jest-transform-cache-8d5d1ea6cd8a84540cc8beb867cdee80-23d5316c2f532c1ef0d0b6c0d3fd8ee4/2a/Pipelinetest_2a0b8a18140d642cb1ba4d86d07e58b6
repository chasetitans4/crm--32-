e579c154ae5d01fd16d7dab48ef2d3b3
"use strict";
// Mock the hooks
jest.mock('../../hooks/useClientActions', ()=>({
        useClientActions: ()=>({
                updateClientStage: jest.fn(),
                addClient: jest.fn(),
                updateClient: jest.fn(),
                deleteClient: jest.fn()
            })
    }));
// Mock framer-motion
jest.mock('framer-motion', ()=>({
        motion: {
            div: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    ...props,
                    children: children
                }),
            button: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    ...props,
                    children: children
                })
        },
        AnimatePresence: ({ children })=>children
    }));
// Mock the Pipeline sub-components
jest.mock('../Pipeline/PipelineMetricsView', ()=>{
    return function MockPipelineMetricsView() {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            "data-testid": "pipeline-metrics-view",
            children: "Pipeline Metrics View"
        });
    };
});
jest.mock('../Pipeline/PipelineCardsView', ()=>{
    return function MockPipelineCardsView() {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            "data-testid": "pipeline-cards-view",
            children: "Pipeline Cards View"
        });
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
const _Pipeline = /*#__PURE__*/ _interop_require_default(require("../Pipeline"));
const _AppContext = require("../../context/AppContext");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockClients = [
    {
        id: '1',
        name: 'John Doe',
        email: 'john@example.com',
        phone: '+1 (555) 123-4567',
        company: 'Acme Corp',
        stage: 'lead',
        value: 50000,
        lastContact: '2024-01-15',
        notes: [],
        projects: [],
        tags: [
            'enterprise'
        ],
        priority: 'high',
        source: 'website',
        assignedTo: 'sales-rep-1'
    },
    {
        id: '2',
        name: 'Jane Smith',
        email: 'jane@example.com',
        phone: '+1 (555) 987-6543',
        company: 'Tech Solutions',
        stage: 'qualified',
        value: 75000,
        lastContact: '2024-01-10',
        notes: [],
        projects: [],
        tags: [
            'tech'
        ],
        priority: 'medium',
        source: 'referral',
        assignedTo: 'sales-rep-2'
    },
    {
        id: '3',
        name: 'Bob Wilson',
        email: 'bob@example.com',
        phone: '+1 (555) 456-7890',
        company: 'StartupXYZ',
        stage: 'proposal',
        value: 25000,
        lastContact: '2024-01-05',
        notes: [],
        projects: [],
        tags: [
            'startup'
        ],
        priority: 'low',
        source: 'cold-call',
        assignedTo: 'sales-rep-1'
    },
    {
        id: '4',
        name: 'Alice Johnson',
        email: 'alice@example.com',
        phone: '+1 (555) 321-0987',
        company: 'Enterprise Inc',
        stage: 'closed',
        value: 100000,
        lastContact: '2024-01-01',
        notes: [],
        projects: [],
        tags: [
            'enterprise',
            'vip'
        ],
        priority: 'high',
        source: 'referral',
        assignedTo: 'sales-rep-1'
    }
];
const mockSalesStages = [
    {
        id: 'lead',
        name: 'Lead',
        color: '#3B82F6'
    },
    {
        id: 'qualified',
        name: 'Qualified',
        color: '#10B981'
    },
    {
        id: 'proposal',
        name: 'Proposal',
        color: '#F59E0B'
    },
    {
        id: 'closed',
        name: 'Closed',
        color: '#EF4444'
    }
];
const mockInitialState = {
    clients: mockClients,
    salesStages: mockSalesStages,
    contracts: [],
    invoices: [],
    tasks: [],
    projects: [],
    reports: [],
    settings: {
        currency: 'USD',
        dateFormat: 'MM/DD/YYYY',
        timezone: 'UTC'
    }
};
const renderWithProvider = (component)=>{
    return (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppContext.AppProvider, {
        initialState: mockInitialState,
        children: component
    }));
};
describe('Pipeline Component', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    test('renders pipeline component', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Pipeline.default, {}));
        expect(_react1.screen.getByText('Sales Pipeline')).toBeInTheDocument();
    });
    test('displays all sales stages', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Pipeline.default, {}));
        expect(_react1.screen.getByText('Lead')).toBeInTheDocument();
        expect(_react1.screen.getByText('Qualified')).toBeInTheDocument();
        expect(_react1.screen.getByText('Proposal')).toBeInTheDocument();
        expect(_react1.screen.getByText('Closed')).toBeInTheDocument();
    });
    test('shows clients in correct stages', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Pipeline.default, {}));
        // Check that clients appear in their respective stages
        expect(_react1.screen.getByText('John Doe')).toBeInTheDocument();
        expect(_react1.screen.getByText('Jane Smith')).toBeInTheDocument();
        expect(_react1.screen.getByText('Bob Wilson')).toBeInTheDocument();
        expect(_react1.screen.getByText('Alice Johnson')).toBeInTheDocument();
    });
    test('displays client values correctly', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Pipeline.default, {}));
        expect(_react1.screen.getByText('$50,000')).toBeInTheDocument();
        expect(_react1.screen.getByText('$75,000')).toBeInTheDocument();
        expect(_react1.screen.getByText('$25,000')).toBeInTheDocument();
        expect(_react1.screen.getByText('$100,000')).toBeInTheDocument();
    });
    test('calculates stage totals correctly', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Pipeline.default, {}));
        // Lead stage: $50,000
        // Qualified stage: $75,000
        // Proposal stage: $25,000
        // Closed stage: $100,000
        const leadTotal = mockClients.filter((c)=>c.stage === 'lead').reduce((sum, c)=>sum + c.value, 0);
        const qualifiedTotal = mockClients.filter((c)=>c.stage === 'qualified').reduce((sum, c)=>sum + c.value, 0);
        const proposalTotal = mockClients.filter((c)=>c.stage === 'proposal').reduce((sum, c)=>sum + c.value, 0);
        const closedTotal = mockClients.filter((c)=>c.stage === 'closed').reduce((sum, c)=>sum + c.value, 0);
        expect(leadTotal).toBe(50000);
        expect(qualifiedTotal).toBe(75000);
        expect(proposalTotal).toBe(25000);
        expect(closedTotal).toBe(100000);
    });
    test('view mode switching works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Pipeline.default, {}));
        // Test switching to metrics view
        const metricsButton = _react1.screen.getByText('Metrics');
        await user.click(metricsButton);
        expect(_react1.screen.getByTestId('pipeline-metrics-view')).toBeInTheDocument();
    });
    test('search functionality filters clients', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Pipeline.default, {}));
        const searchInput = _react1.screen.getByPlaceholderText(/search clients/i);
        await user.type(searchInput, 'John');
        expect(_react1.screen.getByText('John Doe')).toBeInTheDocument();
        expect(_react1.screen.queryByText('Jane Smith')).not.toBeInTheDocument();
    });
    test('filter by value range works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Pipeline.default, {}));
        // Open filters
        const filterButton = _react1.screen.getByText('Filters');
        await user.click(filterButton);
        // Set minimum value filter
        const minValueInput = _react1.screen.getByLabelText(/minimum value/i);
        await user.clear(minValueInput);
        await user.type(minValueInput, '60000');
        // Should show only clients with value >= 60000
        expect(_react1.screen.getByText('Jane Smith')).toBeInTheDocument(); // $75,000
        expect(_react1.screen.getByText('Alice Johnson')).toBeInTheDocument(); // $100,000
        expect(_react1.screen.queryByText('John Doe')).not.toBeInTheDocument(); // $50,000
        expect(_react1.screen.queryByText('Bob Wilson')).not.toBeInTheDocument(); // $25,000
    });
    test('displays stage metrics correctly', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Pipeline.default, {}));
        // Check client count per stage
        const leadCount = mockClients.filter((c)=>c.stage === 'lead').length;
        const qualifiedCount = mockClients.filter((c)=>c.stage === 'qualified').length;
        const proposalCount = mockClients.filter((c)=>c.stage === 'proposal').length;
        const closedCount = mockClients.filter((c)=>c.stage === 'closed').length;
        expect(leadCount).toBe(1);
        expect(qualifiedCount).toBe(1);
        expect(proposalCount).toBe(1);
        expect(closedCount).toBe(1);
    });
    test('handles drag and drop functionality', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Pipeline.default, {}));
        // Find a client card
        const clientCard = _react1.screen.getByText('John Doe').closest('[draggable]');
        if (clientCard) {
            // Simulate drag start
            _react1.fireEvent.dragStart(clientCard);
            // Find a drop zone (different stage)
            const qualifiedStage = _react1.screen.getByText('Qualified').closest('.stage-column');
            if (qualifiedStage) {
                // Simulate drop
                _react1.fireEvent.dragOver(qualifiedStage);
                _react1.fireEvent.drop(qualifiedStage);
            // Verify that updateClientStage was called
            // Note: This would require mocking the hook properly
            }
        }
    });
    test('shows client priority indicators', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Pipeline.default, {}));
        // Check for priority indicators
        const highPriorityElements = _react1.screen.getAllByText(/high/i);
        const mediumPriorityElements = _react1.screen.getAllByText(/medium/i);
        const lowPriorityElements = _react1.screen.getAllByText(/low/i);
        expect(highPriorityElements.length).toBeGreaterThan(0);
        expect(mediumPriorityElements.length).toBeGreaterThan(0);
        expect(lowPriorityElements.length).toBeGreaterThan(0);
    });
    test('displays client tags', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Pipeline.default, {}));
        expect(_react1.screen.getByText('enterprise')).toBeInTheDocument();
        expect(_react1.screen.getByText('tech')).toBeInTheDocument();
        expect(_react1.screen.getByText('startup')).toBeInTheDocument();
        expect(_react1.screen.getByText('vip')).toBeInTheDocument();
    });
    test('handles empty pipeline gracefully', ()=>{
        const emptyState = {
            ...mockInitialState,
            clients: []
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppContext.AppProvider, {
            initialState: emptyState,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Pipeline.default, {})
        }));
        expect(_react1.screen.getByText('Sales Pipeline')).toBeInTheDocument();
        expect(_react1.screen.getByText(/no clients in pipeline/i)).toBeInTheDocument();
    });
    test('calculates conversion rates correctly', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Pipeline.default, {}));
        const totalClients = mockClients.length;
        const closedClients = mockClients.filter((c)=>c.stage === 'closed').length;
        const conversionRate = Math.round(closedClients / totalClients * 100);
        expect(conversionRate).toBe(25); // 1 out of 4 clients closed
    });
    test('shows pipeline velocity metrics', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Pipeline.default, {}));
        // Switch to metrics view to see velocity
        const metricsButton = _react1.screen.getByText('Metrics');
        _react1.fireEvent.click(metricsButton);
        expect(_react1.screen.getByTestId('pipeline-metrics-view')).toBeInTheDocument();
    });
    test('bulk actions work correctly', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Pipeline.default, {}));
        // Select multiple clients
        const checkboxes = _react1.screen.getAllByRole('checkbox');
        if (checkboxes.length > 0) {
            await user.click(checkboxes[0]);
            await user.click(checkboxes[1]);
            // Check that bulk actions become available
            expect(_react1.screen.getByText('Bulk Actions')).toBeInTheDocument();
        }
    });
    test('export functionality works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Pipeline.default, {}));
        const exportButton = _react1.screen.getByText('Export');
        await user.click(exportButton);
        // Should show export options
        expect(_react1.screen.getByText('Export Pipeline Data')).toBeInTheDocument();
    });
    test('responsive design adapts to screen size', ()=>{
        // Mock window.innerWidth
        Object.defineProperty(window, 'innerWidth', {
            writable: true,
            configurable: true,
            value: 768
        });
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Pipeline.default, {}));
        // Check that mobile view is rendered
        const pipelineContainer = _react1.screen.getByText('Sales Pipeline').closest('div');
        expect(pipelineContainer).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,