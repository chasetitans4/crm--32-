{"version":3,"names":["cov_1s326ho2fp","actualCoverage","s","auditLogService","f","default","_default","AuditLogService","initialize","loadFromStorage","startPeriodicFlush","initialized","log","action","resource","details","service","severity","category","success","error","entry","_configService","configService","getFeature","b","logEntry","id","generateId","timestamp","Date","ipAddress","getClientIP","userAgent","navigator","sessionId","getSessionId","logs","push","pendingLogs","length","maxLocalLogs","slice","saveToStorage","batchSize","flush","sendAlert","logAuth","userId","userEmail","logDataAccess","resourceId","logDataModification","oldData","newData","sanitizeData","changes","getChanges","logSecurityEvent","logSystemEvent","logApiCall","method","endpoint","statusCode","duration","toLowerCase","logError","context","errorName","name","errorMessage","message","errorStack","stack","getLogs","filter","filteredLogs","includes","undefined","startDate","endDate","sort","a","getTime","offset","limit","getStats","timeRange","start","end","entriesByCategory","entriesBySeverity","actionCounts","userCounts","failureCount","forEach","email","count","topActions","Object","entries","map","topUsers","data","totalEntries","failureRate","recentActivity","exportLogs","format","convertToCSV","JSON","stringify","now","Math","random","toString","substr","sessionStorage","getItem","setItem","sensitiveFields","sanitized","parse","sanitizeObject","obj","key","some","field","allKeys","Set","keys","old","new","_secureStorage","secureStorage","getJSON","Array","isArray","setJSON","flushTimer","setInterval","catch","logsToFlush","isDevelopment","sendToRemoteService","unshift","sendEmailAlert","sendSlackAlert","headers","rows","toISOString","row","cell","replace","join","payload","source","alertData","to","subject","body","slackMessage","text","attachments","color","fields","title","value","short","destroy","clearInterval"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\auditLogService.ts"],"sourcesContent":["// Audit logging service for tracking user actions and system events\nimport { configService } from \"./configService\"\nimport { secureStorage } from \"../utils/secureStorage\"\n\nexport interface AuditLogEntry {\n  id: string\n  timestamp: Date\n  userId?: string\n  userEmail?: string\n  action: string\n  resource: string\n  resourceId?: string\n  details: Record<string, unknown>\n  ipAddress?: string\n  userAgent?: string\n  sessionId?: string\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\"\n  category: \"auth\" | \"data\" | \"system\" | \"security\" | \"user\" | \"api\"\n  success: boolean\n  errorMessage?: string\n  metadata?: Record<string, unknown>\n}\n\nexport interface AuditLogFilter {\n  userId?: string\n  action?: string\n  resource?: string\n  category?: string\n  severity?: string\n  startDate?: Date\n  endDate?: Date\n  success?: boolean\n  limit?: number\n  offset?: number\n}\n\nexport interface AuditLogStats {\n  totalEntries: number\n  entriesByCategory: Record<string, number>\n  entriesBySeverity: Record<string, number>\n  failureRate: number\n  topActions: Array<{ action: string; count: number }>\n  topUsers: Array<{ userId: string; userEmail: string; count: number }>\n  recentActivity: AuditLogEntry[]\n}\n\nclass AuditLogService {\n  private logs: AuditLogEntry[] = []\n  private maxLocalLogs = 1000\n  private batchSize = 50\n  private pendingLogs: AuditLogEntry[] = []\n  private flushTimer: NodeJS.Timeout | null = null\n  private initialized = false\n\n  async initialize(): Promise<void> {\n    try {\n      // Load existing logs from localStorage\n      await this.loadFromStorage()\n\n      // Start periodic flush to remote storage\n      this.startPeriodicFlush()\n\n      this.initialized = true\n\n      // Log the initialization\n      await this.log({\n        action: \"audit_service_initialized\",\n        resource: \"system\",\n        details: { service: \"AuditLogService\" },\n        severity: \"low\",\n        category: \"system\",\n        success: true,\n      })\n\n      // Silent logging - Audit log service initialized\n    } catch (error) {\n      // Silent error handling - Failed to initialize audit log service\n      throw error\n    }\n  }\n\n  async log(entry: Omit<AuditLogEntry, \"id\" | \"timestamp\">): Promise<void> {\n    if (!configService.getFeature(\"enableAuditLog\")) {\n      return\n    }\n\n    const logEntry: AuditLogEntry = {\n      id: this.generateId(),\n      timestamp: new Date(),\n      ipAddress: await this.getClientIP(),\n      userAgent: navigator.userAgent,\n      sessionId: this.getSessionId(),\n      ...entry,\n    }\n\n    // Add to local storage immediately\n    this.logs.push(logEntry)\n    this.pendingLogs.push(logEntry)\n\n    // Maintain local log size limit\n    if (this.logs.length > this.maxLocalLogs) {\n      this.logs = this.logs.slice(-this.maxLocalLogs)\n    }\n\n    // Save to localStorage\n    this.saveToStorage()\n\n    // Flush if batch is full\n    if (this.pendingLogs.length >= this.batchSize) {\n      await this.flush()\n    }\n\n    // Log critical events immediately\n    if (entry.severity === \"critical\") {\n      await this.flush()\n      await this.sendAlert(logEntry)\n    }\n  }\n\n  // Convenience methods for common log types\n  async logAuth(\n    action: string,\n    details: Record<string, any>,\n    success: boolean,\n    userId?: string,\n    userEmail?: string,\n  ): Promise<void> {\n    await this.log({\n      userId,\n      userEmail,\n      action,\n      resource: \"authentication\",\n      details,\n      severity: success ? \"low\" : \"high\",\n      category: \"auth\",\n      success,\n    })\n  }\n\n  async logDataAccess(\n    action: string,\n    resource: string,\n    resourceId: string,\n    userId: string,\n    userEmail: string,\n    details: Record<string, any> = {},\n  ): Promise<void> {\n    await this.log({\n      userId,\n      userEmail,\n      action,\n      resource,\n      resourceId,\n      details,\n      severity: \"medium\",\n      category: \"data\",\n      success: true,\n    })\n  }\n\n  async logDataModification(\n    action: string,\n    resource: string,\n    resourceId: string,\n    userId: string,\n    userEmail: string,\n    oldData: any,\n    newData: any,\n  ): Promise<void> {\n    await this.log({\n      userId,\n      userEmail,\n      action,\n      resource,\n      resourceId,\n      details: {\n        oldData: this.sanitizeData(oldData),\n        newData: this.sanitizeData(newData),\n        changes: this.getChanges(oldData, newData),\n      },\n      severity: \"medium\",\n      category: \"data\",\n      success: true,\n    })\n  }\n\n  async logSecurityEvent(\n    action: string,\n    details: Record<string, any>,\n    severity: \"medium\" | \"high\" | \"critical\" = \"high\",\n    userId?: string,\n  ): Promise<void> {\n    await this.log({\n      userId,\n      action,\n      resource: \"security\",\n      details,\n      severity,\n      category: \"security\",\n      success: false,\n    })\n  }\n\n  async logSystemEvent(action: string, details: Record<string, any>, success = true): Promise<void> {\n    await this.log({\n      action,\n      resource: \"system\",\n      details,\n      severity: success ? \"low\" : \"medium\",\n      category: \"system\",\n      success,\n    })\n  }\n\n  async logApiCall(\n    method: string,\n    endpoint: string,\n    statusCode: number,\n    userId?: string,\n    duration?: number,\n  ): Promise<void> {\n    await this.log({\n      userId,\n      action: `api_${method.toLowerCase()}`,\n      resource: \"api\",\n      resourceId: endpoint,\n      details: {\n        method,\n        endpoint,\n        statusCode,\n        duration,\n      },\n      severity: statusCode >= 400 ? \"medium\" : \"low\",\n      category: \"api\",\n      success: statusCode < 400,\n    })\n  }\n\n  async logError(error: Error, context: Record<string, any> = {}, userId?: string): Promise<void> {\n    await this.log({\n      userId,\n      action: \"error_occurred\",\n      resource: \"system\",\n      details: {\n        errorName: error.name,\n        errorMessage: error.message,\n        errorStack: error.stack,\n        context,\n      },\n      severity: \"high\",\n      category: \"system\",\n      success: false,\n      errorMessage: error.message,\n    })\n  }\n\n  // Query methods\n  async getLogs(filter: AuditLogFilter = {}): Promise<AuditLogEntry[]> {\n    let filteredLogs = [...this.logs]\n\n    if (filter.userId) {\n      filteredLogs = filteredLogs.filter((log) => log.userId === filter.userId)\n    }\n    if (filter.action) {\n      filteredLogs = filteredLogs.filter((log) => log.action.includes(filter.action!))\n    }\n    if (filter.resource) {\n      filteredLogs = filteredLogs.filter((log) => log.resource === filter.resource)\n    }\n    if (filter.category) {\n      filteredLogs = filteredLogs.filter((log) => log.category === filter.category)\n    }\n    if (filter.severity) {\n      filteredLogs = filteredLogs.filter((log) => log.severity === filter.severity)\n    }\n    if (filter.success !== undefined) {\n      filteredLogs = filteredLogs.filter((log) => log.success === filter.success)\n    }\n    if (filter.startDate) {\n      filteredLogs = filteredLogs.filter((log) => log.timestamp >= filter.startDate!)\n    }\n    if (filter.endDate) {\n      filteredLogs = filteredLogs.filter((log) => log.timestamp <= filter.endDate!)\n    }\n\n    // Sort by timestamp (newest first)\n    filteredLogs.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n\n    // Apply pagination\n    const offset = filter.offset || 0\n    const limit = filter.limit || 100\n    return filteredLogs.slice(offset, offset + limit)\n  }\n\n  async getStats(timeRange: { start: Date; end: Date }): Promise<AuditLogStats> {\n    const logs = await this.getLogs({\n      startDate: timeRange.start,\n      endDate: timeRange.end,\n    })\n\n    const entriesByCategory: Record<string, number> = {}\n    const entriesBySeverity: Record<string, number> = {}\n    const actionCounts: Record<string, number> = {}\n    const userCounts: Record<string, { email: string; count: number }> = {}\n    let failureCount = 0\n\n    logs.forEach((log) => {\n      // Category stats\n      entriesByCategory[log.category] = (entriesByCategory[log.category] || 0) + 1\n\n      // Severity stats\n      entriesBySeverity[log.severity] = (entriesBySeverity[log.severity] || 0) + 1\n\n      // Action stats\n      actionCounts[log.action] = (actionCounts[log.action] || 0) + 1\n\n      // User stats\n      if (log.userId) {\n        if (!userCounts[log.userId]) {\n          userCounts[log.userId] = { email: log.userEmail || \"\", count: 0 }\n        }\n        userCounts[log.userId].count++\n      }\n\n      // Failure stats\n      if (!log.success) {\n        failureCount++\n      }\n    })\n\n    const topActions = Object.entries(actionCounts)\n      .sort(([, a], [, b]) => b - a)\n      .slice(0, 10)\n      .map(([action, count]) => ({ action, count }))\n\n    const topUsers = Object.entries(userCounts)\n      .sort(([, a], [, b]) => b.count - a.count)\n      .slice(0, 10)\n      .map(([userId, data]) => ({ userId, userEmail: data.email, count: data.count }))\n\n    return {\n      totalEntries: logs.length,\n      entriesByCategory,\n      entriesBySeverity,\n      failureRate: logs.length > 0 ? (failureCount / logs.length) * 100 : 0,\n      topActions,\n      topUsers,\n      recentActivity: logs.slice(0, 20),\n    }\n  }\n\n  async exportLogs(filter: AuditLogFilter = {}, format: \"json\" | \"csv\" = \"json\"): Promise<string> {\n    const logs = await this.getLogs(filter)\n\n    if (format === \"csv\") {\n      return this.convertToCSV(logs)\n    }\n\n    return JSON.stringify(logs, null, 2)\n  }\n\n  // Private methods\n  private generateId(): string {\n    return `audit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  private async getClientIP(): Promise<string> {\n    try {\n      // In a real application, this would get the actual client IP\n      // For now, return a placeholder\n      return \"localhost\"\n    } catch {\n      return \"unknown\"\n    }\n  }\n\n  private getSessionId(): string {\n    let sessionId = sessionStorage.getItem(\"audit_session_id\")\n    if (!sessionId) {\n      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n      sessionStorage.setItem(\"audit_session_id\", sessionId)\n    }\n    return sessionId\n  }\n\n  private sanitizeData(data: any): any {\n    if (!data) return data\n\n    const sensitiveFields = [\"password\", \"token\", \"secret\", \"key\", \"auth\"]\n    const sanitized = JSON.parse(JSON.stringify(data))\n\n    const sanitizeObject = (obj: any): any => {\n      if (typeof obj !== \"object\" || obj === null) return obj\n\n      for (const key in obj) {\n        if (sensitiveFields.some((field) => key.toLowerCase().includes(field))) {\n          obj[key] = \"[REDACTED]\"\n        } else if (typeof obj[key] === \"object\") {\n          obj[key] = sanitizeObject(obj[key])\n        }\n      }\n\n      return obj\n    }\n\n    return sanitizeObject(sanitized)\n  }\n\n  private getChanges(oldData: any, newData: any): Record<string, { old: any; new: any }> {\n    const changes: Record<string, { old: any; new: any }> = {}\n\n    if (!oldData || !newData) return changes\n\n    const allKeys = new Set([...Object.keys(oldData), ...Object.keys(newData)])\n\n    allKeys.forEach((key) => {\n      if (JSON.stringify(oldData[key]) !== JSON.stringify(newData[key])) {\n        changes[key] = {\n          old: oldData[key],\n          new: newData[key],\n        }\n      }\n    })\n\n    return changes\n  }\n\n  private async loadFromStorage(): Promise<void> {\n    try {\n      const logs = secureStorage.getJSON(\"audit_logs\")\n      if (logs && Array.isArray(logs)) {\n        this.logs = logs.map((log: any) => ({\n          ...log,\n          timestamp: new Date(log.timestamp),\n        }))\n      }\n    } catch (error) {\n      // Silent error handling - Failed to load audit logs from storage\n    }\n  }\n\n  private saveToStorage(): void {\n    try {\n      secureStorage.setJSON(\"audit_logs\", this.logs.slice(-this.maxLocalLogs))\n    } catch (error) {\n      // Silent error handling - Failed to save audit logs to storage\n    }\n  }\n\n  private startPeriodicFlush(): void {\n    // Flush pending logs every 30 seconds\n    this.flushTimer = setInterval(() => {\n      if (this.pendingLogs.length > 0) {\n        this.flush().catch((error) => {\n          // Silent error handling - Failed to flush audit logs\n        })\n      }\n    }, 30000)\n  }\n\n  private async flush(): Promise<void> {\n    if (this.pendingLogs.length === 0) return\n\n    const logsToFlush = [...this.pendingLogs]\n    this.pendingLogs = []\n\n    try {\n      // In a real application, this would send logs to a remote service\n      // For now, we'll just log to console in development\n      if (configService.isDevelopment()) {\n        // Silent handling - Flushing audit logs\n      }\n\n      // Send logs to remote service\n      await this.sendToRemoteService(logsToFlush)\n    } catch (error) {\n      // If flush fails, add logs back to pending\n      this.pendingLogs.unshift(...logsToFlush)\n      throw error\n    }\n  }\n\n  private async sendAlert(entry: AuditLogEntry): Promise<void> {\n    try {\n      // In a real application, this would send alerts for critical events\n      // Silent handling - CRITICAL AUDIT EVENT\n\n      // Implement actual alerting\n      await this.sendEmailAlert(entry)\n      await this.sendSlackAlert(entry)\n    } catch (error) {\n      // Silent error handling - Failed to send audit alert\n    }\n  }\n\n  private convertToCSV(logs: AuditLogEntry[]): string {\n    if (logs.length === 0) return \"\"\n\n    const headers = [\n      \"ID\",\n      \"Timestamp\",\n      \"User ID\",\n      \"User Email\",\n      \"Action\",\n      \"Resource\",\n      \"Resource ID\",\n      \"Category\",\n      \"Severity\",\n      \"Success\",\n      \"IP Address\",\n      \"User Agent\",\n      \"Session ID\",\n      \"Details\",\n    ]\n\n    const rows = logs.map((log) => [\n      log.id,\n      log.timestamp.toISOString(),\n      log.userId || \"\",\n      log.userEmail || \"\",\n      log.action,\n      log.resource,\n      log.resourceId || \"\",\n      log.category,\n      log.severity,\n      log.success.toString(),\n      log.ipAddress || \"\",\n      log.userAgent || \"\",\n      log.sessionId || \"\",\n      JSON.stringify(log.details),\n    ])\n\n    return [headers, ...rows]\n      .map((row) => row.map((cell) => `\"${cell.toString().replace(/\"/g, '\"\"')}\"`).join(\",\"))\n      .join(\"\\n\")\n  }\n\n  private async sendToRemoteService(logs: AuditLogEntry[]): Promise<void> {\n    try {\n      // In a production environment, this would send logs to a service like:\n      // - AWS CloudWatch\n      // - Elasticsearch\n      // - Splunk\n      // - Custom logging API\n      \n      const payload = {\n        timestamp: new Date().toISOString(),\n        source: 'crm-application',\n        logs: logs.map(log => ({\n          ...log,\n          timestamp: log.timestamp.toISOString()\n        }))\n      }\n\n      // Simulate API call to remote logging service\n      if (configService.isDevelopment()) {\n        // Silent handling - Sending logs to remote service\n      } else {\n        // In production, make actual HTTP request\n        // const response = await fetch('/api/audit-logs', {\n        //   method: 'POST',\n        //   headers: { 'Content-Type': 'application/json' },\n        //   body: JSON.stringify(payload)\n        // })\n        // if (!response.ok) throw new Error('Failed to send logs')\n      }\n    } catch (error) {\n      // Silent error handling - Failed to send logs to remote service\n      throw error\n    }\n  }\n\n  private async sendEmailAlert(entry: AuditLogEntry): Promise<void> {\n    try {\n      // In production, integrate with email service like SendGrid, AWS SES, etc.\n      const alertData = {\n        to: 'admin@company.com',\n        subject: `CRITICAL AUDIT ALERT: ${entry.action}`,\n        body: `\n          Critical audit event detected:\n          \n          Action: ${entry.action}\n          Resource: ${entry.resource}\n          User: ${entry.userEmail || 'Unknown'}\n          Timestamp: ${entry.timestamp.toISOString()}\n          Details: ${JSON.stringify(entry.details, null, 2)}\n          \n          Please investigate immediately.\n        `\n      }\n\n      if (configService.isDevelopment()) {\n        // Silent logging - Email alert would be sent\n      } else {\n        // In production, send actual email\n        // await emailService.sendAlert(alertData)\n      }\n    } catch (error) {\n      // Silent error handling - Failed to send email alert\n    }\n  }\n\n  private async sendSlackAlert(entry: AuditLogEntry): Promise<void> {\n    try {\n      // In production, integrate with Slack webhook\n      const slackMessage = {\n        text: `🚨 CRITICAL AUDIT ALERT`,\n        attachments: [\n          {\n            color: 'danger',\n            fields: [\n              { title: 'Action', value: entry.action, short: true },\n              { title: 'Resource', value: entry.resource, short: true },\n              { title: 'User', value: entry.userEmail || 'Unknown', short: true },\n              { title: 'Timestamp', value: entry.timestamp.toISOString(), short: true },\n              { title: 'Details', value: JSON.stringify(entry.details), short: false }\n            ]\n          }\n        ]\n      }\n\n      if (configService.isDevelopment()) {\n        // Silent logging - Slack alert would be sent\n      } else {\n        // In production, send to Slack webhook\n        // const webhookUrl = process.env.SLACK_WEBHOOK_URL\n        // await fetch(webhookUrl, {\n        //   method: 'POST',\n        //   headers: { 'Content-Type': 'application/json' },\n        //   body: JSON.stringify(slackMessage)\n        // })\n      }\n    } catch (error) {\n      // Silent error handling - Failed to send Slack alert\n    }\n  }\n\n  // Cleanup method\n  destroy(): void {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer)\n      this.flushTimer = null\n    }\n  }\n}\n\n// Create and export singleton instance\nexport const auditLogService = new AuditLogService()\nexport default auditLogService\n"],"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","ignoreList":[]}