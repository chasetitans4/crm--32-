fea7c4662dea7993e72cbd05940f3afe
/**
 * Advanced Encryption Module for CRM Platform
 * Implements AES-256-GCM encryption with PBKDF2 key derivation
 * Provides industry-standard security for sensitive data
 */ // Encryption configuration constants
"use strict";

/* istanbul ignore next */
function cov_unkz90byx() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\encryption.ts";
  var hash = "e30568d2410326e3f721b3dbd237f63bf4d6cd01";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\encryption.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 9,
          column: 3
        }
      },
      "1": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 14,
          column: 7
        }
      },
      "2": {
        start: {
          line: 11,
          column: 24
        },
        end: {
          line: 14,
          column: 7
        }
      },
      "3": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 35,
          column: 3
        }
      },
      "4": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 34
        }
      },
      "5": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 34
        }
      },
      "6": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 29
        }
      },
      "7": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 27
        }
      },
      "8": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 29
        }
      },
      "9": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 27
        }
      },
      "10": {
        start: {
          line: 36,
          column: 26
        },
        end: {
          line: 45,
          column: 1
        }
      },
      "11": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 29
        }
      },
      "12": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 35
        }
      },
      "13": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 174
        }
      },
      "14": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "15": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 103
        }
      },
      "16": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 39
        }
      },
      "17": {
        start: {
          line: 59,
          column: 32
        },
        end: {
          line: 59,
          column: 39
        }
      },
      "18": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "19": {
        start: {
          line: 62,
          column: 33
        },
        end: {
          line: 62,
          column: 72
        }
      },
      "20": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 65
        }
      },
      "21": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 70,
          column: 15
        }
      },
      "22": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 38
        }
      },
      "23": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 89
        }
      },
      "24": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 44
        }
      },
      "25": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 76
        }
      },
      "26": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 64
        }
      },
      "27": {
        start: {
          line: 84,
          column: 24
        },
        end: {
          line: 84,
          column: 41
        }
      },
      "28": {
        start: {
          line: 85,
          column: 21
        },
        end: {
          line: 85,
          column: 56
        }
      },
      "29": {
        start: {
          line: 86,
          column: 27
        },
        end: {
          line: 86,
          column: 70
        }
      },
      "30": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 49
        }
      },
      "31": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 52
        }
      },
      "32": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "33": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 39
        }
      },
      "34": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 36
        }
      },
      "35": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 66
        }
      },
      "36": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 69
        }
      },
      "37": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 51
        }
      },
      "38": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 115,
          column: 10
        }
      },
      "39": {
        start: {
          line: 120,
          column: 22
        },
        end: {
          line: 120,
          column: 52
        }
      },
      "40": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "41": {
        start: {
          line: 121,
          column: 20
        },
        end: {
          line: 121,
          column: 21
        }
      },
      "42": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 58
        }
      },
      "43": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 28
        }
      },
      "44": {
        start: {
          line: 129,
          column: 22
        },
        end: {
          line: 129,
          column: 44
        }
      },
      "45": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 86
        }
      },
      "46": {
        start: {
          line: 130,
          column: 41
        },
        end: {
          line: 130,
          column: 75
        }
      },
      "47": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "48": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 95
        }
      },
      "49": {
        start: {
          line: 139,
          column: 28
        },
        end: {
          line: 143,
          column: 10
        }
      },
      "50": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 156,
          column: 11
        }
      },
      "51": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 84
        }
      },
      "52": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 82
        }
      },
      "53": {
        start: {
          line: 171,
          column: 22
        },
        end: {
          line: 171,
          column: 84
        }
      },
      "54": {
        start: {
          line: 172,
          column: 21
        },
        end: {
          line: 172,
          column: 23
        }
      },
      "55": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "56": {
        start: {
          line: 173,
          column: 20
        },
        end: {
          line: 173,
          column: 21
        }
      },
      "57": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 52
        }
      },
      "58": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 28
        }
      },
      "59": {
        start: {
          line: 181,
          column: 23
        },
        end: {
          line: 181,
          column: 35
        }
      },
      "60": {
        start: {
          line: 182,
          column: 22
        },
        end: {
          line: 182,
          column: 51
        }
      },
      "61": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "62": {
        start: {
          line: 183,
          column: 20
        },
        end: {
          line: 183,
          column: 21
        }
      },
      "63": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 44
        }
      },
      "64": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 28
        }
      },
      "65": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "66": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 194,
          column: 13
        }
      },
      "67": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 193,
          column: 64
        }
      },
      "68": {
        start: {
          line: 196,
          column: 25
        },
        end: {
          line: 196,
          column: 44
        }
      },
      "69": {
        start: {
          line: 197,
          column: 23
        },
        end: {
          line: 197,
          column: 40
        }
      },
      "70": {
        start: {
          line: 199,
          column: 24
        },
        end: {
          line: 199,
          column: 50
        }
      },
      "71": {
        start: {
          line: 201,
          column: 37
        },
        end: {
          line: 201,
          column: 72
        }
      },
      "72": {
        start: {
          line: 202,
          column: 36
        },
        end: {
          line: 205,
          column: 37
        }
      },
      "73": {
        start: {
          line: 207,
          column: 35
        },
        end: {
          line: 207,
          column: 66
        }
      },
      "74": {
        start: {
          line: 208,
          column: 34
        },
        end: {
          line: 208,
          column: 87
        }
      },
      "75": {
        start: {
          line: 209,
          column: 24
        },
        end: {
          line: 209,
          column: 74
        }
      },
      "76": {
        start: {
          line: 211,
          column: 27
        },
        end: {
          line: 217,
          column: 13
        }
      },
      "77": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 42
        }
      },
      "78": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 55
        }
      },
      "79": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 54
        }
      },
      "80": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 255,
          column: 9
        }
      },
      "81": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 231,
          column: 13
        }
      },
      "82": {
        start: {
          line: 230,
          column: 16
        },
        end: {
          line: 230,
          column: 64
        }
      },
      "83": {
        start: {
          line: 233,
          column: 25
        },
        end: {
          line: 233,
          column: 50
        }
      },
      "84": {
        start: {
          line: 235,
          column: 25
        },
        end: {
          line: 235,
          column: 76
        }
      },
      "85": {
        start: {
          line: 236,
          column: 23
        },
        end: {
          line: 236,
          column: 72
        }
      },
      "86": {
        start: {
          line: 237,
          column: 30
        },
        end: {
          line: 237,
          column: 90
        }
      },
      "87": {
        start: {
          line: 238,
          column: 24
        },
        end: {
          line: 238,
          column: 74
        }
      },
      "88": {
        start: {
          line: 240,
          column: 24
        },
        end: {
          line: 240,
          column: 50
        }
      },
      "89": {
        start: {
          line: 242,
          column: 37
        },
        end: {
          line: 242,
          column: 82
        }
      },
      "90": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 44
        }
      },
      "91": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 56
        }
      },
      "92": {
        start: {
          line: 246,
          column: 36
        },
        end: {
          line: 249,
          column: 37
        }
      },
      "93": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 61
        }
      },
      "94": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 55
        }
      },
      "95": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 54
        }
      },
      "96": {
        start: {
          line: 260,
          column: 30
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "97": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 65
        }
      },
      "98": {
        start: {
          line: 271,
          column: 30
        },
        end: {
          line: 271,
          column: 65
        }
      },
      "99": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 272,
          column: 41
        }
      },
      "100": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 282,
          column: 9
        }
      },
      "101": {
        start: {
          line: 278,
          column: 27
        },
        end: {
          line: 278,
          column: 43
        }
      },
      "102": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 104
        }
      },
      "103": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 281,
          column: 25
        }
      },
      "104": {
        start: {
          line: 287,
          column: 22
        },
        end: {
          line: 287,
          column: 68
        }
      },
      "105": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 288,
          column: 86
        }
      },
      "106": {
        start: {
          line: 288,
          column: 41
        },
        end: {
          line: 288,
          column: 75
        }
      },
      "107": {
        start: {
          line: 293,
          column: 24
        },
        end: {
          line: 293,
          column: 41
        }
      },
      "108": {
        start: {
          line: 294,
          column: 27
        },
        end: {
          line: 294,
          column: 47
        }
      },
      "109": {
        start: {
          line: 295,
          column: 27
        },
        end: {
          line: 295,
          column: 76
        }
      },
      "110": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 52
        }
      },
      "111": {
        start: {
          line: 299,
          column: 27
        },
        end: {
          line: 299,
          column: 51
        }
      },
      "112": {
        start: {
          line: 300,
          column: 20
        },
        end: {
          line: 300,
          column: 60
        }
      },
      "113": {
        start: {
          line: 300,
          column: 28
        },
        end: {
          line: 300,
          column: 60
        }
      },
      "114": {
        start: {
          line: 301,
          column: 20
        },
        end: {
          line: 301,
          column: 78
        }
      },
      "115": {
        start: {
          line: 301,
          column: 37
        },
        end: {
          line: 301,
          column: 78
        }
      },
      "116": {
        start: {
          line: 302,
          column: 22
        },
        end: {
          line: 302,
          column: 72
        }
      },
      "117": {
        start: {
          line: 302,
          column: 32
        },
        end: {
          line: 302,
          column: 72
        }
      },
      "118": {
        start: {
          line: 303,
          column: 22
        },
        end: {
          line: 303,
          column: 90
        }
      },
      "119": {
        start: {
          line: 303,
          column: 41
        },
        end: {
          line: 303,
          column: 90
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 10,
            column: 9
          },
          end: {
            line: 10,
            column: 16
          }
        },
        loc: {
          start: {
            line: 10,
            column: 30
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 30
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 30
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 25
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 23
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 23
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 26
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 25
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 29
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        loc: {
          start: {
            line: 32,
            column: 23
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 32
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 31
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 47
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 58,
            column: 6
          },
          end: {
            line: 58,
            column: 7
          }
        },
        loc: {
          start: {
            line: 58,
            column: 25
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 58
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 82,
            column: 6
          },
          end: {
            line: 82,
            column: 7
          }
        },
        loc: {
          start: {
            line: 82,
            column: 41
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 82
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 91,
            column: 6
          },
          end: {
            line: 91,
            column: 7
          }
        },
        loc: {
          start: {
            line: 91,
            column: 33
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 91
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 97,
            column: 6
          },
          end: {
            line: 97,
            column: 7
          }
        },
        loc: {
          start: {
            line: 97,
            column: 34
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 97
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 110,
            column: 6
          },
          end: {
            line: 110,
            column: 7
          }
        },
        loc: {
          start: {
            line: 110,
            column: 24
          },
          end: {
            line: 116,
            column: 5
          }
        },
        line: 110
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 119,
            column: 6
          },
          end: {
            line: 119,
            column: 7
          }
        },
        loc: {
          start: {
            line: 119,
            column: 28
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 119
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 128,
            column: 6
          },
          end: {
            line: 128,
            column: 7
          }
        },
        loc: {
          start: {
            line: 128,
            column: 31
          },
          end: {
            line: 131,
            column: 5
          }
        },
        line: 128
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 130,
            column: 33
          },
          end: {
            line: 130,
            column: 34
          }
        },
        loc: {
          start: {
            line: 130,
            column: 41
          },
          end: {
            line: 130,
            column: 75
          }
        },
        line: 130
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 134,
            column: 6
          },
          end: {
            line: 134,
            column: 7
          }
        },
        loc: {
          start: {
            line: 134,
            column: 28
          },
          end: {
            line: 157,
            column: 5
          }
        },
        line: 134
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 160,
            column: 6
          },
          end: {
            line: 160,
            column: 7
          }
        },
        loc: {
          start: {
            line: 160,
            column: 21
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 160
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 165,
            column: 6
          },
          end: {
            line: 165,
            column: 7
          }
        },
        loc: {
          start: {
            line: 165,
            column: 19
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 165
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 170,
            column: 6
          },
          end: {
            line: 170,
            column: 7
          }
        },
        loc: {
          start: {
            line: 170,
            column: 34
          },
          end: {
            line: 177,
            column: 5
          }
        },
        line: 170
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 180,
            column: 6
          },
          end: {
            line: 180,
            column: 7
          }
        },
        loc: {
          start: {
            line: 180,
            column: 34
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 180
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 190,
            column: 6
          },
          end: {
            line: 190,
            column: 7
          }
        },
        loc: {
          start: {
            line: 190,
            column: 31
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 190
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 227,
            column: 6
          },
          end: {
            line: 227,
            column: 7
          }
        },
        loc: {
          start: {
            line: 227,
            column: 35
          },
          end: {
            line: 256,
            column: 5
          }
        },
        line: 227
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 259,
            column: 6
          },
          end: {
            line: 259,
            column: 7
          }
        },
        loc: {
          start: {
            line: 259,
            column: 44
          },
          end: {
            line: 267,
            column: 5
          }
        },
        line: 259
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 270,
            column: 6
          },
          end: {
            line: 270,
            column: 7
          }
        },
        loc: {
          start: {
            line: 270,
            column: 43
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 270
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 276,
            column: 6
          },
          end: {
            line: 276,
            column: 7
          }
        },
        loc: {
          start: {
            line: 276,
            column: 24
          },
          end: {
            line: 283,
            column: 5
          }
        },
        line: 276
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 286,
            column: 6
          },
          end: {
            line: 286,
            column: 7
          }
        },
        loc: {
          start: {
            line: 286,
            column: 37
          },
          end: {
            line: 289,
            column: 5
          }
        },
        line: 286
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 288,
            column: 33
          },
          end: {
            line: 288,
            column: 34
          }
        },
        loc: {
          start: {
            line: 288,
            column: 41
          },
          end: {
            line: 288,
            column: 75
          }
        },
        line: 288
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 292,
            column: 6
          },
          end: {
            line: 292,
            column: 7
          }
        },
        loc: {
          start: {
            line: 292,
            column: 36
          },
          end: {
            line: 297,
            column: 5
          }
        },
        line: 292
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 300,
            column: 20
          },
          end: {
            line: 300,
            column: 21
          }
        },
        loc: {
          start: {
            line: 300,
            column: 28
          },
          end: {
            line: 300,
            column: 60
          }
        },
        line: 300
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 301,
            column: 20
          },
          end: {
            line: 301,
            column: 21
          }
        },
        loc: {
          start: {
            line: 301,
            column: 37
          },
          end: {
            line: 301,
            column: 78
          }
        },
        line: 301
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 302,
            column: 22
          },
          end: {
            line: 302,
            column: 23
          }
        },
        loc: {
          start: {
            line: 302,
            column: 32
          },
          end: {
            line: 302,
            column: 72
          }
        },
        line: 302
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 303,
            column: 22
          },
          end: {
            line: 303,
            column: 23
          }
        },
        loc: {
          start: {
            line: 303,
            column: 41
          },
          end: {
            line: 303,
            column: 90
          }
        },
        line: 303
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 51,
            column: 30
          },
          end: {
            line: 51,
            column: 173
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 30
          },
          end: {
            line: 51,
            column: 44
          }
        }, {
          start: {
            line: 51,
            column: 48
          },
          end: {
            line: 51,
            column: 81
          }
        }, {
          start: {
            line: 51,
            column: 85
          },
          end: {
            line: 51,
            column: 128
          }
        }, {
          start: {
            line: 51,
            column: 132
          },
          end: {
            line: 51,
            column: 173
          }
        }],
        line: 51
      },
      "1": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "2": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 59,
            column: 39
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 59,
            column: 39
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "3": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "4": {
        loc: {
          start: {
            line: 171,
            column: 22
          },
          end: {
            line: 171,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 171,
            column: 53
          },
          end: {
            line: 171,
            column: 59
          }
        }, {
          start: {
            line: 171,
            column: 62
          },
          end: {
            line: 171,
            column: 84
          }
        }],
        line: 171
      },
      "5": {
        loc: {
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 194,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 194,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "6": {
        loc: {
          start: {
            line: 229,
            column: 12
          },
          end: {
            line: 231,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 229,
            column: 12
          },
          end: {
            line: 231,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 229
      },
      "7": {
        loc: {
          start: {
            line: 262,
            column: 22
          },
          end: {
            line: 262,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 262,
            column: 22
          },
          end: {
            line: 262,
            column: 30
          }
        }, {
          start: {
            line: 262,
            column: 34
          },
          end: {
            line: 262,
            column: 36
          }
        }],
        line: 262
      },
      "8": {
        loc: {
          start: {
            line: 279,
            column: 22
          },
          end: {
            line: 279,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 279,
            column: 22
          },
          end: {
            line: 279,
            column: 42
          }
        }, {
          start: {
            line: 279,
            column: 46
          },
          end: {
            line: 279,
            column: 55
          }
        }, {
          start: {
            line: 279,
            column: 59
          },
          end: {
            line: 279,
            column: 70
          }
        }, {
          start: {
            line: 279,
            column: 74
          },
          end: {
            line: 279,
            column: 84
          }
        }, {
          start: {
            line: 279,
            column: 88
          },
          end: {
            line: 279,
            column: 102
          }
        }],
        line: 279
      },
      "9": {
        loc: {
          start: {
            line: 286,
            column: 24
          },
          end: {
            line: 286,
            column: 35
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 286,
            column: 33
          },
          end: {
            line: 286,
            column: 35
          }
        }],
        line: 286
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0
    },
    b: {
      "0": [0, 0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0, 0, 0],
      "9": [0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\encryption.ts"],
      sourcesContent: ["/**\n * Advanced Encryption Module for CRM Platform\n * Implements AES-256-GCM encryption with PBKDF2 key derivation\n * Provides industry-standard security for sensitive data\n */\n\n// Encryption configuration constants\nconst ENCRYPTION_CONFIG = {\n  algorithm: 'AES-GCM' as const,\n  keyLength: 256,\n  ivLength: 12, // 96 bits for GCM\n  saltLength: 32, // 256 bits\n  tagLength: 16, // 128 bits\n  iterations: 100000, // PBKDF2 iterations (OWASP recommended minimum)\n  keyDerivationAlgorithm: 'PBKDF2' as const,\n  hashAlgorithm: 'SHA-256' as const,\n} as const\n\n// Type definitions for encryption operations\ninterface EncryptionResult {\n  encryptedData: string\n  iv: string\n  salt: string\n  tag: string\n  version: string\n}\n\ninterface DecryptionInput {\n  encryptedData: string\n  iv: string\n  salt: string\n  tag: string\n  version?: string\n}\n\ninterface KeyDerivationResult {\n  key: CryptoKey\n  salt: Uint8Array\n}\n\n/**\n * Advanced Encryption Service Class\n * Provides secure encryption/decryption with proper key management\n */\nexport class AdvancedEncryption {\n  private readonly masterPassword: string\n  private readonly version = '1.0'\n\n  private isInitialized = false\n  private masterKey?: ArrayBuffer\n  private cryptoKey?: CryptoKey\n\n  constructor(masterPassword?: string) {\n    // Use environment variable or provided password\n    this.masterPassword = masterPassword || \n      process.env.ENCRYPTION_MASTER_KEY || \n      process.env.NEXT_PUBLIC_ENCRYPTION_FALLBACK || \n      'default-secure-key-change-in-production'\n    \n    if (this.masterPassword === 'default-secure-key-change-in-production') {\n      console.warn('\u26A0\uFE0F  Using default encryption key. Set ENCRYPTION_MASTER_KEY in production!')\n    }\n  }\n\n  /**\n   * Initialize the encryption system with key management\n   */\n  private async initialize(): Promise<void> {\n    if (this.isInitialized) return\n\n    try {\n      // Get or create master key with key management\n      const masterKeyHex = await this.getMasterKeyWithManagement()\n      this.masterKey = this.hexToArrayBuffer(masterKeyHex)\n      \n      // Import the key for use with Web Crypto API\n      this.cryptoKey = await crypto.subtle.importKey(\n        'raw',\n        this.masterKey,\n        { name: 'AES-GCM' },\n        false,\n        ['encrypt', 'decrypt']\n      )\n      \n      this.isInitialized = true\n      console.log('\uD83D\uDD10 Advanced encryption system initialized with key management')\n      \n      // Schedule periodic key rotation check\n      this.scheduleKeyRotationCheck()\n    } catch (error) {\n      console.error('Failed to initialize encryption system:', error)\n      throw new Error('Encryption initialization failed')\n    }\n  }\n\n  /**\n   * Get or create master key with management capabilities\n   */\n  private async getMasterKeyWithManagement(): Promise<string> {\n    // For now, derive from master password - in production this would use secure key storage\n    const encoder = new TextEncoder()\n    const data = encoder.encode(this.masterPassword)\n    const hashBuffer = await crypto.subtle.digest('SHA-256', data)\n    return this.arrayBufferToHex(hashBuffer)\n  }\n\n  /**\n   * Schedule periodic key rotation checks\n   */\n  private scheduleKeyRotationCheck(): void {\n    // Implementation would depend on your key rotation policy\n    console.log('Key rotation check scheduled')\n  }\n\n  /**\n   * Integrate with key management for automatic rotation\n   */\n  async rotateEncryptionKey(): Promise<void> {\n    try {\n      // Force re-initialization with new key\n      this.isInitialized = false\n      await this.initialize()\n      console.log('\uD83D\uDD04 Encryption key rotated successfully')\n    } catch (error) {\n      console.error('Failed to rotate encryption key:', error)\n      throw new Error('Key rotation failed')\n    }\n  }\n\n  /**\n   * Get encryption health status\n   */\n  getHealthStatus(): {\n    initialized: boolean\n    keyPresent: boolean\n    version: string\n  } {\n    return {\n      initialized: this.isInitialized,\n      keyPresent: !!this.cryptoKey,\n      version: this.version\n    }\n  }\n\n  /**\n   * Convert hex string to ArrayBuffer\n   */\n  private hexToArrayBuffer(hex: string): ArrayBuffer {\n    const bytes = new Uint8Array(hex.length / 2)\n    for (let i = 0; i < hex.length; i += 2) {\n      bytes[i / 2] = parseInt(hex.substr(i, 2), 16)\n    }\n    return bytes.buffer\n  }\n\n  /**\n   * Convert ArrayBuffer to hex string\n   */\n  private arrayBufferToHex(buffer: ArrayBuffer): string {\n    const bytes = new Uint8Array(buffer)\n    return Array.from(bytes, byte => byte.toString(16).padStart(2, '0')).join('')\n  }\n\n  /**\n   * Derives a cryptographic key from the master password using PBKDF2\n   */\n  private async deriveKey(salt: Uint8Array): Promise<CryptoKey> {\n    if (!crypto.subtle) {\n      throw new Error('Web Crypto API not available. Secure encryption requires HTTPS.')\n    }\n\n    // Import the master password as a key\n    const passwordKey = await crypto.subtle.importKey(\n      'raw',\n      new TextEncoder().encode(this.masterPassword),\n      { name: ENCRYPTION_CONFIG.keyDerivationAlgorithm },\n      false,\n      ['deriveKey']\n    )\n\n    // Derive the actual encryption key\n    return await crypto.subtle.deriveKey(\n      {\n        name: ENCRYPTION_CONFIG.keyDerivationAlgorithm,\n        salt: salt.buffer as ArrayBuffer,\n        iterations: ENCRYPTION_CONFIG.iterations,\n        hash: ENCRYPTION_CONFIG.hashAlgorithm,\n      },\n      passwordKey,\n      {\n        name: ENCRYPTION_CONFIG.algorithm,\n        length: ENCRYPTION_CONFIG.keyLength,\n      },\n      false,\n      ['encrypt', 'decrypt']\n    )\n  }\n\n  /**\n   * Generates a cryptographically secure random salt\n   */\n  private generateSalt(): Uint8Array {\n    return crypto.getRandomValues(new Uint8Array(ENCRYPTION_CONFIG.saltLength))\n  }\n\n  /**\n   * Generates a cryptographically secure random IV\n   */\n  private generateIV(): Uint8Array {\n    return crypto.getRandomValues(new Uint8Array(ENCRYPTION_CONFIG.ivLength))\n  }\n\n  /**\n   * Converts Uint8Array to base64 string for storage\n   */\n  private arrayBufferToBase64(buffer: ArrayBuffer | Uint8Array | ArrayBufferLike): string {\n    const bytes = buffer instanceof Uint8Array ? buffer : new Uint8Array(buffer as ArrayBuffer)\n    let binary = ''\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i])\n    }\n    return btoa(binary)\n  }\n\n  /**\n   * Converts base64 string back to Uint8Array\n   */\n  private base64ToArrayBuffer(base64: string): ArrayBuffer {\n    const binary = atob(base64)\n    const bytes = new Uint8Array(binary.length)\n    for (let i = 0; i < binary.length; i++) {\n      bytes[i] = binary.charCodeAt(i)\n    }\n    return bytes.buffer\n  }\n\n  /**\n   * Encrypts data using AES-256-GCM with PBKDF2 key derivation\n   */\n  async encrypt(plaintext: string): Promise<string> {\n    try {\n      if (!crypto.subtle) {\n        throw new Error('Web Crypto API not available')\n      }\n\n      // Generate random salt and IV\n      const salt = this.generateSalt()\n      const iv = this.generateIV()\n\n      // Derive encryption key\n      const key = await this.deriveKey(salt)\n\n      // Encrypt the data\n      const encodedPlaintext = new TextEncoder().encode(plaintext)\n      const encryptedBuffer = await crypto.subtle.encrypt(\n        {\n          name: ENCRYPTION_CONFIG.algorithm,\n          iv: iv.buffer as ArrayBuffer,\n        },\n        key,\n        encodedPlaintext\n      )\n\n      // Extract the encrypted data and authentication tag\n      const encryptedArray = new Uint8Array(encryptedBuffer)\n      const encryptedData = encryptedArray.slice(0, -ENCRYPTION_CONFIG.tagLength)\n      const tag = encryptedArray.slice(-ENCRYPTION_CONFIG.tagLength)\n\n      // Create result object\n      const result: EncryptionResult = {\n        encryptedData: this.arrayBufferToBase64(encryptedData.buffer),\n        iv: this.arrayBufferToBase64(iv.buffer),\n        salt: this.arrayBufferToBase64(salt.buffer),\n        tag: this.arrayBufferToBase64(tag.buffer),\n        version: this.version,\n      }\n\n      // Return as JSON string for storage\n      return JSON.stringify(result)\n    } catch (error) {\n      console.error('Encryption failed:', error)\n      throw new Error('Failed to encrypt data')\n    }\n  }\n\n  /**\n   * Decrypts data encrypted with AES-256-GCM\n   */\n  async decrypt(encryptedData: string): Promise<string> {\n    try {\n      if (!crypto.subtle) {\n        throw new Error('Web Crypto API not available')\n      }\n\n      // Parse the encrypted data\n      const data: DecryptionInput = JSON.parse(encryptedData)\n      \n      // Convert base64 strings back to ArrayBuffers\n      const salt = new Uint8Array(this.base64ToArrayBuffer(data.salt))\n      const iv = new Uint8Array(this.base64ToArrayBuffer(data.iv))\n      const encrypted = new Uint8Array(this.base64ToArrayBuffer(data.encryptedData))\n      const tag = new Uint8Array(this.base64ToArrayBuffer(data.tag))\n\n      // Derive the same key using the stored salt\n      const key = await this.deriveKey(salt)\n\n      // Combine encrypted data and tag for decryption\n      const encryptedWithTag = new Uint8Array(encrypted.length + tag.length)\n      encryptedWithTag.set(encrypted)\n      encryptedWithTag.set(tag, encrypted.length)\n\n      // Decrypt the data\n      const decryptedBuffer = await crypto.subtle.decrypt(\n        {\n          name: ENCRYPTION_CONFIG.algorithm,\n          iv: iv,\n        },\n        key,\n        encryptedWithTag\n      )\n\n      // Convert back to string\n      return new TextDecoder().decode(decryptedBuffer)\n    } catch (error) {\n      console.error('Decryption failed:', error)\n      throw new Error('Failed to decrypt data')\n    }\n  }\n\n  /**\n   * Encrypts data for API keys and tokens with additional metadata\n   */\n  async encryptApiKey(apiKey: string, metadata?: Record<string, any>): Promise<string> {\n    const dataToEncrypt = {\n      apiKey,\n      metadata: metadata || {},\n      timestamp: Date.now(),\n      keyType: 'api_key',\n    }\n    return await this.encrypt(JSON.stringify(dataToEncrypt))\n  }\n\n  /**\n   * Decrypts API keys and returns the key with metadata\n   */\n  async decryptApiKey(encryptedApiKey: string): Promise<{\n    apiKey: string\n    metadata: Record<string, any>\n    timestamp: number\n    keyType: string\n  }> {\n    const decryptedData = await this.decrypt(encryptedApiKey)\n    return JSON.parse(decryptedData)\n  }\n\n  /**\n   * Validates if data is properly encrypted (has correct structure)\n   */\n  isEncrypted(data: string): boolean {\n    try {\n      const parsed = JSON.parse(data)\n      return !!(\n        parsed.encryptedData &&\n        parsed.iv &&\n        parsed.salt &&\n        parsed.tag &&\n        parsed.version\n      )\n    } catch {\n      return false\n    }\n  }\n\n  /**\n   * Generates a secure random encryption key for key rotation\n   */\n  generateSecureKey(length: number = 32): string {\n    const array = crypto.getRandomValues(new Uint8Array(length))\n    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('')\n  }\n\n  /**\n   * Hashes sensitive data for comparison without storing plaintext\n   */\n  async hashSensitiveData(data: string): Promise<string> {\n    const encoder = new TextEncoder()\n    const dataBuffer = encoder.encode(data)\n    const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer)\n    return this.arrayBufferToBase64(hashBuffer)\n  }\n}\n\n// Create singleton instance\nexport const advancedEncryption = new AdvancedEncryption()\n\n// Export convenience functions for backward compatibility\nexport const encryptData = (data: string): Promise<string> => advancedEncryption.encrypt(data)\nexport const decryptData = (encryptedData: string): Promise<string> => advancedEncryption.decrypt(encryptedData)\nexport const encryptApiKey = (apiKey: string): Promise<string> => advancedEncryption.encryptApiKey(apiKey)\nexport const decryptApiKey = (encryptedApiKey: string): Promise<{\n  apiKey: string\n  metadata: Record<string, any>\n  timestamp: number\n  keyType: string\n}> => advancedEncryption.decryptApiKey(encryptedApiKey)\n\n// Export types for external use\nexport type { EncryptionResult, DecryptionInput, KeyDerivationResult }"],
      names: ["AdvancedEncryption", "advancedEncryption", "decryptApiKey", "decryptData", "encryptApiKey", "encryptData", "ENCRYPTION_CONFIG", "algorithm", "keyLength", "ivLength", "saltLength", "tagLength", "iterations", "keyDerivationAlgorithm", "hashAlgorithm", "masterPassword", "version", "isInitialized", "process", "env", "ENCRYPTION_MASTER_KEY", "NEXT_PUBLIC_ENCRYPTION_FALLBACK", "console", "warn", "initialize", "masterKeyHex", "getMasterKeyWithManagement", "masterKey", "hexToArrayBuffer", "cryptoKey", "crypto", "subtle", "importKey", "name", "log", "scheduleKeyRotationCheck", "error", "Error", "encoder", "TextEncoder", "data", "encode", "hashBuffer", "digest", "arrayBufferToHex", "rotateEncryptionKey", "getHealthStatus", "initialized", "keyPresent", "hex", "bytes", "Uint8Array", "length", "i", "parseInt", "substr", "buffer", "Array", "from", "byte", "toString", "padStart", "join", "deriveKey", "salt", "passwordKey", "hash", "generateSalt", "getRandomValues", "generateIV", "arrayBufferToBase64", "binary", "byteLength", "String", "fromCharCode", "btoa", "base64ToArrayBuffer", "base64", "atob", "charCodeAt", "encrypt", "plaintext", "iv", "key", "encodedPlaintext", "encryptedBuffer", "encryptedArray", "encryptedData", "slice", "tag", "result", "JSON", "stringify", "decrypt", "parse", "encrypted", "encryptedWithTag", "set", "decryptedBuffer", "TextDecoder", "decode", "apiKey", "metadata", "dataToEncrypt", "timestamp", "Date", "now", "keyType", "encryptedApiKey", "decryptedData", "isEncrypted", "parsed", "generateSecureKey", "array", "hashSensitiveData", "dataBuffer"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e30568d2410326e3f721b3dbd237f63bf4d6cd01"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_unkz90byx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_unkz90byx();
cov_unkz90byx().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_unkz90byx().f[0]++;
  cov_unkz90byx().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_unkz90byx().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_unkz90byx().s[3]++;
_export(exports, {
  get AdvancedEncryption() {
    /* istanbul ignore next */
    cov_unkz90byx().f[1]++;
    cov_unkz90byx().s[4]++;
    return AdvancedEncryption;
  },
  get advancedEncryption() {
    /* istanbul ignore next */
    cov_unkz90byx().f[2]++;
    cov_unkz90byx().s[5]++;
    return advancedEncryption;
  },
  get decryptApiKey() {
    /* istanbul ignore next */
    cov_unkz90byx().f[3]++;
    cov_unkz90byx().s[6]++;
    return decryptApiKey;
  },
  get decryptData() {
    /* istanbul ignore next */
    cov_unkz90byx().f[4]++;
    cov_unkz90byx().s[7]++;
    return decryptData;
  },
  get encryptApiKey() {
    /* istanbul ignore next */
    cov_unkz90byx().f[5]++;
    cov_unkz90byx().s[8]++;
    return encryptApiKey;
  },
  get encryptData() {
    /* istanbul ignore next */
    cov_unkz90byx().f[6]++;
    cov_unkz90byx().s[9]++;
    return encryptData;
  }
});
const ENCRYPTION_CONFIG =
/* istanbul ignore next */
(cov_unkz90byx().s[10]++, {
  algorithm: 'AES-GCM',
  keyLength: 256,
  ivLength: 12,
  saltLength: 32,
  tagLength: 16,
  iterations: 100000,
  keyDerivationAlgorithm: 'PBKDF2',
  hashAlgorithm: 'SHA-256'
});
class AdvancedEncryption {
  constructor(masterPassword) {
    /* istanbul ignore next */
    cov_unkz90byx().f[7]++;
    cov_unkz90byx().s[11]++;
    this.version = '1.0';
    /* istanbul ignore next */
    cov_unkz90byx().s[12]++;
    this.isInitialized = false;
    // Use environment variable or provided password
    /* istanbul ignore next */
    cov_unkz90byx().s[13]++;
    this.masterPassword =
    /* istanbul ignore next */
    (cov_unkz90byx().b[0][0]++, masterPassword) ||
    /* istanbul ignore next */
    (cov_unkz90byx().b[0][1]++, process.env.ENCRYPTION_MASTER_KEY) ||
    /* istanbul ignore next */
    (cov_unkz90byx().b[0][2]++, process.env.NEXT_PUBLIC_ENCRYPTION_FALLBACK) ||
    /* istanbul ignore next */
    (cov_unkz90byx().b[0][3]++, 'default-secure-key-change-in-production');
    /* istanbul ignore next */
    cov_unkz90byx().s[14]++;
    if (this.masterPassword === 'default-secure-key-change-in-production') {
      /* istanbul ignore next */
      cov_unkz90byx().b[1][0]++;
      cov_unkz90byx().s[15]++;
      console.warn('⚠️  Using default encryption key. Set ENCRYPTION_MASTER_KEY in production!');
    } else
    /* istanbul ignore next */
    {
      cov_unkz90byx().b[1][1]++;
    }
  }
  /**
  * Initialize the encryption system with key management
  */
  async initialize() {
    /* istanbul ignore next */
    cov_unkz90byx().f[8]++;
    cov_unkz90byx().s[16]++;
    if (this.isInitialized) {
      /* istanbul ignore next */
      cov_unkz90byx().b[2][0]++;
      cov_unkz90byx().s[17]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_unkz90byx().b[2][1]++;
    }
    cov_unkz90byx().s[18]++;
    try {
      // Get or create master key with key management
      const masterKeyHex =
      /* istanbul ignore next */
      (cov_unkz90byx().s[19]++, await this.getMasterKeyWithManagement());
      /* istanbul ignore next */
      cov_unkz90byx().s[20]++;
      this.masterKey = this.hexToArrayBuffer(masterKeyHex);
      // Import the key for use with Web Crypto API
      /* istanbul ignore next */
      cov_unkz90byx().s[21]++;
      this.cryptoKey = await crypto.subtle.importKey('raw', this.masterKey, {
        name: 'AES-GCM'
      }, false, ['encrypt', 'decrypt']);
      /* istanbul ignore next */
      cov_unkz90byx().s[22]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_unkz90byx().s[23]++;
      console.log('🔐 Advanced encryption system initialized with key management');
      // Schedule periodic key rotation check
      /* istanbul ignore next */
      cov_unkz90byx().s[24]++;
      this.scheduleKeyRotationCheck();
    } catch (error) {
      /* istanbul ignore next */
      cov_unkz90byx().s[25]++;
      console.error('Failed to initialize encryption system:', error);
      /* istanbul ignore next */
      cov_unkz90byx().s[26]++;
      throw new Error('Encryption initialization failed');
    }
  }
  /**
  * Get or create master key with management capabilities
  */
  async getMasterKeyWithManagement() {
    /* istanbul ignore next */
    cov_unkz90byx().f[9]++;
    // For now, derive from master password - in production this would use secure key storage
    const encoder =
    /* istanbul ignore next */
    (cov_unkz90byx().s[27]++, new TextEncoder());
    const data =
    /* istanbul ignore next */
    (cov_unkz90byx().s[28]++, encoder.encode(this.masterPassword));
    const hashBuffer =
    /* istanbul ignore next */
    (cov_unkz90byx().s[29]++, await crypto.subtle.digest('SHA-256', data));
    /* istanbul ignore next */
    cov_unkz90byx().s[30]++;
    return this.arrayBufferToHex(hashBuffer);
  }
  /**
  * Schedule periodic key rotation checks
  */
  scheduleKeyRotationCheck() {
    /* istanbul ignore next */
    cov_unkz90byx().f[10]++;
    cov_unkz90byx().s[31]++;
    // Implementation would depend on your key rotation policy
    console.log('Key rotation check scheduled');
  }
  /**
  * Integrate with key management for automatic rotation
  */
  async rotateEncryptionKey() {
    /* istanbul ignore next */
    cov_unkz90byx().f[11]++;
    cov_unkz90byx().s[32]++;
    try {
      /* istanbul ignore next */
      cov_unkz90byx().s[33]++;
      // Force re-initialization with new key
      this.isInitialized = false;
      /* istanbul ignore next */
      cov_unkz90byx().s[34]++;
      await this.initialize();
      /* istanbul ignore next */
      cov_unkz90byx().s[35]++;
      console.log('🔄 Encryption key rotated successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_unkz90byx().s[36]++;
      console.error('Failed to rotate encryption key:', error);
      /* istanbul ignore next */
      cov_unkz90byx().s[37]++;
      throw new Error('Key rotation failed');
    }
  }
  /**
  * Get encryption health status
  */
  getHealthStatus() {
    /* istanbul ignore next */
    cov_unkz90byx().f[12]++;
    cov_unkz90byx().s[38]++;
    return {
      initialized: this.isInitialized,
      keyPresent: !!this.cryptoKey,
      version: this.version
    };
  }
  /**
  * Convert hex string to ArrayBuffer
  */
  hexToArrayBuffer(hex) {
    /* istanbul ignore next */
    cov_unkz90byx().f[13]++;
    const bytes =
    /* istanbul ignore next */
    (cov_unkz90byx().s[39]++, new Uint8Array(hex.length / 2));
    /* istanbul ignore next */
    cov_unkz90byx().s[40]++;
    for (let i =
    /* istanbul ignore next */
    (cov_unkz90byx().s[41]++, 0); i < hex.length; i += 2) {
      /* istanbul ignore next */
      cov_unkz90byx().s[42]++;
      bytes[i / 2] = parseInt(hex.substr(i, 2), 16);
    }
    /* istanbul ignore next */
    cov_unkz90byx().s[43]++;
    return bytes.buffer;
  }
  /**
  * Convert ArrayBuffer to hex string
  */
  arrayBufferToHex(buffer) {
    /* istanbul ignore next */
    cov_unkz90byx().f[14]++;
    const bytes =
    /* istanbul ignore next */
    (cov_unkz90byx().s[44]++, new Uint8Array(buffer));
    /* istanbul ignore next */
    cov_unkz90byx().s[45]++;
    return Array.from(bytes, byte => {
      /* istanbul ignore next */
      cov_unkz90byx().f[15]++;
      cov_unkz90byx().s[46]++;
      return byte.toString(16).padStart(2, '0');
    }).join('');
  }
  /**
  * Derives a cryptographic key from the master password using PBKDF2
  */
  async deriveKey(salt) {
    /* istanbul ignore next */
    cov_unkz90byx().f[16]++;
    cov_unkz90byx().s[47]++;
    if (!crypto.subtle) {
      /* istanbul ignore next */
      cov_unkz90byx().b[3][0]++;
      cov_unkz90byx().s[48]++;
      throw new Error('Web Crypto API not available. Secure encryption requires HTTPS.');
    } else
    /* istanbul ignore next */
    {
      cov_unkz90byx().b[3][1]++;
    }
    // Import the master password as a key
    const passwordKey =
    /* istanbul ignore next */
    (cov_unkz90byx().s[49]++, await crypto.subtle.importKey('raw', new TextEncoder().encode(this.masterPassword), {
      name: ENCRYPTION_CONFIG.keyDerivationAlgorithm
    }, false, ['deriveKey']));
    // Derive the actual encryption key
    /* istanbul ignore next */
    cov_unkz90byx().s[50]++;
    return await crypto.subtle.deriveKey({
      name: ENCRYPTION_CONFIG.keyDerivationAlgorithm,
      salt: salt.buffer,
      iterations: ENCRYPTION_CONFIG.iterations,
      hash: ENCRYPTION_CONFIG.hashAlgorithm
    }, passwordKey, {
      name: ENCRYPTION_CONFIG.algorithm,
      length: ENCRYPTION_CONFIG.keyLength
    }, false, ['encrypt', 'decrypt']);
  }
  /**
  * Generates a cryptographically secure random salt
  */
  generateSalt() {
    /* istanbul ignore next */
    cov_unkz90byx().f[17]++;
    cov_unkz90byx().s[51]++;
    return crypto.getRandomValues(new Uint8Array(ENCRYPTION_CONFIG.saltLength));
  }
  /**
  * Generates a cryptographically secure random IV
  */
  generateIV() {
    /* istanbul ignore next */
    cov_unkz90byx().f[18]++;
    cov_unkz90byx().s[52]++;
    return crypto.getRandomValues(new Uint8Array(ENCRYPTION_CONFIG.ivLength));
  }
  /**
  * Converts Uint8Array to base64 string for storage
  */
  arrayBufferToBase64(buffer) {
    /* istanbul ignore next */
    cov_unkz90byx().f[19]++;
    const bytes =
    /* istanbul ignore next */
    (cov_unkz90byx().s[53]++, buffer instanceof Uint8Array ?
    /* istanbul ignore next */
    (cov_unkz90byx().b[4][0]++, buffer) :
    /* istanbul ignore next */
    (cov_unkz90byx().b[4][1]++, new Uint8Array(buffer)));
    let binary =
    /* istanbul ignore next */
    (cov_unkz90byx().s[54]++, '');
    /* istanbul ignore next */
    cov_unkz90byx().s[55]++;
    for (let i =
    /* istanbul ignore next */
    (cov_unkz90byx().s[56]++, 0); i < bytes.byteLength; i++) {
      /* istanbul ignore next */
      cov_unkz90byx().s[57]++;
      binary += String.fromCharCode(bytes[i]);
    }
    /* istanbul ignore next */
    cov_unkz90byx().s[58]++;
    return btoa(binary);
  }
  /**
  * Converts base64 string back to Uint8Array
  */
  base64ToArrayBuffer(base64) {
    /* istanbul ignore next */
    cov_unkz90byx().f[20]++;
    const binary =
    /* istanbul ignore next */
    (cov_unkz90byx().s[59]++, atob(base64));
    const bytes =
    /* istanbul ignore next */
    (cov_unkz90byx().s[60]++, new Uint8Array(binary.length));
    /* istanbul ignore next */
    cov_unkz90byx().s[61]++;
    for (let i =
    /* istanbul ignore next */
    (cov_unkz90byx().s[62]++, 0); i < binary.length; i++) {
      /* istanbul ignore next */
      cov_unkz90byx().s[63]++;
      bytes[i] = binary.charCodeAt(i);
    }
    /* istanbul ignore next */
    cov_unkz90byx().s[64]++;
    return bytes.buffer;
  }
  /**
  * Encrypts data using AES-256-GCM with PBKDF2 key derivation
  */
  async encrypt(plaintext) {
    /* istanbul ignore next */
    cov_unkz90byx().f[21]++;
    cov_unkz90byx().s[65]++;
    try {
      /* istanbul ignore next */
      cov_unkz90byx().s[66]++;
      if (!crypto.subtle) {
        /* istanbul ignore next */
        cov_unkz90byx().b[5][0]++;
        cov_unkz90byx().s[67]++;
        throw new Error('Web Crypto API not available');
      } else
      /* istanbul ignore next */
      {
        cov_unkz90byx().b[5][1]++;
      }
      // Generate random salt and IV
      const salt =
      /* istanbul ignore next */
      (cov_unkz90byx().s[68]++, this.generateSalt());
      const iv =
      /* istanbul ignore next */
      (cov_unkz90byx().s[69]++, this.generateIV());
      // Derive encryption key
      const key =
      /* istanbul ignore next */
      (cov_unkz90byx().s[70]++, await this.deriveKey(salt));
      // Encrypt the data
      const encodedPlaintext =
      /* istanbul ignore next */
      (cov_unkz90byx().s[71]++, new TextEncoder().encode(plaintext));
      const encryptedBuffer =
      /* istanbul ignore next */
      (cov_unkz90byx().s[72]++, await crypto.subtle.encrypt({
        name: ENCRYPTION_CONFIG.algorithm,
        iv: iv.buffer
      }, key, encodedPlaintext));
      // Extract the encrypted data and authentication tag
      const encryptedArray =
      /* istanbul ignore next */
      (cov_unkz90byx().s[73]++, new Uint8Array(encryptedBuffer));
      const encryptedData =
      /* istanbul ignore next */
      (cov_unkz90byx().s[74]++, encryptedArray.slice(0, -ENCRYPTION_CONFIG.tagLength));
      const tag =
      /* istanbul ignore next */
      (cov_unkz90byx().s[75]++, encryptedArray.slice(-ENCRYPTION_CONFIG.tagLength));
      // Create result object
      const result =
      /* istanbul ignore next */
      (cov_unkz90byx().s[76]++, {
        encryptedData: this.arrayBufferToBase64(encryptedData.buffer),
        iv: this.arrayBufferToBase64(iv.buffer),
        salt: this.arrayBufferToBase64(salt.buffer),
        tag: this.arrayBufferToBase64(tag.buffer),
        version: this.version
      });
      // Return as JSON string for storage
      /* istanbul ignore next */
      cov_unkz90byx().s[77]++;
      return JSON.stringify(result);
    } catch (error) {
      /* istanbul ignore next */
      cov_unkz90byx().s[78]++;
      console.error('Encryption failed:', error);
      /* istanbul ignore next */
      cov_unkz90byx().s[79]++;
      throw new Error('Failed to encrypt data');
    }
  }
  /**
  * Decrypts data encrypted with AES-256-GCM
  */
  async decrypt(encryptedData) {
    /* istanbul ignore next */
    cov_unkz90byx().f[22]++;
    cov_unkz90byx().s[80]++;
    try {
      /* istanbul ignore next */
      cov_unkz90byx().s[81]++;
      if (!crypto.subtle) {
        /* istanbul ignore next */
        cov_unkz90byx().b[6][0]++;
        cov_unkz90byx().s[82]++;
        throw new Error('Web Crypto API not available');
      } else
      /* istanbul ignore next */
      {
        cov_unkz90byx().b[6][1]++;
      }
      // Parse the encrypted data
      const data =
      /* istanbul ignore next */
      (cov_unkz90byx().s[83]++, JSON.parse(encryptedData));
      // Convert base64 strings back to ArrayBuffers
      const salt =
      /* istanbul ignore next */
      (cov_unkz90byx().s[84]++, new Uint8Array(this.base64ToArrayBuffer(data.salt)));
      const iv =
      /* istanbul ignore next */
      (cov_unkz90byx().s[85]++, new Uint8Array(this.base64ToArrayBuffer(data.iv)));
      const encrypted =
      /* istanbul ignore next */
      (cov_unkz90byx().s[86]++, new Uint8Array(this.base64ToArrayBuffer(data.encryptedData)));
      const tag =
      /* istanbul ignore next */
      (cov_unkz90byx().s[87]++, new Uint8Array(this.base64ToArrayBuffer(data.tag)));
      // Derive the same key using the stored salt
      const key =
      /* istanbul ignore next */
      (cov_unkz90byx().s[88]++, await this.deriveKey(salt));
      // Combine encrypted data and tag for decryption
      const encryptedWithTag =
      /* istanbul ignore next */
      (cov_unkz90byx().s[89]++, new Uint8Array(encrypted.length + tag.length));
      /* istanbul ignore next */
      cov_unkz90byx().s[90]++;
      encryptedWithTag.set(encrypted);
      /* istanbul ignore next */
      cov_unkz90byx().s[91]++;
      encryptedWithTag.set(tag, encrypted.length);
      // Decrypt the data
      const decryptedBuffer =
      /* istanbul ignore next */
      (cov_unkz90byx().s[92]++, await crypto.subtle.decrypt({
        name: ENCRYPTION_CONFIG.algorithm,
        iv: iv
      }, key, encryptedWithTag));
      // Convert back to string
      /* istanbul ignore next */
      cov_unkz90byx().s[93]++;
      return new TextDecoder().decode(decryptedBuffer);
    } catch (error) {
      /* istanbul ignore next */
      cov_unkz90byx().s[94]++;
      console.error('Decryption failed:', error);
      /* istanbul ignore next */
      cov_unkz90byx().s[95]++;
      throw new Error('Failed to decrypt data');
    }
  }
  /**
  * Encrypts data for API keys and tokens with additional metadata
  */
  async encryptApiKey(apiKey, metadata) {
    /* istanbul ignore next */
    cov_unkz90byx().f[23]++;
    const dataToEncrypt =
    /* istanbul ignore next */
    (cov_unkz90byx().s[96]++, {
      apiKey,
      metadata:
      /* istanbul ignore next */
      (cov_unkz90byx().b[7][0]++, metadata) ||
      /* istanbul ignore next */
      (cov_unkz90byx().b[7][1]++, {}),
      timestamp: Date.now(),
      keyType: 'api_key'
    });
    /* istanbul ignore next */
    cov_unkz90byx().s[97]++;
    return await this.encrypt(JSON.stringify(dataToEncrypt));
  }
  /**
  * Decrypts API keys and returns the key with metadata
  */
  async decryptApiKey(encryptedApiKey) {
    /* istanbul ignore next */
    cov_unkz90byx().f[24]++;
    const decryptedData =
    /* istanbul ignore next */
    (cov_unkz90byx().s[98]++, await this.decrypt(encryptedApiKey));
    /* istanbul ignore next */
    cov_unkz90byx().s[99]++;
    return JSON.parse(decryptedData);
  }
  /**
  * Validates if data is properly encrypted (has correct structure)
  */
  isEncrypted(data) {
    /* istanbul ignore next */
    cov_unkz90byx().f[25]++;
    cov_unkz90byx().s[100]++;
    try {
      const parsed =
      /* istanbul ignore next */
      (cov_unkz90byx().s[101]++, JSON.parse(data));
      /* istanbul ignore next */
      cov_unkz90byx().s[102]++;
      return !!(
      /* istanbul ignore next */
      (cov_unkz90byx().b[8][0]++, parsed.encryptedData) &&
      /* istanbul ignore next */
      (cov_unkz90byx().b[8][1]++, parsed.iv) &&
      /* istanbul ignore next */
      (cov_unkz90byx().b[8][2]++, parsed.salt) &&
      /* istanbul ignore next */
      (cov_unkz90byx().b[8][3]++, parsed.tag) &&
      /* istanbul ignore next */
      (cov_unkz90byx().b[8][4]++, parsed.version));
    } catch {
      /* istanbul ignore next */
      cov_unkz90byx().s[103]++;
      return false;
    }
  }
  /**
  * Generates a secure random encryption key for key rotation
  */
  generateSecureKey(length =
  /* istanbul ignore next */
  (cov_unkz90byx().b[9][0]++, 32)) {
    /* istanbul ignore next */
    cov_unkz90byx().f[26]++;
    const array =
    /* istanbul ignore next */
    (cov_unkz90byx().s[104]++, crypto.getRandomValues(new Uint8Array(length)));
    /* istanbul ignore next */
    cov_unkz90byx().s[105]++;
    return Array.from(array, byte => {
      /* istanbul ignore next */
      cov_unkz90byx().f[27]++;
      cov_unkz90byx().s[106]++;
      return byte.toString(16).padStart(2, '0');
    }).join('');
  }
  /**
  * Hashes sensitive data for comparison without storing plaintext
  */
  async hashSensitiveData(data) {
    /* istanbul ignore next */
    cov_unkz90byx().f[28]++;
    const encoder =
    /* istanbul ignore next */
    (cov_unkz90byx().s[107]++, new TextEncoder());
    const dataBuffer =
    /* istanbul ignore next */
    (cov_unkz90byx().s[108]++, encoder.encode(data));
    const hashBuffer =
    /* istanbul ignore next */
    (cov_unkz90byx().s[109]++, await crypto.subtle.digest('SHA-256', dataBuffer));
    /* istanbul ignore next */
    cov_unkz90byx().s[110]++;
    return this.arrayBufferToBase64(hashBuffer);
  }
}
const advancedEncryption =
/* istanbul ignore next */
(cov_unkz90byx().s[111]++, new AdvancedEncryption());
/* istanbul ignore next */
cov_unkz90byx().s[112]++;
const encryptData = data => {
  /* istanbul ignore next */
  cov_unkz90byx().f[29]++;
  cov_unkz90byx().s[113]++;
  return advancedEncryption.encrypt(data);
};
/* istanbul ignore next */
cov_unkz90byx().s[114]++;
const decryptData = encryptedData => {
  /* istanbul ignore next */
  cov_unkz90byx().f[30]++;
  cov_unkz90byx().s[115]++;
  return advancedEncryption.decrypt(encryptedData);
};
/* istanbul ignore next */
cov_unkz90byx().s[116]++;
const encryptApiKey = apiKey => {
  /* istanbul ignore next */
  cov_unkz90byx().f[31]++;
  cov_unkz90byx().s[117]++;
  return advancedEncryption.encryptApiKey(apiKey);
};
/* istanbul ignore next */
cov_unkz90byx().s[118]++;
const decryptApiKey = encryptedApiKey => {
  /* istanbul ignore next */
  cov_unkz90byx().f[32]++;
  cov_unkz90byx().s[119]++;
  return advancedEncryption.decryptApiKey(encryptedApiKey);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,