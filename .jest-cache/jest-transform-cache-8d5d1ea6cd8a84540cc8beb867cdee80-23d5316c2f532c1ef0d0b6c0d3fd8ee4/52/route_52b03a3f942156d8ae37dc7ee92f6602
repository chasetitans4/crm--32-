a29f14a55db6a84da160277c02aa1ce1
"use strict";

/* istanbul ignore next */
function cov_6823453kr() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\app\\api\\dashboards\\[userId]\\route.ts";
  var hash = "eb7355cf7e37e3d02c23cf2a7823693164ceff27";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\app\\api\\dashboards\\[userId]\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 21,
          column: 23
        },
        end: {
          line: 21,
          column: 25
        }
      },
      "8": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 38,
          column: 5
        }
      },
      "9": {
        start: {
          line: 24,
          column: 27
        },
        end: {
          line: 24,
          column: 39
        }
      },
      "10": {
        start: {
          line: 25,
          column: 23
        },
        end: {
          line: 25,
          column: 51
        }
      },
      "11": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 29,
          column: 11
        }
      },
      "12": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 65
        }
      },
      "13": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 37,
          column: 11
        }
      },
      "14": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 57,
          column: 5
        }
      },
      "15": {
        start: {
          line: 42,
          column: 27
        },
        end: {
          line: 42,
          column: 39
        }
      },
      "16": {
        start: {
          line: 43,
          column: 21
        },
        end: {
          line: 43,
          column: 41
        }
      },
      "17": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 38
        }
      },
      "18": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 48,
          column: 11
        }
      },
      "19": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 63
        }
      },
      "20": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 56,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 22,
            column: 15
          },
          end: {
            line: 22,
            column: 18
          }
        },
        loc: {
          start: {
            line: 22,
            column: 40
          },
          end: {
            line: 39,
            column: 1
          }
        },
        line: 22
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 40,
            column: 15
          },
          end: {
            line: 40,
            column: 19
          }
        },
        loc: {
          start: {
            line: 40,
            column: 41
          },
          end: {
            line: 58,
            column: 1
          }
        },
        line: 40
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 23
          },
          end: {
            line: 25,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 23
          },
          end: {
            line: 25,
            column: 45
          }
        }, {
          start: {
            line: 25,
            column: 49
          },
          end: {
            line: 25,
            column: 51
          }
        }],
        line: 25
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\app\\api\\dashboards\\[userId]\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\n\n// Mock dashboard configs (in a real app, use database)\nconst mockDashboards: Record<string, any> = {};\n\n// GET /api/dashboards/[userId]\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ userId: string }> }\n) {\n  try {\n    const { userId } = await params;\n    const config = mockDashboards[userId] || {};\n    return NextResponse.json({ success: true, data: config });\n  } catch (error) {\n    console.error('Error fetching dashboard config:', error);\n    return NextResponse.json({ success: false, error: 'Failed to fetch config' }, { status: 500 });\n  }\n}\n\n// POST /api/dashboards/[userId]\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ userId: string }> }\n) {\n  try {\n    const { userId } = await params;\n    const body = await request.json();\n    mockDashboards[userId] = body;\n    return NextResponse.json({ success: true, data: body });\n  } catch (error) {\n    console.error('Error saving dashboard config:', error);\n    return NextResponse.json({ success: false, error: 'Failed to save config' }, { status: 500 });\n  }\n}"],
      names: ["GET", "POST", "mockDashboards", "request", "params", "userId", "config", "NextResponse", "json", "success", "data", "error", "console", "status", "body"],
      mappings: ";;;;;;;;;;;QAMsBA;eAAAA;;QAeAC;eAAAA;;;wBArBoB;AAE1C,uDAAuD;AACvD,MAAMC,iBAAsC,CAAC;AAGtC,eAAeF,IACpBG,OAAoB,EACpB,EAAEC,MAAM,EAA2C;IAEnD,IAAI;QACF,MAAM,EAAEC,MAAM,EAAE,GAAG,MAAMD;QACzB,MAAME,SAASJ,cAAc,CAACG,OAAO,IAAI,CAAC;QAC1C,OAAOE,oBAAY,CAACC,IAAI,CAAC;YAAEC,SAAS;YAAMC,MAAMJ;QAAO;IACzD,EAAE,OAAOK,OAAO;QACdC,QAAQD,KAAK,CAAC,oCAAoCA;QAClD,OAAOJ,oBAAY,CAACC,IAAI,CAAC;YAAEC,SAAS;YAAOE,OAAO;QAAyB,GAAG;YAAEE,QAAQ;QAAI;IAC9F;AACF;AAGO,eAAeZ,KACpBE,OAAoB,EACpB,EAAEC,MAAM,EAA2C;IAEnD,IAAI;QACF,MAAM,EAAEC,MAAM,EAAE,GAAG,MAAMD;QACzB,MAAMU,OAAO,MAAMX,QAAQK,IAAI;QAC/BN,cAAc,CAACG,OAAO,GAAGS;QACzB,OAAOP,oBAAY,CAACC,IAAI,CAAC;YAAEC,SAAS;YAAMC,MAAMI;QAAK;IACvD,EAAE,OAAOH,OAAO;QACdC,QAAQD,KAAK,CAAC,kCAAkCA;QAChD,OAAOJ,oBAAY,CAACC,IAAI,CAAC;YAAEC,SAAS;YAAOE,OAAO;QAAwB,GAAG;YAAEE,QAAQ;QAAI;IAC7F;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "eb7355cf7e37e3d02c23cf2a7823693164ceff27"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_6823453kr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_6823453kr();
cov_6823453kr().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_6823453kr().f[0]++;
  cov_6823453kr().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_6823453kr().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_6823453kr().s[3]++;
_export(exports, {
  get GET() {
    /* istanbul ignore next */
    cov_6823453kr().f[1]++;
    cov_6823453kr().s[4]++;
    return GET;
  },
  get POST() {
    /* istanbul ignore next */
    cov_6823453kr().f[2]++;
    cov_6823453kr().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_6823453kr().s[6]++, require("next/server"));
// Mock dashboard configs (in a real app, use database)
const mockDashboards =
/* istanbul ignore next */
(cov_6823453kr().s[7]++, {});
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_6823453kr().f[3]++;
  cov_6823453kr().s[8]++;
  try {
    const {
      userId
    } =
    /* istanbul ignore next */
    (cov_6823453kr().s[9]++, await params);
    const config =
    /* istanbul ignore next */
    (cov_6823453kr().s[10]++,
    /* istanbul ignore next */
    (cov_6823453kr().b[0][0]++, mockDashboards[userId]) ||
    /* istanbul ignore next */
    (cov_6823453kr().b[0][1]++, {}));
    /* istanbul ignore next */
    cov_6823453kr().s[11]++;
    return _server.NextResponse.json({
      success: true,
      data: config
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_6823453kr().s[12]++;
    console.error('Error fetching dashboard config:', error);
    /* istanbul ignore next */
    cov_6823453kr().s[13]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Failed to fetch config'
    }, {
      status: 500
    });
  }
}
async function POST(request, {
  params
}) {
  /* istanbul ignore next */
  cov_6823453kr().f[4]++;
  cov_6823453kr().s[14]++;
  try {
    const {
      userId
    } =
    /* istanbul ignore next */
    (cov_6823453kr().s[15]++, await params);
    const body =
    /* istanbul ignore next */
    (cov_6823453kr().s[16]++, await request.json());
    /* istanbul ignore next */
    cov_6823453kr().s[17]++;
    mockDashboards[userId] = body;
    /* istanbul ignore next */
    cov_6823453kr().s[18]++;
    return _server.NextResponse.json({
      success: true,
      data: body
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_6823453kr().s[19]++;
    console.error('Error saving dashboard config:', error);
    /* istanbul ignore next */
    cov_6823453kr().s[20]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Failed to save config'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHRVQiLCJjb3ZfNjgyMzQ1M2tyIiwiZiIsInMiLCJQT1NUIiwibW9ja0Rhc2hib2FyZHMiLCJyZXF1ZXN0IiwicGFyYW1zIiwidXNlcklkIiwiY29uZmlnIiwiYiIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwic3VjY2VzcyIsImRhdGEiLCJlcnJvciIsImNvbnNvbGUiLCJzdGF0dXMiLCJib2R5Il0sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxjaGFzZVxcRG93bmxvYWRzXFxjcm0gKDMyKVxcc3JjXFxhcHBcXGFwaVxcZGFzaGJvYXJkc1xcW3VzZXJJZF1cXHJvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5cbi8vIE1vY2sgZGFzaGJvYXJkIGNvbmZpZ3MgKGluIGEgcmVhbCBhcHAsIHVzZSBkYXRhYmFzZSlcbmNvbnN0IG1vY2tEYXNoYm9hcmRzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XG5cbi8vIEdFVCAvYXBpL2Rhc2hib2FyZHMvW3VzZXJJZF1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQoXG4gIHJlcXVlc3Q6IE5leHRSZXF1ZXN0LFxuICB7IHBhcmFtcyB9OiB7IHBhcmFtczogUHJvbWlzZTx7IHVzZXJJZDogc3RyaW5nIH0+IH1cbikge1xuICB0cnkge1xuICAgIGNvbnN0IHsgdXNlcklkIH0gPSBhd2FpdCBwYXJhbXM7XG4gICAgY29uc3QgY29uZmlnID0gbW9ja0Rhc2hib2FyZHNbdXNlcklkXSB8fCB7fTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBzdWNjZXNzOiB0cnVlLCBkYXRhOiBjb25maWcgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgZGFzaGJvYXJkIGNvbmZpZzonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnRmFpbGVkIHRvIGZldGNoIGNvbmZpZycgfSwgeyBzdGF0dXM6IDUwMCB9KTtcbiAgfVxufVxuXG4vLyBQT1NUIC9hcGkvZGFzaGJvYXJkcy9bdXNlcklkXVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QoXG4gIHJlcXVlc3Q6IE5leHRSZXF1ZXN0LFxuICB7IHBhcmFtcyB9OiB7IHBhcmFtczogUHJvbWlzZTx7IHVzZXJJZDogc3RyaW5nIH0+IH1cbikge1xuICB0cnkge1xuICAgIGNvbnN0IHsgdXNlcklkIH0gPSBhd2FpdCBwYXJhbXM7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuICAgIG1vY2tEYXNoYm9hcmRzW3VzZXJJZF0gPSBib2R5O1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IHN1Y2Nlc3M6IHRydWUsIGRhdGE6IGJvZHkgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3Igc2F2aW5nIGRhc2hib2FyZCBjb25maWc6JywgZXJyb3IpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ0ZhaWxlZCB0byBzYXZlIGNvbmZpZycgfSwgeyBzdGF0dXM6IDUwMCB9KTtcbiAgfVxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01BTXNCQSxJQUFBO0lBQUE7SUFBQUMsYUFBQSxHQUFBQyxDQUFBO0lBQUFELGFBQUEsR0FBQUUsQ0FBQTtXQUFBSCxHQUFBOztNQWVBSSxLQUFBO0lBQUE7SUFBQUgsYUFBQSxHQUFBQyxDQUFBO0lBQUFELGFBQUEsR0FBQUUsQ0FBQTtXQUFBQyxJQUFBOzs7OztpQ0FyQm9CO0FBRTFDO0FBQ0EsTUFBTUMsY0FBQTtBQUFBO0FBQUEsQ0FBQUosYUFBQSxHQUFBRSxDQUFBLE9BQXNDLENBQUM7QUFHdEMsZUFBZUgsSUFDcEJNLE9BQW9CLEVBQ3BCO0VBQUVDO0FBQU0sQ0FBMkM7RUFBQTtFQUFBTixhQUFBLEdBQUFDLENBQUE7RUFBQUQsYUFBQSxHQUFBRSxDQUFBO0VBRW5ELElBQUk7SUFDRixNQUFNO01BQUVLO0lBQU0sQ0FBRTtJQUFBO0lBQUEsQ0FBQVAsYUFBQSxHQUFBRSxDQUFBLE9BQUcsTUFBTUksTUFBQTtJQUN6QixNQUFNRSxNQUFBO0lBQUE7SUFBQSxDQUFBUixhQUFBLEdBQUFFLENBQUE7SUFBUztJQUFBLENBQUFGLGFBQUEsR0FBQVMsQ0FBQSxVQUFBTCxjQUFjLENBQUNHLE1BQUEsQ0FBTztJQUFBO0lBQUEsQ0FBQVAsYUFBQSxHQUFBUyxDQUFBLFVBQUksQ0FBQztJQUFBO0lBQUFULGFBQUEsR0FBQUUsQ0FBQTtJQUMxQyxPQUFPUSxPQUFBLENBQUFDLFlBQVksQ0FBQ0MsSUFBSSxDQUFDO01BQUVDLE9BQUEsRUFBUztNQUFNQyxJQUFBLEVBQU1OO0lBQU87RUFDekQsRUFBRSxPQUFPTyxLQUFBLEVBQU87SUFBQTtJQUFBZixhQUFBLEdBQUFFLENBQUE7SUFDZGMsT0FBQSxDQUFRRCxLQUFLLENBQUMsb0NBQW9DQSxLQUFBO0lBQUE7SUFBQWYsYUFBQSxHQUFBRSxDQUFBO0lBQ2xELE9BQU9RLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQUM7TUFBRUMsT0FBQSxFQUFTO01BQU9FLEtBQUEsRUFBTztJQUF5QixHQUFHO01BQUVFLE1BQUEsRUFBUTtJQUFJO0VBQzlGO0FBQ0Y7QUFHTyxlQUFlZCxLQUNwQkUsT0FBb0IsRUFDcEI7RUFBRUM7QUFBTSxDQUEyQztFQUFBO0VBQUFOLGFBQUEsR0FBQUMsQ0FBQTtFQUFBRCxhQUFBLEdBQUFFLENBQUE7RUFFbkQsSUFBSTtJQUNGLE1BQU07TUFBRUs7SUFBTSxDQUFFO0lBQUE7SUFBQSxDQUFBUCxhQUFBLEdBQUFFLENBQUEsUUFBRyxNQUFNSSxNQUFBO0lBQ3pCLE1BQU1ZLElBQUE7SUFBQTtJQUFBLENBQUFsQixhQUFBLEdBQUFFLENBQUEsUUFBTyxNQUFNRyxPQUFBLENBQVFPLElBQUk7SUFBQTtJQUFBWixhQUFBLEdBQUFFLENBQUE7SUFDL0JFLGNBQWMsQ0FBQ0csTUFBQSxDQUFPLEdBQUdXLElBQUE7SUFBQTtJQUFBbEIsYUFBQSxHQUFBRSxDQUFBO0lBQ3pCLE9BQU9RLE9BQUEsQ0FBQUMsWUFBWSxDQUFDQyxJQUFJLENBQUM7TUFBRUMsT0FBQSxFQUFTO01BQU1DLElBQUEsRUFBTUk7SUFBSztFQUN2RCxFQUFFLE9BQU9ILEtBQUEsRUFBTztJQUFBO0lBQUFmLGFBQUEsR0FBQUUsQ0FBQTtJQUNkYyxPQUFBLENBQVFELEtBQUssQ0FBQyxrQ0FBa0NBLEtBQUE7SUFBQTtJQUFBZixhQUFBLEdBQUFFLENBQUE7SUFDaEQsT0FBT1EsT0FBQSxDQUFBQyxZQUFZLENBQUNDLElBQUksQ0FBQztNQUFFQyxPQUFBLEVBQVM7TUFBT0UsS0FBQSxFQUFPO0lBQXdCLEdBQUc7TUFBRUUsTUFBQSxFQUFRO0lBQUk7RUFDN0Y7QUFDRiIsImlnbm9yZUxpc3QiOltdfQ==