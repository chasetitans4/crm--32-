e4435bd4aaa9627b3b2bfea866d1f72e
"use strict";

/* istanbul ignore next */
function cov_1ei6gptgc4() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\persistenceService.ts";
  var hash = "29f4d58ef38772fd1ef12deff1619fbffe149ce3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\persistenceService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 24
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 34
        }
      },
      "6": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 19,
          column: 44
        }
      },
      "7": {
        start: {
          line: 20,
          column: 24
        },
        end: {
          line: 20,
          column: 51
        }
      },
      "8": {
        start: {
          line: 21,
          column: 22
        },
        end: {
          line: 21,
          column: 47
        }
      },
      "9": {
        start: {
          line: 22,
          column: 23
        },
        end: {
          line: 22,
          column: 56
        }
      },
      "10": {
        start: {
          line: 23,
          column: 20
        },
        end: {
          line: 23,
          column: 50
        }
      },
      "11": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 28
        }
      },
      "12": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 41
        }
      },
      "13": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 33
        }
      },
      "14": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 43
        }
      },
      "15": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 38,
          column: 10
        }
      },
      "16": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 35
        }
      },
      "17": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 29
        }
      },
      "18": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 38
        }
      },
      "19": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "20": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 62
        }
      },
      "21": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 50,
          column: 13
        }
      },
      "22": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 49,
          column: 40
        }
      },
      "23": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 54,
          column: 13
        }
      },
      "24": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 53,
          column: 44
        }
      },
      "25": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 24
        }
      },
      "26": {
        start: {
          line: 63,
          column: 26
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "27": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "28": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 83,
          column: 13
        }
      },
      "29": {
        start: {
          line: 74,
          column: 31
        },
        end: {
          line: 74,
          column: 68
        }
      },
      "30": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 47
        }
      },
      "31": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 76,
          column: 30
        }
      },
      "32": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 81,
          column: 17
        }
      },
      "33": {
        start: {
          line: 79,
          column: 20
        },
        end: {
          line: 79,
          column: 51
        }
      },
      "34": {
        start: {
          line: 80,
          column: 20
        },
        end: {
          line: 80,
          column: 68
        }
      },
      "35": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 28
        }
      },
      "36": {
        start: {
          line: 84,
          column: 15
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "37": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 43
        }
      },
      "38": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 60
        }
      },
      "39": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 80
        }
      },
      "40": {
        start: {
          line: 92,
          column: 26
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "41": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "42": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 115,
          column: 13
        }
      },
      "43": {
        start: {
          line: 106,
          column: 31
        },
        end: {
          line: 106,
          column: 72
        }
      },
      "44": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 47
        }
      },
      "45": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 30
        }
      },
      "46": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 113,
          column: 17
        }
      },
      "47": {
        start: {
          line: 111,
          column: 20
        },
        end: {
          line: 111,
          column: 51
        }
      },
      "48": {
        start: {
          line: 112,
          column: 20
        },
        end: {
          line: 112,
          column: 72
        }
      },
      "49": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 28
        }
      },
      "50": {
        start: {
          line: 116,
          column: 15
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "51": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 43
        }
      },
      "52": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 64
        }
      },
      "53": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 80
        }
      },
      "54": {
        start: {
          line: 124,
          column: 26
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "55": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "56": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 146,
          column: 13
        }
      },
      "57": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 137,
          column: 52
        }
      },
      "58": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 47
        }
      },
      "59": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 145,
          column: 17
        }
      },
      "60": {
        start: {
          line: 141,
          column: 20
        },
        end: {
          line: 141,
          column: 51
        }
      },
      "61": {
        start: {
          line: 142,
          column: 20
        },
        end: {
          line: 142,
          column: 59
        }
      },
      "62": {
        start: {
          line: 144,
          column: 20
        },
        end: {
          line: 144,
          column: 32
        }
      },
      "63": {
        start: {
          line: 147,
          column: 15
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "64": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 43
        }
      },
      "65": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 51
        }
      },
      "66": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 80
        }
      },
      "67": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "68": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 166,
          column: 13
        }
      },
      "69": {
        start: {
          line: 157,
          column: 31
        },
        end: {
          line: 157,
          column: 69
        }
      },
      "70": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 61
        }
      },
      "71": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 160,
          column: 30
        }
      },
      "72": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 164,
          column: 17
        }
      },
      "73": {
        start: {
          line: 163,
          column: 20
        },
        end: {
          line: 163,
          column: 68
        }
      },
      "74": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 28
        }
      },
      "75": {
        start: {
          line: 167,
          column: 15
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "76": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 60
        }
      },
      "77": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 80
        }
      },
      "78": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "79": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 19
        }
      },
      "80": {
        start: {
          line: 180,
          column: 34
        },
        end: {
          line: 180,
          column: 86
        }
      },
      "81": {
        start: {
          line: 180,
          column: 62
        },
        end: {
          line: 180,
          column: 85
        }
      },
      "82": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "83": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 48
        }
      },
      "84": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 80
        }
      },
      "85": {
        start: {
          line: 185,
          column: 53
        },
        end: {
          line: 185,
          column: 78
        }
      },
      "86": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 29
        }
      },
      "87": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 190,
          column: 37
        }
      },
      "88": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "89": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 202,
          column: 13
        }
      },
      "90": {
        start: {
          line: 194,
          column: 20
        },
        end: {
          line: 194,
          column: 78
        }
      },
      "91": {
        start: {
          line: 195,
          column: 20
        },
        end: {
          line: 195,
          column: 26
        }
      },
      "92": {
        start: {
          line: 197,
          column: 20
        },
        end: {
          line: 197,
          column: 97
        }
      },
      "93": {
        start: {
          line: 198,
          column: 20
        },
        end: {
          line: 198,
          column: 26
        }
      },
      "94": {
        start: {
          line: 200,
          column: 20
        },
        end: {
          line: 200,
          column: 81
        }
      },
      "95": {
        start: {
          line: 201,
          column: 20
        },
        end: {
          line: 201,
          column: 26
        }
      },
      "96": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 43
        }
      },
      "97": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 32
        }
      },
      "98": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 44
        }
      },
      "99": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "100": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 209,
          column: 44
        }
      },
      "101": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 212,
          column: 45
        }
      },
      "102": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 219,
          column: 54
        }
      },
      "103": {
        start: {
          line: 222,
          column: 25
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "104": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 244,
          column: 9
        }
      },
      "105": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 227,
          column: 34
        }
      },
      "106": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 229,
          column: 34
        }
      },
      "107": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 235,
          column: 18
        }
      },
      "108": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 239,
          column: 17
        }
      },
      "109": {
        start: {
          line: 238,
          column: 20
        },
        end: {
          line: 238,
          column: 69
        }
      },
      "110": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 34
        }
      },
      "111": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 34
        }
      },
      "112": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "113": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 66
        }
      },
      "114": {
        start: {
          line: 251,
          column: 40
        },
        end: {
          line: 251,
          column: 107
        }
      },
      "115": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 31
        }
      },
      "116": {
        start: {
          line: 252,
          column: 19
        },
        end: {
          line: 252,
          column: 31
        }
      },
      "117": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 22
        }
      },
      "118": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 258,
          column: 9
        }
      },
      "119": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 66
        }
      },
      "120": {
        start: {
          line: 259,
          column: 40
        },
        end: {
          line: 259,
          column: 120
        }
      },
      "121": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 260,
          column: 31
        }
      },
      "122": {
        start: {
          line: 260,
          column: 19
        },
        end: {
          line: 260,
          column: 31
        }
      },
      "123": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 261,
          column: 22
        }
      },
      "124": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 266,
          column: 9
        }
      },
      "125": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 66
        }
      },
      "126": {
        start: {
          line: 267,
          column: 26
        },
        end: {
          line: 267,
          column: 84
        }
      },
      "127": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 268,
          column: 31
        }
      },
      "128": {
        start: {
          line: 268,
          column: 19
        },
        end: {
          line: 268,
          column: 31
        }
      },
      "129": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 273,
          column: 9
        }
      },
      "130": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 66
        }
      },
      "131": {
        start: {
          line: 274,
          column: 20
        },
        end: {
          line: 274,
          column: 62
        }
      },
      "132": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "133": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 278,
          column: 15
        }
      },
      "134": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 277,
          column: 45
        }
      },
      "135": {
        start: {
          line: 280,
          column: 32
        },
        end: {
          line: 280,
          column: 43
        }
      },
      "136": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 281,
          column: 31
        }
      },
      "137": {
        start: {
          line: 281,
          column: 19
        },
        end: {
          line: 281,
          column: 31
        }
      },
      "138": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 282,
          column: 26
        }
      },
      "139": {
        start: {
          line: 286,
          column: 33
        },
        end: {
          line: 292,
          column: 9
        }
      },
      "140": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 294,
          column: 67
        }
      },
      "141": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 295,
          column: 32
        }
      },
      "142": {
        start: {
          line: 298,
          column: 33
        },
        end: {
          line: 303,
          column: 9
        }
      },
      "143": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 305,
          column: 67
        }
      },
      "144": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 306,
          column: 32
        }
      },
      "145": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 312,
          column: 11
        }
      },
      "146": {
        start: {
          line: 315,
          column: 27
        },
        end: {
          line: 315,
          column: 78
        }
      },
      "147": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 328,
          column: 9
        }
      },
      "148": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 325,
          column: 15
        }
      },
      "149": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 353,
          column: 9
        }
      },
      "150": {
        start: {
          line: 333,
          column: 29
        },
        end: {
          line: 333,
          column: 61
        }
      },
      "151": {
        start: {
          line: 334,
          column: 30
        },
        end: {
          line: 338,
          column: 13
        }
      },
      "152": {
        start: {
          line: 339,
          column: 30
        },
        end: {
          line: 339,
          column: 55
        }
      },
      "153": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 343,
          column: 13
        }
      },
      "154": {
        start: {
          line: 342,
          column: 16
        },
        end: {
          line: 342,
          column: 88
        }
      },
      "155": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 350,
          column: 13
        }
      },
      "156": {
        start: {
          line: 347,
          column: 16
        },
        end: {
          line: 347,
          column: 87
        }
      },
      "157": {
        start: {
          line: 349,
          column: 16
        },
        end: {
          line: 349,
          column: 87
        }
      },
      "158": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 369,
          column: 9
        }
      },
      "159": {
        start: {
          line: 357,
          column: 29
        },
        end: {
          line: 357,
          column: 61
        }
      },
      "160": {
        start: {
          line: 358,
          column: 25
        },
        end: {
          line: 358,
          column: 82
        }
      },
      "161": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 366,
          column: 13
        }
      },
      "162": {
        start: {
          line: 361,
          column: 16
        },
        end: {
          line: 363,
          column: 17
        }
      },
      "163": {
        start: {
          line: 362,
          column: 20
        },
        end: {
          line: 362,
          column: 82
        }
      },
      "164": {
        start: {
          line: 364,
          column: 34
        },
        end: {
          line: 364,
          column: 52
        }
      },
      "165": {
        start: {
          line: 365,
          column: 16
        },
        end: {
          line: 365,
          column: 44
        }
      },
      "166": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 370,
          column: 18
        }
      },
      "167": {
        start: {
          line: 373,
          column: 29
        },
        end: {
          line: 373,
          column: 70
        }
      },
      "168": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 374,
          column: 42
        }
      },
      "169": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 400,
          column: 9
        }
      },
      "170": {
        start: {
          line: 378,
          column: 27
        },
        end: {
          line: 383,
          column: 13
        }
      },
      "171": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 397,
          column: 13
        }
      },
      "172": {
        start: {
          line: 385,
          column: 35
        },
        end: {
          line: 385,
          column: 66
        }
      },
      "173": {
        start: {
          line: 386,
          column: 16
        },
        end: {
          line: 396,
          column: 17
        }
      },
      "174": {
        start: {
          line: 387,
          column: 20
        },
        end: {
          line: 395,
          column: 23
        }
      },
      "175": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 404,
          column: 39
        }
      },
      "176": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 405,
          column: 29
        }
      },
      "177": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 412,
          column: 9
        }
      },
      "178": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 409,
          column: 79
        }
      },
      "179": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 423,
          column: 9
        }
      },
      "180": {
        start: {
          line: 416,
          column: 26
        },
        end: {
          line: 416,
          column: 76
        }
      },
      "181": {
        start: {
          line: 417,
          column: 12
        },
        end: {
          line: 419,
          column: 13
        }
      },
      "182": {
        start: {
          line: 418,
          column: 16
        },
        end: {
          line: 418,
          column: 39
        }
      },
      "183": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 422,
          column: 32
        }
      },
      "184": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 432,
          column: 11
        }
      },
      "185": {
        start: {
          line: 429,
          column: 12
        },
        end: {
          line: 429,
          column: 33
        }
      },
      "186": {
        start: {
          line: 431,
          column: 12
        },
        end: {
          line: 431,
          column: 36
        }
      },
      "187": {
        start: {
          line: 433,
          column: 8
        },
        end: {
          line: 437,
          column: 11
        }
      },
      "188": {
        start: {
          line: 434,
          column: 12
        },
        end: {
          line: 434,
          column: 34
        }
      },
      "189": {
        start: {
          line: 436,
          column: 12
        },
        end: {
          line: 436,
          column: 35
        }
      },
      "190": {
        start: {
          line: 439,
          column: 8
        },
        end: {
          line: 443,
          column: 11
        }
      },
      "191": {
        start: {
          line: 440,
          column: 12
        },
        end: {
          line: 442,
          column: 13
        }
      },
      "192": {
        start: {
          line: 441,
          column: 16
        },
        end: {
          line: 441,
          column: 31
        }
      },
      "193": {
        start: {
          line: 446,
          column: 8
        },
        end: {
          line: 448,
          column: 9
        }
      },
      "194": {
        start: {
          line: 447,
          column: 12
        },
        end: {
          line: 447,
          column: 45
        }
      },
      "195": {
        start: {
          line: 450,
          column: 8
        },
        end: {
          line: 450,
          column: 23
        }
      },
      "196": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 454,
          column: 37
        }
      },
      "197": {
        start: {
          line: 453,
          column: 12
        },
        end: {
          line: 453,
          column: 27
        }
      },
      "198": {
        start: {
          line: 457,
          column: 8
        },
        end: {
          line: 460,
          column: 9
        }
      },
      "199": {
        start: {
          line: 458,
          column: 12
        },
        end: {
          line: 458,
          column: 45
        }
      },
      "200": {
        start: {
          line: 459,
          column: 12
        },
        end: {
          line: 459,
          column: 37
        }
      },
      "201": {
        start: {
          line: 464,
          column: 8
        },
        end: {
          line: 471,
          column: 11
        }
      },
      "202": {
        start: {
          line: 466,
          column: 41
        },
        end: {
          line: 470,
          column: 17
        }
      },
      "203": {
        start: {
          line: 472,
          column: 8
        },
        end: {
          line: 474,
          column: 11
        }
      },
      "204": {
        start: {
          line: 475,
          column: 8
        },
        end: {
          line: 477,
          column: 11
        }
      },
      "205": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 486,
          column: 10
        }
      },
      "206": {
        start: {
          line: 484,
          column: 59
        },
        end: {
          line: 484,
          column: 82
        }
      },
      "207": {
        start: {
          line: 485,
          column: 58
        },
        end: {
          line: 485,
          column: 80
        }
      },
      "208": {
        start: {
          line: 489,
          column: 8
        },
        end: {
          line: 495,
          column: 9
        }
      },
      "209": {
        start: {
          line: 490,
          column: 25
        },
        end: {
          line: 490,
          column: 106
        }
      },
      "210": {
        start: {
          line: 490,
          column: 81
        },
        end: {
          line: 490,
          column: 105
        }
      },
      "211": {
        start: {
          line: 491,
          column: 12
        },
        end: {
          line: 491,
          column: 78
        }
      },
      "212": {
        start: {
          line: 491,
          column: 32
        },
        end: {
          line: 491,
          column: 76
        }
      },
      "213": {
        start: {
          line: 498,
          column: 33
        },
        end: {
          line: 498,
          column: 84
        }
      },
      "214": {
        start: {
          line: 498,
          column: 61
        },
        end: {
          line: 498,
          column: 83
        }
      },
      "215": {
        start: {
          line: 499,
          column: 8
        },
        end: {
          line: 503,
          column: 9
        }
      },
      "216": {
        start: {
          line: 500,
          column: 12
        },
        end: {
          line: 500,
          column: 41
        }
      },
      "217": {
        start: {
          line: 501,
          column: 12
        },
        end: {
          line: 501,
          column: 34
        }
      },
      "218": {
        start: {
          line: 502,
          column: 12
        },
        end: {
          line: 502,
          column: 40
        }
      },
      "219": {
        start: {
          line: 504,
          column: 8
        },
        end: {
          line: 504,
          column: 29
        }
      },
      "220": {
        start: {
          line: 505,
          column: 8
        },
        end: {
          line: 507,
          column: 9
        }
      },
      "221": {
        start: {
          line: 506,
          column: 12
        },
        end: {
          line: 506,
          column: 33
        }
      },
      "222": {
        start: {
          line: 510,
          column: 8
        },
        end: {
          line: 510,
          column: 67
        }
      },
      "223": {
        start: {
          line: 510,
          column: 43
        },
        end: {
          line: 510,
          column: 65
        }
      },
      "224": {
        start: {
          line: 513,
          column: 27
        },
        end: {
          line: 517,
          column: 9
        }
      },
      "225": {
        start: {
          line: 518,
          column: 8
        },
        end: {
          line: 518,
          column: 51
        }
      },
      "226": {
        start: {
          line: 521,
          column: 26
        },
        end: {
          line: 521,
          column: 28
        }
      },
      "227": {
        start: {
          line: 522,
          column: 8
        },
        end: {
          line: 530,
          column: 11
        }
      },
      "228": {
        start: {
          line: 523,
          column: 12
        },
        end: {
          line: 529,
          column: 13
        }
      },
      "229": {
        start: {
          line: 524,
          column: 16
        },
        end: {
          line: 528,
          column: 17
        }
      },
      "230": {
        start: {
          line: 525,
          column: 20
        },
        end: {
          line: 525,
          column: 85
        }
      },
      "231": {
        start: {
          line: 531,
          column: 8
        },
        end: {
          line: 531,
          column: 25
        }
      },
      "232": {
        start: {
          line: 534,
          column: 27
        },
        end: {
          line: 534,
          column: 51
        }
      },
      "233": {
        start: {
          line: 535,
          column: 17
        },
        end: {
          line: 535,
          column: 35
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 19
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 30
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 28
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 25
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 23
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 43
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        loc: {
          start: {
            line: 62,
            column: 30
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 62
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 34
          },
          end: {
            line: 122,
            column: 5
          }
        },
        line: 91
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        loc: {
          start: {
            line: 123,
            column: 28
          },
          end: {
            line: 153,
            column: 5
          }
        },
        line: 123
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 154,
            column: 4
          },
          end: {
            line: 154,
            column: 5
          }
        },
        loc: {
          start: {
            line: 154,
            column: 31
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 154
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 174,
            column: 5
          }
        },
        loc: {
          start: {
            line: 174,
            column: 20
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 174
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 180,
            column: 56
          },
          end: {
            line: 180,
            column: 57
          }
        },
        loc: {
          start: {
            line: 180,
            column: 62
          },
          end: {
            line: 180,
            column: 85
          }
        },
        line: 180
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 185,
            column: 47
          },
          end: {
            line: 185,
            column: 48
          }
        },
        loc: {
          start: {
            line: 185,
            column: 53
          },
          end: {
            line: 185,
            column: 78
          }
        },
        line: 185
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 189,
            column: 5
          }
        },
        loc: {
          start: {
            line: 189,
            column: 35
          },
          end: {
            line: 216,
            column: 5
          }
        },
        line: 189
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        },
        loc: {
          start: {
            line: 218,
            column: 43
          },
          end: {
            line: 220,
            column: 5
          }
        },
        line: 218
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 221,
            column: 4
          },
          end: {
            line: 221,
            column: 5
          }
        },
        loc: {
          start: {
            line: 221,
            column: 57
          },
          end: {
            line: 245,
            column: 5
          }
        },
        line: 221
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 247,
            column: 4
          },
          end: {
            line: 247,
            column: 5
          }
        },
        loc: {
          start: {
            line: 247,
            column: 37
          },
          end: {
            line: 254,
            column: 5
          }
        },
        line: 247
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 255,
            column: 4
          },
          end: {
            line: 255,
            column: 5
          }
        },
        loc: {
          start: {
            line: 255,
            column: 41
          },
          end: {
            line: 262,
            column: 5
          }
        },
        line: 255
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 263,
            column: 4
          },
          end: {
            line: 263,
            column: 5
          }
        },
        loc: {
          start: {
            line: 263,
            column: 35
          },
          end: {
            line: 269,
            column: 5
          }
        },
        line: 263
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 270,
            column: 4
          },
          end: {
            line: 270,
            column: 5
          }
        },
        loc: {
          start: {
            line: 270,
            column: 38
          },
          end: {
            line: 283,
            column: 5
          }
        },
        line: 270
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 276,
            column: 44
          },
          end: {
            line: 276,
            column: 45
          }
        },
        loc: {
          start: {
            line: 276,
            column: 60
          },
          end: {
            line: 278,
            column: 13
          }
        },
        line: 276
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 285,
            column: 4
          },
          end: {
            line: 285,
            column: 5
          }
        },
        loc: {
          start: {
            line: 285,
            column: 40
          },
          end: {
            line: 296,
            column: 5
          }
        },
        line: 285
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 297,
            column: 4
          },
          end: {
            line: 297,
            column: 5
          }
        },
        loc: {
          start: {
            line: 297,
            column: 44
          },
          end: {
            line: 307,
            column: 5
          }
        },
        line: 297
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 308,
            column: 4
          },
          end: {
            line: 308,
            column: 5
          }
        },
        loc: {
          start: {
            line: 308,
            column: 38
          },
          end: {
            line: 313,
            column: 5
          }
        },
        line: 308
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 314,
            column: 4
          },
          end: {
            line: 314,
            column: 5
          }
        },
        loc: {
          start: {
            line: 314,
            column: 47
          },
          end: {
            line: 329,
            column: 5
          }
        },
        line: 314
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 331,
            column: 4
          },
          end: {
            line: 331,
            column: 5
          }
        },
        loc: {
          start: {
            line: 331,
            column: 42
          },
          end: {
            line: 354,
            column: 5
          }
        },
        line: 331
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 355,
            column: 4
          },
          end: {
            line: 355,
            column: 5
          }
        },
        loc: {
          start: {
            line: 355,
            column: 40
          },
          end: {
            line: 371,
            column: 5
          }
        },
        line: 355
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 372,
            column: 4
          },
          end: {
            line: 372,
            column: 5
          }
        },
        loc: {
          start: {
            line: 372,
            column: 32
          },
          end: {
            line: 375,
            column: 5
          }
        },
        line: 372
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 376,
            column: 4
          },
          end: {
            line: 376,
            column: 5
          }
        },
        loc: {
          start: {
            line: 376,
            column: 27
          },
          end: {
            line: 401,
            column: 5
          }
        },
        line: 376
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 403,
            column: 4
          },
          end: {
            line: 403,
            column: 5
          }
        },
        loc: {
          start: {
            line: 403,
            column: 30
          },
          end: {
            line: 406,
            column: 5
          }
        },
        line: 403
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 407,
            column: 4
          },
          end: {
            line: 407,
            column: 5
          }
        },
        loc: {
          start: {
            line: 407,
            column: 20
          },
          end: {
            line: 413,
            column: 5
          }
        },
        line: 407
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 414,
            column: 4
          },
          end: {
            line: 414,
            column: 5
          }
        },
        loc: {
          start: {
            line: 414,
            column: 20
          },
          end: {
            line: 424,
            column: 5
          }
        },
        line: 414
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 426,
            column: 4
          },
          end: {
            line: 426,
            column: 5
          }
        },
        loc: {
          start: {
            line: 426,
            column: 26
          },
          end: {
            line: 444,
            column: 5
          }
        },
        line: 426
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 428,
            column: 42
          },
          end: {
            line: 428,
            column: 43
          }
        },
        loc: {
          start: {
            line: 428,
            column: 46
          },
          end: {
            line: 432,
            column: 9
          }
        },
        line: 428
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 433,
            column: 43
          },
          end: {
            line: 433,
            column: 44
          }
        },
        loc: {
          start: {
            line: 433,
            column: 47
          },
          end: {
            line: 437,
            column: 9
          }
        },
        line: 433
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 439,
            column: 54
          },
          end: {
            line: 439,
            column: 55
          }
        },
        loc: {
          start: {
            line: 439,
            column: 58
          },
          end: {
            line: 443,
            column: 9
          }
        },
        line: 439
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 445,
            column: 4
          },
          end: {
            line: 445,
            column: 5
          }
        },
        loc: {
          start: {
            line: 445,
            column: 23
          },
          end: {
            line: 455,
            column: 5
          }
        },
        line: 445
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 452,
            column: 40
          },
          end: {
            line: 452,
            column: 41
          }
        },
        loc: {
          start: {
            line: 452,
            column: 44
          },
          end: {
            line: 454,
            column: 9
          }
        },
        line: 452
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 456,
            column: 4
          },
          end: {
            line: 456,
            column: 5
          }
        },
        loc: {
          start: {
            line: 456,
            column: 22
          },
          end: {
            line: 461,
            column: 5
          }
        },
        line: 456
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 462,
            column: 4
          },
          end: {
            line: 462,
            column: 5
          }
        },
        loc: {
          start: {
            line: 462,
            column: 29
          },
          end: {
            line: 478,
            column: 5
          }
        },
        line: 462
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 466,
            column: 22
          },
          end: {
            line: 466,
            column: 23
          }
        },
        loc: {
          start: {
            line: 466,
            column: 41
          },
          end: {
            line: 470,
            column: 17
          }
        },
        line: 466
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 480,
            column: 4
          },
          end: {
            line: 480,
            column: 5
          }
        },
        loc: {
          start: {
            line: 480,
            column: 20
          },
          end: {
            line: 487,
            column: 5
          }
        },
        line: 480
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 484,
            column: 53
          },
          end: {
            line: 484,
            column: 54
          }
        },
        loc: {
          start: {
            line: 484,
            column: 59
          },
          end: {
            line: 484,
            column: 82
          }
        },
        line: 484
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 485,
            column: 52
          },
          end: {
            line: 485,
            column: 53
          }
        },
        loc: {
          start: {
            line: 485,
            column: 58
          },
          end: {
            line: 485,
            column: 80
          }
        },
        line: 485
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 488,
            column: 4
          },
          end: {
            line: 488,
            column: 5
          }
        },
        loc: {
          start: {
            line: 488,
            column: 23
          },
          end: {
            line: 496,
            column: 5
          }
        },
        line: 488
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 490,
            column: 74
          },
          end: {
            line: 490,
            column: 75
          }
        },
        loc: {
          start: {
            line: 490,
            column: 81
          },
          end: {
            line: 490,
            column: 105
          }
        },
        line: 490
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 491,
            column: 25
          },
          end: {
            line: 491,
            column: 26
          }
        },
        loc: {
          start: {
            line: 491,
            column: 32
          },
          end: {
            line: 491,
            column: 76
          }
        },
        line: 491
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 497,
            column: 4
          },
          end: {
            line: 497,
            column: 5
          }
        },
        loc: {
          start: {
            line: 497,
            column: 34
          },
          end: {
            line: 508,
            column: 5
          }
        },
        line: 497
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 498,
            column: 55
          },
          end: {
            line: 498,
            column: 56
          }
        },
        loc: {
          start: {
            line: 498,
            column: 61
          },
          end: {
            line: 498,
            column: 83
          }
        },
        line: 498
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 509,
            column: 4
          },
          end: {
            line: 509,
            column: 5
          }
        },
        loc: {
          start: {
            line: 509,
            column: 26
          },
          end: {
            line: 511,
            column: 5
          }
        },
        line: 509
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 510,
            column: 37
          },
          end: {
            line: 510,
            column: 38
          }
        },
        loc: {
          start: {
            line: 510,
            column: 43
          },
          end: {
            line: 510,
            column: 65
          }
        },
        line: 510
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 512,
            column: 4
          },
          end: {
            line: 512,
            column: 5
          }
        },
        loc: {
          start: {
            line: 512,
            column: 23
          },
          end: {
            line: 519,
            column: 5
          }
        },
        line: 512
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 520,
            column: 4
          },
          end: {
            line: 520,
            column: 5
          }
        },
        loc: {
          start: {
            line: 520,
            column: 23
          },
          end: {
            line: 532,
            column: 5
          }
        },
        line: 520
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 522,
            column: 58
          },
          end: {
            line: 522,
            column: 59
          }
        },
        loc: {
          start: {
            line: 522,
            column: 65
          },
          end: {
            line: 530,
            column: 9
          }
        },
        line: 522
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 16
          },
          end: {
            line: 25,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 25,
            column: 25
          },
          end: {
            line: 25,
            column: 27
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 50,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 50,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "2": {
        loc: {
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "3": {
        loc: {
          start: {
            line: 52,
            column: 16
          },
          end: {
            line: 52,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 16
          },
          end: {
            line: 52,
            column: 30
          }
        }, {
          start: {
            line: 52,
            column: 34
          },
          end: {
            line: 52,
            column: 63
          }
        }],
        line: 52
      },
      "4": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        }, {
          start: {
            line: 84,
            column: 15
          },
          end: {
            line: 89,
            column: 9
          }
        }],
        line: 72
      },
      "5": {
        loc: {
          start: {
            line: 78,
            column: 16
          },
          end: {
            line: 81,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 16
          },
          end: {
            line: 81,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "6": {
        loc: {
          start: {
            line: 84,
            column: 15
          },
          end: {
            line: 89,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 15
          },
          end: {
            line: 89,
            column: 9
          }
        }, {
          start: {
            line: 87,
            column: 15
          },
          end: {
            line: 89,
            column: 9
          }
        }],
        line: 84
      },
      "7": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        }, {
          start: {
            line: 116,
            column: 15
          },
          end: {
            line: 121,
            column: 9
          }
        }],
        line: 104
      },
      "8": {
        loc: {
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 113,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 113,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "9": {
        loc: {
          start: {
            line: 116,
            column: 15
          },
          end: {
            line: 121,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 15
          },
          end: {
            line: 121,
            column: 9
          }
        }, {
          start: {
            line: 119,
            column: 15
          },
          end: {
            line: 121,
            column: 9
          }
        }],
        line: 116
      },
      "10": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        }, {
          start: {
            line: 147,
            column: 15
          },
          end: {
            line: 152,
            column: 9
          }
        }],
        line: 135
      },
      "11": {
        loc: {
          start: {
            line: 140,
            column: 16
          },
          end: {
            line: 145,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 16
          },
          end: {
            line: 145,
            column: 17
          }
        }, {
          start: {
            line: 143,
            column: 23
          },
          end: {
            line: 145,
            column: 17
          }
        }],
        line: 140
      },
      "12": {
        loc: {
          start: {
            line: 147,
            column: 15
          },
          end: {
            line: 152,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 15
          },
          end: {
            line: 152,
            column: 9
          }
        }, {
          start: {
            line: 150,
            column: 15
          },
          end: {
            line: 152,
            column: 9
          }
        }],
        line: 147
      },
      "13": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        }, {
          start: {
            line: 167,
            column: 15
          },
          end: {
            line: 171,
            column: 9
          }
        }],
        line: 155
      },
      "14": {
        loc: {
          start: {
            line: 162,
            column: 16
          },
          end: {
            line: 164,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 16
          },
          end: {
            line: 164,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "15": {
        loc: {
          start: {
            line: 167,
            column: 15
          },
          end: {
            line: 171,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 15
          },
          end: {
            line: 171,
            column: 9
          }
        }, {
          start: {
            line: 169,
            column: 15
          },
          end: {
            line: 171,
            column: 9
          }
        }],
        line: 167
      },
      "16": {
        loc: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "17": {
        loc: {
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 193,
            column: 16
          },
          end: {
            line: 195,
            column: 26
          }
        }, {
          start: {
            line: 196,
            column: 16
          },
          end: {
            line: 198,
            column: 26
          }
        }, {
          start: {
            line: 199,
            column: 16
          },
          end: {
            line: 201,
            column: 26
          }
        }],
        line: 192
      },
      "18": {
        loc: {
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        }, {
          start: {
            line: 211,
            column: 19
          },
          end: {
            line: 214,
            column: 13
          }
        }],
        line: 208
      },
      "19": {
        loc: {
          start: {
            line: 222,
            column: 25
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 222,
            column: 25
          },
          end: {
            line: 222,
            column: 58
          }
        }, {
          start: {
            line: 222,
            column: 62
          },
          end: {
            line: 224,
            column: 9
          }
        }],
        line: 222
      },
      "20": {
        loc: {
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 244,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 226,
            column: 12
          },
          end: {
            line: 227,
            column: 34
          }
        }, {
          start: {
            line: 228,
            column: 12
          },
          end: {
            line: 229,
            column: 34
          }
        }, {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 235,
            column: 18
          }
        }, {
          start: {
            line: 236,
            column: 12
          },
          end: {
            line: 241,
            column: 34
          }
        }, {
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 243,
            column: 34
          }
        }],
        line: 225
      },
      "21": {
        loc: {
          start: {
            line: 237,
            column: 16
          },
          end: {
            line: 239,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 16
          },
          end: {
            line: 239,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "22": {
        loc: {
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "23": {
        loc: {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 252,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 252,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "24": {
        loc: {
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 258,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 258,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "25": {
        loc: {
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 260,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 260,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "26": {
        loc: {
          start: {
            line: 264,
            column: 8
          },
          end: {
            line: 266,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 8
          },
          end: {
            line: 266,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 264
      },
      "27": {
        loc: {
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 268,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 268,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      },
      "28": {
        loc: {
          start: {
            line: 271,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 271,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 271
      },
      "29": {
        loc: {
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "30": {
        loc: {
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 281,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 8
          },
          end: {
            line: 281,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "31": {
        loc: {
          start: {
            line: 282,
            column: 15
          },
          end: {
            line: 282,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 282,
            column: 15
          },
          end: {
            line: 282,
            column: 19
          }
        }, {
          start: {
            line: 282,
            column: 23
          },
          end: {
            line: 282,
            column: 25
          }
        }],
        line: 282
      },
      "32": {
        loc: {
          start: {
            line: 341,
            column: 12
          },
          end: {
            line: 343,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 341,
            column: 12
          },
          end: {
            line: 343,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 341
      },
      "33": {
        loc: {
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 350,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 350,
            column: 13
          }
        }, {
          start: {
            line: 348,
            column: 19
          },
          end: {
            line: 350,
            column: 13
          }
        }],
        line: 345
      },
      "34": {
        loc: {
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 366,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 366,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 359
      },
      "35": {
        loc: {
          start: {
            line: 361,
            column: 16
          },
          end: {
            line: 363,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 361,
            column: 16
          },
          end: {
            line: 363,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 361
      },
      "36": {
        loc: {
          start: {
            line: 365,
            column: 23
          },
          end: {
            line: 365,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 365,
            column: 23
          },
          end: {
            line: 365,
            column: 37
          }
        }, {
          start: {
            line: 365,
            column: 41
          },
          end: {
            line: 365,
            column: 43
          }
        }],
        line: 365
      },
      "37": {
        loc: {
          start: {
            line: 373,
            column: 29
          },
          end: {
            line: 373,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 373,
            column: 39
          },
          end: {
            line: 373,
            column: 62
          }
        }, {
          start: {
            line: 373,
            column: 65
          },
          end: {
            line: 373,
            column: 70
          }
        }],
        line: 373
      },
      "38": {
        loc: {
          start: {
            line: 386,
            column: 16
          },
          end: {
            line: 396,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 386,
            column: 16
          },
          end: {
            line: 396,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 386
      },
      "39": {
        loc: {
          start: {
            line: 417,
            column: 12
          },
          end: {
            line: 419,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 417,
            column: 12
          },
          end: {
            line: 419,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 417
      },
      "40": {
        loc: {
          start: {
            line: 417,
            column: 16
          },
          end: {
            line: 417,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 417,
            column: 16
          },
          end: {
            line: 417,
            column: 21
          }
        }, {
          start: {
            line: 417,
            column: 25
          },
          end: {
            line: 417,
            column: 45
          }
        }],
        line: 417
      },
      "41": {
        loc: {
          start: {
            line: 440,
            column: 12
          },
          end: {
            line: 442,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 440,
            column: 12
          },
          end: {
            line: 442,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 440
      },
      "42": {
        loc: {
          start: {
            line: 440,
            column: 16
          },
          end: {
            line: 440,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 440,
            column: 16
          },
          end: {
            line: 440,
            column: 54
          }
        }, {
          start: {
            line: 440,
            column: 58
          },
          end: {
            line: 440,
            column: 71
          }
        }],
        line: 440
      },
      "43": {
        loc: {
          start: {
            line: 446,
            column: 8
          },
          end: {
            line: 448,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 446,
            column: 8
          },
          end: {
            line: 448,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 446
      },
      "44": {
        loc: {
          start: {
            line: 457,
            column: 8
          },
          end: {
            line: 460,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 457,
            column: 8
          },
          end: {
            line: 460,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 457
      },
      "45": {
        loc: {
          start: {
            line: 505,
            column: 8
          },
          end: {
            line: 507,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 505,
            column: 8
          },
          end: {
            line: 507,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 505
      },
      "46": {
        loc: {
          start: {
            line: 523,
            column: 12
          },
          end: {
            line: 529,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 523,
            column: 12
          },
          end: {
            line: 529,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 523
      },
      "47": {
        loc: {
          start: {
            line: 525,
            column: 37
          },
          end: {
            line: 525,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 525,
            column: 37
          },
          end: {
            line: 525,
            column: 78
          }
        }, {
          start: {
            line: 525,
            column: 82
          },
          end: {
            line: 525,
            column: 84
          }
        }],
        line: 525
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0, 0, 0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\persistenceService.ts"],
      sourcesContent: ["import { supabase } from \"../lib/supabase\"\nimport { backendService } from \"./backendService\"\nimport { stateManager } from \"./stateManager\"\nimport { secureStorage } from \"../utils/secureStorage\"\nimport { advancedEncryption } from \"../utils/encryption\"\n\nexport interface PersistenceConfig {\n  enableOfflineMode: boolean\n  syncInterval: number\n  maxRetries: number\n  retryDelay: number\n  compressionEnabled: boolean\n  encryptionEnabled: boolean\n}\n\nexport interface SyncOperation {\n  id: string\n  type: \"create\" | \"update\" | \"delete\"\n  table: string\n  data: any\n  timestamp: number\n  retries: number\n  status: \"pending\" | \"syncing\" | \"completed\" | \"failed\"\n  error?: string\n}\n\nexport interface ConflictResolution {\n  strategy: \"client-wins\" | \"server-wins\" | \"merge\" | \"manual\"\n  resolver?: (clientData: any, serverData: any) => any\n}\n\nclass PersistenceService {\n  private config: PersistenceConfig\n  private syncQueue: SyncOperation[] = []\n  private isOnline: boolean = navigator.onLine\n  private syncInterval: NodeJS.Timeout | null = null\n  private conflictResolvers: Map<string, ConflictResolution> = new Map()\n\n  constructor(config: Partial<PersistenceConfig> = {}) {\n    this.config = {\n      enableOfflineMode: true,\n      syncInterval: 30000, // 30 seconds\n      maxRetries: 3,\n      retryDelay: 5000, // 5 seconds\n      compressionEnabled: true,\n      encryptionEnabled: true, // Enable encryption by default for security\n      ...config,\n    }\n\n    this.setupEventListeners()\n    this.loadSyncQueue()\n    this.setupConflictResolvers()\n  }\n\n  async initialize(): Promise<void> {\n    try {\n      // Initialize backend service\n      await backendService.initialize()\n\n      // Start sync process if online\n      if (this.isOnline) {\n        this.startSyncProcess()\n      }\n\n      // Load cached data if offline\n      if (!this.isOnline && this.config.enableOfflineMode) {\n        await this.loadCachedData()\n      }\n\n      // Silent logging - Persistence service initialized\n    } catch (error) {\n      // Silent error handling - Failed to initialize persistence service\n      throw error\n    }\n  }\n\n  // CRUD Operations with offline support\n  async create<T>(table: string, data: Partial<T>): Promise<T> {\n    const operation: SyncOperation = {\n      id: crypto.randomUUID(),\n      type: \"create\",\n      table,\n      data,\n      timestamp: Date.now(),\n      retries: 0,\n      status: \"pending\",\n    }\n\n    if (this.isOnline) {\n      try {\n        const result = await this.executeCreate(table, data)\n        operation.status = \"completed\"\n        return result\n      } catch (error) {\n        if (this.config.enableOfflineMode) {\n          this.addToSyncQueue(operation)\n          return this.createOptimisticRecord(table, data)\n        }\n        throw error\n      }\n    } else if (this.config.enableOfflineMode) {\n      this.addToSyncQueue(operation)\n      return this.createOptimisticRecord(table, data)\n    } else {\n      throw new Error(\"Offline mode disabled and no internet connection\")\n    }\n  }\n\n  async update<T>(table: string, id: string, data: Partial<T>): Promise<T> {\n    const operation: SyncOperation = {\n      id: crypto.randomUUID(),\n      type: \"update\",\n      table,\n      data: { id, ...data },\n      timestamp: Date.now(),\n      retries: 0,\n      status: \"pending\",\n    }\n\n    if (this.isOnline) {\n      try {\n        const result = await this.executeUpdate(table, id, data)\n        operation.status = \"completed\"\n        return result\n      } catch (error) {\n        if (this.config.enableOfflineMode) {\n          this.addToSyncQueue(operation)\n          return this.updateOptimisticRecord(table, id, data)\n        }\n        throw error\n      }\n    } else if (this.config.enableOfflineMode) {\n      this.addToSyncQueue(operation)\n      return this.updateOptimisticRecord(table, id, data)\n    } else {\n      throw new Error(\"Offline mode disabled and no internet connection\")\n    }\n  }\n\n  async delete(table: string, id: string): Promise<void> {\n    const operation: SyncOperation = {\n      id: crypto.randomUUID(),\n      type: \"delete\",\n      table,\n      data: { id },\n      timestamp: Date.now(),\n      retries: 0,\n      status: \"pending\",\n    }\n\n    if (this.isOnline) {\n      try {\n        await this.executeDelete(table, id)\n        operation.status = \"completed\"\n      } catch (error) {\n        if (this.config.enableOfflineMode) {\n          this.addToSyncQueue(operation)\n          this.deleteOptimisticRecord(table, id)\n        } else {\n          throw error\n        }\n      }\n    } else if (this.config.enableOfflineMode) {\n      this.addToSyncQueue(operation)\n      this.deleteOptimisticRecord(table, id)\n    } else {\n      throw new Error(\"Offline mode disabled and no internet connection\")\n    }\n  }\n\n  async read<T>(table: string, filters?: any): Promise<T[]> {\n    if (this.isOnline) {\n      try {\n        const result = await this.executeRead<T>(table, filters)\n        // Cache the result for offline access\n        await this.cacheData(table, result, filters)\n        return result\n      } catch (error) {\n        if (this.config.enableOfflineMode) {\n          return await this.getCachedData<T>(table, filters)\n        }\n        throw error\n      }\n    } else if (this.config.enableOfflineMode) {\n      return await this.getCachedData<T>(table, filters)\n    } else {\n      throw new Error(\"Offline mode disabled and no internet connection\")\n    }\n  }\n\n  // Sync Operations\n  async syncAll(): Promise<void> {\n    if (!this.isOnline) {\n      // Silent logging - Cannot sync while offline\n      return\n    }\n\n    // Silent logging - Starting sync operations\n\n    const pendingOperations = this.syncQueue.filter((op) => op.status === \"pending\")\n\n    for (const operation of pendingOperations) {\n      await this.syncOperation(operation)\n    }\n\n    // Remove completed operations\n    this.syncQueue = this.syncQueue.filter((op) => op.status !== \"completed\")\n    this.saveSyncQueue()\n\n    // Silent logging - Sync completed\n  }\n\n  private async syncOperation(operation: SyncOperation): Promise<void> {\n    operation.status = \"syncing\"\n\n    try {\n      switch (operation.type) {\n        case \"create\":\n          await this.executeCreate(operation.table, operation.data)\n          break\n        case \"update\":\n          await this.executeUpdate(operation.table, operation.data.id, operation.data)\n          break\n        case \"delete\":\n          await this.executeDelete(operation.table, operation.data.id)\n          break\n      }\n\n      operation.status = \"completed\"\n      // Silent logging - Synced operation\n    } catch (error: any) {\n      operation.retries++\n      operation.error = error.message\n\n      if (operation.retries >= this.config.maxRetries) {\n        operation.status = \"failed\"\n        // Silent error handling - Failed to sync operation after max retries\n      } else {\n        operation.status = \"pending\"\n        // Silent error handling - Sync failed, will retry\n      }\n    }\n  }\n\n  // Conflict Resolution\n  setConflictResolver(table: string, resolution: ConflictResolution): void {\n    this.conflictResolvers.set(table, resolution)\n  }\n\n  private async resolveConflict(table: string, clientData: any, serverData: any): Promise<any> {\n    const resolver = this.conflictResolvers.get(table) || { strategy: \"server-wins\" }\n\n    switch (resolver.strategy) {\n      case \"client-wins\":\n        return clientData\n      case \"server-wins\":\n        return serverData\n      case \"merge\":\n        return { ...serverData, ...clientData, updated_at: new Date().toISOString() }\n      case \"manual\":\n        if (resolver.resolver) {\n          return resolver.resolver(clientData, serverData)\n        }\n        // Fallback to server wins if no custom resolver\n        return serverData\n      default:\n        return serverData\n    }\n  }\n\n  // Database Operations\n  private async executeCreate<T>(table: string, data: Partial<T>): Promise<T> {\n    if (!supabase) {\n      throw new Error('Supabase client is not initialized');\n    }\n    \n    const { data: result, error } = await (supabase as any).from(table).insert(data).select().single()\n\n    if (error) throw error\n    return result\n  }\n\n  private async executeUpdate<T>(table: string, id: string, data: Partial<T>): Promise<T> {\n    if (!supabase) {\n      throw new Error('Supabase client is not initialized');\n    }\n    \n    const { data: result, error } = await (supabase as any).from(table).update(data).eq(\"id\", id).select().single()\n\n    if (error) throw error\n    return result\n  }\n\n  private async executeDelete(table: string, id: string): Promise<void> {\n    if (!supabase) {\n      throw new Error('Supabase client is not initialized');\n    }\n    \n    const { error } = await supabase.from(table).delete().eq(\"id\", id)\n\n    if (error) throw error\n  }\n\n  private async executeRead<T>(table: string, filters?: any): Promise<T[]> {\n    if (!supabase) {\n      throw new Error('Supabase client is not initialized');\n    }\n    \n    let query = supabase.from(table).select(\"*\")\n\n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        query = query.eq(key, value as any)\n      })\n    }\n\n    const { data, error } = await query\n\n    if (error) throw error\n    return data || []\n  }\n\n  // Optimistic Updates\n  private createOptimisticRecord<T>(table: string, data: Partial<T>): T {\n    const optimisticRecord = {\n      id: crypto.randomUUID(),\n      ...data,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      _optimistic: true,\n    } as T\n\n    // Update state manager\n    this.updateStateManager(table, \"create\", optimisticRecord)\n\n    return optimisticRecord\n  }\n\n  private updateOptimisticRecord<T>(table: string, id: string, data: Partial<T>): T {\n    const optimisticRecord = {\n      id,\n      ...data,\n      updated_at: new Date().toISOString(),\n      _optimistic: true,\n    } as T\n\n    // Update state manager\n    this.updateStateManager(table, \"update\", optimisticRecord)\n\n    return optimisticRecord\n  }\n\n  private deleteOptimisticRecord(table: string, id: string): void {\n    // Update state manager\n    this.updateStateManager(table, \"delete\", { id })\n  }\n\n  private updateStateManager(table: string, operation: string, data: any): void {\n    const actionType = `${table.toUpperCase()}_${operation.toUpperCase()}` as any\n\n    try {\n      stateManager.dispatch({\n        type: actionType,\n        payload: data,\n        meta: {\n          timestamp: Date.now(),\n          source: \"persistence\",\n          optimistic: true,\n        },\n      })\n    } catch (error) {\n      // Silent error handling - Failed to update state manager\n    }\n  }\n\n  // Caching\n  private async cacheData(table: string, data: any[], filters?: any): Promise<void> {\n    try {\n      const cacheKey = this.getCacheKey(table, filters)\n      const cacheData = {\n        data,\n        timestamp: Date.now(),\n        filters,\n      }\n\n      let dataToStore = JSON.stringify(cacheData)\n\n      // Apply encryption if enabled\n      if (this.config.encryptionEnabled) {\n        dataToStore = await advancedEncryption.encrypt(dataToStore)\n      }\n\n      // Apply compression if enabled (after encryption)\n      if (this.config.compressionEnabled) {\n        // Simple compression simulation - in production, use actual compression\n        secureStorage.setItem(`cache_${cacheKey}`, dataToStore)\n      } else {\n        secureStorage.setItem(`cache_${cacheKey}`, dataToStore)\n      }\n    } catch (error) {\n      // Silent error handling - Failed to cache data\n    }\n  }\n\n  private async getCachedData<T>(table: string, filters?: any): Promise<T[]> {\n    try {\n      const cacheKey = this.getCacheKey(table, filters)\n      let cached = secureStorage.getItem(`cache_${cacheKey}`)\n\n      if (cached) {\n        // Decrypt if encryption is enabled\n        if (this.config.encryptionEnabled) {\n          cached = await advancedEncryption.decrypt(cached)\n        }\n\n        const cacheData = JSON.parse(cached)\n        return cacheData.data || []\n      }\n    } catch (error) {\n      // Silent error handling - Failed to get cached data\n    }\n    return []\n  }\n\n  private getCacheKey(table: string, filters?: any): string {\n    const filterString = filters ? JSON.stringify(filters) : \"all\"\n    return `${table}_${filterString}`\n  }\n\n  private async loadCachedData(): Promise<void> {\n    try {\n      const tables = [\"clients\", \"tasks\", \"projects\", \"invoices\"]\n\n      for (const table of tables) {\n        const cachedData = await this.getCachedData(table)\n        if (cachedData.length > 0) {\n          this.updateStateManager(table, \"load_success\", {\n            items: cachedData,\n            pagination: { page: 1, limit: cachedData.length, total: cachedData.length, hasMore: false },\n          })\n        }\n      }\n    } catch (error) {\n      // Silent error handling - Failed to load cached data\n    }\n  }\n\n  // Sync Queue Management\n  private addToSyncQueue(operation: SyncOperation): void {\n    this.syncQueue.push(operation)\n    this.saveSyncQueue()\n  }\n\n  private saveSyncQueue(): void {\n    try {\n      secureStorage.setJSON(\"sync_queue\", this.syncQueue)\n    } catch (error) {\n      // Silent error handling - Failed to save sync queue\n    }\n  }\n\n  private loadSyncQueue(): void {\n    try {\n      const saved = secureStorage.getJSON(\"sync_queue\")\n      if (saved && Array.isArray(saved)) {\n        this.syncQueue = saved as SyncOperation[]\n      }\n    } catch (error) {\n      // Silent error handling - Failed to load sync queue\n      this.syncQueue = []\n    }\n  }\n\n  // Event Listeners\n  private setupEventListeners(): void {\n    // Online/Offline detection\n    window.addEventListener(\"online\", () => {\n      this.isOnline = true\n      // Silent logging - Connection restored, starting sync\n      this.startSyncProcess()\n    })\n\n    window.addEventListener(\"offline\", () => {\n      this.isOnline = false\n      // Silent logging - Connection lost, entering offline mode\n      this.stopSyncProcess()\n    })\n\n    // Page visibility for sync optimization\n    document.addEventListener(\"visibilitychange\", () => {\n      if (document.visibilityState === \"visible\" && this.isOnline) {\n        this.syncAll()\n      }\n    })\n  }\n\n  private startSyncProcess(): void {\n    if (this.syncInterval) {\n      clearInterval(this.syncInterval)\n    }\n\n    // Initial sync\n    this.syncAll()\n\n    // Periodic sync\n    this.syncInterval = setInterval(() => {\n      this.syncAll()\n    }, this.config.syncInterval)\n  }\n\n  private stopSyncProcess(): void {\n    if (this.syncInterval) {\n      clearInterval(this.syncInterval)\n      this.syncInterval = null\n    }\n  }\n\n  private setupConflictResolvers(): void {\n    // Default conflict resolvers for different tables\n    this.setConflictResolver(\"clients\", {\n      strategy: \"merge\",\n      resolver: (client, server) => ({\n        ...server,\n        ...client,\n        updated_at: new Date().toISOString(),\n      }),\n    })\n\n    this.setConflictResolver(\"tasks\", {\n      strategy: \"client-wins\", // Tasks are usually more current on client\n    })\n\n    this.setConflictResolver(\"projects\", {\n      strategy: \"merge\",\n    })\n  }\n\n  // Public API\n  getSyncStatus(): {\n    isOnline: boolean\n    queueLength: number\n    pendingOperations: number\n    failedOperations: number\n  } {\n    return {\n      isOnline: this.isOnline,\n      queueLength: this.syncQueue.length,\n      pendingOperations: this.syncQueue.filter((op) => op.status === \"pending\").length,\n      failedOperations: this.syncQueue.filter((op) => op.status === \"failed\").length,\n    }\n  }\n\n  async clearCache(): Promise<void> {\n    try {\n      const keys = secureStorage.getAllKeys().filter((key) => key.startsWith(\"cache_\"))\n      keys.forEach((key) => secureStorage.removeItem(key))\n      // Silent logging - Cache cleared\n    } catch (error) {\n      // Silent error handling - Failed to clear cache\n    }\n  }\n\n  async retryFailedOperations(): Promise<void> {\n    const failedOperations = this.syncQueue.filter((op) => op.status === \"failed\")\n\n    for (const operation of failedOperations) {\n      operation.status = \"pending\"\n      operation.retries = 0\n      operation.error = undefined\n    }\n\n    this.saveSyncQueue()\n\n    if (this.isOnline) {\n      await this.syncAll()\n    }\n  }\n\n  getFailedOperations(): SyncOperation[] {\n    return this.syncQueue.filter((op) => op.status === \"failed\")\n  }\n\n  async exportData(): Promise<string> {\n    const exportData = {\n      syncQueue: this.syncQueue,\n      cache: this.getAllCachedData(),\n      timestamp: new Date().toISOString(),\n    }\n\n    return JSON.stringify(exportData, null, 2)\n  }\n\n  private getAllCachedData(): Record<string, any> {\n    const cacheData: Record<string, any> = {}\n\n    secureStorage.getAllKeys().forEach((key) => {\n      if (key.startsWith(\"cache_\")) {\n        try {\n          cacheData[key] = secureStorage.getJSON(key) || {}\n        } catch (error) {\n          // Silent error handling - Failed to parse cached data\n        }\n      }\n    })\n\n    return cacheData\n  }\n}\n\n// Create singleton instance\nexport const persistenceService = new PersistenceService()\n\nexport default persistenceService\n"],
      names: ["persistenceService", "PersistenceService", "config", "syncQueue", "isOnline", "navigator", "onLine", "syncInterval", "conflictResolvers", "Map", "enableOfflineMode", "maxRetries", "retryDelay", "compressionEnabled", "encryptionEnabled", "setupEventListeners", "loadSyncQueue", "setupConflictResolvers", "initialize", "backendService", "startSyncProcess", "loadCachedData", "error", "create", "table", "data", "operation", "id", "crypto", "randomUUID", "type", "timestamp", "Date", "now", "retries", "status", "result", "executeCreate", "addToSyncQueue", "createOptimisticRecord", "Error", "update", "executeUpdate", "updateOptimisticRecord", "delete", "executeDelete", "deleteOptimisticRecord", "read", "filters", "executeRead", "cacheData", "getCachedData", "syncAll", "pendingOperations", "filter", "op", "syncOperation", "saveSyncQueue", "message", "setConflictResolver", "resolution", "set", "resolveConflict", "clientData", "serverData", "resolver", "get", "strategy", "updated_at", "toISOString", "supabase", "from", "insert", "select", "single", "eq", "query", "Object", "entries", "forEach", "key", "value", "optimisticRecord", "created_at", "_optimistic", "updateStateManager", "actionType", "toUpperCase", "stateManager", "dispatch", "payload", "meta", "source", "optimistic", "cacheKey", "getCacheKey", "dataToStore", "JSON", "stringify", "advancedEncryption", "encrypt", "secureStorage", "setItem", "cached", "getItem", "decrypt", "parse", "filterString", "tables", "cachedData", "length", "items", "pagination", "page", "limit", "total", "hasMore", "push", "setJSON", "saved", "getJSON", "Array", "isArray", "window", "addEventListener", "stopSyncProcess", "document", "visibilityState", "clearInterval", "setInterval", "client", "server", "getSyncStatus", "queueLength", "failedOperations", "clearCache", "keys", "getAllKeys", "startsWith", "removeItem", "retryFailedOperations", "undefined", "getFailedOperations", "exportData", "cache", "getAllCachedData"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "29f4d58ef38772fd1ef12deff1619fbffe149ce3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ei6gptgc4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ei6gptgc4();
cov_1ei6gptgc4().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1ei6gptgc4().f[0]++;
  cov_1ei6gptgc4().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1ei6gptgc4().s[3]++;
_export(exports, {
  get default() {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[1]++;
    cov_1ei6gptgc4().s[4]++;
    return _default;
  },
  get persistenceService() {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[2]++;
    cov_1ei6gptgc4().s[5]++;
    return persistenceService;
  }
});
const _supabase =
/* istanbul ignore next */
(cov_1ei6gptgc4().s[6]++, require("../lib/supabase"));
const _backendService =
/* istanbul ignore next */
(cov_1ei6gptgc4().s[7]++, require("./backendService"));
const _stateManager =
/* istanbul ignore next */
(cov_1ei6gptgc4().s[8]++, require("./stateManager"));
const _secureStorage =
/* istanbul ignore next */
(cov_1ei6gptgc4().s[9]++, require("../utils/secureStorage"));
const _encryption =
/* istanbul ignore next */
(cov_1ei6gptgc4().s[10]++, require("../utils/encryption"));
class PersistenceService {
  constructor(config =
  /* istanbul ignore next */
  (cov_1ei6gptgc4().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[3]++;
    cov_1ei6gptgc4().s[11]++;
    this.syncQueue = [];
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[12]++;
    this.isOnline = navigator.onLine;
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[13]++;
    this.syncInterval = null;
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[14]++;
    this.conflictResolvers = new Map();
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[15]++;
    this.config = {
      enableOfflineMode: true,
      syncInterval: 30000,
      maxRetries: 3,
      retryDelay: 5000,
      compressionEnabled: true,
      encryptionEnabled: true,
      ...config
    };
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[16]++;
    this.setupEventListeners();
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[17]++;
    this.loadSyncQueue();
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[18]++;
    this.setupConflictResolvers();
  }
  async initialize() {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[4]++;
    cov_1ei6gptgc4().s[19]++;
    try {
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[20]++;
      // Initialize backend service
      await _backendService.backendService.initialize();
      // Start sync process if online
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[21]++;
      if (this.isOnline) {
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[1][0]++;
        cov_1ei6gptgc4().s[22]++;
        this.startSyncProcess();
      } else
      /* istanbul ignore next */
      {
        cov_1ei6gptgc4().b[1][1]++;
      }
      // Load cached data if offline
      cov_1ei6gptgc4().s[23]++;
      if (
      /* istanbul ignore next */
      (cov_1ei6gptgc4().b[3][0]++, !this.isOnline) &&
      /* istanbul ignore next */
      (cov_1ei6gptgc4().b[3][1]++, this.config.enableOfflineMode)) {
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[2][0]++;
        cov_1ei6gptgc4().s[24]++;
        await this.loadCachedData();
      } else
      /* istanbul ignore next */
      {
        cov_1ei6gptgc4().b[2][1]++;
      }
      // Silent logging - Persistence service initialized
    } catch (error) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[25]++;
      // Silent error handling - Failed to initialize persistence service
      throw error;
    }
  }
  // CRUD Operations with offline support
  async create(table, data) {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[5]++;
    const operation =
    /* istanbul ignore next */
    (cov_1ei6gptgc4().s[26]++, {
      id: crypto.randomUUID(),
      type: "create",
      table,
      data,
      timestamp: Date.now(),
      retries: 0,
      status: "pending"
    });
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[27]++;
    if (this.isOnline) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().b[4][0]++;
      cov_1ei6gptgc4().s[28]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_1ei6gptgc4().s[29]++, await this.executeCreate(table, data));
        /* istanbul ignore next */
        cov_1ei6gptgc4().s[30]++;
        operation.status = "completed";
        /* istanbul ignore next */
        cov_1ei6gptgc4().s[31]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_1ei6gptgc4().s[32]++;
        if (this.config.enableOfflineMode) {
          /* istanbul ignore next */
          cov_1ei6gptgc4().b[5][0]++;
          cov_1ei6gptgc4().s[33]++;
          this.addToSyncQueue(operation);
          /* istanbul ignore next */
          cov_1ei6gptgc4().s[34]++;
          return this.createOptimisticRecord(table, data);
        } else
        /* istanbul ignore next */
        {
          cov_1ei6gptgc4().b[5][1]++;
        }
        cov_1ei6gptgc4().s[35]++;
        throw error;
      }
    } else {
      /* istanbul ignore next */
      cov_1ei6gptgc4().b[4][1]++;
      cov_1ei6gptgc4().s[36]++;
      if (this.config.enableOfflineMode) {
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[6][0]++;
        cov_1ei6gptgc4().s[37]++;
        this.addToSyncQueue(operation);
        /* istanbul ignore next */
        cov_1ei6gptgc4().s[38]++;
        return this.createOptimisticRecord(table, data);
      } else {
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[6][1]++;
        cov_1ei6gptgc4().s[39]++;
        throw new Error("Offline mode disabled and no internet connection");
      }
    }
  }
  async update(table, id, data) {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[6]++;
    const operation =
    /* istanbul ignore next */
    (cov_1ei6gptgc4().s[40]++, {
      id: crypto.randomUUID(),
      type: "update",
      table,
      data: {
        id,
        ...data
      },
      timestamp: Date.now(),
      retries: 0,
      status: "pending"
    });
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[41]++;
    if (this.isOnline) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().b[7][0]++;
      cov_1ei6gptgc4().s[42]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_1ei6gptgc4().s[43]++, await this.executeUpdate(table, id, data));
        /* istanbul ignore next */
        cov_1ei6gptgc4().s[44]++;
        operation.status = "completed";
        /* istanbul ignore next */
        cov_1ei6gptgc4().s[45]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_1ei6gptgc4().s[46]++;
        if (this.config.enableOfflineMode) {
          /* istanbul ignore next */
          cov_1ei6gptgc4().b[8][0]++;
          cov_1ei6gptgc4().s[47]++;
          this.addToSyncQueue(operation);
          /* istanbul ignore next */
          cov_1ei6gptgc4().s[48]++;
          return this.updateOptimisticRecord(table, id, data);
        } else
        /* istanbul ignore next */
        {
          cov_1ei6gptgc4().b[8][1]++;
        }
        cov_1ei6gptgc4().s[49]++;
        throw error;
      }
    } else {
      /* istanbul ignore next */
      cov_1ei6gptgc4().b[7][1]++;
      cov_1ei6gptgc4().s[50]++;
      if (this.config.enableOfflineMode) {
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[9][0]++;
        cov_1ei6gptgc4().s[51]++;
        this.addToSyncQueue(operation);
        /* istanbul ignore next */
        cov_1ei6gptgc4().s[52]++;
        return this.updateOptimisticRecord(table, id, data);
      } else {
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[9][1]++;
        cov_1ei6gptgc4().s[53]++;
        throw new Error("Offline mode disabled and no internet connection");
      }
    }
  }
  async delete(table, id) {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[7]++;
    const operation =
    /* istanbul ignore next */
    (cov_1ei6gptgc4().s[54]++, {
      id: crypto.randomUUID(),
      type: "delete",
      table,
      data: {
        id
      },
      timestamp: Date.now(),
      retries: 0,
      status: "pending"
    });
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[55]++;
    if (this.isOnline) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().b[10][0]++;
      cov_1ei6gptgc4().s[56]++;
      try {
        /* istanbul ignore next */
        cov_1ei6gptgc4().s[57]++;
        await this.executeDelete(table, id);
        /* istanbul ignore next */
        cov_1ei6gptgc4().s[58]++;
        operation.status = "completed";
      } catch (error) {
        /* istanbul ignore next */
        cov_1ei6gptgc4().s[59]++;
        if (this.config.enableOfflineMode) {
          /* istanbul ignore next */
          cov_1ei6gptgc4().b[11][0]++;
          cov_1ei6gptgc4().s[60]++;
          this.addToSyncQueue(operation);
          /* istanbul ignore next */
          cov_1ei6gptgc4().s[61]++;
          this.deleteOptimisticRecord(table, id);
        } else {
          /* istanbul ignore next */
          cov_1ei6gptgc4().b[11][1]++;
          cov_1ei6gptgc4().s[62]++;
          throw error;
        }
      }
    } else {
      /* istanbul ignore next */
      cov_1ei6gptgc4().b[10][1]++;
      cov_1ei6gptgc4().s[63]++;
      if (this.config.enableOfflineMode) {
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[12][0]++;
        cov_1ei6gptgc4().s[64]++;
        this.addToSyncQueue(operation);
        /* istanbul ignore next */
        cov_1ei6gptgc4().s[65]++;
        this.deleteOptimisticRecord(table, id);
      } else {
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[12][1]++;
        cov_1ei6gptgc4().s[66]++;
        throw new Error("Offline mode disabled and no internet connection");
      }
    }
  }
  async read(table, filters) {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[8]++;
    cov_1ei6gptgc4().s[67]++;
    if (this.isOnline) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().b[13][0]++;
      cov_1ei6gptgc4().s[68]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_1ei6gptgc4().s[69]++, await this.executeRead(table, filters));
        // Cache the result for offline access
        /* istanbul ignore next */
        cov_1ei6gptgc4().s[70]++;
        await this.cacheData(table, result, filters);
        /* istanbul ignore next */
        cov_1ei6gptgc4().s[71]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_1ei6gptgc4().s[72]++;
        if (this.config.enableOfflineMode) {
          /* istanbul ignore next */
          cov_1ei6gptgc4().b[14][0]++;
          cov_1ei6gptgc4().s[73]++;
          return await this.getCachedData(table, filters);
        } else
        /* istanbul ignore next */
        {
          cov_1ei6gptgc4().b[14][1]++;
        }
        cov_1ei6gptgc4().s[74]++;
        throw error;
      }
    } else {
      /* istanbul ignore next */
      cov_1ei6gptgc4().b[13][1]++;
      cov_1ei6gptgc4().s[75]++;
      if (this.config.enableOfflineMode) {
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[15][0]++;
        cov_1ei6gptgc4().s[76]++;
        return await this.getCachedData(table, filters);
      } else {
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[15][1]++;
        cov_1ei6gptgc4().s[77]++;
        throw new Error("Offline mode disabled and no internet connection");
      }
    }
  }
  // Sync Operations
  async syncAll() {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[9]++;
    cov_1ei6gptgc4().s[78]++;
    if (!this.isOnline) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().b[16][0]++;
      cov_1ei6gptgc4().s[79]++;
      // Silent logging - Cannot sync while offline
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1ei6gptgc4().b[16][1]++;
    }
    // Silent logging - Starting sync operations
    const pendingOperations =
    /* istanbul ignore next */
    (cov_1ei6gptgc4().s[80]++, this.syncQueue.filter(op => {
      /* istanbul ignore next */
      cov_1ei6gptgc4().f[10]++;
      cov_1ei6gptgc4().s[81]++;
      return op.status === "pending";
    }));
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[82]++;
    for (const operation of pendingOperations) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[83]++;
      await this.syncOperation(operation);
    }
    // Remove completed operations
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[84]++;
    this.syncQueue = this.syncQueue.filter(op => {
      /* istanbul ignore next */
      cov_1ei6gptgc4().f[11]++;
      cov_1ei6gptgc4().s[85]++;
      return op.status !== "completed";
    });
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[86]++;
    this.saveSyncQueue();
    // Silent logging - Sync completed
  }
  async syncOperation(operation) {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[12]++;
    cov_1ei6gptgc4().s[87]++;
    operation.status = "syncing";
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[88]++;
    try {
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[89]++;
      switch (operation.type) {
        case "create":
          /* istanbul ignore next */
          cov_1ei6gptgc4().b[17][0]++;
          cov_1ei6gptgc4().s[90]++;
          await this.executeCreate(operation.table, operation.data);
          /* istanbul ignore next */
          cov_1ei6gptgc4().s[91]++;
          break;
        case "update":
          /* istanbul ignore next */
          cov_1ei6gptgc4().b[17][1]++;
          cov_1ei6gptgc4().s[92]++;
          await this.executeUpdate(operation.table, operation.data.id, operation.data);
          /* istanbul ignore next */
          cov_1ei6gptgc4().s[93]++;
          break;
        case "delete":
          /* istanbul ignore next */
          cov_1ei6gptgc4().b[17][2]++;
          cov_1ei6gptgc4().s[94]++;
          await this.executeDelete(operation.table, operation.data.id);
          /* istanbul ignore next */
          cov_1ei6gptgc4().s[95]++;
          break;
      }
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[96]++;
      operation.status = "completed";
      // Silent logging - Synced operation
    } catch (error) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[97]++;
      operation.retries++;
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[98]++;
      operation.error = error.message;
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[99]++;
      if (operation.retries >= this.config.maxRetries) {
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[18][0]++;
        cov_1ei6gptgc4().s[100]++;
        operation.status = "failed";
        // Silent error handling - Failed to sync operation after max retries
      } else {
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[18][1]++;
        cov_1ei6gptgc4().s[101]++;
        operation.status = "pending";
        // Silent error handling - Sync failed, will retry
      }
    }
  }
  // Conflict Resolution
  setConflictResolver(table, resolution) {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[13]++;
    cov_1ei6gptgc4().s[102]++;
    this.conflictResolvers.set(table, resolution);
  }
  async resolveConflict(table, clientData, serverData) {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[14]++;
    const resolver =
    /* istanbul ignore next */
    (cov_1ei6gptgc4().s[103]++,
    /* istanbul ignore next */
    (cov_1ei6gptgc4().b[19][0]++, this.conflictResolvers.get(table)) ||
    /* istanbul ignore next */
    (cov_1ei6gptgc4().b[19][1]++, {
      strategy: "server-wins"
    }));
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[104]++;
    switch (resolver.strategy) {
      case "client-wins":
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[20][0]++;
        cov_1ei6gptgc4().s[105]++;
        return clientData;
      case "server-wins":
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[20][1]++;
        cov_1ei6gptgc4().s[106]++;
        return serverData;
      case "merge":
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[20][2]++;
        cov_1ei6gptgc4().s[107]++;
        return {
          ...serverData,
          ...clientData,
          updated_at: new Date().toISOString()
        };
      case "manual":
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[20][3]++;
        cov_1ei6gptgc4().s[108]++;
        if (resolver.resolver) {
          /* istanbul ignore next */
          cov_1ei6gptgc4().b[21][0]++;
          cov_1ei6gptgc4().s[109]++;
          return resolver.resolver(clientData, serverData);
        } else
        /* istanbul ignore next */
        {
          cov_1ei6gptgc4().b[21][1]++;
        }
        // Fallback to server wins if no custom resolver
        cov_1ei6gptgc4().s[110]++;
        return serverData;
      default:
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[20][4]++;
        cov_1ei6gptgc4().s[111]++;
        return serverData;
    }
  }
  // Database Operations
  async executeCreate(table, data) {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[15]++;
    cov_1ei6gptgc4().s[112]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().b[22][0]++;
      cov_1ei6gptgc4().s[113]++;
      throw new Error('Supabase client is not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_1ei6gptgc4().b[22][1]++;
    }
    const {
      data: result,
      error
    } =
    /* istanbul ignore next */
    (cov_1ei6gptgc4().s[114]++, await _supabase.supabase.from(table).insert(data).select().single());
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[115]++;
    if (error) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().b[23][0]++;
      cov_1ei6gptgc4().s[116]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_1ei6gptgc4().b[23][1]++;
    }
    cov_1ei6gptgc4().s[117]++;
    return result;
  }
  async executeUpdate(table, id, data) {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[16]++;
    cov_1ei6gptgc4().s[118]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().b[24][0]++;
      cov_1ei6gptgc4().s[119]++;
      throw new Error('Supabase client is not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_1ei6gptgc4().b[24][1]++;
    }
    const {
      data: result,
      error
    } =
    /* istanbul ignore next */
    (cov_1ei6gptgc4().s[120]++, await _supabase.supabase.from(table).update(data).eq("id", id).select().single());
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[121]++;
    if (error) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().b[25][0]++;
      cov_1ei6gptgc4().s[122]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_1ei6gptgc4().b[25][1]++;
    }
    cov_1ei6gptgc4().s[123]++;
    return result;
  }
  async executeDelete(table, id) {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[17]++;
    cov_1ei6gptgc4().s[124]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().b[26][0]++;
      cov_1ei6gptgc4().s[125]++;
      throw new Error('Supabase client is not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_1ei6gptgc4().b[26][1]++;
    }
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_1ei6gptgc4().s[126]++, await _supabase.supabase.from(table).delete().eq("id", id));
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[127]++;
    if (error) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().b[27][0]++;
      cov_1ei6gptgc4().s[128]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_1ei6gptgc4().b[27][1]++;
    }
  }
  async executeRead(table, filters) {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[18]++;
    cov_1ei6gptgc4().s[129]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().b[28][0]++;
      cov_1ei6gptgc4().s[130]++;
      throw new Error('Supabase client is not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_1ei6gptgc4().b[28][1]++;
    }
    let query =
    /* istanbul ignore next */
    (cov_1ei6gptgc4().s[131]++, _supabase.supabase.from(table).select("*"));
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[132]++;
    if (filters) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().b[29][0]++;
      cov_1ei6gptgc4().s[133]++;
      Object.entries(filters).forEach(([key, value]) => {
        /* istanbul ignore next */
        cov_1ei6gptgc4().f[19]++;
        cov_1ei6gptgc4().s[134]++;
        query = query.eq(key, value);
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ei6gptgc4().b[29][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1ei6gptgc4().s[135]++, await query);
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[136]++;
    if (error) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().b[30][0]++;
      cov_1ei6gptgc4().s[137]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_1ei6gptgc4().b[30][1]++;
    }
    cov_1ei6gptgc4().s[138]++;
    return /* istanbul ignore next */(cov_1ei6gptgc4().b[31][0]++, data) ||
    /* istanbul ignore next */
    (cov_1ei6gptgc4().b[31][1]++, []);
  }
  // Optimistic Updates
  createOptimisticRecord(table, data) {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[20]++;
    const optimisticRecord =
    /* istanbul ignore next */
    (cov_1ei6gptgc4().s[139]++, {
      id: crypto.randomUUID(),
      ...data,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      _optimistic: true
    });
    // Update state manager
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[140]++;
    this.updateStateManager(table, "create", optimisticRecord);
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[141]++;
    return optimisticRecord;
  }
  updateOptimisticRecord(table, id, data) {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[21]++;
    const optimisticRecord =
    /* istanbul ignore next */
    (cov_1ei6gptgc4().s[142]++, {
      id,
      ...data,
      updated_at: new Date().toISOString(),
      _optimistic: true
    });
    // Update state manager
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[143]++;
    this.updateStateManager(table, "update", optimisticRecord);
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[144]++;
    return optimisticRecord;
  }
  deleteOptimisticRecord(table, id) {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[22]++;
    cov_1ei6gptgc4().s[145]++;
    // Update state manager
    this.updateStateManager(table, "delete", {
      id
    });
  }
  updateStateManager(table, operation, data) {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[23]++;
    const actionType =
    /* istanbul ignore next */
    (cov_1ei6gptgc4().s[146]++, `${table.toUpperCase()}_${operation.toUpperCase()}`);
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[147]++;
    try {
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[148]++;
      _stateManager.stateManager.dispatch({
        type: actionType,
        payload: data,
        meta: {
          timestamp: Date.now(),
          source: "persistence",
          optimistic: true
        }
      });
    } catch (error) {
      // Silent error handling - Failed to update state manager
    }
  }
  // Caching
  async cacheData(table, data, filters) {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[24]++;
    cov_1ei6gptgc4().s[149]++;
    try {
      const cacheKey =
      /* istanbul ignore next */
      (cov_1ei6gptgc4().s[150]++, this.getCacheKey(table, filters));
      const cacheData =
      /* istanbul ignore next */
      (cov_1ei6gptgc4().s[151]++, {
        data,
        timestamp: Date.now(),
        filters
      });
      let dataToStore =
      /* istanbul ignore next */
      (cov_1ei6gptgc4().s[152]++, JSON.stringify(cacheData));
      // Apply encryption if enabled
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[153]++;
      if (this.config.encryptionEnabled) {
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[32][0]++;
        cov_1ei6gptgc4().s[154]++;
        dataToStore = await _encryption.advancedEncryption.encrypt(dataToStore);
      } else
      /* istanbul ignore next */
      {
        cov_1ei6gptgc4().b[32][1]++;
      }
      // Apply compression if enabled (after encryption)
      cov_1ei6gptgc4().s[155]++;
      if (this.config.compressionEnabled) {
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[33][0]++;
        cov_1ei6gptgc4().s[156]++;
        // Simple compression simulation - in production, use actual compression
        _secureStorage.secureStorage.setItem(`cache_${cacheKey}`, dataToStore);
      } else {
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[33][1]++;
        cov_1ei6gptgc4().s[157]++;
        _secureStorage.secureStorage.setItem(`cache_${cacheKey}`, dataToStore);
      }
    } catch (error) {
      // Silent error handling - Failed to cache data
    }
  }
  async getCachedData(table, filters) {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[25]++;
    cov_1ei6gptgc4().s[158]++;
    try {
      const cacheKey =
      /* istanbul ignore next */
      (cov_1ei6gptgc4().s[159]++, this.getCacheKey(table, filters));
      let cached =
      /* istanbul ignore next */
      (cov_1ei6gptgc4().s[160]++, _secureStorage.secureStorage.getItem(`cache_${cacheKey}`));
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[161]++;
      if (cached) {
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[34][0]++;
        cov_1ei6gptgc4().s[162]++;
        // Decrypt if encryption is enabled
        if (this.config.encryptionEnabled) {
          /* istanbul ignore next */
          cov_1ei6gptgc4().b[35][0]++;
          cov_1ei6gptgc4().s[163]++;
          cached = await _encryption.advancedEncryption.decrypt(cached);
        } else
        /* istanbul ignore next */
        {
          cov_1ei6gptgc4().b[35][1]++;
        }
        const cacheData =
        /* istanbul ignore next */
        (cov_1ei6gptgc4().s[164]++, JSON.parse(cached));
        /* istanbul ignore next */
        cov_1ei6gptgc4().s[165]++;
        return /* istanbul ignore next */(cov_1ei6gptgc4().b[36][0]++, cacheData.data) ||
        /* istanbul ignore next */
        (cov_1ei6gptgc4().b[36][1]++, []);
      } else
      /* istanbul ignore next */
      {
        cov_1ei6gptgc4().b[34][1]++;
      }
    } catch (error) {
      // Silent error handling - Failed to get cached data
    }
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[166]++;
    return [];
  }
  getCacheKey(table, filters) {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[26]++;
    const filterString =
    /* istanbul ignore next */
    (cov_1ei6gptgc4().s[167]++, filters ?
    /* istanbul ignore next */
    (cov_1ei6gptgc4().b[37][0]++, JSON.stringify(filters)) :
    /* istanbul ignore next */
    (cov_1ei6gptgc4().b[37][1]++, "all"));
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[168]++;
    return `${table}_${filterString}`;
  }
  async loadCachedData() {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[27]++;
    cov_1ei6gptgc4().s[169]++;
    try {
      const tables =
      /* istanbul ignore next */
      (cov_1ei6gptgc4().s[170]++, ["clients", "tasks", "projects", "invoices"]);
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[171]++;
      for (const table of tables) {
        const cachedData =
        /* istanbul ignore next */
        (cov_1ei6gptgc4().s[172]++, await this.getCachedData(table));
        /* istanbul ignore next */
        cov_1ei6gptgc4().s[173]++;
        if (cachedData.length > 0) {
          /* istanbul ignore next */
          cov_1ei6gptgc4().b[38][0]++;
          cov_1ei6gptgc4().s[174]++;
          this.updateStateManager(table, "load_success", {
            items: cachedData,
            pagination: {
              page: 1,
              limit: cachedData.length,
              total: cachedData.length,
              hasMore: false
            }
          });
        } else
        /* istanbul ignore next */
        {
          cov_1ei6gptgc4().b[38][1]++;
        }
      }
    } catch (error) {
      // Silent error handling - Failed to load cached data
    }
  }
  // Sync Queue Management
  addToSyncQueue(operation) {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[28]++;
    cov_1ei6gptgc4().s[175]++;
    this.syncQueue.push(operation);
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[176]++;
    this.saveSyncQueue();
  }
  saveSyncQueue() {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[29]++;
    cov_1ei6gptgc4().s[177]++;
    try {
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[178]++;
      _secureStorage.secureStorage.setJSON("sync_queue", this.syncQueue);
    } catch (error) {
      // Silent error handling - Failed to save sync queue
    }
  }
  loadSyncQueue() {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[30]++;
    cov_1ei6gptgc4().s[179]++;
    try {
      const saved =
      /* istanbul ignore next */
      (cov_1ei6gptgc4().s[180]++, _secureStorage.secureStorage.getJSON("sync_queue"));
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[181]++;
      if (
      /* istanbul ignore next */
      (cov_1ei6gptgc4().b[40][0]++, saved) &&
      /* istanbul ignore next */
      (cov_1ei6gptgc4().b[40][1]++, Array.isArray(saved))) {
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[39][0]++;
        cov_1ei6gptgc4().s[182]++;
        this.syncQueue = saved;
      } else
      /* istanbul ignore next */
      {
        cov_1ei6gptgc4().b[39][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[183]++;
      // Silent error handling - Failed to load sync queue
      this.syncQueue = [];
    }
  }
  // Event Listeners
  setupEventListeners() {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[31]++;
    cov_1ei6gptgc4().s[184]++;
    // Online/Offline detection
    window.addEventListener("online", () => {
      /* istanbul ignore next */
      cov_1ei6gptgc4().f[32]++;
      cov_1ei6gptgc4().s[185]++;
      this.isOnline = true;
      // Silent logging - Connection restored, starting sync
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[186]++;
      this.startSyncProcess();
    });
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[187]++;
    window.addEventListener("offline", () => {
      /* istanbul ignore next */
      cov_1ei6gptgc4().f[33]++;
      cov_1ei6gptgc4().s[188]++;
      this.isOnline = false;
      // Silent logging - Connection lost, entering offline mode
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[189]++;
      this.stopSyncProcess();
    });
    // Page visibility for sync optimization
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[190]++;
    document.addEventListener("visibilitychange", () => {
      /* istanbul ignore next */
      cov_1ei6gptgc4().f[34]++;
      cov_1ei6gptgc4().s[191]++;
      if (
      /* istanbul ignore next */
      (cov_1ei6gptgc4().b[42][0]++, document.visibilityState === "visible") &&
      /* istanbul ignore next */
      (cov_1ei6gptgc4().b[42][1]++, this.isOnline)) {
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[41][0]++;
        cov_1ei6gptgc4().s[192]++;
        this.syncAll();
      } else
      /* istanbul ignore next */
      {
        cov_1ei6gptgc4().b[41][1]++;
      }
    });
  }
  startSyncProcess() {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[35]++;
    cov_1ei6gptgc4().s[193]++;
    if (this.syncInterval) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().b[43][0]++;
      cov_1ei6gptgc4().s[194]++;
      clearInterval(this.syncInterval);
    } else
    /* istanbul ignore next */
    {
      cov_1ei6gptgc4().b[43][1]++;
    }
    // Initial sync
    cov_1ei6gptgc4().s[195]++;
    this.syncAll();
    // Periodic sync
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[196]++;
    this.syncInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_1ei6gptgc4().f[36]++;
      cov_1ei6gptgc4().s[197]++;
      this.syncAll();
    }, this.config.syncInterval);
  }
  stopSyncProcess() {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[37]++;
    cov_1ei6gptgc4().s[198]++;
    if (this.syncInterval) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().b[44][0]++;
      cov_1ei6gptgc4().s[199]++;
      clearInterval(this.syncInterval);
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[200]++;
      this.syncInterval = null;
    } else
    /* istanbul ignore next */
    {
      cov_1ei6gptgc4().b[44][1]++;
    }
  }
  setupConflictResolvers() {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[38]++;
    cov_1ei6gptgc4().s[201]++;
    // Default conflict resolvers for different tables
    this.setConflictResolver("clients", {
      strategy: "merge",
      resolver: (client, server) => {
        /* istanbul ignore next */
        cov_1ei6gptgc4().f[39]++;
        cov_1ei6gptgc4().s[202]++;
        return {
          ...server,
          ...client,
          updated_at: new Date().toISOString()
        };
      }
    });
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[203]++;
    this.setConflictResolver("tasks", {
      strategy: "client-wins"
    });
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[204]++;
    this.setConflictResolver("projects", {
      strategy: "merge"
    });
  }
  // Public API
  getSyncStatus() {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[40]++;
    cov_1ei6gptgc4().s[205]++;
    return {
      isOnline: this.isOnline,
      queueLength: this.syncQueue.length,
      pendingOperations: this.syncQueue.filter(op => {
        /* istanbul ignore next */
        cov_1ei6gptgc4().f[41]++;
        cov_1ei6gptgc4().s[206]++;
        return op.status === "pending";
      }).length,
      failedOperations: this.syncQueue.filter(op => {
        /* istanbul ignore next */
        cov_1ei6gptgc4().f[42]++;
        cov_1ei6gptgc4().s[207]++;
        return op.status === "failed";
      }).length
    };
  }
  async clearCache() {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[43]++;
    cov_1ei6gptgc4().s[208]++;
    try {
      const keys =
      /* istanbul ignore next */
      (cov_1ei6gptgc4().s[209]++, _secureStorage.secureStorage.getAllKeys().filter(key => {
        /* istanbul ignore next */
        cov_1ei6gptgc4().f[44]++;
        cov_1ei6gptgc4().s[210]++;
        return key.startsWith("cache_");
      }));
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[211]++;
      keys.forEach(key => {
        /* istanbul ignore next */
        cov_1ei6gptgc4().f[45]++;
        cov_1ei6gptgc4().s[212]++;
        return _secureStorage.secureStorage.removeItem(key);
      });
      // Silent logging - Cache cleared
    } catch (error) {
      // Silent error handling - Failed to clear cache
    }
  }
  async retryFailedOperations() {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[46]++;
    const failedOperations =
    /* istanbul ignore next */
    (cov_1ei6gptgc4().s[213]++, this.syncQueue.filter(op => {
      /* istanbul ignore next */
      cov_1ei6gptgc4().f[47]++;
      cov_1ei6gptgc4().s[214]++;
      return op.status === "failed";
    }));
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[215]++;
    for (const operation of failedOperations) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[216]++;
      operation.status = "pending";
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[217]++;
      operation.retries = 0;
      /* istanbul ignore next */
      cov_1ei6gptgc4().s[218]++;
      operation.error = undefined;
    }
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[219]++;
    this.saveSyncQueue();
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[220]++;
    if (this.isOnline) {
      /* istanbul ignore next */
      cov_1ei6gptgc4().b[45][0]++;
      cov_1ei6gptgc4().s[221]++;
      await this.syncAll();
    } else
    /* istanbul ignore next */
    {
      cov_1ei6gptgc4().b[45][1]++;
    }
  }
  getFailedOperations() {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[48]++;
    cov_1ei6gptgc4().s[222]++;
    return this.syncQueue.filter(op => {
      /* istanbul ignore next */
      cov_1ei6gptgc4().f[49]++;
      cov_1ei6gptgc4().s[223]++;
      return op.status === "failed";
    });
  }
  async exportData() {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[50]++;
    const exportData =
    /* istanbul ignore next */
    (cov_1ei6gptgc4().s[224]++, {
      syncQueue: this.syncQueue,
      cache: this.getAllCachedData(),
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[225]++;
    return JSON.stringify(exportData, null, 2);
  }
  getAllCachedData() {
    /* istanbul ignore next */
    cov_1ei6gptgc4().f[51]++;
    const cacheData =
    /* istanbul ignore next */
    (cov_1ei6gptgc4().s[226]++, {});
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[227]++;
    _secureStorage.secureStorage.getAllKeys().forEach(key => {
      /* istanbul ignore next */
      cov_1ei6gptgc4().f[52]++;
      cov_1ei6gptgc4().s[228]++;
      if (key.startsWith("cache_")) {
        /* istanbul ignore next */
        cov_1ei6gptgc4().b[46][0]++;
        cov_1ei6gptgc4().s[229]++;
        try {
          /* istanbul ignore next */
          cov_1ei6gptgc4().s[230]++;
          cacheData[key] =
          /* istanbul ignore next */
          (cov_1ei6gptgc4().b[47][0]++, _secureStorage.secureStorage.getJSON(key)) ||
          /* istanbul ignore next */
          (cov_1ei6gptgc4().b[47][1]++, {});
        } catch (error) {
          // Silent error handling - Failed to parse cached data
        }
      } else
      /* istanbul ignore next */
      {
        cov_1ei6gptgc4().b[46][1]++;
      }
    });
    /* istanbul ignore next */
    cov_1ei6gptgc4().s[231]++;
    return cacheData;
  }
}
const persistenceService =
/* istanbul ignore next */
(cov_1ei6gptgc4().s[232]++, new PersistenceService());
const _default =
/* istanbul ignore next */
(cov_1ei6gptgc4().s[233]++, persistenceService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWZhdWx0IiwiY292XzFlaTZncHRnYzQiLCJmIiwicyIsIl9kZWZhdWx0IiwicGVyc2lzdGVuY2VTZXJ2aWNlIiwiUGVyc2lzdGVuY2VTZXJ2aWNlIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJiIiwic3luY1F1ZXVlIiwiaXNPbmxpbmUiLCJuYXZpZ2F0b3IiLCJvbkxpbmUiLCJzeW5jSW50ZXJ2YWwiLCJjb25mbGljdFJlc29sdmVycyIsIk1hcCIsImVuYWJsZU9mZmxpbmVNb2RlIiwibWF4UmV0cmllcyIsInJldHJ5RGVsYXkiLCJjb21wcmVzc2lvbkVuYWJsZWQiLCJlbmNyeXB0aW9uRW5hYmxlZCIsInNldHVwRXZlbnRMaXN0ZW5lcnMiLCJsb2FkU3luY1F1ZXVlIiwic2V0dXBDb25mbGljdFJlc29sdmVycyIsImluaXRpYWxpemUiLCJfYmFja2VuZFNlcnZpY2UiLCJiYWNrZW5kU2VydmljZSIsInN0YXJ0U3luY1Byb2Nlc3MiLCJsb2FkQ2FjaGVkRGF0YSIsImVycm9yIiwiY3JlYXRlIiwidGFibGUiLCJkYXRhIiwib3BlcmF0aW9uIiwiaWQiLCJjcnlwdG8iLCJyYW5kb21VVUlEIiwidHlwZSIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJyZXRyaWVzIiwic3RhdHVzIiwicmVzdWx0IiwiZXhlY3V0ZUNyZWF0ZSIsImFkZFRvU3luY1F1ZXVlIiwiY3JlYXRlT3B0aW1pc3RpY1JlY29yZCIsIkVycm9yIiwidXBkYXRlIiwiZXhlY3V0ZVVwZGF0ZSIsInVwZGF0ZU9wdGltaXN0aWNSZWNvcmQiLCJkZWxldGUiLCJleGVjdXRlRGVsZXRlIiwiZGVsZXRlT3B0aW1pc3RpY1JlY29yZCIsInJlYWQiLCJmaWx0ZXJzIiwiZXhlY3V0ZVJlYWQiLCJjYWNoZURhdGEiLCJnZXRDYWNoZWREYXRhIiwic3luY0FsbCIsInBlbmRpbmdPcGVyYXRpb25zIiwiZmlsdGVyIiwib3AiLCJzeW5jT3BlcmF0aW9uIiwic2F2ZVN5bmNRdWV1ZSIsIm1lc3NhZ2UiLCJzZXRDb25mbGljdFJlc29sdmVyIiwicmVzb2x1dGlvbiIsInNldCIsInJlc29sdmVDb25mbGljdCIsImNsaWVudERhdGEiLCJzZXJ2ZXJEYXRhIiwicmVzb2x2ZXIiLCJnZXQiLCJzdHJhdGVneSIsInVwZGF0ZWRfYXQiLCJ0b0lTT1N0cmluZyIsIl9zdXBhYmFzZSIsInN1cGFiYXNlIiwiZnJvbSIsImluc2VydCIsInNlbGVjdCIsInNpbmdsZSIsImVxIiwicXVlcnkiLCJPYmplY3QiLCJlbnRyaWVzIiwiZm9yRWFjaCIsImtleSIsInZhbHVlIiwib3B0aW1pc3RpY1JlY29yZCIsImNyZWF0ZWRfYXQiLCJfb3B0aW1pc3RpYyIsInVwZGF0ZVN0YXRlTWFuYWdlciIsImFjdGlvblR5cGUiLCJ0b1VwcGVyQ2FzZSIsIl9zdGF0ZU1hbmFnZXIiLCJzdGF0ZU1hbmFnZXIiLCJkaXNwYXRjaCIsInBheWxvYWQiLCJtZXRhIiwic291cmNlIiwib3B0aW1pc3RpYyIsImNhY2hlS2V5IiwiZ2V0Q2FjaGVLZXkiLCJkYXRhVG9TdG9yZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJfZW5jcnlwdGlvbiIsImFkdmFuY2VkRW5jcnlwdGlvbiIsImVuY3J5cHQiLCJfc2VjdXJlU3RvcmFnZSIsInNlY3VyZVN0b3JhZ2UiLCJzZXRJdGVtIiwiY2FjaGVkIiwiZ2V0SXRlbSIsImRlY3J5cHQiLCJwYXJzZSIsImZpbHRlclN0cmluZyIsInRhYmxlcyIsImNhY2hlZERhdGEiLCJsZW5ndGgiLCJpdGVtcyIsInBhZ2luYXRpb24iLCJwYWdlIiwibGltaXQiLCJ0b3RhbCIsImhhc01vcmUiLCJwdXNoIiwic2V0SlNPTiIsInNhdmVkIiwiZ2V0SlNPTiIsIkFycmF5IiwiaXNBcnJheSIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdG9wU3luY1Byb2Nlc3MiLCJkb2N1bWVudCIsInZpc2liaWxpdHlTdGF0ZSIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNsaWVudCIsInNlcnZlciIsImdldFN5bmNTdGF0dXMiLCJxdWV1ZUxlbmd0aCIsImZhaWxlZE9wZXJhdGlvbnMiLCJjbGVhckNhY2hlIiwia2V5cyIsImdldEFsbEtleXMiLCJzdGFydHNXaXRoIiwicmVtb3ZlSXRlbSIsInJldHJ5RmFpbGVkT3BlcmF0aW9ucyIsInVuZGVmaW5lZCIsImdldEZhaWxlZE9wZXJhdGlvbnMiLCJleHBvcnREYXRhIiwiY2FjaGUiLCJnZXRBbGxDYWNoZWREYXRhIl0sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxjaGFzZVxcRG93bmxvYWRzXFxjcm0gKDMyKVxcc3JjXFxzZXJ2aWNlc1xccGVyc2lzdGVuY2VTZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHN1cGFiYXNlIH0gZnJvbSBcIi4uL2xpYi9zdXBhYmFzZVwiXG5pbXBvcnQgeyBiYWNrZW5kU2VydmljZSB9IGZyb20gXCIuL2JhY2tlbmRTZXJ2aWNlXCJcbmltcG9ydCB7IHN0YXRlTWFuYWdlciB9IGZyb20gXCIuL3N0YXRlTWFuYWdlclwiXG5pbXBvcnQgeyBzZWN1cmVTdG9yYWdlIH0gZnJvbSBcIi4uL3V0aWxzL3NlY3VyZVN0b3JhZ2VcIlxuaW1wb3J0IHsgYWR2YW5jZWRFbmNyeXB0aW9uIH0gZnJvbSBcIi4uL3V0aWxzL2VuY3J5cHRpb25cIlxuXG5leHBvcnQgaW50ZXJmYWNlIFBlcnNpc3RlbmNlQ29uZmlnIHtcbiAgZW5hYmxlT2ZmbGluZU1vZGU6IGJvb2xlYW5cbiAgc3luY0ludGVydmFsOiBudW1iZXJcbiAgbWF4UmV0cmllczogbnVtYmVyXG4gIHJldHJ5RGVsYXk6IG51bWJlclxuICBjb21wcmVzc2lvbkVuYWJsZWQ6IGJvb2xlYW5cbiAgZW5jcnlwdGlvbkVuYWJsZWQ6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBTeW5jT3BlcmF0aW9uIHtcbiAgaWQ6IHN0cmluZ1xuICB0eXBlOiBcImNyZWF0ZVwiIHwgXCJ1cGRhdGVcIiB8IFwiZGVsZXRlXCJcbiAgdGFibGU6IHN0cmluZ1xuICBkYXRhOiBhbnlcbiAgdGltZXN0YW1wOiBudW1iZXJcbiAgcmV0cmllczogbnVtYmVyXG4gIHN0YXR1czogXCJwZW5kaW5nXCIgfCBcInN5bmNpbmdcIiB8IFwiY29tcGxldGVkXCIgfCBcImZhaWxlZFwiXG4gIGVycm9yPzogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmxpY3RSZXNvbHV0aW9uIHtcbiAgc3RyYXRlZ3k6IFwiY2xpZW50LXdpbnNcIiB8IFwic2VydmVyLXdpbnNcIiB8IFwibWVyZ2VcIiB8IFwibWFudWFsXCJcbiAgcmVzb2x2ZXI/OiAoY2xpZW50RGF0YTogYW55LCBzZXJ2ZXJEYXRhOiBhbnkpID0+IGFueVxufVxuXG5jbGFzcyBQZXJzaXN0ZW5jZVNlcnZpY2Uge1xuICBwcml2YXRlIGNvbmZpZzogUGVyc2lzdGVuY2VDb25maWdcbiAgcHJpdmF0ZSBzeW5jUXVldWU6IFN5bmNPcGVyYXRpb25bXSA9IFtdXG4gIHByaXZhdGUgaXNPbmxpbmU6IGJvb2xlYW4gPSBuYXZpZ2F0b3Iub25MaW5lXG4gIHByaXZhdGUgc3luY0ludGVydmFsOiBOb2RlSlMuVGltZW91dCB8IG51bGwgPSBudWxsXG4gIHByaXZhdGUgY29uZmxpY3RSZXNvbHZlcnM6IE1hcDxzdHJpbmcsIENvbmZsaWN0UmVzb2x1dGlvbj4gPSBuZXcgTWFwKClcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFBhcnRpYWw8UGVyc2lzdGVuY2VDb25maWc+ID0ge30pIHtcbiAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgIGVuYWJsZU9mZmxpbmVNb2RlOiB0cnVlLFxuICAgICAgc3luY0ludGVydmFsOiAzMDAwMCwgLy8gMzAgc2Vjb25kc1xuICAgICAgbWF4UmV0cmllczogMyxcbiAgICAgIHJldHJ5RGVsYXk6IDUwMDAsIC8vIDUgc2Vjb25kc1xuICAgICAgY29tcHJlc3Npb25FbmFibGVkOiB0cnVlLFxuICAgICAgZW5jcnlwdGlvbkVuYWJsZWQ6IHRydWUsIC8vIEVuYWJsZSBlbmNyeXB0aW9uIGJ5IGRlZmF1bHQgZm9yIHNlY3VyaXR5XG4gICAgICAuLi5jb25maWcsXG4gICAgfVxuXG4gICAgdGhpcy5zZXR1cEV2ZW50TGlzdGVuZXJzKClcbiAgICB0aGlzLmxvYWRTeW5jUXVldWUoKVxuICAgIHRoaXMuc2V0dXBDb25mbGljdFJlc29sdmVycygpXG4gIH1cblxuICBhc3luYyBpbml0aWFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBJbml0aWFsaXplIGJhY2tlbmQgc2VydmljZVxuICAgICAgYXdhaXQgYmFja2VuZFNlcnZpY2UuaW5pdGlhbGl6ZSgpXG5cbiAgICAgIC8vIFN0YXJ0IHN5bmMgcHJvY2VzcyBpZiBvbmxpbmVcbiAgICAgIGlmICh0aGlzLmlzT25saW5lKSB7XG4gICAgICAgIHRoaXMuc3RhcnRTeW5jUHJvY2VzcygpXG4gICAgICB9XG5cbiAgICAgIC8vIExvYWQgY2FjaGVkIGRhdGEgaWYgb2ZmbGluZVxuICAgICAgaWYgKCF0aGlzLmlzT25saW5lICYmIHRoaXMuY29uZmlnLmVuYWJsZU9mZmxpbmVNb2RlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZENhY2hlZERhdGEoKVxuICAgICAgfVxuXG4gICAgICAvLyBTaWxlbnQgbG9nZ2luZyAtIFBlcnNpc3RlbmNlIHNlcnZpY2UgaW5pdGlhbGl6ZWRcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gU2lsZW50IGVycm9yIGhhbmRsaW5nIC0gRmFpbGVkIHRvIGluaXRpYWxpemUgcGVyc2lzdGVuY2Ugc2VydmljZVxuICAgICAgdGhyb3cgZXJyb3JcbiAgICB9XG4gIH1cblxuICAvLyBDUlVEIE9wZXJhdGlvbnMgd2l0aCBvZmZsaW5lIHN1cHBvcnRcbiAgYXN5bmMgY3JlYXRlPFQ+KHRhYmxlOiBzdHJpbmcsIGRhdGE6IFBhcnRpYWw8VD4pOiBQcm9taXNlPFQ+IHtcbiAgICBjb25zdCBvcGVyYXRpb246IFN5bmNPcGVyYXRpb24gPSB7XG4gICAgICBpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcbiAgICAgIHR5cGU6IFwiY3JlYXRlXCIsXG4gICAgICB0YWJsZSxcbiAgICAgIGRhdGEsXG4gICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICByZXRyaWVzOiAwLFxuICAgICAgc3RhdHVzOiBcInBlbmRpbmdcIixcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc09ubGluZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5leGVjdXRlQ3JlYXRlKHRhYmxlLCBkYXRhKVxuICAgICAgICBvcGVyYXRpb24uc3RhdHVzID0gXCJjb21wbGV0ZWRcIlxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAodGhpcy5jb25maWcuZW5hYmxlT2ZmbGluZU1vZGUpIHtcbiAgICAgICAgICB0aGlzLmFkZFRvU3luY1F1ZXVlKG9wZXJhdGlvbilcbiAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVPcHRpbWlzdGljUmVjb3JkKHRhYmxlLCBkYXRhKVxuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycm9yXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbmZpZy5lbmFibGVPZmZsaW5lTW9kZSkge1xuICAgICAgdGhpcy5hZGRUb1N5bmNRdWV1ZShvcGVyYXRpb24pXG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVPcHRpbWlzdGljUmVjb3JkKHRhYmxlLCBkYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPZmZsaW5lIG1vZGUgZGlzYWJsZWQgYW5kIG5vIGludGVybmV0IGNvbm5lY3Rpb25cIilcbiAgICB9XG4gIH1cblxuICBhc3luYyB1cGRhdGU8VD4odGFibGU6IHN0cmluZywgaWQ6IHN0cmluZywgZGF0YTogUGFydGlhbDxUPik6IFByb21pc2U8VD4ge1xuICAgIGNvbnN0IG9wZXJhdGlvbjogU3luY09wZXJhdGlvbiA9IHtcbiAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxuICAgICAgdHlwZTogXCJ1cGRhdGVcIixcbiAgICAgIHRhYmxlLFxuICAgICAgZGF0YTogeyBpZCwgLi4uZGF0YSB9LFxuICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgcmV0cmllczogMCxcbiAgICAgIHN0YXR1czogXCJwZW5kaW5nXCIsXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNPbmxpbmUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZXhlY3V0ZVVwZGF0ZSh0YWJsZSwgaWQsIGRhdGEpXG4gICAgICAgIG9wZXJhdGlvbi5zdGF0dXMgPSBcImNvbXBsZXRlZFwiXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5lbmFibGVPZmZsaW5lTW9kZSkge1xuICAgICAgICAgIHRoaXMuYWRkVG9TeW5jUXVldWUob3BlcmF0aW9uKVxuICAgICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZU9wdGltaXN0aWNSZWNvcmQodGFibGUsIGlkLCBkYXRhKVxuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycm9yXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbmZpZy5lbmFibGVPZmZsaW5lTW9kZSkge1xuICAgICAgdGhpcy5hZGRUb1N5bmNRdWV1ZShvcGVyYXRpb24pXG4gICAgICByZXR1cm4gdGhpcy51cGRhdGVPcHRpbWlzdGljUmVjb3JkKHRhYmxlLCBpZCwgZGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT2ZmbGluZSBtb2RlIGRpc2FibGVkIGFuZCBubyBpbnRlcm5ldCBjb25uZWN0aW9uXCIpXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZGVsZXRlKHRhYmxlOiBzdHJpbmcsIGlkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBvcGVyYXRpb246IFN5bmNPcGVyYXRpb24gPSB7XG4gICAgICBpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcbiAgICAgIHR5cGU6IFwiZGVsZXRlXCIsXG4gICAgICB0YWJsZSxcbiAgICAgIGRhdGE6IHsgaWQgfSxcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgIHJldHJpZXM6IDAsXG4gICAgICBzdGF0dXM6IFwicGVuZGluZ1wiLFxuICAgIH1cblxuICAgIGlmICh0aGlzLmlzT25saW5lKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCB0aGlzLmV4ZWN1dGVEZWxldGUodGFibGUsIGlkKVxuICAgICAgICBvcGVyYXRpb24uc3RhdHVzID0gXCJjb21wbGV0ZWRcIlxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmVuYWJsZU9mZmxpbmVNb2RlKSB7XG4gICAgICAgICAgdGhpcy5hZGRUb1N5bmNRdWV1ZShvcGVyYXRpb24pXG4gICAgICAgICAgdGhpcy5kZWxldGVPcHRpbWlzdGljUmVjb3JkKHRhYmxlLCBpZClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbmZpZy5lbmFibGVPZmZsaW5lTW9kZSkge1xuICAgICAgdGhpcy5hZGRUb1N5bmNRdWV1ZShvcGVyYXRpb24pXG4gICAgICB0aGlzLmRlbGV0ZU9wdGltaXN0aWNSZWNvcmQodGFibGUsIGlkKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPZmZsaW5lIG1vZGUgZGlzYWJsZWQgYW5kIG5vIGludGVybmV0IGNvbm5lY3Rpb25cIilcbiAgICB9XG4gIH1cblxuICBhc3luYyByZWFkPFQ+KHRhYmxlOiBzdHJpbmcsIGZpbHRlcnM/OiBhbnkpOiBQcm9taXNlPFRbXT4ge1xuICAgIGlmICh0aGlzLmlzT25saW5lKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmV4ZWN1dGVSZWFkPFQ+KHRhYmxlLCBmaWx0ZXJzKVxuICAgICAgICAvLyBDYWNoZSB0aGUgcmVzdWx0IGZvciBvZmZsaW5lIGFjY2Vzc1xuICAgICAgICBhd2FpdCB0aGlzLmNhY2hlRGF0YSh0YWJsZSwgcmVzdWx0LCBmaWx0ZXJzKVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAodGhpcy5jb25maWcuZW5hYmxlT2ZmbGluZU1vZGUpIHtcbiAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRDYWNoZWREYXRhPFQ+KHRhYmxlLCBmaWx0ZXJzKVxuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycm9yXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbmZpZy5lbmFibGVPZmZsaW5lTW9kZSkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0Q2FjaGVkRGF0YTxUPih0YWJsZSwgZmlsdGVycylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT2ZmbGluZSBtb2RlIGRpc2FibGVkIGFuZCBubyBpbnRlcm5ldCBjb25uZWN0aW9uXCIpXG4gICAgfVxuICB9XG5cbiAgLy8gU3luYyBPcGVyYXRpb25zXG4gIGFzeW5jIHN5bmNBbGwoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCF0aGlzLmlzT25saW5lKSB7XG4gICAgICAvLyBTaWxlbnQgbG9nZ2luZyAtIENhbm5vdCBzeW5jIHdoaWxlIG9mZmxpbmVcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIFNpbGVudCBsb2dnaW5nIC0gU3RhcnRpbmcgc3luYyBvcGVyYXRpb25zXG5cbiAgICBjb25zdCBwZW5kaW5nT3BlcmF0aW9ucyA9IHRoaXMuc3luY1F1ZXVlLmZpbHRlcigob3ApID0+IG9wLnN0YXR1cyA9PT0gXCJwZW5kaW5nXCIpXG5cbiAgICBmb3IgKGNvbnN0IG9wZXJhdGlvbiBvZiBwZW5kaW5nT3BlcmF0aW9ucykge1xuICAgICAgYXdhaXQgdGhpcy5zeW5jT3BlcmF0aW9uKG9wZXJhdGlvbilcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgY29tcGxldGVkIG9wZXJhdGlvbnNcbiAgICB0aGlzLnN5bmNRdWV1ZSA9IHRoaXMuc3luY1F1ZXVlLmZpbHRlcigob3ApID0+IG9wLnN0YXR1cyAhPT0gXCJjb21wbGV0ZWRcIilcbiAgICB0aGlzLnNhdmVTeW5jUXVldWUoKVxuXG4gICAgLy8gU2lsZW50IGxvZ2dpbmcgLSBTeW5jIGNvbXBsZXRlZFxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzeW5jT3BlcmF0aW9uKG9wZXJhdGlvbjogU3luY09wZXJhdGlvbik6IFByb21pc2U8dm9pZD4ge1xuICAgIG9wZXJhdGlvbi5zdGF0dXMgPSBcInN5bmNpbmdcIlxuXG4gICAgdHJ5IHtcbiAgICAgIHN3aXRjaCAob3BlcmF0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcImNyZWF0ZVwiOlxuICAgICAgICAgIGF3YWl0IHRoaXMuZXhlY3V0ZUNyZWF0ZShvcGVyYXRpb24udGFibGUsIG9wZXJhdGlvbi5kYXRhKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgXCJ1cGRhdGVcIjpcbiAgICAgICAgICBhd2FpdCB0aGlzLmV4ZWN1dGVVcGRhdGUob3BlcmF0aW9uLnRhYmxlLCBvcGVyYXRpb24uZGF0YS5pZCwgb3BlcmF0aW9uLmRhdGEpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSBcImRlbGV0ZVwiOlxuICAgICAgICAgIGF3YWl0IHRoaXMuZXhlY3V0ZURlbGV0ZShvcGVyYXRpb24udGFibGUsIG9wZXJhdGlvbi5kYXRhLmlkKVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIG9wZXJhdGlvbi5zdGF0dXMgPSBcImNvbXBsZXRlZFwiXG4gICAgICAvLyBTaWxlbnQgbG9nZ2luZyAtIFN5bmNlZCBvcGVyYXRpb25cbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBvcGVyYXRpb24ucmV0cmllcysrXG4gICAgICBvcGVyYXRpb24uZXJyb3IgPSBlcnJvci5tZXNzYWdlXG5cbiAgICAgIGlmIChvcGVyYXRpb24ucmV0cmllcyA+PSB0aGlzLmNvbmZpZy5tYXhSZXRyaWVzKSB7XG4gICAgICAgIG9wZXJhdGlvbi5zdGF0dXMgPSBcImZhaWxlZFwiXG4gICAgICAgIC8vIFNpbGVudCBlcnJvciBoYW5kbGluZyAtIEZhaWxlZCB0byBzeW5jIG9wZXJhdGlvbiBhZnRlciBtYXggcmV0cmllc1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3BlcmF0aW9uLnN0YXR1cyA9IFwicGVuZGluZ1wiXG4gICAgICAgIC8vIFNpbGVudCBlcnJvciBoYW5kbGluZyAtIFN5bmMgZmFpbGVkLCB3aWxsIHJldHJ5XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ29uZmxpY3QgUmVzb2x1dGlvblxuICBzZXRDb25mbGljdFJlc29sdmVyKHRhYmxlOiBzdHJpbmcsIHJlc29sdXRpb246IENvbmZsaWN0UmVzb2x1dGlvbik6IHZvaWQge1xuICAgIHRoaXMuY29uZmxpY3RSZXNvbHZlcnMuc2V0KHRhYmxlLCByZXNvbHV0aW9uKVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyByZXNvbHZlQ29uZmxpY3QodGFibGU6IHN0cmluZywgY2xpZW50RGF0YTogYW55LCBzZXJ2ZXJEYXRhOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IHJlc29sdmVyID0gdGhpcy5jb25mbGljdFJlc29sdmVycy5nZXQodGFibGUpIHx8IHsgc3RyYXRlZ3k6IFwic2VydmVyLXdpbnNcIiB9XG5cbiAgICBzd2l0Y2ggKHJlc29sdmVyLnN0cmF0ZWd5KSB7XG4gICAgICBjYXNlIFwiY2xpZW50LXdpbnNcIjpcbiAgICAgICAgcmV0dXJuIGNsaWVudERhdGFcbiAgICAgIGNhc2UgXCJzZXJ2ZXItd2luc1wiOlxuICAgICAgICByZXR1cm4gc2VydmVyRGF0YVxuICAgICAgY2FzZSBcIm1lcmdlXCI6XG4gICAgICAgIHJldHVybiB7IC4uLnNlcnZlckRhdGEsIC4uLmNsaWVudERhdGEsIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSB9XG4gICAgICBjYXNlIFwibWFudWFsXCI6XG4gICAgICAgIGlmIChyZXNvbHZlci5yZXNvbHZlcikge1xuICAgICAgICAgIHJldHVybiByZXNvbHZlci5yZXNvbHZlcihjbGllbnREYXRhLCBzZXJ2ZXJEYXRhKVxuICAgICAgICB9XG4gICAgICAgIC8vIEZhbGxiYWNrIHRvIHNlcnZlciB3aW5zIGlmIG5vIGN1c3RvbSByZXNvbHZlclxuICAgICAgICByZXR1cm4gc2VydmVyRGF0YVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHNlcnZlckRhdGFcbiAgICB9XG4gIH1cblxuICAvLyBEYXRhYmFzZSBPcGVyYXRpb25zXG4gIHByaXZhdGUgYXN5bmMgZXhlY3V0ZUNyZWF0ZTxUPih0YWJsZTogc3RyaW5nLCBkYXRhOiBQYXJ0aWFsPFQ+KTogUHJvbWlzZTxUPiB7XG4gICAgaWYgKCFzdXBhYmFzZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdXBhYmFzZSBjbGllbnQgaXMgbm90IGluaXRpYWxpemVkJyk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHsgZGF0YTogcmVzdWx0LCBlcnJvciB9ID0gYXdhaXQgKHN1cGFiYXNlIGFzIGFueSkuZnJvbSh0YWJsZSkuaW5zZXJ0KGRhdGEpLnNlbGVjdCgpLnNpbmdsZSgpXG5cbiAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBleGVjdXRlVXBkYXRlPFQ+KHRhYmxlOiBzdHJpbmcsIGlkOiBzdHJpbmcsIGRhdGE6IFBhcnRpYWw8VD4pOiBQcm9taXNlPFQ+IHtcbiAgICBpZiAoIXN1cGFiYXNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N1cGFiYXNlIGNsaWVudCBpcyBub3QgaW5pdGlhbGl6ZWQnKTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgeyBkYXRhOiByZXN1bHQsIGVycm9yIH0gPSBhd2FpdCAoc3VwYWJhc2UgYXMgYW55KS5mcm9tKHRhYmxlKS51cGRhdGUoZGF0YSkuZXEoXCJpZFwiLCBpZCkuc2VsZWN0KCkuc2luZ2xlKClcblxuICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3JcbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGV4ZWN1dGVEZWxldGUodGFibGU6IHN0cmluZywgaWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICghc3VwYWJhc2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU3VwYWJhc2UgY2xpZW50IGlzIG5vdCBpbml0aWFsaXplZCcpO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5mcm9tKHRhYmxlKS5kZWxldGUoKS5lcShcImlkXCIsIGlkKVxuXG4gICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvclxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBleGVjdXRlUmVhZDxUPih0YWJsZTogc3RyaW5nLCBmaWx0ZXJzPzogYW55KTogUHJvbWlzZTxUW10+IHtcbiAgICBpZiAoIXN1cGFiYXNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N1cGFiYXNlIGNsaWVudCBpcyBub3QgaW5pdGlhbGl6ZWQnKTtcbiAgICB9XG4gICAgXG4gICAgbGV0IHF1ZXJ5ID0gc3VwYWJhc2UuZnJvbSh0YWJsZSkuc2VsZWN0KFwiKlwiKVxuXG4gICAgaWYgKGZpbHRlcnMpIHtcbiAgICAgIE9iamVjdC5lbnRyaWVzKGZpbHRlcnMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICBxdWVyeSA9IHF1ZXJ5LmVxKGtleSwgdmFsdWUgYXMgYW55KVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBxdWVyeVxuXG4gICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvclxuICAgIHJldHVybiBkYXRhIHx8IFtdXG4gIH1cblxuICAvLyBPcHRpbWlzdGljIFVwZGF0ZXNcbiAgcHJpdmF0ZSBjcmVhdGVPcHRpbWlzdGljUmVjb3JkPFQ+KHRhYmxlOiBzdHJpbmcsIGRhdGE6IFBhcnRpYWw8VD4pOiBUIHtcbiAgICBjb25zdCBvcHRpbWlzdGljUmVjb3JkID0ge1xuICAgICAgaWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXG4gICAgICAuLi5kYXRhLFxuICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgX29wdGltaXN0aWM6IHRydWUsXG4gICAgfSBhcyBUXG5cbiAgICAvLyBVcGRhdGUgc3RhdGUgbWFuYWdlclxuICAgIHRoaXMudXBkYXRlU3RhdGVNYW5hZ2VyKHRhYmxlLCBcImNyZWF0ZVwiLCBvcHRpbWlzdGljUmVjb3JkKVxuXG4gICAgcmV0dXJuIG9wdGltaXN0aWNSZWNvcmRcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlT3B0aW1pc3RpY1JlY29yZDxUPih0YWJsZTogc3RyaW5nLCBpZDogc3RyaW5nLCBkYXRhOiBQYXJ0aWFsPFQ+KTogVCB7XG4gICAgY29uc3Qgb3B0aW1pc3RpY1JlY29yZCA9IHtcbiAgICAgIGlkLFxuICAgICAgLi4uZGF0YSxcbiAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIF9vcHRpbWlzdGljOiB0cnVlLFxuICAgIH0gYXMgVFxuXG4gICAgLy8gVXBkYXRlIHN0YXRlIG1hbmFnZXJcbiAgICB0aGlzLnVwZGF0ZVN0YXRlTWFuYWdlcih0YWJsZSwgXCJ1cGRhdGVcIiwgb3B0aW1pc3RpY1JlY29yZClcblxuICAgIHJldHVybiBvcHRpbWlzdGljUmVjb3JkXG4gIH1cblxuICBwcml2YXRlIGRlbGV0ZU9wdGltaXN0aWNSZWNvcmQodGFibGU6IHN0cmluZywgaWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIC8vIFVwZGF0ZSBzdGF0ZSBtYW5hZ2VyXG4gICAgdGhpcy51cGRhdGVTdGF0ZU1hbmFnZXIodGFibGUsIFwiZGVsZXRlXCIsIHsgaWQgfSlcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlU3RhdGVNYW5hZ2VyKHRhYmxlOiBzdHJpbmcsIG9wZXJhdGlvbjogc3RyaW5nLCBkYXRhOiBhbnkpOiB2b2lkIHtcbiAgICBjb25zdCBhY3Rpb25UeXBlID0gYCR7dGFibGUudG9VcHBlckNhc2UoKX1fJHtvcGVyYXRpb24udG9VcHBlckNhc2UoKX1gIGFzIGFueVxuXG4gICAgdHJ5IHtcbiAgICAgIHN0YXRlTWFuYWdlci5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IGFjdGlvblR5cGUsXG4gICAgICAgIHBheWxvYWQ6IGRhdGEsXG4gICAgICAgIG1ldGE6IHtcbiAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgc291cmNlOiBcInBlcnNpc3RlbmNlXCIsXG4gICAgICAgICAgb3B0aW1pc3RpYzogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIFNpbGVudCBlcnJvciBoYW5kbGluZyAtIEZhaWxlZCB0byB1cGRhdGUgc3RhdGUgbWFuYWdlclxuICAgIH1cbiAgfVxuXG4gIC8vIENhY2hpbmdcbiAgcHJpdmF0ZSBhc3luYyBjYWNoZURhdGEodGFibGU6IHN0cmluZywgZGF0YTogYW55W10sIGZpbHRlcnM/OiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY2FjaGVLZXkgPSB0aGlzLmdldENhY2hlS2V5KHRhYmxlLCBmaWx0ZXJzKVxuICAgICAgY29uc3QgY2FjaGVEYXRhID0ge1xuICAgICAgICBkYXRhLFxuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgIGZpbHRlcnMsXG4gICAgICB9XG5cbiAgICAgIGxldCBkYXRhVG9TdG9yZSA9IEpTT04uc3RyaW5naWZ5KGNhY2hlRGF0YSlcblxuICAgICAgLy8gQXBwbHkgZW5jcnlwdGlvbiBpZiBlbmFibGVkXG4gICAgICBpZiAodGhpcy5jb25maWcuZW5jcnlwdGlvbkVuYWJsZWQpIHtcbiAgICAgICAgZGF0YVRvU3RvcmUgPSBhd2FpdCBhZHZhbmNlZEVuY3J5cHRpb24uZW5jcnlwdChkYXRhVG9TdG9yZSlcbiAgICAgIH1cblxuICAgICAgLy8gQXBwbHkgY29tcHJlc3Npb24gaWYgZW5hYmxlZCAoYWZ0ZXIgZW5jcnlwdGlvbilcbiAgICAgIGlmICh0aGlzLmNvbmZpZy5jb21wcmVzc2lvbkVuYWJsZWQpIHtcbiAgICAgICAgLy8gU2ltcGxlIGNvbXByZXNzaW9uIHNpbXVsYXRpb24gLSBpbiBwcm9kdWN0aW9uLCB1c2UgYWN0dWFsIGNvbXByZXNzaW9uXG4gICAgICAgIHNlY3VyZVN0b3JhZ2Uuc2V0SXRlbShgY2FjaGVfJHtjYWNoZUtleX1gLCBkYXRhVG9TdG9yZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlY3VyZVN0b3JhZ2Uuc2V0SXRlbShgY2FjaGVfJHtjYWNoZUtleX1gLCBkYXRhVG9TdG9yZSlcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gU2lsZW50IGVycm9yIGhhbmRsaW5nIC0gRmFpbGVkIHRvIGNhY2hlIGRhdGFcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdldENhY2hlZERhdGE8VD4odGFibGU6IHN0cmluZywgZmlsdGVycz86IGFueSk6IFByb21pc2U8VFtdPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNhY2hlS2V5ID0gdGhpcy5nZXRDYWNoZUtleSh0YWJsZSwgZmlsdGVycylcbiAgICAgIGxldCBjYWNoZWQgPSBzZWN1cmVTdG9yYWdlLmdldEl0ZW0oYGNhY2hlXyR7Y2FjaGVLZXl9YClcblxuICAgICAgaWYgKGNhY2hlZCkge1xuICAgICAgICAvLyBEZWNyeXB0IGlmIGVuY3J5cHRpb24gaXMgZW5hYmxlZFxuICAgICAgICBpZiAodGhpcy5jb25maWcuZW5jcnlwdGlvbkVuYWJsZWQpIHtcbiAgICAgICAgICBjYWNoZWQgPSBhd2FpdCBhZHZhbmNlZEVuY3J5cHRpb24uZGVjcnlwdChjYWNoZWQpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjYWNoZURhdGEgPSBKU09OLnBhcnNlKGNhY2hlZClcbiAgICAgICAgcmV0dXJuIGNhY2hlRGF0YS5kYXRhIHx8IFtdXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIFNpbGVudCBlcnJvciBoYW5kbGluZyAtIEZhaWxlZCB0byBnZXQgY2FjaGVkIGRhdGFcbiAgICB9XG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICBwcml2YXRlIGdldENhY2hlS2V5KHRhYmxlOiBzdHJpbmcsIGZpbHRlcnM/OiBhbnkpOiBzdHJpbmcge1xuICAgIGNvbnN0IGZpbHRlclN0cmluZyA9IGZpbHRlcnMgPyBKU09OLnN0cmluZ2lmeShmaWx0ZXJzKSA6IFwiYWxsXCJcbiAgICByZXR1cm4gYCR7dGFibGV9XyR7ZmlsdGVyU3RyaW5nfWBcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgbG9hZENhY2hlZERhdGEoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHRhYmxlcyA9IFtcImNsaWVudHNcIiwgXCJ0YXNrc1wiLCBcInByb2plY3RzXCIsIFwiaW52b2ljZXNcIl1cblxuICAgICAgZm9yIChjb25zdCB0YWJsZSBvZiB0YWJsZXMpIHtcbiAgICAgICAgY29uc3QgY2FjaGVkRGF0YSA9IGF3YWl0IHRoaXMuZ2V0Q2FjaGVkRGF0YSh0YWJsZSlcbiAgICAgICAgaWYgKGNhY2hlZERhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGVNYW5hZ2VyKHRhYmxlLCBcImxvYWRfc3VjY2Vzc1wiLCB7XG4gICAgICAgICAgICBpdGVtczogY2FjaGVkRGF0YSxcbiAgICAgICAgICAgIHBhZ2luYXRpb246IHsgcGFnZTogMSwgbGltaXQ6IGNhY2hlZERhdGEubGVuZ3RoLCB0b3RhbDogY2FjaGVkRGF0YS5sZW5ndGgsIGhhc01vcmU6IGZhbHNlIH0sXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBTaWxlbnQgZXJyb3IgaGFuZGxpbmcgLSBGYWlsZWQgdG8gbG9hZCBjYWNoZWQgZGF0YVxuICAgIH1cbiAgfVxuXG4gIC8vIFN5bmMgUXVldWUgTWFuYWdlbWVudFxuICBwcml2YXRlIGFkZFRvU3luY1F1ZXVlKG9wZXJhdGlvbjogU3luY09wZXJhdGlvbik6IHZvaWQge1xuICAgIHRoaXMuc3luY1F1ZXVlLnB1c2gob3BlcmF0aW9uKVxuICAgIHRoaXMuc2F2ZVN5bmNRdWV1ZSgpXG4gIH1cblxuICBwcml2YXRlIHNhdmVTeW5jUXVldWUoKTogdm9pZCB7XG4gICAgdHJ5IHtcbiAgICAgIHNlY3VyZVN0b3JhZ2Uuc2V0SlNPTihcInN5bmNfcXVldWVcIiwgdGhpcy5zeW5jUXVldWUpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIFNpbGVudCBlcnJvciBoYW5kbGluZyAtIEZhaWxlZCB0byBzYXZlIHN5bmMgcXVldWVcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGxvYWRTeW5jUXVldWUoKTogdm9pZCB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHNhdmVkID0gc2VjdXJlU3RvcmFnZS5nZXRKU09OKFwic3luY19xdWV1ZVwiKVxuICAgICAgaWYgKHNhdmVkICYmIEFycmF5LmlzQXJyYXkoc2F2ZWQpKSB7XG4gICAgICAgIHRoaXMuc3luY1F1ZXVlID0gc2F2ZWQgYXMgU3luY09wZXJhdGlvbltdXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIFNpbGVudCBlcnJvciBoYW5kbGluZyAtIEZhaWxlZCB0byBsb2FkIHN5bmMgcXVldWVcbiAgICAgIHRoaXMuc3luY1F1ZXVlID0gW11cbiAgICB9XG4gIH1cblxuICAvLyBFdmVudCBMaXN0ZW5lcnNcbiAgcHJpdmF0ZSBzZXR1cEV2ZW50TGlzdGVuZXJzKCk6IHZvaWQge1xuICAgIC8vIE9ubGluZS9PZmZsaW5lIGRldGVjdGlvblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib25saW5lXCIsICgpID0+IHtcbiAgICAgIHRoaXMuaXNPbmxpbmUgPSB0cnVlXG4gICAgICAvLyBTaWxlbnQgbG9nZ2luZyAtIENvbm5lY3Rpb24gcmVzdG9yZWQsIHN0YXJ0aW5nIHN5bmNcbiAgICAgIHRoaXMuc3RhcnRTeW5jUHJvY2VzcygpXG4gICAgfSlcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib2ZmbGluZVwiLCAoKSA9PiB7XG4gICAgICB0aGlzLmlzT25saW5lID0gZmFsc2VcbiAgICAgIC8vIFNpbGVudCBsb2dnaW5nIC0gQ29ubmVjdGlvbiBsb3N0LCBlbnRlcmluZyBvZmZsaW5lIG1vZGVcbiAgICAgIHRoaXMuc3RvcFN5bmNQcm9jZXNzKClcbiAgICB9KVxuXG4gICAgLy8gUGFnZSB2aXNpYmlsaXR5IGZvciBzeW5jIG9wdGltaXphdGlvblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsICgpID0+IHtcbiAgICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09IFwidmlzaWJsZVwiICYmIHRoaXMuaXNPbmxpbmUpIHtcbiAgICAgICAgdGhpcy5zeW5jQWxsKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcHJpdmF0ZSBzdGFydFN5bmNQcm9jZXNzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnN5bmNJbnRlcnZhbCkge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnN5bmNJbnRlcnZhbClcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsIHN5bmNcbiAgICB0aGlzLnN5bmNBbGwoKVxuXG4gICAgLy8gUGVyaW9kaWMgc3luY1xuICAgIHRoaXMuc3luY0ludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgdGhpcy5zeW5jQWxsKClcbiAgICB9LCB0aGlzLmNvbmZpZy5zeW5jSW50ZXJ2YWwpXG4gIH1cblxuICBwcml2YXRlIHN0b3BTeW5jUHJvY2VzcygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5zeW5jSW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5zeW5jSW50ZXJ2YWwpXG4gICAgICB0aGlzLnN5bmNJbnRlcnZhbCA9IG51bGxcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldHVwQ29uZmxpY3RSZXNvbHZlcnMoKTogdm9pZCB7XG4gICAgLy8gRGVmYXVsdCBjb25mbGljdCByZXNvbHZlcnMgZm9yIGRpZmZlcmVudCB0YWJsZXNcbiAgICB0aGlzLnNldENvbmZsaWN0UmVzb2x2ZXIoXCJjbGllbnRzXCIsIHtcbiAgICAgIHN0cmF0ZWd5OiBcIm1lcmdlXCIsXG4gICAgICByZXNvbHZlcjogKGNsaWVudCwgc2VydmVyKSA9PiAoe1xuICAgICAgICAuLi5zZXJ2ZXIsXG4gICAgICAgIC4uLmNsaWVudCxcbiAgICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgfSksXG4gICAgfSlcblxuICAgIHRoaXMuc2V0Q29uZmxpY3RSZXNvbHZlcihcInRhc2tzXCIsIHtcbiAgICAgIHN0cmF0ZWd5OiBcImNsaWVudC13aW5zXCIsIC8vIFRhc2tzIGFyZSB1c3VhbGx5IG1vcmUgY3VycmVudCBvbiBjbGllbnRcbiAgICB9KVxuXG4gICAgdGhpcy5zZXRDb25mbGljdFJlc29sdmVyKFwicHJvamVjdHNcIiwge1xuICAgICAgc3RyYXRlZ3k6IFwibWVyZ2VcIixcbiAgICB9KVxuICB9XG5cbiAgLy8gUHVibGljIEFQSVxuICBnZXRTeW5jU3RhdHVzKCk6IHtcbiAgICBpc09ubGluZTogYm9vbGVhblxuICAgIHF1ZXVlTGVuZ3RoOiBudW1iZXJcbiAgICBwZW5kaW5nT3BlcmF0aW9uczogbnVtYmVyXG4gICAgZmFpbGVkT3BlcmF0aW9uczogbnVtYmVyXG4gIH0ge1xuICAgIHJldHVybiB7XG4gICAgICBpc09ubGluZTogdGhpcy5pc09ubGluZSxcbiAgICAgIHF1ZXVlTGVuZ3RoOiB0aGlzLnN5bmNRdWV1ZS5sZW5ndGgsXG4gICAgICBwZW5kaW5nT3BlcmF0aW9uczogdGhpcy5zeW5jUXVldWUuZmlsdGVyKChvcCkgPT4gb3Auc3RhdHVzID09PSBcInBlbmRpbmdcIikubGVuZ3RoLFxuICAgICAgZmFpbGVkT3BlcmF0aW9uczogdGhpcy5zeW5jUXVldWUuZmlsdGVyKChvcCkgPT4gb3Auc3RhdHVzID09PSBcImZhaWxlZFwiKS5sZW5ndGgsXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgY2xlYXJDYWNoZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qga2V5cyA9IHNlY3VyZVN0b3JhZ2UuZ2V0QWxsS2V5cygpLmZpbHRlcigoa2V5KSA9PiBrZXkuc3RhcnRzV2l0aChcImNhY2hlX1wiKSlcbiAgICAgIGtleXMuZm9yRWFjaCgoa2V5KSA9PiBzZWN1cmVTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KSlcbiAgICAgIC8vIFNpbGVudCBsb2dnaW5nIC0gQ2FjaGUgY2xlYXJlZFxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBTaWxlbnQgZXJyb3IgaGFuZGxpbmcgLSBGYWlsZWQgdG8gY2xlYXIgY2FjaGVcbiAgICB9XG4gIH1cblxuICBhc3luYyByZXRyeUZhaWxlZE9wZXJhdGlvbnMoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgZmFpbGVkT3BlcmF0aW9ucyA9IHRoaXMuc3luY1F1ZXVlLmZpbHRlcigob3ApID0+IG9wLnN0YXR1cyA9PT0gXCJmYWlsZWRcIilcblxuICAgIGZvciAoY29uc3Qgb3BlcmF0aW9uIG9mIGZhaWxlZE9wZXJhdGlvbnMpIHtcbiAgICAgIG9wZXJhdGlvbi5zdGF0dXMgPSBcInBlbmRpbmdcIlxuICAgICAgb3BlcmF0aW9uLnJldHJpZXMgPSAwXG4gICAgICBvcGVyYXRpb24uZXJyb3IgPSB1bmRlZmluZWRcbiAgICB9XG5cbiAgICB0aGlzLnNhdmVTeW5jUXVldWUoKVxuXG4gICAgaWYgKHRoaXMuaXNPbmxpbmUpIHtcbiAgICAgIGF3YWl0IHRoaXMuc3luY0FsbCgpXG4gICAgfVxuICB9XG5cbiAgZ2V0RmFpbGVkT3BlcmF0aW9ucygpOiBTeW5jT3BlcmF0aW9uW10ge1xuICAgIHJldHVybiB0aGlzLnN5bmNRdWV1ZS5maWx0ZXIoKG9wKSA9PiBvcC5zdGF0dXMgPT09IFwiZmFpbGVkXCIpXG4gIH1cblxuICBhc3luYyBleHBvcnREYXRhKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgZXhwb3J0RGF0YSA9IHtcbiAgICAgIHN5bmNRdWV1ZTogdGhpcy5zeW5jUXVldWUsXG4gICAgICBjYWNoZTogdGhpcy5nZXRBbGxDYWNoZWREYXRhKCksXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICB9XG5cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZXhwb3J0RGF0YSwgbnVsbCwgMilcbiAgfVxuXG4gIHByaXZhdGUgZ2V0QWxsQ2FjaGVkRGF0YSgpOiBSZWNvcmQ8c3RyaW5nLCBhbnk+IHtcbiAgICBjb25zdCBjYWNoZURhdGE6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7fVxuXG4gICAgc2VjdXJlU3RvcmFnZS5nZXRBbGxLZXlzKCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJjYWNoZV9cIikpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjYWNoZURhdGFba2V5XSA9IHNlY3VyZVN0b3JhZ2UuZ2V0SlNPTihrZXkpIHx8IHt9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgLy8gU2lsZW50IGVycm9yIGhhbmRsaW5nIC0gRmFpbGVkIHRvIHBhcnNlIGNhY2hlZCBkYXRhXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuIGNhY2hlRGF0YVxuICB9XG59XG5cbi8vIENyZWF0ZSBzaW5nbGV0b24gaW5zdGFuY2VcbmV4cG9ydCBjb25zdCBwZXJzaXN0ZW5jZVNlcnZpY2UgPSBuZXcgUGVyc2lzdGVuY2VTZXJ2aWNlKClcblxuZXhwb3J0IGRlZmF1bHQgcGVyc2lzdGVuY2VTZXJ2aWNlXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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SztJQUFBO0VBQ3JEO0VBRUEsTUFBTWdILFdBQUEsRUFBOEI7SUFBQTtJQUFBMUosY0FBQSxHQUFBQyxDQUFBO0lBQ2xDLE1BQU15SixVQUFBO0lBQUE7SUFBQSxDQUFBMUosY0FBQSxHQUFBRSxDQUFBLFNBQWE7TUFDakJPLFNBQUEsRUFBVyxJQUFJLENBQUNBLFNBQVM7TUFDekJrSixLQUFBLEVBQU8sSUFBSSxDQUFDQyxnQkFBZ0I7TUFDNUJ0SCxTQUFBLEVBQVcsSUFBSUMsSUFBQSxHQUFPcUMsV0FBVztJQUNuQztJQUFBO0lBQUE1RSxjQUFBLEdBQUFFLENBQUE7SUFFQSxPQUFPd0csSUFBQSxDQUFLQyxTQUFTLENBQUMrQyxVQUFBLEVBQVksTUFBTTtFQUMxQztFQUVRRSxpQkFBQSxFQUF3QztJQUFBO0lBQUE1SixjQUFBLEdBQUFDLENBQUE7SUFDOUMsTUFBTXdELFNBQUE7SUFBQTtJQUFBLENBQUF6RCxjQUFBLEdBQUFFLENBQUEsU0FBaUMsQ0FBQztJQUFBO0lBQUFGLGNBQUEsR0FBQUUsQ0FBQTtJQUV4QzZHLGNBQUEsQ0FBQUMsYUFBYSxDQUFDb0MsVUFBVSxHQUFHN0QsT0FBTyxDQUFFQyxHQUFBO01BQUE7TUFBQXhGLGNBQUEsR0FBQUMsQ0FBQTtNQUFBRCxjQUFBLEdBQUFFLENBQUE7TUFDbEMsSUFBSXNGLEdBQUEsQ0FBSTZELFVBQVUsQ0FBQyxXQUFXO1FBQUE7UUFBQXJKLGNBQUEsR0FBQVEsQ0FBQTtRQUFBUixjQUFBLEdBQUFFLENBQUE7UUFDNUIsSUFBSTtVQUFBO1VBQUFGLGNBQUEsR0FBQUUsQ0FBQTtVQUNGdUQsU0FBUyxDQUFDK0IsR0FBQSxDQUFJO1VBQUc7VUFBQSxDQUFBeEYsY0FBQSxHQUFBUSxDQUFBLFdBQUF1RyxjQUFBLENBQUFDLGFBQWEsQ0FBQ21CLE9BQU8sQ0FBQzNDLEdBQUE7VUFBQTtVQUFBLENBQUF4RixjQUFBLEdBQUFRLENBQUEsV0FBUSxDQUFDO1FBQ2xELEVBQUUsT0FBT3FCLEtBQUEsRUFBTztVQUNkO1FBQUE7TUFFSjtNQUFBO01BQUE7UUFBQTdCLGNBQUEsR0FBQVEsQ0FBQTtNQUFBO0lBQ0Y7SUFBQTtJQUFBUixjQUFBLEdBQUFFLENBQUE7SUFFQSxPQUFPdUQsU0FBQTtFQUNUO0FBQ0Y7QUFHTyxNQUFNckQsa0JBQUE7QUFBQTtBQUFBLENBQUFKLGNBQUEsR0FBQUUsQ0FBQSxTQUFxQixJQUFJRyxrQkFBQTtNQUV0Q0YsUUFBQTtBQUFBO0FBQUEsQ0FBQUgsY0FBQSxHQUFBRSxDQUFBLFNBQWVFLGtCQUFBIiwiaWdub3JlTGlzdCI6W119