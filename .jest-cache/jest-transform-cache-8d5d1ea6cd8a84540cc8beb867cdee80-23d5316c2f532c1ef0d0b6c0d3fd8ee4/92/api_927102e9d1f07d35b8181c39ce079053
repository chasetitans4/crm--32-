2ee239ddd4cf82b0741f88bf0135e876
"use strict";

/* istanbul ignore next */
function cov_pjk3zuuny() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\api.ts";
  var hash = "bfb096c61f43ca10340baeea668aae2c9ebeade5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\api.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 28,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 26
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 24
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 33
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 25
        }
      },
      "8": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 24
        }
      },
      "9": {
        start: {
          line: 29,
          column: 29
        },
        end: {
          line: 29,
          column: 71
        }
      },
      "10": {
        start: {
          line: 30,
          column: 23
        },
        end: {
          line: 30,
          column: 56
        }
      },
      "11": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 34,
          column: 6
        }
      },
      "12": {
        start: {
          line: 37,
          column: 24
        },
        end: {
          line: 44,
          column: 1
        }
      },
      "13": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "14": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 92
        }
      },
      "15": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 50
        }
      },
      "16": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 15
        }
      },
      "17": {
        start: {
          line: 46,
          column: 28
        },
        end: {
          line: 69,
          column: 1
        }
      },
      "18": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 68,
          column: 5
        }
      },
      "19": {
        start: {
          line: 48,
          column: 23
        },
        end: {
          line: 48,
          column: 35
        }
      },
      "20": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "21": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 88
        }
      },
      "22": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 25
        }
      },
      "23": {
        start: {
          line: 55,
          column: 30
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "24": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "25": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 84
        }
      },
      "26": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 25
        }
      },
      "27": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 20
        }
      },
      "28": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 43
        }
      },
      "29": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 21
        }
      },
      "30": {
        start: {
          line: 71,
          column: 25
        },
        end: {
          line: 85,
          column: 1
        }
      },
      "31": {
        start: {
          line: 72,
          column: 20
        },
        end: {
          line: 72,
          column: 61
        }
      },
      "32": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 76,
          column: 5
        }
      },
      "33": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 23
        }
      },
      "34": {
        start: {
          line: 78,
          column: 22
        },
        end: {
          line: 78,
          column: 46
        }
      },
      "35": {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 83,
          column: 5
        }
      },
      "36": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 81
        }
      },
      "37": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 22
        }
      },
      "38": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 84,
          column: 21
        }
      },
      "39": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 95,
          column: 2
        }
      },
      "40": {
        start: {
          line: 94,
          column: 30
        },
        end: {
          line: 94,
          column: 42
        }
      },
      "41": {
        start: {
          line: 97,
          column: 0
        },
        end: {
          line: 113,
          column: 35
        }
      },
      "42": {
        start: {
          line: 99,
          column: 18
        },
        end: {
          line: 99,
          column: 68
        }
      },
      "43": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 102,
          column: 5
        }
      },
      "44": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 57
        }
      },
      "45": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 104,
          column: 58
        }
      },
      "46": {
        start: {
          line: 105,
          column: 4
        },
        end: {
          line: 105,
          column: 49
        }
      },
      "47": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 111,
          column: 5
        }
      },
      "48": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 110,
          column: 9
        }
      },
      "49": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 72
        }
      },
      "50": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 112,
          column: 18
        }
      },
      "51": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 33
        }
      },
      "52": {
        start: {
          line: 115,
          column: 0
        },
        end: {
          line: 127,
          column: 3
        }
      },
      "53": {
        start: {
          line: 115,
          column: 42
        },
        end: {
          line: 115,
          column: 50
        }
      },
      "54": {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 121,
          column: 5
        }
      },
      "55": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 62
        }
      },
      "56": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 40
        }
      },
      "57": {
        start: {
          line: 123,
          column: 4
        },
        end: {
          line: 125,
          column: 5
        }
      },
      "58": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 67
        }
      },
      "59": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 126,
          column: 33
        }
      },
      "60": {
        start: {
          line: 128,
          column: 19
        },
        end: {
          line: 184,
          column: 1
        }
      },
      "61": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "62": {
        start: {
          line: 131,
          column: 29
        },
        end: {
          line: 131,
          column: 54
        }
      },
      "63": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 33
        }
      },
      "64": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 24
        }
      },
      "65": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "66": {
        start: {
          line: 140,
          column: 29
        },
        end: {
          line: 140,
          column: 60
        }
      },
      "67": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 33
        }
      },
      "68": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 24
        }
      },
      "69": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "70": {
        start: {
          line: 149,
          column: 29
        },
        end: {
          line: 149,
          column: 68
        }
      },
      "71": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 33
        }
      },
      "72": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 24
        }
      },
      "73": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "74": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 47
        }
      },
      "75": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 24
        }
      },
      "76": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "77": {
        start: {
          line: 166,
          column: 29
        },
        end: {
          line: 166,
          column: 79
        }
      },
      "78": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 33
        }
      },
      "79": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 24
        }
      },
      "80": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "81": {
        start: {
          line: 175,
          column: 29
        },
        end: {
          line: 177,
          column: 14
        }
      },
      "82": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 33
        }
      },
      "83": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 24
        }
      },
      "84": {
        start: {
          line: 185,
          column: 17
        },
        end: {
          line: 241,
          column: 1
        }
      },
      "85": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "86": {
        start: {
          line: 188,
          column: 29
        },
        end: {
          line: 188,
          column: 52
        }
      },
      "87": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 33
        }
      },
      "88": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 24
        }
      },
      "89": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "90": {
        start: {
          line: 197,
          column: 29
        },
        end: {
          line: 197,
          column: 58
        }
      },
      "91": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 33
        }
      },
      "92": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 24
        }
      },
      "93": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "94": {
        start: {
          line: 206,
          column: 29
        },
        end: {
          line: 206,
          column: 59
        }
      },
      "95": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 33
        }
      },
      "96": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 24
        }
      },
      "97": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "98": {
        start: {
          line: 215,
          column: 29
        },
        end: {
          line: 215,
          column: 66
        }
      },
      "99": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 33
        }
      },
      "100": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 24
        }
      },
      "101": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "102": {
        start: {
          line: 224,
          column: 29
        },
        end: {
          line: 226,
          column: 14
        }
      },
      "103": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 33
        }
      },
      "104": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 24
        }
      },
      "105": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "106": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 45
        }
      },
      "107": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 24
        }
      },
      "108": {
        start: {
          line: 242,
          column: 18
        },
        end: {
          line: 278,
          column: 1
        }
      },
      "109": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "110": {
        start: {
          line: 245,
          column: 29
        },
        end: {
          line: 245,
          column: 53
        }
      },
      "111": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 33
        }
      },
      "112": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 24
        }
      },
      "113": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 259,
          column: 9
        }
      },
      "114": {
        start: {
          line: 254,
          column: 29
        },
        end: {
          line: 254,
          column: 61
        }
      },
      "115": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 33
        }
      },
      "116": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 24
        }
      },
      "117": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "118": {
        start: {
          line: 263,
          column: 29
        },
        end: {
          line: 263,
          column: 67
        }
      },
      "119": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 33
        }
      },
      "120": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 24
        }
      },
      "121": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 276,
          column: 9
        }
      },
      "122": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 46
        }
      },
      "123": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 24
        }
      },
      "124": {
        start: {
          line: 279,
          column: 26
        },
        end: {
          line: 315,
          column: 1
        }
      },
      "125": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 287,
          column: 9
        }
      },
      "126": {
        start: {
          line: 282,
          column: 29
        },
        end: {
          line: 282,
          column: 62
        }
      },
      "127": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 33
        }
      },
      "128": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 24
        }
      },
      "129": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "130": {
        start: {
          line: 291,
          column: 29
        },
        end: {
          line: 291,
          column: 73
        }
      },
      "131": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 292,
          column: 33
        }
      },
      "132": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 24
        }
      },
      "133": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "134": {
        start: {
          line: 300,
          column: 29
        },
        end: {
          line: 300,
          column: 76
        }
      },
      "135": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 33
        }
      },
      "136": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 304,
          column: 24
        }
      },
      "137": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 313,
          column: 9
        }
      },
      "138": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 55
        }
      },
      "139": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 24
        }
      },
      "140": {
        start: {
          line: 316,
          column: 17
        },
        end: {
          line: 321,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 22
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 29
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 21
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 20
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "6": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 31,
            column: 9
          },
          end: {
            line: 31,
            column: 33
          }
        },
        loc: {
          start: {
            line: 31,
            column: 39
          },
          end: {
            line: 35,
            column: 1
          }
        },
        line: 31
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 37,
            column: 24
          },
          end: {
            line: 37,
            column: 25
          }
        },
        loc: {
          start: {
            line: 37,
            column: 31
          },
          end: {
            line: 44,
            column: 1
          }
        },
        line: 37
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 46,
            column: 28
          },
          end: {
            line: 46,
            column: 29
          }
        },
        loc: {
          start: {
            line: 46,
            column: 35
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 46
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 71,
            column: 25
          },
          end: {
            line: 71,
            column: 26
          }
        },
        loc: {
          start: {
            line: 71,
            column: 29
          },
          end: {
            line: 85,
            column: 1
          }
        },
        line: 71
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 94,
            column: 20
          },
          end: {
            line: 94,
            column: 21
          }
        },
        loc: {
          start: {
            line: 94,
            column: 30
          },
          end: {
            line: 94,
            column: 42
          }
        },
        line: 94
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 97,
            column: 29
          },
          end: {
            line: 97,
            column: 30
          }
        },
        loc: {
          start: {
            line: 97,
            column: 39
          },
          end: {
            line: 113,
            column: 1
          }
        },
        line: 97
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 113,
            column: 3
          },
          end: {
            line: 113,
            column: 4
          }
        },
        loc: {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 113,
            column: 33
          }
        },
        line: 113
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 115,
            column: 30
          },
          end: {
            line: 115,
            column: 31
          }
        },
        loc: {
          start: {
            line: 115,
            column: 42
          },
          end: {
            line: 115,
            column: 50
          }
        },
        line: 115
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 115,
            column: 52
          },
          end: {
            line: 115,
            column: 53
          }
        },
        loc: {
          start: {
            line: 115,
            column: 61
          },
          end: {
            line: 127,
            column: 1
          }
        },
        line: 115
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        },
        loc: {
          start: {
            line: 129,
            column: 22
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 129
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 138,
            column: 13
          },
          end: {
            line: 138,
            column: 14
          }
        },
        loc: {
          start: {
            line: 138,
            column: 25
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 138
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        },
        loc: {
          start: {
            line: 147,
            column: 30
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 147
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 156,
            column: 13
          }
        },
        loc: {
          start: {
            line: 156,
            column: 24
          },
          end: {
            line: 163,
            column: 5
          }
        },
        line: 156
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 164,
            column: 13
          },
          end: {
            line: 164,
            column: 14
          }
        },
        loc: {
          start: {
            line: 164,
            column: 37
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 164
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 173,
            column: 17
          },
          end: {
            line: 173,
            column: 18
          }
        },
        loc: {
          start: {
            line: 173,
            column: 42
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 173
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 186,
            column: 13
          }
        },
        loc: {
          start: {
            line: 186,
            column: 22
          },
          end: {
            line: 194,
            column: 5
          }
        },
        line: 186
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 195,
            column: 13
          },
          end: {
            line: 195,
            column: 14
          }
        },
        loc: {
          start: {
            line: 195,
            column: 25
          },
          end: {
            line: 203,
            column: 5
          }
        },
        line: 195
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        },
        loc: {
          start: {
            line: 204,
            column: 26
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 204
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 213,
            column: 12
          },
          end: {
            line: 213,
            column: 13
          }
        },
        loc: {
          start: {
            line: 213,
            column: 30
          },
          end: {
            line: 221,
            column: 5
          }
        },
        line: 213
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 222,
            column: 18
          },
          end: {
            line: 222,
            column: 19
          }
        },
        loc: {
          start: {
            line: 222,
            column: 38
          },
          end: {
            line: 232,
            column: 5
          }
        },
        line: 222
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 233,
            column: 12
          },
          end: {
            line: 233,
            column: 13
          }
        },
        loc: {
          start: {
            line: 233,
            column: 24
          },
          end: {
            line: 240,
            column: 5
          }
        },
        line: 233
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 243,
            column: 13
          }
        },
        loc: {
          start: {
            line: 243,
            column: 22
          },
          end: {
            line: 251,
            column: 5
          }
        },
        line: 243
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        },
        loc: {
          start: {
            line: 252,
            column: 27
          },
          end: {
            line: 260,
            column: 5
          }
        },
        line: 252
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 261,
            column: 12
          },
          end: {
            line: 261,
            column: 13
          }
        },
        loc: {
          start: {
            line: 261,
            column: 30
          },
          end: {
            line: 269,
            column: 5
          }
        },
        line: 261
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 270,
            column: 12
          },
          end: {
            line: 270,
            column: 13
          }
        },
        loc: {
          start: {
            line: 270,
            column: 24
          },
          end: {
            line: 277,
            column: 5
          }
        },
        line: 270
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 280,
            column: 13
          }
        },
        loc: {
          start: {
            line: 280,
            column: 22
          },
          end: {
            line: 288,
            column: 5
          }
        },
        line: 280
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 289,
            column: 12
          },
          end: {
            line: 289,
            column: 13
          }
        },
        loc: {
          start: {
            line: 289,
            column: 30
          },
          end: {
            line: 297,
            column: 5
          }
        },
        line: 289
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 298,
            column: 12
          },
          end: {
            line: 298,
            column: 13
          }
        },
        loc: {
          start: {
            line: 298,
            column: 30
          },
          end: {
            line: 306,
            column: 5
          }
        },
        line: 298
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 307,
            column: 12
          },
          end: {
            line: 307,
            column: 13
          }
        },
        loc: {
          start: {
            line: 307,
            column: 24
          },
          end: {
            line: 314,
            column: 5
          }
        },
        line: 307
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 32,
            column: 11
          },
          end: {
            line: 34,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 32,
            column: 35
          },
          end: {
            line: 32,
            column: 38
          }
        }, {
          start: {
            line: 32,
            column: 41
          },
          end: {
            line: 34,
            column: 5
          }
        }],
        line: 32
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 11
          },
          end: {
            line: 32,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 11
          },
          end: {
            line: 32,
            column: 14
          }
        }, {
          start: {
            line: 32,
            column: 18
          },
          end: {
            line: 32,
            column: 32
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "3": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 39,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 39,
            column: 45
          }
        }, {
          start: {
            line: 39,
            column: 49
          },
          end: {
            line: 39,
            column: 74
          }
        }],
        line: 39
      },
      "4": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "5": {
        loc: {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 50,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 50,
            column: 49
          }
        }, {
          start: {
            line: 50,
            column: 53
          },
          end: {
            line: 50,
            column: 81
          }
        }],
        line: 50
      },
      "6": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "7": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 60,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 60,
            column: 49
          }
        }, {
          start: {
            line: 60,
            column: 53
          },
          end: {
            line: 60,
            column: 92
          }
        }],
        line: 60
      },
      "8": {
        loc: {
          start: {
            line: 72,
            column: 20
          },
          end: {
            line: 72,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 20
          },
          end: {
            line: 72,
            column: 51
          }
        }, {
          start: {
            line: 72,
            column: 55
          },
          end: {
            line: 72,
            column: 61
          }
        }],
        line: 72
      },
      "9": {
        loc: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "10": {
        loc: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "11": {
        loc: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "12": {
        loc: {
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "13": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 107,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 107,
            column: 18
          }
        }, {
          start: {
            line: 107,
            column: 22
          },
          end: {
            line: 107,
            column: 51
          }
        }],
        line: 107
      },
      "14": {
        loc: {
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "15": {
        loc: {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "16": {
        loc: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\api.ts"],
      sourcesContent: ["import axios from \"axios\"\r\nimport { toast } from \"react-hot-toast\"\r\nimport { secureStorage } from \"../utils/secureStorage\"\r\nimport type { Client, Task, Event, EmailTemplate, NewTask, NewEvent } from \"../types\"\r\n\r\n// Helper function to ensure secure URL\r\nconst ensureSecureUrl = (url: string): string => {\r\n  // In production, enforce HTTPS\r\n  if (process.env.NODE_ENV === 'production' && url.startsWith('http://')) {\r\n    console.warn('Insecure HTTP URL detected in production, converting to HTTPS:', url)\r\n    return url.replace('http://', 'https://')\r\n  }\r\n  return url\r\n}\r\n\r\n// Helper function to validate URL security\r\nconst validateUrlSecurity = (url: string): boolean => {\r\n  try {\r\n    const urlObj = new URL(url)\r\n    \r\n    // In production, only allow HTTPS\r\n    if (process.env.NODE_ENV === 'production' && urlObj.protocol !== 'https:') {\r\n      console.error('Insecure protocol detected in production:', urlObj.protocol)\r\n      return false\r\n    }\r\n    \r\n    // Block known insecure hosts (add more as needed)\r\n    const insecureHosts = ['localhost', '127.0.0.1', '0.0.0.0']\r\n    if (process.env.NODE_ENV === 'production' && insecureHosts.includes(urlObj.hostname)) {\r\n      console.error('Insecure host detected in production:', urlObj.hostname)\r\n      return false\r\n    }\r\n    \r\n    return true\r\n  } catch (error) {\r\n    console.error('Invalid URL:', url)\r\n    return false\r\n  }\r\n}\r\n\r\n// Get and validate base URL\r\nconst getSecureBaseUrl = (): string => {\r\n  const baseUrl = process.env.NEXT_PUBLIC_API_URL || \"/api\"\r\n  \r\n  // If it's a relative URL, return as-is (will use current origin)\r\n  if (baseUrl.startsWith('/')) {\r\n    return baseUrl\r\n  }\r\n  \r\n  // For absolute URLs, ensure security\r\n  const secureUrl = ensureSecureUrl(baseUrl)\r\n  \r\n  if (!validateUrlSecurity(secureUrl)) {\r\n    // Fallback to relative URL if validation fails\r\n    console.warn('URL validation failed, falling back to relative API path')\r\n    return \"/api\"\r\n  }\r\n  \r\n  return secureUrl\r\n}\r\n\r\n// Create an axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: getSecureBaseUrl(),\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n  // Add security configurations\r\n  timeout: 30000, // 30 second timeout\r\n  validateStatus: (status) => status < 500, // Don't throw on 4xx errors\r\n})\r\n\r\n// Add request interceptor for authentication and security\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // Add authentication token\r\n    const token = secureStorage.getItem(\"auth_token\")\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`\r\n    }\r\n    \r\n    // Add security headers\r\n    config.headers['X-Requested-With'] = 'XMLHttpRequest'\r\n    config.headers['Cache-Control'] = 'no-cache'\r\n    \r\n    // Validate URL security for absolute URLs\r\n    if (config.url && config.url.startsWith('http')) {\r\n      if (!validateUrlSecurity(config.url)) {\r\n        throw new Error('Insecure URL rejected by security policy')\r\n      }\r\n    }\r\n    \r\n    return config\r\n  },\r\n  (error) => Promise.reject(error),\r\n)\r\n\r\n// Add response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    // Handle specific error cases\r\n    if (error.response?.status === 401) {\r\n      // Handle unauthorized access\r\n      secureStorage.removeItem(\"auth_token\")\r\n      window.location.href = \"/login\"\r\n    }\r\n    \r\n    // Log security-related errors\r\n    if (error.message?.includes('security policy')) {\r\n      console.error('Security policy violation:', error.message)\r\n    }\r\n    \r\n    return Promise.reject(error)\r\n  },\r\n)\r\n\r\n// Client API endpoints\r\nexport const clientsApi = {\r\n  getAll: async (): Promise<Client[]> => {\r\n    try {\r\n      const response = await api.get(\"/clients\")\r\n      return response.data\r\n    } catch (error) {\r\n      // Error fetching clients - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  getById: async (id: string): Promise<Client> => {\r\n    try {\r\n      const response = await api.get(`/clients/${id}`)\r\n      return response.data\r\n    } catch (error) {\r\n      // Error fetching client - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  update: async (id: string, data: Partial<Client>): Promise<Client> => {\r\n    try {\r\n      const response = await api.patch(`/clients/${id}`, data)\r\n      return response.data\r\n    } catch (error) {\r\n      // Error updating client - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  delete: async (id: string): Promise<void> => {\r\n    try {\r\n      await api.delete(`/clients/${id}`)\r\n    } catch (error) {\r\n      // Error deleting client - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  addNote: async (clientId: string, note: { type: \"call\" | \"email\" | \"meeting\"; content: string }): Promise<Client> => {\r\n    try {\r\n      const response = await api.post(`/clients/${clientId}/notes`, note)\r\n      return response.data\r\n    } catch (error) {\r\n      // Error adding note to client - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  updateStage: async (clientId: string, stage: string): Promise<Client> => {\r\n    try {\r\n      const response = await api.patch(`/clients/${clientId}`, { stage })\r\n      return response.data\r\n    } catch (error) {\r\n      // Error updating stage for client - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n}\r\n\r\n// Task API endpoints\r\nexport const tasksApi = {\r\n  getAll: async (): Promise<Task[]> => {\r\n    try {\r\n      const response = await api.get(\"/tasks\")\r\n      return response.data\r\n    } catch (error) {\r\n      // Error fetching tasks - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  getById: async (id: string): Promise<Task> => {\r\n    try {\r\n      const response = await api.get(`/tasks/${id}`)\r\n      return response.data\r\n    } catch (error) {\r\n      // Error fetching task - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  create: async (task: NewTask): Promise<Task> => {\r\n    try {\r\n      const response = await api.post(\"/tasks\", task)\r\n      return response.data\r\n    } catch (error) {\r\n      // Error creating task - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  update: async (id: string, data: Partial<Task>): Promise<Task> => {\r\n    try {\r\n      const response = await api.patch(`/tasks/${id}`, data)\r\n      return response.data\r\n    } catch (error) {\r\n      // Error updating task - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  updateStatus: async (id: string, status: \"pending\" | \"in-progress\" | \"completed\"): Promise<Task> => {\r\n    try {\r\n      const response = await api.patch(`/tasks/${id}`, { status })\r\n      return response.data\r\n    } catch (error) {\r\n      // Error updating status for task - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  delete: async (id: string): Promise<void> => {\r\n    try {\r\n      await api.delete(`/tasks/${id}`)\r\n    } catch (error) {\r\n      // Error deleting task - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n}\r\n\r\n// Event API endpoints\r\nexport const eventsApi = {\r\n  getAll: async (): Promise<Event[]> => {\r\n    try {\r\n      const response = await api.get(\"/events\")\r\n      return response.data\r\n    } catch (error) {\r\n      // Error fetching events - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  create: async (event: NewEvent): Promise<Event> => {\r\n    try {\r\n      const response = await api.post(\"/events\", event)\r\n      return response.data\r\n    } catch (error) {\r\n      // Error creating event - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  update: async (id: string, data: Partial<Event>): Promise<Event> => {\r\n    try {\r\n      const response = await api.patch(`/events/${id}`, data)\r\n      return response.data\r\n    } catch (error) {\r\n      // Error updating event - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  delete: async (id: string): Promise<void> => {\r\n    try {\r\n      await api.delete(`/events/${id}`)\r\n    } catch (error) {\r\n      // Error deleting event - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n}\r\n\r\n// Email templates API endpoints\r\nexport const emailTemplatesApi = {\r\n  getAll: async (): Promise<EmailTemplate[]> => {\r\n    try {\r\n      const response = await api.get(\"/email-templates\")\r\n      return response.data\r\n    } catch (error) {\r\n      // Error fetching email templates - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  create: async (template: Omit<EmailTemplate, \"id\">): Promise<EmailTemplate> => {\r\n    try {\r\n      const response = await api.post(\"/email-templates\", template)\r\n      return response.data\r\n    } catch (error) {\r\n      // Error creating email template - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  update: async (id: number, data: Partial<EmailTemplate>): Promise<EmailTemplate> => {\r\n    try {\r\n      const response = await api.patch(`/email-templates/${id}`, data)\r\n      return response.data\r\n    } catch (error) {\r\n      // Error updating email template - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  delete: async (id: number): Promise<void> => {\r\n    try {\r\n      await api.delete(`/email-templates/${id}`)\r\n    } catch (error) {\r\n      // Error deleting email template - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n}\r\n\r\n// Export a default object with all APIs\r\nexport default {\r\n  clients: clientsApi,\r\n  tasks: tasksApi,\r\n  events: eventsApi,\r\n  emailTemplates: emailTemplatesApi,\r\n}\r\n"],
      names: ["clientsApi", "emailTemplatesApi", "eventsApi", "tasksApi", "ensureSecureUrl", "url", "process", "env", "NODE_ENV", "startsWith", "console", "warn", "replace", "validateUrlSecurity", "urlObj", "URL", "protocol", "error", "insecureHosts", "includes", "hostname", "getSecureBaseUrl", "baseUrl", "NEXT_PUBLIC_API_URL", "secureUrl", "api", "axios", "create", "baseURL", "headers", "timeout", "validateStatus", "status", "interceptors", "request", "use", "config", "token", "secureStorage", "getItem", "Authorization", "Error", "Promise", "reject", "response", "removeItem", "window", "location", "href", "message", "getAll", "get", "data", "getById", "id", "update", "patch", "delete", "addNote", "clientId", "note", "post", "updateStage", "stage", "task", "updateStatus", "event", "template", "clients", "tasks", "events", "emailTemplates"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bfb096c61f43ca10340baeea668aae2c9ebeade5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_pjk3zuuny = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_pjk3zuuny();
cov_pjk3zuuny().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_pjk3zuuny().f[0]++;
  cov_pjk3zuuny().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_pjk3zuuny().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_pjk3zuuny().s[3]++;
_export(exports, {
  get clientsApi() {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[1]++;
    cov_pjk3zuuny().s[4]++;
    return clientsApi;
  },
  get
  // Export a default object with all APIs
  default() {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[2]++;
    cov_pjk3zuuny().s[5]++;
    return _default;
  },
  get emailTemplatesApi() {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[3]++;
    cov_pjk3zuuny().s[6]++;
    return emailTemplatesApi;
  },
  get eventsApi() {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[4]++;
    cov_pjk3zuuny().s[7]++;
    return eventsApi;
  },
  get tasksApi() {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[5]++;
    cov_pjk3zuuny().s[8]++;
    return tasksApi;
  }
});
const _axios =
/* istanbul ignore next */
(/*#__PURE__*/cov_pjk3zuuny().s[9]++, _interop_require_default(require("axios")));
const _secureStorage =
/* istanbul ignore next */
(cov_pjk3zuuny().s[10]++, require("../utils/secureStorage"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_pjk3zuuny().f[6]++;
  cov_pjk3zuuny().s[11]++;
  return /* istanbul ignore next */(cov_pjk3zuuny().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_pjk3zuuny().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_pjk3zuuny().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_pjk3zuuny().b[0][1]++, {
    default: obj
  });
}
// Helper function to ensure secure URL
/* istanbul ignore next */
cov_pjk3zuuny().s[12]++;
const ensureSecureUrl = url => {
  /* istanbul ignore next */
  cov_pjk3zuuny().f[7]++;
  cov_pjk3zuuny().s[13]++;
  // In production, enforce HTTPS
  if (
  /* istanbul ignore next */
  (cov_pjk3zuuny().b[3][0]++, process.env.NODE_ENV === 'production') &&
  /* istanbul ignore next */
  (cov_pjk3zuuny().b[3][1]++, url.startsWith('http://'))) {
    /* istanbul ignore next */
    cov_pjk3zuuny().b[2][0]++;
    cov_pjk3zuuny().s[14]++;
    console.warn('Insecure HTTP URL detected in production, converting to HTTPS:', url);
    /* istanbul ignore next */
    cov_pjk3zuuny().s[15]++;
    return url.replace('http://', 'https://');
  } else
  /* istanbul ignore next */
  {
    cov_pjk3zuuny().b[2][1]++;
  }
  cov_pjk3zuuny().s[16]++;
  return url;
};
// Helper function to validate URL security
/* istanbul ignore next */
cov_pjk3zuuny().s[17]++;
const validateUrlSecurity = url => {
  /* istanbul ignore next */
  cov_pjk3zuuny().f[8]++;
  cov_pjk3zuuny().s[18]++;
  try {
    const urlObj =
    /* istanbul ignore next */
    (cov_pjk3zuuny().s[19]++, new URL(url));
    // In production, only allow HTTPS
    /* istanbul ignore next */
    cov_pjk3zuuny().s[20]++;
    if (
    /* istanbul ignore next */
    (cov_pjk3zuuny().b[5][0]++, process.env.NODE_ENV === 'production') &&
    /* istanbul ignore next */
    (cov_pjk3zuuny().b[5][1]++, urlObj.protocol !== 'https:')) {
      /* istanbul ignore next */
      cov_pjk3zuuny().b[4][0]++;
      cov_pjk3zuuny().s[21]++;
      console.error('Insecure protocol detected in production:', urlObj.protocol);
      /* istanbul ignore next */
      cov_pjk3zuuny().s[22]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_pjk3zuuny().b[4][1]++;
    }
    // Block known insecure hosts (add more as needed)
    const insecureHosts =
    /* istanbul ignore next */
    (cov_pjk3zuuny().s[23]++, ['localhost', '127.0.0.1', '0.0.0.0']);
    /* istanbul ignore next */
    cov_pjk3zuuny().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_pjk3zuuny().b[7][0]++, process.env.NODE_ENV === 'production') &&
    /* istanbul ignore next */
    (cov_pjk3zuuny().b[7][1]++, insecureHosts.includes(urlObj.hostname))) {
      /* istanbul ignore next */
      cov_pjk3zuuny().b[6][0]++;
      cov_pjk3zuuny().s[25]++;
      console.error('Insecure host detected in production:', urlObj.hostname);
      /* istanbul ignore next */
      cov_pjk3zuuny().s[26]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_pjk3zuuny().b[6][1]++;
    }
    cov_pjk3zuuny().s[27]++;
    return true;
  } catch (error) {
    /* istanbul ignore next */
    cov_pjk3zuuny().s[28]++;
    console.error('Invalid URL:', url);
    /* istanbul ignore next */
    cov_pjk3zuuny().s[29]++;
    return false;
  }
};
// Get and validate base URL
/* istanbul ignore next */
cov_pjk3zuuny().s[30]++;
const getSecureBaseUrl = () => {
  /* istanbul ignore next */
  cov_pjk3zuuny().f[9]++;
  const baseUrl =
  /* istanbul ignore next */
  (cov_pjk3zuuny().s[31]++,
  /* istanbul ignore next */
  (cov_pjk3zuuny().b[8][0]++, process.env.NEXT_PUBLIC_API_URL) ||
  /* istanbul ignore next */
  (cov_pjk3zuuny().b[8][1]++, "/api"));
  // If it's a relative URL, return as-is (will use current origin)
  /* istanbul ignore next */
  cov_pjk3zuuny().s[32]++;
  if (baseUrl.startsWith('/')) {
    /* istanbul ignore next */
    cov_pjk3zuuny().b[9][0]++;
    cov_pjk3zuuny().s[33]++;
    return baseUrl;
  } else
  /* istanbul ignore next */
  {
    cov_pjk3zuuny().b[9][1]++;
  }
  // For absolute URLs, ensure security
  const secureUrl =
  /* istanbul ignore next */
  (cov_pjk3zuuny().s[34]++, ensureSecureUrl(baseUrl));
  /* istanbul ignore next */
  cov_pjk3zuuny().s[35]++;
  if (!validateUrlSecurity(secureUrl)) {
    /* istanbul ignore next */
    cov_pjk3zuuny().b[10][0]++;
    cov_pjk3zuuny().s[36]++;
    // Fallback to relative URL if validation fails
    console.warn('URL validation failed, falling back to relative API path');
    /* istanbul ignore next */
    cov_pjk3zuuny().s[37]++;
    return "/api";
  } else
  /* istanbul ignore next */
  {
    cov_pjk3zuuny().b[10][1]++;
  }
  cov_pjk3zuuny().s[38]++;
  return secureUrl;
};
// Create an axios instance with default config
const api =
/* istanbul ignore next */
(cov_pjk3zuuny().s[39]++, _axios.default.create({
  baseURL: getSecureBaseUrl(),
  headers: {
    "Content-Type": "application/json"
  },
  // Add security configurations
  timeout: 30000,
  validateStatus: status => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[10]++;
    cov_pjk3zuuny().s[40]++;
    return status < 500;
  }
}));
// Add request interceptor for authentication and security
/* istanbul ignore next */
cov_pjk3zuuny().s[41]++;
api.interceptors.request.use(config => {
  /* istanbul ignore next */
  cov_pjk3zuuny().f[11]++;
  // Add authentication token
  const token =
  /* istanbul ignore next */
  (cov_pjk3zuuny().s[42]++, _secureStorage.secureStorage.getItem("auth_token"));
  /* istanbul ignore next */
  cov_pjk3zuuny().s[43]++;
  if (token) {
    /* istanbul ignore next */
    cov_pjk3zuuny().b[11][0]++;
    cov_pjk3zuuny().s[44]++;
    config.headers.Authorization = `Bearer ${token}`;
  } else
  /* istanbul ignore next */
  {
    cov_pjk3zuuny().b[11][1]++;
  }
  // Add security headers
  cov_pjk3zuuny().s[45]++;
  config.headers['X-Requested-With'] = 'XMLHttpRequest';
  /* istanbul ignore next */
  cov_pjk3zuuny().s[46]++;
  config.headers['Cache-Control'] = 'no-cache';
  // Validate URL security for absolute URLs
  /* istanbul ignore next */
  cov_pjk3zuuny().s[47]++;
  if (
  /* istanbul ignore next */
  (cov_pjk3zuuny().b[13][0]++, config.url) &&
  /* istanbul ignore next */
  (cov_pjk3zuuny().b[13][1]++, config.url.startsWith('http'))) {
    /* istanbul ignore next */
    cov_pjk3zuuny().b[12][0]++;
    cov_pjk3zuuny().s[48]++;
    if (!validateUrlSecurity(config.url)) {
      /* istanbul ignore next */
      cov_pjk3zuuny().b[14][0]++;
      cov_pjk3zuuny().s[49]++;
      throw new Error('Insecure URL rejected by security policy');
    } else
    /* istanbul ignore next */
    {
      cov_pjk3zuuny().b[14][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_pjk3zuuny().b[12][1]++;
  }
  cov_pjk3zuuny().s[50]++;
  return config;
}, error => {
  /* istanbul ignore next */
  cov_pjk3zuuny().f[12]++;
  cov_pjk3zuuny().s[51]++;
  return Promise.reject(error);
});
// Add response interceptor for error handling
/* istanbul ignore next */
cov_pjk3zuuny().s[52]++;
api.interceptors.response.use(response => {
  /* istanbul ignore next */
  cov_pjk3zuuny().f[13]++;
  cov_pjk3zuuny().s[53]++;
  return response;
}, error => {
  /* istanbul ignore next */
  cov_pjk3zuuny().f[14]++;
  cov_pjk3zuuny().s[54]++;
  // Handle specific error cases
  if (error.response?.status === 401) {
    /* istanbul ignore next */
    cov_pjk3zuuny().b[15][0]++;
    cov_pjk3zuuny().s[55]++;
    // Handle unauthorized access
    _secureStorage.secureStorage.removeItem("auth_token");
    /* istanbul ignore next */
    cov_pjk3zuuny().s[56]++;
    window.location.href = "/login";
  } else
  /* istanbul ignore next */
  {
    cov_pjk3zuuny().b[15][1]++;
  }
  // Log security-related errors
  cov_pjk3zuuny().s[57]++;
  if (error.message?.includes('security policy')) {
    /* istanbul ignore next */
    cov_pjk3zuuny().b[16][0]++;
    cov_pjk3zuuny().s[58]++;
    console.error('Security policy violation:', error.message);
  } else
  /* istanbul ignore next */
  {
    cov_pjk3zuuny().b[16][1]++;
  }
  cov_pjk3zuuny().s[59]++;
  return Promise.reject(error);
});
const clientsApi =
/* istanbul ignore next */
(cov_pjk3zuuny().s[60]++, {
  getAll: async () => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[15]++;
    cov_pjk3zuuny().s[61]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[62]++, await api.get("/clients"));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[63]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[64]++;
      // Error fetching clients - error handled silently
      throw error;
    }
  },
  getById: async id => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[16]++;
    cov_pjk3zuuny().s[65]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[66]++, await api.get(`/clients/${id}`));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[67]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[68]++;
      // Error fetching client - error handled silently
      throw error;
    }
  },
  update: async (id, data) => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[17]++;
    cov_pjk3zuuny().s[69]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[70]++, await api.patch(`/clients/${id}`, data));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[71]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[72]++;
      // Error updating client - error handled silently
      throw error;
    }
  },
  delete: async id => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[18]++;
    cov_pjk3zuuny().s[73]++;
    try {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[74]++;
      await api.delete(`/clients/${id}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[75]++;
      // Error deleting client - error handled silently
      throw error;
    }
  },
  addNote: async (clientId, note) => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[19]++;
    cov_pjk3zuuny().s[76]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[77]++, await api.post(`/clients/${clientId}/notes`, note));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[78]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[79]++;
      // Error adding note to client - error handled silently
      throw error;
    }
  },
  updateStage: async (clientId, stage) => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[20]++;
    cov_pjk3zuuny().s[80]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[81]++, await api.patch(`/clients/${clientId}`, {
        stage
      }));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[82]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[83]++;
      // Error updating stage for client - error handled silently
      throw error;
    }
  }
});
const tasksApi =
/* istanbul ignore next */
(cov_pjk3zuuny().s[84]++, {
  getAll: async () => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[21]++;
    cov_pjk3zuuny().s[85]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[86]++, await api.get("/tasks"));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[87]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[88]++;
      // Error fetching tasks - error handled silently
      throw error;
    }
  },
  getById: async id => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[22]++;
    cov_pjk3zuuny().s[89]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[90]++, await api.get(`/tasks/${id}`));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[91]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[92]++;
      // Error fetching task - error handled silently
      throw error;
    }
  },
  create: async task => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[23]++;
    cov_pjk3zuuny().s[93]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[94]++, await api.post("/tasks", task));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[95]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[96]++;
      // Error creating task - error handled silently
      throw error;
    }
  },
  update: async (id, data) => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[24]++;
    cov_pjk3zuuny().s[97]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[98]++, await api.patch(`/tasks/${id}`, data));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[99]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[100]++;
      // Error updating task - error handled silently
      throw error;
    }
  },
  updateStatus: async (id, status) => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[25]++;
    cov_pjk3zuuny().s[101]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[102]++, await api.patch(`/tasks/${id}`, {
        status
      }));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[103]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[104]++;
      // Error updating status for task - error handled silently
      throw error;
    }
  },
  delete: async id => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[26]++;
    cov_pjk3zuuny().s[105]++;
    try {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[106]++;
      await api.delete(`/tasks/${id}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[107]++;
      // Error deleting task - error handled silently
      throw error;
    }
  }
});
const eventsApi =
/* istanbul ignore next */
(cov_pjk3zuuny().s[108]++, {
  getAll: async () => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[27]++;
    cov_pjk3zuuny().s[109]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[110]++, await api.get("/events"));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[111]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[112]++;
      // Error fetching events - error handled silently
      throw error;
    }
  },
  create: async event => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[28]++;
    cov_pjk3zuuny().s[113]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[114]++, await api.post("/events", event));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[115]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[116]++;
      // Error creating event - error handled silently
      throw error;
    }
  },
  update: async (id, data) => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[29]++;
    cov_pjk3zuuny().s[117]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[118]++, await api.patch(`/events/${id}`, data));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[119]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[120]++;
      // Error updating event - error handled silently
      throw error;
    }
  },
  delete: async id => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[30]++;
    cov_pjk3zuuny().s[121]++;
    try {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[122]++;
      await api.delete(`/events/${id}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[123]++;
      // Error deleting event - error handled silently
      throw error;
    }
  }
});
const emailTemplatesApi =
/* istanbul ignore next */
(cov_pjk3zuuny().s[124]++, {
  getAll: async () => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[31]++;
    cov_pjk3zuuny().s[125]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[126]++, await api.get("/email-templates"));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[127]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[128]++;
      // Error fetching email templates - error handled silently
      throw error;
    }
  },
  create: async template => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[32]++;
    cov_pjk3zuuny().s[129]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[130]++, await api.post("/email-templates", template));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[131]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[132]++;
      // Error creating email template - error handled silently
      throw error;
    }
  },
  update: async (id, data) => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[33]++;
    cov_pjk3zuuny().s[133]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_pjk3zuuny().s[134]++, await api.patch(`/email-templates/${id}`, data));
      /* istanbul ignore next */
      cov_pjk3zuuny().s[135]++;
      return response.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[136]++;
      // Error updating email template - error handled silently
      throw error;
    }
  },
  delete: async id => {
    /* istanbul ignore next */
    cov_pjk3zuuny().f[34]++;
    cov_pjk3zuuny().s[137]++;
    try {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[138]++;
      await api.delete(`/email-templates/${id}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_pjk3zuuny().s[139]++;
      // Error deleting email template - error handled silently
      throw error;
    }
  }
});
const _default =
/* istanbul ignore next */
(cov_pjk3zuuny().s[140]++, {
  clients: clientsApi,
  tasks: tasksApi,
  events: eventsApi,
  emailTemplates: emailTemplatesApi
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,