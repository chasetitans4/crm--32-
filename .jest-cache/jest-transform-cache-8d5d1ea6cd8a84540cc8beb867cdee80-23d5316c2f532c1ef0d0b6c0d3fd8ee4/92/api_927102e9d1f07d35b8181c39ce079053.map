{"version":3,"names":["cov_pjk3zuuny","actualCoverage","s","clientsApi","f","default","_default","emailTemplatesApi","eventsApi","tasksApi","ensureSecureUrl","url","b","process","env","NODE_ENV","startsWith","console","warn","replace","validateUrlSecurity","urlObj","URL","protocol","error","insecureHosts","includes","hostname","getSecureBaseUrl","baseUrl","NEXT_PUBLIC_API_URL","secureUrl","api","_axios","create","baseURL","headers","timeout","validateStatus","status","interceptors","request","use","config","token","_secureStorage","secureStorage","getItem","Authorization","Error","Promise","reject","response","removeItem","window","location","href","message","getAll","get","data","getById","id","update","patch","delete","addNote","clientId","note","post","updateStage","stage","task","updateStatus","event","template","clients","tasks","events","emailTemplates"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\api.ts"],"sourcesContent":["import axios from \"axios\"\r\nimport { toast } from \"react-hot-toast\"\r\nimport { secureStorage } from \"../utils/secureStorage\"\r\nimport type { Client, Task, Event, EmailTemplate, NewTask, NewEvent } from \"../types\"\r\n\r\n// Helper function to ensure secure URL\r\nconst ensureSecureUrl = (url: string): string => {\r\n  // In production, enforce HTTPS\r\n  if (process.env.NODE_ENV === 'production' && url.startsWith('http://')) {\r\n    console.warn('Insecure HTTP URL detected in production, converting to HTTPS:', url)\r\n    return url.replace('http://', 'https://')\r\n  }\r\n  return url\r\n}\r\n\r\n// Helper function to validate URL security\r\nconst validateUrlSecurity = (url: string): boolean => {\r\n  try {\r\n    const urlObj = new URL(url)\r\n    \r\n    // In production, only allow HTTPS\r\n    if (process.env.NODE_ENV === 'production' && urlObj.protocol !== 'https:') {\r\n      console.error('Insecure protocol detected in production:', urlObj.protocol)\r\n      return false\r\n    }\r\n    \r\n    // Block known insecure hosts (add more as needed)\r\n    const insecureHosts = ['localhost', '127.0.0.1', '0.0.0.0']\r\n    if (process.env.NODE_ENV === 'production' && insecureHosts.includes(urlObj.hostname)) {\r\n      console.error('Insecure host detected in production:', urlObj.hostname)\r\n      return false\r\n    }\r\n    \r\n    return true\r\n  } catch (error) {\r\n    console.error('Invalid URL:', url)\r\n    return false\r\n  }\r\n}\r\n\r\n// Get and validate base URL\r\nconst getSecureBaseUrl = (): string => {\r\n  const baseUrl = process.env.NEXT_PUBLIC_API_URL || \"/api\"\r\n  \r\n  // If it's a relative URL, return as-is (will use current origin)\r\n  if (baseUrl.startsWith('/')) {\r\n    return baseUrl\r\n  }\r\n  \r\n  // For absolute URLs, ensure security\r\n  const secureUrl = ensureSecureUrl(baseUrl)\r\n  \r\n  if (!validateUrlSecurity(secureUrl)) {\r\n    // Fallback to relative URL if validation fails\r\n    console.warn('URL validation failed, falling back to relative API path')\r\n    return \"/api\"\r\n  }\r\n  \r\n  return secureUrl\r\n}\r\n\r\n// Create an axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: getSecureBaseUrl(),\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n  // Add security configurations\r\n  timeout: 30000, // 30 second timeout\r\n  validateStatus: (status) => status < 500, // Don't throw on 4xx errors\r\n})\r\n\r\n// Add request interceptor for authentication and security\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // Add authentication token\r\n    const token = secureStorage.getItem(\"auth_token\")\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`\r\n    }\r\n    \r\n    // Add security headers\r\n    config.headers['X-Requested-With'] = 'XMLHttpRequest'\r\n    config.headers['Cache-Control'] = 'no-cache'\r\n    \r\n    // Validate URL security for absolute URLs\r\n    if (config.url && config.url.startsWith('http')) {\r\n      if (!validateUrlSecurity(config.url)) {\r\n        throw new Error('Insecure URL rejected by security policy')\r\n      }\r\n    }\r\n    \r\n    return config\r\n  },\r\n  (error) => Promise.reject(error),\r\n)\r\n\r\n// Add response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    // Handle specific error cases\r\n    if (error.response?.status === 401) {\r\n      // Handle unauthorized access\r\n      secureStorage.removeItem(\"auth_token\")\r\n      window.location.href = \"/login\"\r\n    }\r\n    \r\n    // Log security-related errors\r\n    if (error.message?.includes('security policy')) {\r\n      console.error('Security policy violation:', error.message)\r\n    }\r\n    \r\n    return Promise.reject(error)\r\n  },\r\n)\r\n\r\n// Client API endpoints\r\nexport const clientsApi = {\r\n  getAll: async (): Promise<Client[]> => {\r\n    try {\r\n      const response = await api.get(\"/clients\")\r\n      return response.data\r\n    } catch (error) {\r\n      // Error fetching clients - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  getById: async (id: string): Promise<Client> => {\r\n    try {\r\n      const response = await api.get(`/clients/${id}`)\r\n      return response.data\r\n    } catch (error) {\r\n      // Error fetching client - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  update: async (id: string, data: Partial<Client>): Promise<Client> => {\r\n    try {\r\n      const response = await api.patch(`/clients/${id}`, data)\r\n      return response.data\r\n    } catch (error) {\r\n      // Error updating client - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  delete: async (id: string): Promise<void> => {\r\n    try {\r\n      await api.delete(`/clients/${id}`)\r\n    } catch (error) {\r\n      // Error deleting client - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  addNote: async (clientId: string, note: { type: \"call\" | \"email\" | \"meeting\"; content: string }): Promise<Client> => {\r\n    try {\r\n      const response = await api.post(`/clients/${clientId}/notes`, note)\r\n      return response.data\r\n    } catch (error) {\r\n      // Error adding note to client - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  updateStage: async (clientId: string, stage: string): Promise<Client> => {\r\n    try {\r\n      const response = await api.patch(`/clients/${clientId}`, { stage })\r\n      return response.data\r\n    } catch (error) {\r\n      // Error updating stage for client - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n}\r\n\r\n// Task API endpoints\r\nexport const tasksApi = {\r\n  getAll: async (): Promise<Task[]> => {\r\n    try {\r\n      const response = await api.get(\"/tasks\")\r\n      return response.data\r\n    } catch (error) {\r\n      // Error fetching tasks - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  getById: async (id: string): Promise<Task> => {\r\n    try {\r\n      const response = await api.get(`/tasks/${id}`)\r\n      return response.data\r\n    } catch (error) {\r\n      // Error fetching task - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  create: async (task: NewTask): Promise<Task> => {\r\n    try {\r\n      const response = await api.post(\"/tasks\", task)\r\n      return response.data\r\n    } catch (error) {\r\n      // Error creating task - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  update: async (id: string, data: Partial<Task>): Promise<Task> => {\r\n    try {\r\n      const response = await api.patch(`/tasks/${id}`, data)\r\n      return response.data\r\n    } catch (error) {\r\n      // Error updating task - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  updateStatus: async (id: string, status: \"pending\" | \"in-progress\" | \"completed\"): Promise<Task> => {\r\n    try {\r\n      const response = await api.patch(`/tasks/${id}`, { status })\r\n      return response.data\r\n    } catch (error) {\r\n      // Error updating status for task - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  delete: async (id: string): Promise<void> => {\r\n    try {\r\n      await api.delete(`/tasks/${id}`)\r\n    } catch (error) {\r\n      // Error deleting task - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n}\r\n\r\n// Event API endpoints\r\nexport const eventsApi = {\r\n  getAll: async (): Promise<Event[]> => {\r\n    try {\r\n      const response = await api.get(\"/events\")\r\n      return response.data\r\n    } catch (error) {\r\n      // Error fetching events - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  create: async (event: NewEvent): Promise<Event> => {\r\n    try {\r\n      const response = await api.post(\"/events\", event)\r\n      return response.data\r\n    } catch (error) {\r\n      // Error creating event - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  update: async (id: string, data: Partial<Event>): Promise<Event> => {\r\n    try {\r\n      const response = await api.patch(`/events/${id}`, data)\r\n      return response.data\r\n    } catch (error) {\r\n      // Error updating event - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  delete: async (id: string): Promise<void> => {\r\n    try {\r\n      await api.delete(`/events/${id}`)\r\n    } catch (error) {\r\n      // Error deleting event - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n}\r\n\r\n// Email templates API endpoints\r\nexport const emailTemplatesApi = {\r\n  getAll: async (): Promise<EmailTemplate[]> => {\r\n    try {\r\n      const response = await api.get(\"/email-templates\")\r\n      return response.data\r\n    } catch (error) {\r\n      // Error fetching email templates - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  create: async (template: Omit<EmailTemplate, \"id\">): Promise<EmailTemplate> => {\r\n    try {\r\n      const response = await api.post(\"/email-templates\", template)\r\n      return response.data\r\n    } catch (error) {\r\n      // Error creating email template - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  update: async (id: number, data: Partial<EmailTemplate>): Promise<EmailTemplate> => {\r\n    try {\r\n      const response = await api.patch(`/email-templates/${id}`, data)\r\n      return response.data\r\n    } catch (error) {\r\n      // Error updating email template - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n\r\n  delete: async (id: number): Promise<void> => {\r\n    try {\r\n      await api.delete(`/email-templates/${id}`)\r\n    } catch (error) {\r\n      // Error deleting email template - error handled silently\r\n      throw error\r\n    }\r\n  },\r\n}\r\n\r\n// Export a default object with all APIs\r\nexport default {\r\n  clients: clientsApi,\r\n  tasks: tasksApi,\r\n  events: eventsApi,\r\n  emailTemplates: emailTemplatesApi,\r\n}\r\n"],"mappingssUA;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAAAA,aAAA,GAAAE,CAAA;;;;;;;;;;;;;;;;;;;;MAhNaC,WAAA;IAAA;IAAAH,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAAC,UAAA;;;EA+Mb;EACAE,QAAA;IAAA;IAAAL,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAAI,QAAA;;MA1CaC,kBAAA;IAAA;IAAAP,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAAK,iBAAA;;MA1CAC,UAAA;IAAA;IAAAR,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAAM,SAAA;;MA9DAC,SAAA;IAAA;IAAAT,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;WAAAO,QAAA;;;;;uEApLK;;;kCAEY;;;;;;;;;;;;;;;AAG9B;AAAA;AAAAT,aAAA,GAAAE,CAAA;AACA,MAAMQ,eAAA,GAAmBC,GAAA;EAAA;EAAAX,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EACvB;EACA;EAAI;EAAA,CAAAF,aAAA,GAAAY,CAAA,UAAAC,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK;EAAA;EAAA,CAAAf,aAAA,GAAAY,CAAA,UAAgBD,GAAA,CAAIK,UAAU,CAAC,aAAY;IAAA;IAAAhB,aAAA,GAAAY,CAAA;IAAAZ,aAAA,GAAAE,CAAA;IACtEe,OAAA,CAAQC,IAAI,CAAC,kEAAkEP,GAAA;IAAA;IAAAX,aAAA,GAAAE,CAAA;IAC/E,OAAOS,GAAA,CAAIQ,OAAO,CAAC,WAAW;EAChC;EAAA;EAAA;IAAAnB,aAAA,GAAAY,CAAA;EAAA;EAAAZ,aAAA,GAAAE,CAAA;EACA,OAAOS,GAAA;AACT;AAEA;AAAA;AAAAX,aAAA,GAAAE,CAAA;AACA,MAAMkB,mBAAA,GAAuBT,GAAA;EAAA;EAAAX,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EAC3B,IAAI;IACF,MAAMmB,MAAA;IAAA;IAAA,CAAArB,aAAA,GAAAE,CAAA,QAAS,IAAIoB,GAAA,CAAIX,GAAA;IAEvB;IAAA;IAAAX,aAAA,GAAAE,CAAA;IACA;IAAI;IAAA,CAAAF,aAAA,GAAAY,CAAA,UAAAC,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK;IAAA;IAAA,CAAAf,aAAA,GAAAY,CAAA,UAAgBS,MAAA,CAAOE,QAAQ,KAAK,WAAU;MAAA;MAAAvB,aAAA,GAAAY,CAAA;MAAAZ,aAAA,GAAAE,CAAA;MACzEe,OAAA,CAAQO,KAAK,CAAC,6CAA6CH,MAAA,CAAOE,QAAQ;MAAA;MAAAvB,aAAA,GAAAE,CAAA;MAC1E,OAAO;IACT;IAAA;IAAA;MAAAF,aAAA,GAAAY,CAAA;IAAA;IAEA;IACA,MAAMa,aAAA;IAAA;IAAA,CAAAzB,aAAA,GAAAE,CAAA,QAAgB,CAAC,aAAa,aAAa,UAAU;IAAA;IAAAF,aAAA,GAAAE,CAAA;IAC3D;IAAI;IAAA,CAAAF,aAAA,GAAAY,CAAA,UAAAC,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK;IAAA;IAAA,CAAAf,aAAA,GAAAY,CAAA,UAAgBa,aAAA,CAAcC,QAAQ,CAACL,MAAA,CAAOM,QAAQ,IAAG;MAAA;MAAA3B,aAAA,GAAAY,CAAA;MAAAZ,aAAA,GAAAE,CAAA;MACpFe,OAAA,CAAQO,KAAK,CAAC,yCAAyCH,MAAA,CAAOM,QAAQ;MAAA;MAAA3B,aAAA,GAAAE,CAAA;MACtE,OAAO;IACT;IAAA;IAAA;MAAAF,aAAA,GAAAY,CAAA;IAAA;IAAAZ,aAAA,GAAAE,CAAA;IAEA,OAAO;EACT,EAAE,OAAOsB,KAAA,EAAO;IAAA;IAAAxB,aAAA,GAAAE,CAAA;IACde,OAAA,CAAQO,KAAK,CAAC,gBAAgBb,GAAA;IAAA;IAAAX,aAAA,GAAAE,CAAA;IAC9B,OAAO;EACT;AACF;AAEA;AAAA;AAAAF,aAAA,GAAAE,CAAA;AACA,MAAM0B,gBAAA,GAAmBA,CAAA;EAAA;EAAA5B,aAAA,GAAAI,CAAA;EACvB,MAAMyB,OAAA;EAAA;EAAA,CAAA7B,aAAA,GAAAE,CAAA;EAAU;EAAA,CAAAF,aAAA,GAAAY,CAAA,UAAAC,OAAA,CAAQC,GAAG,CAACgB,mBAAmB;EAAA;EAAA,CAAA9B,aAAA,GAAAY,CAAA,UAAI;EAEnD;EAAA;EAAAZ,aAAA,GAAAE,CAAA;EACA,IAAI2B,OAAA,CAAQb,UAAU,CAAC,MAAM;IAAA;IAAAhB,aAAA,GAAAY,CAAA;IAAAZ,aAAA,GAAAE,CAAA;IAC3B,OAAO2B,OAAA;EACT;EAAA;EAAA;IAAA7B,aAAA,GAAAY,CAAA;EAAA;EAEA;EACA,MAAMmB,SAAA;EAAA;EAAA,CAAA/B,aAAA,GAAAE,CAAA,QAAYQ,eAAA,CAAgBmB,OAAA;EAAA;EAAA7B,aAAA,GAAAE,CAAA;EAElC,IAAI,CAACkB,mBAAA,CAAoBW,SAAA,GAAY;IAAA;IAAA/B,aAAA,GAAAY,CAAA;IAAAZ,aAAA,GAAAE,CAAA;IACnC;IACAe,OAAA,CAAQC,IAAI,CAAC;IAAA;IAAAlB,aAAA,GAAAE,CAAA;IACb,OAAO;EACT;EAAA;EAAA;IAAAF,aAAA,GAAAY,CAAA;EAAA;EAAAZ,aAAA,GAAAE,CAAA;EAEA,OAAO6B,SAAA;AACT;AAEA;AACA,MAAMC,GAAA;AAAA;AAAA,CAAAhC,aAAA,GAAAE,CAAA,QAAM+B,MAAA,CAAA5B,OAAK,CAAC6B,MAAM,CAAC;EACvBC,OAAA,EAASP,gBAAA;EACTQ,OAAA,EAAS;IACP,gBAAgB;EAClB;EACA;EACAC,OAAA,EAAS;EACTC,cAAA,EAAiBC,MAAA,IAAW;IAAA;IAAAvC,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IAAA,OAAAqC,MAAA,GAAS;EAAA;AACvC;AAEA;AAAA;AAAAvC,aAAA,GAAAE,CAAA;AACA8B,GAAA,CAAIQ,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAA;EAAA;EAAA3C,aAAA,GAAAI,CAAA;EACC;EACA,MAAMwC,KAAA;EAAA;EAAA,CAAA5C,aAAA,GAAAE,CAAA,QAAQ2C,cAAA,CAAAC,aAAa,CAACC,OAAO,CAAC;EAAA;EAAA/C,aAAA,GAAAE,CAAA;EACpC,IAAI0C,KAAA,EAAO;IAAA;IAAA5C,aAAA,GAAAY,CAAA;IAAAZ,aAAA,GAAAE,CAAA;IACTyC,MAAA,CAAOP,OAAO,CAACY,aAAa,GAAG,UAAUJ,KAAA,EAAO;EAClD;EAAA;EAAA;IAAA5C,aAAA,GAAAY,CAAA;EAAA;EAEA;EAAAZ,aAAA,GAAAE,CAAA;EACAyC,MAAA,CAAOP,OAAO,CAAC,mBAAmB,GAAG;EAAA;EAAApC,aAAA,GAAAE,CAAA;EACrCyC,MAAA,CAAOP,OAAO,CAAC,gBAAgB,GAAG;EAElC;EAAA;EAAApC,aAAA,GAAAE,CAAA;EACA;EAAI;EAAA,CAAAF,aAAA,GAAAY,CAAA,WAAA+B,MAAA,CAAOhC,GAAG;EAAA;EAAA,CAAAX,aAAA,GAAAY,CAAA,WAAI+B,MAAA,CAAOhC,GAAG,CAACK,UAAU,CAAC,UAAS;IAAA;IAAAhB,aAAA,GAAAY,CAAA;IAAAZ,aAAA,GAAAE,CAAA;IAC/C,IAAI,CAACkB,mBAAA,CAAoBuB,MAAA,CAAOhC,GAAG,GAAG;MAAA;MAAAX,aAAA,GAAAY,CAAA;MAAAZ,aAAA,GAAAE,CAAA;MACpC,MAAM,IAAI+C,KAAA,CAAM;IAClB;IAAA;IAAA;MAAAjD,aAAA,GAAAY,CAAA;IAAA;EACF;EAAA;EAAA;IAAAZ,aAAA,GAAAY,CAAA;EAAA;EAAAZ,aAAA,GAAAE,CAAA;EAEA,OAAOyC,MAAA;AACT,GACCnB,KAAA,IAAU;EAAA;EAAAxB,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EAAA,OAAAgD,OAAA,CAAQC,MAAM,CAAC3B,KAAA;AAAA;AAG5B;AAAA;AAAAxB,aAAA,GAAAE,CAAA;AACA8B,GAAA,CAAIQ,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC1BU,QAAA,IAAaA;EAAAA;EAAAA,uBAAA;EAAAA,uBAAA;EAAAA,MAAA,CAAAA,QAAA;AAAA,GACb5B,KAAA;EAAA;EAAAxB,aAAA,GAAAI,CAAA;EAAAJ,aAAA,GAAAE,CAAA;EACC;EACA,IAAIsB,KAAA,CAAM4B,QAAQ,EAAEb,MAAA,KAAW,KAAK;IAAA;IAAAvC,aAAA,GAAAY,CAAA;IAAAZ,aAAA,GAAAE,CAAA;IAClC;IACA2C,cAAA,CAAAC,aAAa,CAACO,UAAU,CAAC;IAAA;IAAArD,aAAA,GAAAE,CAAA;IACzBoD,MAAA,CAAOC,QAAQ,CAACC,IAAI,GAAG;EACzB;EAAA;EAAA;IAAAxD,aAAA,GAAAY,CAAA;EAAA;EAEA;EAAAZ,aAAA,GAAAE,CAAA;EACA,IAAIsB,KAAA,CAAMiC,OAAO,EAAE/B,QAAA,CAAS,oBAAoB;IAAA;IAAA1B,aAAA,GAAAY,CAAA;IAAAZ,aAAA,GAAAE,CAAA;IAC9Ce,OAAA,CAAQO,KAAK,CAAC,8BAA8BA,KAAA,CAAMiC,OAAO;EAC3D;EAAA;EAAA;IAAAzD,aAAA,GAAAY,CAAA;EAAA;EAAAZ,aAAA,GAAAE,CAAA;EAEA,OAAOgD,OAAA,CAAQC,MAAM,CAAC3B,KAAA;AACxB;AAIK,MAAMrB,UAAA;AAAA;AAAA,CAAAH,aAAA,GAAAE,CAAA,QAAa;EACxBwD,MAAA,EAAQ,MAAAA,CAAA;IAAA;IAAA1D,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACN,IAAI;MACF,MAAMkD,QAAA;MAAA;MAAA,CAAApD,aAAA,GAAAE,CAAA,QAAW,MAAM8B,GAAA,CAAI2B,GAAG,CAAC;MAAA;MAAA3D,aAAA,GAAAE,CAAA;MAC/B,OAAOkD,QAAA,CAASQ,IAAI;IACtB,EAAE,OAAOpC,KAAA,EAAO;MAAA;MAAAxB,aAAA,GAAAE,CAAA;MACd;MACA,MAAMsB,KAAA;IACR;EACF;EAEAqC,OAAA,EAAS,MAAOC,EAAA;IAAA;IAAA9D,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACd,IAAI;MACF,MAAMkD,QAAA;MAAA;MAAA,CAAApD,aAAA,GAAAE,CAAA,QAAW,MAAM8B,GAAA,CAAI2B,GAAG,CAAC,YAAYG,EAAA,EAAI;MAAA;MAAA9D,aAAA,GAAAE,CAAA;MAC/C,OAAOkD,QAAA,CAASQ,IAAI;IACtB,EAAE,OAAOpC,KAAA,EAAO;MAAA;MAAAxB,aAAA,GAAAE,CAAA;MACd;MACA,MAAMsB,KAAA;IACR;EACF;EAEAuC,MAAA,EAAQ,MAAAA,CAAOD,EAAA,EAAYF,IAAA;IAAA;IAAA5D,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACzB,IAAI;MACF,MAAMkD,QAAA;MAAA;MAAA,CAAApD,aAAA,GAAAE,CAAA,QAAW,MAAM8B,GAAA,CAAIgC,KAAK,CAAC,YAAYF,EAAA,EAAI,EAAEF,IAAA;MAAA;MAAA5D,aAAA,GAAAE,CAAA;MACnD,OAAOkD,QAAA,CAASQ,IAAI;IACtB,EAAE,OAAOpC,KAAA,EAAO;MAAA;MAAAxB,aAAA,GAAAE,CAAA;MACd;MACA,MAAMsB,KAAA;IACR;EACF;EAEAyC,MAAA,EAAQ,MAAOH,EAAA;IAAA;IAAA9D,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACb,IAAI;MAAA;MAAAF,aAAA,GAAAE,CAAA;MACF,MAAM8B,GAAA,CAAIiC,MAAM,CAAC,YAAYH,EAAA,EAAI;IACnC,EAAE,OAAOtC,KAAA,EAAO;MAAA;MAAAxB,aAAA,GAAAE,CAAA;MACd;MACA,MAAMsB,KAAA;IACR;EACF;EAEA0C,OAAA,EAAS,MAAAA,CAAOC,QAAA,EAAkBC,IAAA;IAAA;IAAApE,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IAChC,IAAI;MACF,MAAMkD,QAAA;MAAA;MAAA,CAAApD,aAAA,GAAAE,CAAA,QAAW,MAAM8B,GAAA,CAAIqC,IAAI,CAAC,YAAYF,QAAA,QAAgB,EAAEC,IAAA;MAAA;MAAApE,aAAA,GAAAE,CAAA;MAC9D,OAAOkD,QAAA,CAASQ,IAAI;IACtB,EAAE,OAAOpC,KAAA,EAAO;MAAA;MAAAxB,aAAA,GAAAE,CAAA;MACd;MACA,MAAMsB,KAAA;IACR;EACF;EAEA8C,WAAA,EAAa,MAAAA,CAAOH,QAAA,EAAkBI,KAAA;IAAA;IAAAvE,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACpC,IAAI;MACF,MAAMkD,QAAA;MAAA;MAAA,CAAApD,aAAA,GAAAE,CAAA,QAAW,MAAM8B,GAAA,CAAIgC,KAAK,CAAC,YAAYG,QAAA,EAAU,EAAE;QAAEI;MAAM;MAAA;MAAAvE,aAAA,GAAAE,CAAA;MACjE,OAAOkD,QAAA,CAASQ,IAAI;IACtB,EAAE,OAAOpC,KAAA,EAAO;MAAA;MAAAxB,aAAA,GAAAE,CAAA;MACd;MACA,MAAMsB,KAAA;IACR;EACF;AACF;AAGO,MAAMf,QAAA;AAAA;AAAA,CAAAT,aAAA,GAAAE,CAAA,QAAW;EACtBwD,MAAA,EAAQ,MAAAA,CAAA;IAAA;IAAA1D,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACN,IAAI;MACF,MAAMkD,QAAA;MAAA;MAAA,CAAApD,aAAA,GAAAE,CAAA,QAAW,MAAM8B,GAAA,CAAI2B,GAAG,CAAC;MAAA;MAAA3D,aAAA,GAAAE,CAAA;MAC/B,OAAOkD,QAAA,CAASQ,IAAI;IACtB,EAAE,OAAOpC,KAAA,EAAO;MAAA;MAAAxB,aAAA,GAAAE,CAAA;MACd;MACA,MAAMsB,KAAA;IACR;EACF;EAEAqC,OAAA,EAAS,MAAOC,EAAA;IAAA;IAAA9D,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACd,IAAI;MACF,MAAMkD,QAAA;MAAA;MAAA,CAAApD,aAAA,GAAAE,CAAA,QAAW,MAAM8B,GAAA,CAAI2B,GAAG,CAAC,UAAUG,EAAA,EAAI;MAAA;MAAA9D,aAAA,GAAAE,CAAA;MAC7C,OAAOkD,QAAA,CAASQ,IAAI;IACtB,EAAE,OAAOpC,KAAA,EAAO;MAAA;MAAAxB,aAAA,GAAAE,CAAA;MACd;MACA,MAAMsB,KAAA;IACR;EACF;EAEAU,MAAA,EAAQ,MAAOsC,IAAA;IAAA;IAAAxE,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACb,IAAI;MACF,MAAMkD,QAAA;MAAA;MAAA,CAAApD,aAAA,GAAAE,CAAA,QAAW,MAAM8B,GAAA,CAAIqC,IAAI,CAAC,UAAUG,IAAA;MAAA;MAAAxE,aAAA,GAAAE,CAAA;MAC1C,OAAOkD,QAAA,CAASQ,IAAI;IACtB,EAAE,OAAOpC,KAAA,EAAO;MAAA;MAAAxB,aAAA,GAAAE,CAAA;MACd;MACA,MAAMsB,KAAA;IACR;EACF;EAEAuC,MAAA,EAAQ,MAAAA,CAAOD,EAAA,EAAYF,IAAA;IAAA;IAAA5D,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACzB,IAAI;MACF,MAAMkD,QAAA;MAAA;MAAA,CAAApD,aAAA,GAAAE,CAAA,QAAW,MAAM8B,GAAA,CAAIgC,KAAK,CAAC,UAAUF,EAAA,EAAI,EAAEF,IAAA;MAAA;MAAA5D,aAAA,GAAAE,CAAA;MACjD,OAAOkD,QAAA,CAASQ,IAAI;IACtB,EAAE,OAAOpC,KAAA,EAAO;MAAA;MAAAxB,aAAA,GAAAE,CAAA;MACd;MACA,MAAMsB,KAAA;IACR;EACF;EAEAiD,YAAA,EAAc,MAAAA,CAAOX,EAAA,EAAYvB,MAAA;IAAA;IAAAvC,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IAC/B,IAAI;MACF,MAAMkD,QAAA;MAAA;MAAA,CAAApD,aAAA,GAAAE,CAAA,SAAW,MAAM8B,GAAA,CAAIgC,KAAK,CAAC,UAAUF,EAAA,EAAI,EAAE;QAAEvB;MAAO;MAAA;MAAAvC,aAAA,GAAAE,CAAA;MAC1D,OAAOkD,QAAA,CAASQ,IAAI;IACtB,EAAE,OAAOpC,KAAA,EAAO;MAAA;MAAAxB,aAAA,GAAAE,CAAA;MACd;MACA,MAAMsB,KAAA;IACR;EACF;EAEAyC,MAAA,EAAQ,MAAOH,EAAA;IAAA;IAAA9D,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACb,IAAI;MAAA;MAAAF,aAAA,GAAAE,CAAA;MACF,MAAM8B,GAAA,CAAIiC,MAAM,CAAC,UAAUH,EAAA,EAAI;IACjC,EAAE,OAAOtC,KAAA,EAAO;MAAA;MAAAxB,aAAA,GAAAE,CAAA;MACd;MACA,MAAMsB,KAAA;IACR;EACF;AACF;AAGO,MAAMhB,SAAA;AAAA;AAAA,CAAAR,aAAA,GAAAE,CAAA,SAAY;EACvBwD,MAAA,EAAQ,MAAAA,CAAA;IAAA;IAAA1D,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACN,IAAI;MACF,MAAMkD,QAAA;MAAA;MAAA,CAAApD,aAAA,GAAAE,CAAA,SAAW,MAAM8B,GAAA,CAAI2B,GAAG,CAAC;MAAA;MAAA3D,aAAA,GAAAE,CAAA;MAC/B,OAAOkD,QAAA,CAASQ,IAAI;IACtB,EAAE,OAAOpC,KAAA,EAAO;MAAA;MAAAxB,aAAA,GAAAE,CAAA;MACd;MACA,MAAMsB,KAAA;IACR;EACF;EAEAU,MAAA,EAAQ,MAAOwC,KAAA;IAAA;IAAA1E,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACb,IAAI;MACF,MAAMkD,QAAA;MAAA;MAAA,CAAApD,aAAA,GAAAE,CAAA,SAAW,MAAM8B,GAAA,CAAIqC,IAAI,CAAC,WAAWK,KAAA;MAAA;MAAA1E,aAAA,GAAAE,CAAA;MAC3C,OAAOkD,QAAA,CAASQ,IAAI;IACtB,EAAE,OAAOpC,KAAA,EAAO;MAAA;MAAAxB,aAAA,GAAAE,CAAA;MACd;MACA,MAAMsB,KAAA;IACR;EACF;EAEAuC,MAAA,EAAQ,MAAAA,CAAOD,EAAA,EAAYF,IAAA;IAAA;IAAA5D,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACzB,IAAI;MACF,MAAMkD,QAAA;MAAA;MAAA,CAAApD,aAAA,GAAAE,CAAA,SAAW,MAAM8B,GAAA,CAAIgC,KAAK,CAAC,WAAWF,EAAA,EAAI,EAAEF,IAAA;MAAA;MAAA5D,aAAA,GAAAE,CAAA;MAClD,OAAOkD,QAAA,CAASQ,IAAI;IACtB,EAAE,OAAOpC,KAAA,EAAO;MAAA;MAAAxB,aAAA,GAAAE,CAAA;MACd;MACA,MAAMsB,KAAA;IACR;EACF;EAEAyC,MAAA,EAAQ,MAAOH,EAAA;IAAA;IAAA9D,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACb,IAAI;MAAA;MAAAF,aAAA,GAAAE,CAAA;MACF,MAAM8B,GAAA,CAAIiC,MAAM,CAAC,WAAWH,EAAA,EAAI;IAClC,EAAE,OAAOtC,KAAA,EAAO;MAAA;MAAAxB,aAAA,GAAAE,CAAA;MACd;MACA,MAAMsB,KAAA;IACR;EACF;AACF;AAGO,MAAMjB,iBAAA;AAAA;AAAA,CAAAP,aAAA,GAAAE,CAAA,SAAoB;EAC/BwD,MAAA,EAAQ,MAAAA,CAAA;IAAA;IAAA1D,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACN,IAAI;MACF,MAAMkD,QAAA;MAAA;MAAA,CAAApD,aAAA,GAAAE,CAAA,SAAW,MAAM8B,GAAA,CAAI2B,GAAG,CAAC;MAAA;MAAA3D,aAAA,GAAAE,CAAA;MAC/B,OAAOkD,QAAA,CAASQ,IAAI;IACtB,EAAE,OAAOpC,KAAA,EAAO;MAAA;MAAAxB,aAAA,GAAAE,CAAA;MACd;MACA,MAAMsB,KAAA;IACR;EACF;EAEAU,MAAA,EAAQ,MAAOyC,QAAA;IAAA;IAAA3E,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACb,IAAI;MACF,MAAMkD,QAAA;MAAA;MAAA,CAAApD,aAAA,GAAAE,CAAA,SAAW,MAAM8B,GAAA,CAAIqC,IAAI,CAAC,oBAAoBM,QAAA;MAAA;MAAA3E,aAAA,GAAAE,CAAA;MACpD,OAAOkD,QAAA,CAASQ,IAAI;IACtB,EAAE,OAAOpC,KAAA,EAAO;MAAA;MAAAxB,aAAA,GAAAE,CAAA;MACd;MACA,MAAMsB,KAAA;IACR;EACF;EAEAuC,MAAA,EAAQ,MAAAA,CAAOD,EAAA,EAAYF,IAAA;IAAA;IAAA5D,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACzB,IAAI;MACF,MAAMkD,QAAA;MAAA;MAAA,CAAApD,aAAA,GAAAE,CAAA,SAAW,MAAM8B,GAAA,CAAIgC,KAAK,CAAC,oBAAoBF,EAAA,EAAI,EAAEF,IAAA;MAAA;MAAA5D,aAAA,GAAAE,CAAA;MAC3D,OAAOkD,QAAA,CAASQ,IAAI;IACtB,EAAE,OAAOpC,KAAA,EAAO;MAAA;MAAAxB,aAAA,GAAAE,CAAA;MACd;MACA,MAAMsB,KAAA;IACR;EACF;EAEAyC,MAAA,EAAQ,MAAOH,EAAA;IAAA;IAAA9D,aAAA,GAAAI,CAAA;IAAAJ,aAAA,GAAAE,CAAA;IACb,IAAI;MAAA;MAAAF,aAAA,GAAAE,CAAA;MACF,MAAM8B,GAAA,CAAIiC,MAAM,CAAC,oBAAoBH,EAAA,EAAI;IAC3C,EAAE,OAAOtC,KAAA,EAAO;MAAA;MAAAxB,aAAA,GAAAE,CAAA;MACd;MACA,MAAMsB,KAAA;IACR;EACF;AACF;MAGAlB,QAAA;AAAA;AAAA,CAAAN,aAAA,GAAAE,CAAA,SAAe;EACb0E,OAAA,EAASzE,UAAA;EACT0E,KAAA,EAAOpE,QAAA;EACPqE,MAAA,EAAQtE,SAAA;EACRuE,cAAA,EAAgBxE;AAClB","ignoreList":[]}