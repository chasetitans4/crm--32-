da9bc3a21f2f091466d2172401d76085
"use strict";

/* istanbul ignore next */
function cov_1vli5znnne() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\security.ts";
  var hash = "5e6ec50f295743a3de7ec82e144ef3d457a6fab2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\security.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 81,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 30
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 26
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 29
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 33
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 29
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 33
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 26
        }
      },
      "11": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 33
        }
      },
      "12": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 42
        }
      },
      "13": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 34
        }
      },
      "14": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 34
        }
      },
      "15": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 28
        }
      },
      "16": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 35
        }
      },
      "17": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 26
        }
      },
      "18": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 32
        }
      },
      "19": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 27
        }
      },
      "20": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 28
        }
      },
      "21": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 35
        }
      },
      "22": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 33
        }
      },
      "23": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 31
        }
      },
      "24": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 34
        }
      },
      "25": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 40
        }
      },
      "26": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 39
        }
      },
      "27": {
        start: {
          line: 82,
          column: 26
        },
        end: {
          line: 83,
          column: 1
        }
      },
      "28": {
        start: {
          line: 84,
          column: 20
        },
        end: {
          line: 84,
          column: 43
        }
      },
      "29": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 85,
          column: 43
        }
      },
      "30": {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 87,
          column: 51
        }
      },
      "31": {
        start: {
          line: 87,
          column: 39
        },
        end: {
          line: 87,
          column: 51
        }
      },
      "32": {
        start: {
          line: 88,
          column: 28
        },
        end: {
          line: 88,
          column: 41
        }
      },
      "33": {
        start: {
          line: 89,
          column: 27
        },
        end: {
          line: 89,
          column: 40
        }
      },
      "34": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 92,
          column: 20
        }
      },
      "35": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 66
        }
      },
      "36": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 97,
          column: 5
        }
      },
      "37": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 19
        }
      },
      "38": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 102,
          column: 5
        }
      },
      "39": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 101,
          column: 10
        }
      },
      "40": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 53
        }
      },
      "41": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 106,
          column: 5
        }
      },
      "42": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 30
        }
      },
      "43": {
        start: {
          line: 107,
          column: 17
        },
        end: {
          line: 109,
          column: 5
        }
      },
      "44": {
        start: {
          line: 110,
          column: 32
        },
        end: {
          line: 110,
          column: 88
        }
      },
      "45": {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 120,
          column: 5
        }
      },
      "46": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "47": {
        start: {
          line: 113,
          column: 23
        },
        end: {
          line: 113,
          column: 95
        }
      },
      "48": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 118,
          column: 13
        }
      },
      "49": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 57
        }
      },
      "50": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 39
        }
      },
      "51": {
        start: {
          line: 121,
          column: 4
        },
        end: {
          line: 121,
          column: 25
        }
      },
      "52": {
        start: {
          line: 122,
          column: 4
        },
        end: {
          line: 124,
          column: 5
        }
      },
      "53": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 31
        }
      },
      "54": {
        start: {
          line: 125,
          column: 4
        },
        end: {
          line: 125,
          column: 18
        }
      },
      "55": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 128,
          column: 20
        }
      },
      "56": {
        start: {
          line: 129,
          column: 0
        },
        end: {
          line: 133,
          column: 1
        }
      },
      "57": {
        start: {
          line: 130,
          column: 4
        },
        end: {
          line: 132,
          column: 7
        }
      },
      "58": {
        start: {
          line: 130,
          column: 45
        },
        end: {
          line: 130,
          column: 92
        }
      },
      "59": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 45
        }
      },
      "60": {
        start: {
          line: 134,
          column: 19
        },
        end: {
          line: 136,
          column: 1
        }
      },
      "61": {
        start: {
          line: 137,
          column: 20
        },
        end: {
          line: 140,
          column: 2
        }
      },
      "62": {
        start: {
          line: 141,
          column: 26
        },
        end: {
          line: 178,
          column: 1
        }
      },
      "63": {
        start: {
          line: 142,
          column: 4
        },
        end: {
          line: 144,
          column: 5
        }
      },
      "64": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 143,
          column: 18
        }
      },
      "65": {
        start: {
          line: 146,
          column: 4
        },
        end: {
          line: 148,
          column: 5
        }
      },
      "66": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 52
        }
      },
      "67": {
        start: {
          line: 149,
          column: 4
        },
        end: {
          line: 177,
          column: 7
        }
      },
      "68": {
        start: {
          line: 179,
          column: 21
        },
        end: {
          line: 243,
          column: 1
        }
      },
      "69": {
        start: {
          line: 180,
          column: 4
        },
        end: {
          line: 182,
          column: 5
        }
      },
      "70": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 18
        }
      },
      "71": {
        start: {
          line: 184,
          column: 4
        },
        end: {
          line: 186,
          column: 5
        }
      },
      "72": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 95
        }
      },
      "73": {
        start: {
          line: 187,
          column: 4
        },
        end: {
          line: 242,
          column: 7
        }
      },
      "74": {
        start: {
          line: 244,
          column: 19
        },
        end: {
          line: 254,
          column: 1
        }
      },
      "75": {
        start: {
          line: 245,
          column: 4
        },
        end: {
          line: 253,
          column: 5
        }
      },
      "76": {
        start: {
          line: 246,
          column: 23
        },
        end: {
          line: 246,
          column: 35
        }
      },
      "77": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 250,
          column: 36
        }
      },
      "78": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 21
        }
      },
      "79": {
        start: {
          line: 255,
          column: 21
        },
        end: {
          line: 258,
          column: 1
        }
      },
      "80": {
        start: {
          line: 256,
          column: 23
        },
        end: {
          line: 256,
          column: 51
        }
      },
      "81": {
        start: {
          line: 257,
          column: 4
        },
        end: {
          line: 257,
          column: 57
        }
      },
      "82": {
        start: {
          line: 259,
          column: 33
        },
        end: {
          line: 284,
          column: 1
        }
      },
      "83": {
        start: {
          line: 260,
          column: 19
        },
        end: {
          line: 260,
          column: 68
        }
      },
      "84": {
        start: {
          line: 261,
          column: 4
        },
        end: {
          line: 271,
          column: 5
        }
      },
      "85": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 270,
          column: 10
        }
      },
      "86": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 273,
          column: 17
        }
      },
      "87": {
        start: {
          line: 274,
          column: 4
        },
        end: {
          line: 274,
          column: 41
        }
      },
      "88": {
        start: {
          line: 274,
          column: 30
        },
        end: {
          line: 274,
          column: 41
        }
      },
      "89": {
        start: {
          line: 275,
          column: 4
        },
        end: {
          line: 275,
          column: 43
        }
      },
      "90": {
        start: {
          line: 275,
          column: 32
        },
        end: {
          line: 275,
          column: 43
        }
      },
      "91": {
        start: {
          line: 276,
          column: 4
        },
        end: {
          line: 276,
          column: 43
        }
      },
      "92": {
        start: {
          line: 276,
          column: 32
        },
        end: {
          line: 276,
          column: 43
        }
      },
      "93": {
        start: {
          line: 277,
          column: 4
        },
        end: {
          line: 277,
          column: 40
        }
      },
      "94": {
        start: {
          line: 277,
          column: 29
        },
        end: {
          line: 277,
          column: 40
        }
      },
      "95": {
        start: {
          line: 278,
          column: 4
        },
        end: {
          line: 278,
          column: 73
        }
      },
      "96": {
        start: {
          line: 278,
          column: 62
        },
        end: {
          line: 278,
          column: 73
        }
      },
      "97": {
        start: {
          line: 279,
          column: 4
        },
        end: {
          line: 283,
          column: 6
        }
      },
      "98": {
        start: {
          line: 285,
          column: 26
        },
        end: {
          line: 296,
          column: 1
        }
      },
      "99": {
        start: {
          line: 286,
          column: 18
        },
        end: {
          line: 286,
          column: 36
        }
      },
      "100": {
        start: {
          line: 287,
          column: 4
        },
        end: {
          line: 294,
          column: 5
        }
      },
      "101": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 288,
          column: 38
        }
      },
      "102": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 293,
          column: 9
        }
      },
      "103": {
        start: {
          line: 291,
          column: 20
        },
        end: {
          line: 291,
          column: 21
        }
      },
      "104": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 292,
          column: 55
        }
      },
      "105": {
        start: {
          line: 295,
          column: 4
        },
        end: {
          line: 295,
          column: 82
        }
      },
      "106": {
        start: {
          line: 295,
          column: 37
        },
        end: {
          line: 295,
          column: 71
        }
      },
      "107": {
        start: {
          line: 297,
          column: 28
        },
        end: {
          line: 304,
          column: 1
        }
      },
      "108": {
        start: {
          line: 298,
          column: 4
        },
        end: {
          line: 300,
          column: 5
        }
      },
      "109": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 299,
          column: 21
        }
      },
      "110": {
        start: {
          line: 302,
          column: 23
        },
        end: {
          line: 302,
          column: 40
        }
      },
      "111": {
        start: {
          line: 303,
          column: 4
        },
        end: {
          line: 303,
          column: 34
        }
      },
      "112": {
        start: {
          line: 305,
          column: 28
        },
        end: {
          line: 314,
          column: 1
        }
      },
      "113": {
        start: {
          line: 306,
          column: 4
        },
        end: {
          line: 308,
          column: 5
        }
      },
      "114": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 307,
          column: 18
        }
      },
      "115": {
        start: {
          line: 310,
          column: 4
        },
        end: {
          line: 313,
          column: 5
        }
      },
      "116": {
        start: {
          line: 315,
          column: 27
        },
        end: {
          line: 368,
          column: 1
        }
      },
      "117": {
        start: {
          line: 316,
          column: 19
        },
        end: {
          line: 316,
          column: 21
        }
      },
      "118": {
        start: {
          line: 317,
          column: 20
        },
        end: {
          line: 317,
          column: 36
        }
      },
      "119": {
        start: {
          line: 319,
          column: 25
        },
        end: {
          line: 327,
          column: 5
        }
      },
      "120": {
        start: {
          line: 328,
          column: 4
        },
        end: {
          line: 330,
          column: 5
        }
      },
      "121": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 329,
          column: 56
        }
      },
      "122": {
        start: {
          line: 331,
          column: 4
        },
        end: {
          line: 333,
          column: 5
        }
      },
      "123": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 332,
          column: 45
        }
      },
      "124": {
        start: {
          line: 335,
          column: 22
        },
        end: {
          line: 335,
          column: 63
        }
      },
      "125": {
        start: {
          line: 336,
          column: 24
        },
        end: {
          line: 359,
          column: 5
        }
      },
      "126": {
        start: {
          line: 360,
          column: 31
        },
        end: {
          line: 360,
          column: 53
        }
      },
      "127": {
        start: {
          line: 361,
          column: 4
        },
        end: {
          line: 363,
          column: 5
        }
      },
      "128": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 362,
          column: 63
        }
      },
      "129": {
        start: {
          line: 364,
          column: 4
        },
        end: {
          line: 367,
          column: 6
        }
      },
      "130": {
        start: {
          line: 369,
          column: 19
        },
        end: {
          line: 376,
          column: 1
        }
      },
      "131": {
        start: {
          line: 370,
          column: 4
        },
        end: {
          line: 372,
          column: 5
        }
      },
      "132": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 371,
          column: 18
        }
      },
      "133": {
        start: {
          line: 373,
          column: 16
        },
        end: {
          line: 373,
          column: 45
        }
      },
      "134": {
        start: {
          line: 374,
          column: 4
        },
        end: {
          line: 374,
          column: 27
        }
      },
      "135": {
        start: {
          line: 375,
          column: 4
        },
        end: {
          line: 375,
          column: 25
        }
      },
      "136": {
        start: {
          line: 377,
          column: 35
        },
        end: {
          line: 393,
          column: 1
        }
      },
      "137": {
        start: {
          line: 378,
          column: 18
        },
        end: {
          line: 378,
          column: 82
        }
      },
      "138": {
        start: {
          line: 379,
          column: 17
        },
        end: {
          line: 379,
          column: 19
        }
      },
      "139": {
        start: {
          line: 380,
          column: 4
        },
        end: {
          line: 391,
          column: 5
        }
      },
      "140": {
        start: {
          line: 381,
          column: 22
        },
        end: {
          line: 381,
          column: 44
        }
      },
      "141": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 382,
          column: 38
        }
      },
      "142": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 385,
          column: 9
        }
      },
      "143": {
        start: {
          line: 383,
          column: 20
        },
        end: {
          line: 383,
          column: 21
        }
      },
      "144": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 384,
          column: 53
        }
      },
      "145": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 390,
          column: 9
        }
      },
      "146": {
        start: {
          line: 388,
          column: 20
        },
        end: {
          line: 388,
          column: 21
        }
      },
      "147": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 389,
          column: 70
        }
      },
      "148": {
        start: {
          line: 392,
          column: 4
        },
        end: {
          line: 392,
          column: 18
        }
      },
      "149": {
        start: {
          line: 395,
          column: 30
        },
        end: {
          line: 395,
          column: 154
        }
      },
      "150": {
        start: {
          line: 396,
          column: 22
        },
        end: {
          line: 411,
          column: 1
        }
      },
      "151": {
        start: {
          line: 397,
          column: 4
        },
        end: {
          line: 410,
          column: 5
        }
      },
      "152": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 402,
          column: 11
        }
      },
      "153": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 404,
          column: 84
        }
      },
      "154": {
        start: {
          line: 406,
          column: 8
        },
        end: {
          line: 408,
          column: 9
        }
      },
      "155": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 407,
          column: 62
        }
      },
      "156": {
        start: {
          line: 409,
          column: 8
        },
        end: {
          line: 409,
          column: 28
        }
      },
      "157": {
        start: {
          line: 412,
          column: 22
        },
        end: {
          line: 442,
          column: 1
        }
      },
      "158": {
        start: {
          line: 413,
          column: 4
        },
        end: {
          line: 441,
          column: 5
        }
      },
      "159": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 418,
          column: 9
        }
      },
      "160": {
        start: {
          line: 416,
          column: 27
        },
        end: {
          line: 416,
          column: 94
        }
      },
      "161": {
        start: {
          line: 417,
          column: 12
        },
        end: {
          line: 417,
          column: 33
        }
      },
      "162": {
        start: {
          line: 420,
          column: 8
        },
        end: {
          line: 430,
          column: 9
        }
      },
      "163": {
        start: {
          line: 421,
          column: 12
        },
        end: {
          line: 429,
          column: 13
        }
      },
      "164": {
        start: {
          line: 422,
          column: 32
        },
        end: {
          line: 422,
          column: 53
        }
      },
      "165": {
        start: {
          line: 423,
          column: 30
        },
        end: {
          line: 423,
          column: 48
        }
      },
      "166": {
        start: {
          line: 424,
          column: 16
        },
        end: {
          line: 426,
          column: 17
        }
      },
      "167": {
        start: {
          line: 425,
          column: 20
        },
        end: {
          line: 425,
          column: 36
        }
      },
      "168": {
        start: {
          line: 432,
          column: 8
        },
        end: {
          line: 437,
          column: 9
        }
      },
      "169": {
        start: {
          line: 433,
          column: 12
        },
        end: {
          line: 433,
          column: 41
        }
      },
      "170": {
        start: {
          line: 435,
          column: 12
        },
        end: {
          line: 436,
          column: 13
        }
      },
      "171": {
        start: {
          line: 439,
          column: 8
        },
        end: {
          line: 439,
          column: 51
        }
      },
      "172": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 440,
          column: 53
        }
      },
      "173": {
        start: {
          line: 443,
          column: 26
        },
        end: {
          line: 449,
          column: 1
        }
      },
      "174": {
        start: {
          line: 444,
          column: 4
        },
        end: {
          line: 444,
          column: 94
        }
      },
      "175": {
        start: {
          line: 445,
          column: 4
        },
        end: {
          line: 447,
          column: 5
        }
      },
      "176": {
        start: {
          line: 446,
          column: 8
        },
        end: {
          line: 446,
          column: 58
        }
      },
      "177": {
        start: {
          line: 448,
          column: 4
        },
        end: {
          line: 448,
          column: 24
        }
      },
      "178": {
        start: {
          line: 450,
          column: 26
        },
        end: {
          line: 468,
          column: 1
        }
      },
      "179": {
        start: {
          line: 451,
          column: 4
        },
        end: {
          line: 451,
          column: 94
        }
      },
      "180": {
        start: {
          line: 452,
          column: 4
        },
        end: {
          line: 462,
          column: 5
        }
      },
      "181": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 461,
          column: 9
        }
      },
      "182": {
        start: {
          line: 454,
          column: 28
        },
        end: {
          line: 454,
          column: 49
        }
      },
      "183": {
        start: {
          line: 455,
          column: 26
        },
        end: {
          line: 455,
          column: 44
        }
      },
      "184": {
        start: {
          line: 456,
          column: 12
        },
        end: {
          line: 458,
          column: 13
        }
      },
      "185": {
        start: {
          line: 457,
          column: 16
        },
        end: {
          line: 457,
          column: 32
        }
      },
      "186": {
        start: {
          line: 463,
          column: 4
        },
        end: {
          line: 467,
          column: 5
        }
      },
      "187": {
        start: {
          line: 464,
          column: 8
        },
        end: {
          line: 464,
          column: 37
        }
      },
      "188": {
        start: {
          line: 466,
          column: 8
        },
        end: {
          line: 466,
          column: 31
        }
      },
      "189": {
        start: {
          line: 469,
          column: 27
        },
        end: {
          line: 483,
          column: 1
        }
      },
      "190": {
        start: {
          line: 470,
          column: 4
        },
        end: {
          line: 482,
          column: 5
        }
      },
      "191": {
        start: {
          line: 472,
          column: 8
        },
        end: {
          line: 477,
          column: 9
        }
      },
      "192": {
        start: {
          line: 474,
          column: 29
        },
        end: {
          line: 474,
          column: 77
        }
      },
      "193": {
        start: {
          line: 475,
          column: 25
        },
        end: {
          line: 475,
          column: 46
        }
      },
      "194": {
        start: {
          line: 476,
          column: 12
        },
        end: {
          line: 476,
          column: 40
        }
      },
      "195": {
        start: {
          line: 479,
          column: 8
        },
        end: {
          line: 479,
          column: 32
        }
      },
      "196": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 481,
          column: 25
        }
      },
      "197": {
        start: {
          line: 484,
          column: 32
        },
        end: {
          line: 528,
          column: 1
        }
      },
      "198": {
        start: {
          line: 485,
          column: 19
        },
        end: {
          line: 485,
          column: 21
        }
      },
      "199": {
        start: {
          line: 486,
          column: 4
        },
        end: {
          line: 492,
          column: 5
        }
      },
      "200": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 487,
          column: 54
        }
      },
      "201": {
        start: {
          line: 488,
          column: 8
        },
        end: {
          line: 491,
          column: 10
        }
      },
      "202": {
        start: {
          line: 493,
          column: 23
        },
        end: {
          line: 493,
          column: 30
        }
      },
      "203": {
        start: {
          line: 495,
          column: 27
        },
        end: {
          line: 499,
          column: 5
        }
      },
      "204": {
        start: {
          line: 500,
          column: 4
        },
        end: {
          line: 504,
          column: 5
        }
      },
      "205": {
        start: {
          line: 501,
          column: 8
        },
        end: {
          line: 503,
          column: 9
        }
      },
      "206": {
        start: {
          line: 502,
          column: 12
        },
        end: {
          line: 502,
          column: 69
        }
      },
      "207": {
        start: {
          line: 506,
          column: 4
        },
        end: {
          line: 508,
          column: 5
        }
      },
      "208": {
        start: {
          line: 507,
          column: 8
        },
        end: {
          line: 507,
          column: 62
        }
      },
      "209": {
        start: {
          line: 510,
          column: 4
        },
        end: {
          line: 512,
          column: 5
        }
      },
      "210": {
        start: {
          line: 511,
          column: 8
        },
        end: {
          line: 511,
          column: 69
        }
      },
      "211": {
        start: {
          line: 514,
          column: 30
        },
        end: {
          line: 520,
          column: 5
        }
      },
      "212": {
        start: {
          line: 521,
          column: 4
        },
        end: {
          line: 523,
          column: 5
        }
      },
      "213": {
        start: {
          line: 522,
          column: 8
        },
        end: {
          line: 522,
          column: 40
        }
      },
      "214": {
        start: {
          line: 524,
          column: 4
        },
        end: {
          line: 527,
          column: 6
        }
      },
      "215": {
        start: {
          line: 529,
          column: 27
        },
        end: {
          line: 538,
          column: 1
        }
      },
      "216": {
        start: {
          line: 530,
          column: 4
        },
        end: {
          line: 537,
          column: 6
        }
      },
      "217": {
        start: {
          line: 539,
          column: 23
        },
        end: {
          line: 542,
          column: 1
        }
      },
      "218": {
        start: {
          line: 540,
          column: 16
        },
        end: {
          line: 540,
          column: 37
        }
      },
      "219": {
        start: {
          line: 541,
          column: 4
        },
        end: {
          line: 541,
          column: 38
        }
      },
      "220": {
        start: {
          line: 543,
          column: 25
        },
        end: {
          line: 564,
          column: 1
        }
      },
      "221": {
        start: {
          line: 544,
          column: 21
        },
        end: {
          line: 548,
          column: 5
        }
      },
      "222": {
        start: {
          line: 550,
          column: 4
        },
        end: {
          line: 550,
          column: 45
        }
      },
      "223": {
        start: {
          line: 552,
          column: 4
        },
        end: {
          line: 563,
          column: 5
        }
      },
      "224": {
        start: {
          line: 553,
          column: 8
        },
        end: {
          line: 562,
          column: 11
        }
      },
      "225": {
        start: {
          line: 561,
          column: 12
        },
        end: {
          line: 561,
          column: 65
        }
      },
      "226": {
        start: {
          line: 565,
          column: 24
        },
        end: {
          line: 578,
          column: 1
        }
      },
      "227": {
        start: {
          line: 567,
          column: 8
        },
        end: {
          line: 567,
          column: 42
        }
      },
      "228": {
        start: {
          line: 570,
          column: 8
        },
        end: {
          line: 570,
          column: 46
        }
      },
      "229": {
        start: {
          line: 573,
          column: 8
        },
        end: {
          line: 573,
          column: 40
        }
      },
      "230": {
        start: {
          line: 576,
          column: 8
        },
        end: {
          line: 576,
          column: 53
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 26
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 22
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 25
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 29
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 25
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 29
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 22
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 29
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 38
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 36
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 30
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 39
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 30
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 42
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 24
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 45
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 31
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 48
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 22
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 51
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 28
          },
          end: {
            line: 56,
            column: 5
          }
        },
        line: 54
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 23
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 57
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        loc: {
          start: {
            line: 60,
            column: 24
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 60
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 31
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 63
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        loc: {
          start: {
            line: 66,
            column: 29
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 66
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 27
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 69
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        loc: {
          start: {
            line: 72,
            column: 30
          },
          end: {
            line: 74,
            column: 5
          }
        },
        line: 72
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        loc: {
          start: {
            line: 75,
            column: 36
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 75
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 35
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 78
      },
      "24": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 86,
            column: 9
          },
          end: {
            line: 86,
            column: 33
          }
        },
        loc: {
          start: {
            line: 86,
            column: 47
          },
          end: {
            line: 93,
            column: 1
          }
        },
        line: 86
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 90,
            column: 39
          },
          end: {
            line: 90,
            column: 40
          }
        },
        loc: {
          start: {
            line: 90,
            column: 61
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 90
      },
      "26": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 94,
            column: 9
          },
          end: {
            line: 94,
            column: 34
          }
        },
        loc: {
          start: {
            line: 94,
            column: 53
          },
          end: {
            line: 126,
            column: 1
          }
        },
        line: 94
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 130,
            column: 27
          },
          end: {
            line: 130,
            column: 28
          }
        },
        loc: {
          start: {
            line: 130,
            column: 45
          },
          end: {
            line: 130,
            column: 92
          }
        },
        line: 130
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 130,
            column: 99
          },
          end: {
            line: 130,
            column: 100
          }
        },
        loc: {
          start: {
            line: 130,
            column: 109
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 130
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 141,
            column: 26
          },
          end: {
            line: 141,
            column: 27
          }
        },
        loc: {
          start: {
            line: 141,
            column: 35
          },
          end: {
            line: 178,
            column: 1
          }
        },
        line: 141
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 179,
            column: 21
          },
          end: {
            line: 179,
            column: 22
          }
        },
        loc: {
          start: {
            line: 179,
            column: 29
          },
          end: {
            line: 243,
            column: 1
          }
        },
        line: 179
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 244,
            column: 19
          },
          end: {
            line: 244,
            column: 20
          }
        },
        loc: {
          start: {
            line: 244,
            column: 26
          },
          end: {
            line: 254,
            column: 1
          }
        },
        line: 244
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 255,
            column: 21
          },
          end: {
            line: 255,
            column: 22
          }
        },
        loc: {
          start: {
            line: 255,
            column: 30
          },
          end: {
            line: 258,
            column: 1
          }
        },
        line: 255
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 259,
            column: 33
          },
          end: {
            line: 259,
            column: 34
          }
        },
        loc: {
          start: {
            line: 259,
            column: 45
          },
          end: {
            line: 284,
            column: 1
          }
        },
        line: 259
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 285,
            column: 26
          },
          end: {
            line: 285,
            column: 27
          }
        },
        loc: {
          start: {
            line: 285,
            column: 30
          },
          end: {
            line: 296,
            column: 1
          }
        },
        line: 285
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 295,
            column: 29
          },
          end: {
            line: 295,
            column: 30
          }
        },
        loc: {
          start: {
            line: 295,
            column: 37
          },
          end: {
            line: 295,
            column: 71
          }
        },
        line: 295
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 297,
            column: 28
          },
          end: {
            line: 297,
            column: 29
          }
        },
        loc: {
          start: {
            line: 297,
            column: 37
          },
          end: {
            line: 304,
            column: 1
          }
        },
        line: 297
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 305,
            column: 28
          },
          end: {
            line: 305,
            column: 29
          }
        },
        loc: {
          start: {
            line: 305,
            column: 37
          },
          end: {
            line: 314,
            column: 1
          }
        },
        line: 305
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 315,
            column: 27
          },
          end: {
            line: 315,
            column: 28
          }
        },
        loc: {
          start: {
            line: 315,
            column: 35
          },
          end: {
            line: 368,
            column: 1
          }
        },
        line: 315
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 369,
            column: 19
          },
          end: {
            line: 369,
            column: 20
          }
        },
        loc: {
          start: {
            line: 369,
            column: 27
          },
          end: {
            line: 376,
            column: 1
          }
        },
        line: 369
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 377,
            column: 35
          },
          end: {
            line: 377,
            column: 36
          }
        },
        loc: {
          start: {
            line: 377,
            column: 50
          },
          end: {
            line: 393,
            column: 1
          }
        },
        line: 377
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 396,
            column: 22
          },
          end: {
            line: 396,
            column: 23
          }
        },
        loc: {
          start: {
            line: 396,
            column: 38
          },
          end: {
            line: 411,
            column: 1
          }
        },
        line: 396
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 412,
            column: 22
          },
          end: {
            line: 412,
            column: 23
          }
        },
        loc: {
          start: {
            line: 412,
            column: 47
          },
          end: {
            line: 442,
            column: 1
          }
        },
        line: 412
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 443,
            column: 26
          },
          end: {
            line: 443,
            column: 27
          }
        },
        loc: {
          start: {
            line: 443,
            column: 36
          },
          end: {
            line: 449,
            column: 1
          }
        },
        line: 443
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 450,
            column: 26
          },
          end: {
            line: 450,
            column: 27
          }
        },
        loc: {
          start: {
            line: 450,
            column: 45
          },
          end: {
            line: 468,
            column: 1
          }
        },
        line: 450
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 469,
            column: 27
          },
          end: {
            line: 469,
            column: 28
          }
        },
        loc: {
          start: {
            line: 469,
            column: 37
          },
          end: {
            line: 483,
            column: 1
          }
        },
        line: 469
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 484,
            column: 32
          },
          end: {
            line: 484,
            column: 33
          }
        },
        loc: {
          start: {
            line: 484,
            column: 43
          },
          end: {
            line: 528,
            column: 1
          }
        },
        line: 484
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 529,
            column: 27
          },
          end: {
            line: 529,
            column: 28
          }
        },
        loc: {
          start: {
            line: 529,
            column: 31
          },
          end: {
            line: 538,
            column: 1
          }
        },
        line: 529
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 539,
            column: 23
          },
          end: {
            line: 539,
            column: 24
          }
        },
        loc: {
          start: {
            line: 539,
            column: 41
          },
          end: {
            line: 542,
            column: 1
          }
        },
        line: 539
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 543,
            column: 25
          },
          end: {
            line: 543,
            column: 26
          }
        },
        loc: {
          start: {
            line: 543,
            column: 34
          },
          end: {
            line: 564,
            column: 1
          }
        },
        line: 543
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 560,
            column: 17
          },
          end: {
            line: 560,
            column: 18
          }
        },
        loc: {
          start: {
            line: 560,
            column: 26
          },
          end: {
            line: 562,
            column: 9
          }
        },
        line: 560
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 566,
            column: 23
          },
          end: {
            line: 566,
            column: 24
          }
        },
        loc: {
          start: {
            line: 566,
            column: 32
          },
          end: {
            line: 568,
            column: 5
          }
        },
        line: 566
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 569,
            column: 21
          },
          end: {
            line: 569,
            column: 22
          }
        },
        loc: {
          start: {
            line: 569,
            column: 34
          },
          end: {
            line: 571,
            column: 5
          }
        },
        line: 569
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 572,
            column: 19
          },
          end: {
            line: 572,
            column: 20
          }
        },
        loc: {
          start: {
            line: 572,
            column: 28
          },
          end: {
            line: 574,
            column: 5
          }
        },
        line: 572
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 575,
            column: 23
          },
          end: {
            line: 575,
            column: 24
          }
        },
        loc: {
          start: {
            line: 575,
            column: 27
          },
          end: {
            line: 577,
            column: 5
          }
        },
        line: 575
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 87,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 87,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "1": {
        loc: {
          start: {
            line: 91,
            column: 15
          },
          end: {
            line: 91,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 91,
            column: 29
          },
          end: {
            line: 91,
            column: 45
          }
        }, {
          start: {
            line: 91,
            column: 48
          },
          end: {
            line: 91,
            column: 65
          }
        }],
        line: 91
      },
      "2": {
        loc: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "3": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 95,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 95,
            column: 20
          }
        }, {
          start: {
            line: 95,
            column: 24
          },
          end: {
            line: 95,
            column: 27
          }
        }, {
          start: {
            line: 95,
            column: 31
          },
          end: {
            line: 95,
            column: 45
          }
        }],
        line: 95
      },
      "4": {
        loc: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "5": {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 98,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 98,
            column: 20
          }
        }, {
          start: {
            line: 98,
            column: 24
          },
          end: {
            line: 98,
            column: 47
          }
        }, {
          start: {
            line: 98,
            column: 51
          },
          end: {
            line: 98,
            column: 76
          }
        }],
        line: 98
      },
      "6": {
        loc: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "7": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 104,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 104,
            column: 13
          }
        }, {
          start: {
            line: 104,
            column: 17
          },
          end: {
            line: 104,
            column: 31
          }
        }],
        line: 104
      },
      "8": {
        loc: {
          start: {
            line: 110,
            column: 32
          },
          end: {
            line: 110,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 32
          },
          end: {
            line: 110,
            column: 53
          }
        }, {
          start: {
            line: 110,
            column: 57
          },
          end: {
            line: 110,
            column: 88
          }
        }],
        line: 110
      },
      "9": {
        loc: {
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "10": {
        loc: {
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 112,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 112,
            column: 29
          }
        }, {
          start: {
            line: 112,
            column: 33
          },
          end: {
            line: 112,
            column: 79
          }
        }],
        line: 112
      },
      "11": {
        loc: {
          start: {
            line: 113,
            column: 23
          },
          end: {
            line: 113,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 113,
            column: 47
          },
          end: {
            line: 113,
            column: 88
          }
        }, {
          start: {
            line: 113,
            column: 91
          },
          end: {
            line: 113,
            column: 95
          }
        }],
        line: 113
      },
      "12": {
        loc: {
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 118,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 118,
            column: 13
          }
        }, {
          start: {
            line: 116,
            column: 19
          },
          end: {
            line: 118,
            column: 13
          }
        }],
        line: 114
      },
      "13": {
        loc: {
          start: {
            line: 114,
            column: 16
          },
          end: {
            line: 114,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 16
          },
          end: {
            line: 114,
            column: 20
          }
        }, {
          start: {
            line: 114,
            column: 25
          },
          end: {
            line: 114,
            column: 33
          }
        }, {
          start: {
            line: 114,
            column: 37
          },
          end: {
            line: 114,
            column: 45
          }
        }],
        line: 114
      },
      "14": {
        loc: {
          start: {
            line: 122,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "15": {
        loc: {
          start: {
            line: 129,
            column: 0
          },
          end: {
            line: 133,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 0
          },
          end: {
            line: 133,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "16": {
        loc: {
          start: {
            line: 131,
            column: 20
          },
          end: {
            line: 131,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 20
          },
          end: {
            line: 131,
            column: 34
          }
        }, {
          start: {
            line: 131,
            column: 38
          },
          end: {
            line: 131,
            column: 44
          }
        }],
        line: 131
      },
      "17": {
        loc: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 144,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 144,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "18": {
        loc: {
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 148,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 148,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "19": {
        loc: {
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 182,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 182,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "20": {
        loc: {
          start: {
            line: 184,
            column: 4
          },
          end: {
            line: 186,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 4
          },
          end: {
            line: 186,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "21": {
        loc: {
          start: {
            line: 257,
            column: 11
          },
          end: {
            line: 257,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 257,
            column: 11
          },
          end: {
            line: 257,
            column: 33
          }
        }, {
          start: {
            line: 257,
            column: 37
          },
          end: {
            line: 257,
            column: 56
          }
        }],
        line: 257
      },
      "22": {
        loc: {
          start: {
            line: 261,
            column: 4
          },
          end: {
            line: 271,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 4
          },
          end: {
            line: 271,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "23": {
        loc: {
          start: {
            line: 264,
            column: 20
          },
          end: {
            line: 268,
            column: 13
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 264,
            column: 35
          },
          end: {
            line: 266,
            column: 13
          }
        }, {
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 268,
            column: 13
          }
        }],
        line: 264
      },
      "24": {
        loc: {
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 274,
            column: 41
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 274,
            column: 41
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 274
      },
      "25": {
        loc: {
          start: {
            line: 275,
            column: 4
          },
          end: {
            line: 275,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 4
          },
          end: {
            line: 275,
            column: 43
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "26": {
        loc: {
          start: {
            line: 276,
            column: 4
          },
          end: {
            line: 276,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 4
          },
          end: {
            line: 276,
            column: 43
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      },
      "27": {
        loc: {
          start: {
            line: 277,
            column: 4
          },
          end: {
            line: 277,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 4
          },
          end: {
            line: 277,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "28": {
        loc: {
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 278,
            column: 73
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 278,
            column: 73
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "29": {
        loc: {
          start: {
            line: 287,
            column: 4
          },
          end: {
            line: 294,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 4
          },
          end: {
            line: 294,
            column: 5
          }
        }, {
          start: {
            line: 289,
            column: 11
          },
          end: {
            line: 294,
            column: 5
          }
        }],
        line: 287
      },
      "30": {
        loc: {
          start: {
            line: 287,
            column: 8
          },
          end: {
            line: 287,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 287,
            column: 8
          },
          end: {
            line: 287,
            column: 37
          }
        }, {
          start: {
            line: 287,
            column: 41
          },
          end: {
            line: 287,
            column: 63
          }
        }],
        line: 287
      },
      "31": {
        loc: {
          start: {
            line: 298,
            column: 4
          },
          end: {
            line: 300,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 298,
            column: 4
          },
          end: {
            line: 300,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 298
      },
      "32": {
        loc: {
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 298,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 298,
            column: 14
          }
        }, {
          start: {
            line: 298,
            column: 18
          },
          end: {
            line: 298,
            column: 43
          }
        }],
        line: 298
      },
      "33": {
        loc: {
          start: {
            line: 306,
            column: 4
          },
          end: {
            line: 308,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 4
          },
          end: {
            line: 308,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "34": {
        loc: {
          start: {
            line: 328,
            column: 4
          },
          end: {
            line: 330,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 328,
            column: 4
          },
          end: {
            line: 330,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 328
      },
      "35": {
        loc: {
          start: {
            line: 331,
            column: 4
          },
          end: {
            line: 333,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 4
          },
          end: {
            line: 333,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 331
      },
      "36": {
        loc: {
          start: {
            line: 361,
            column: 4
          },
          end: {
            line: 363,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 361,
            column: 4
          },
          end: {
            line: 363,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 361
      },
      "37": {
        loc: {
          start: {
            line: 361,
            column: 8
          },
          end: {
            line: 361,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 361,
            column: 8
          },
          end: {
            line: 361,
            column: 26
          }
        }, {
          start: {
            line: 361,
            column: 30
          },
          end: {
            line: 361,
            column: 39
          }
        }, {
          start: {
            line: 361,
            column: 43
          },
          end: {
            line: 361,
            column: 82
          }
        }],
        line: 361
      },
      "38": {
        loc: {
          start: {
            line: 370,
            column: 4
          },
          end: {
            line: 372,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 370,
            column: 4
          },
          end: {
            line: 372,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 370
      },
      "39": {
        loc: {
          start: {
            line: 377,
            column: 36
          },
          end: {
            line: 377,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 377,
            column: 45
          },
          end: {
            line: 377,
            column: 47
          }
        }],
        line: 377
      },
      "40": {
        loc: {
          start: {
            line: 380,
            column: 4
          },
          end: {
            line: 391,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 380,
            column: 4
          },
          end: {
            line: 391,
            column: 5
          }
        }, {
          start: {
            line: 386,
            column: 11
          },
          end: {
            line: 391,
            column: 5
          }
        }],
        line: 380
      },
      "41": {
        loc: {
          start: {
            line: 380,
            column: 8
          },
          end: {
            line: 380,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 380,
            column: 8
          },
          end: {
            line: 380,
            column: 37
          }
        }, {
          start: {
            line: 380,
            column: 41
          },
          end: {
            line: 380,
            column: 63
          }
        }],
        line: 380
      },
      "42": {
        loc: {
          start: {
            line: 395,
            column: 30
          },
          end: {
            line: 395,
            column: 154
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 395,
            column: 62
          },
          end: {
            line: 395,
            column: 88
          }
        }, {
          start: {
            line: 395,
            column: 91
          },
          end: {
            line: 395,
            column: 154
          }
        }],
        line: 395
      },
      "43": {
        loc: {
          start: {
            line: 395,
            column: 91
          },
          end: {
            line: 395,
            column: 154
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 395,
            column: 91
          },
          end: {
            line: 395,
            column: 129
          }
        }, {
          start: {
            line: 395,
            column: 133
          },
          end: {
            line: 395,
            column: 154
          }
        }],
        line: 395
      },
      "44": {
        loc: {
          start: {
            line: 406,
            column: 8
          },
          end: {
            line: 408,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 406,
            column: 8
          },
          end: {
            line: 408,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 406
      },
      "45": {
        loc: {
          start: {
            line: 406,
            column: 12
          },
          end: {
            line: 406,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 406,
            column: 12
          },
          end: {
            line: 406,
            column: 41
          }
        }, {
          start: {
            line: 406,
            column: 45
          },
          end: {
            line: 406,
            column: 58
          }
        }],
        line: 406
      },
      "46": {
        loc: {
          start: {
            line: 415,
            column: 8
          },
          end: {
            line: 418,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 415,
            column: 8
          },
          end: {
            line: 418,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 415
      },
      "47": {
        loc: {
          start: {
            line: 420,
            column: 8
          },
          end: {
            line: 430,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 420,
            column: 8
          },
          end: {
            line: 430,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 420
      },
      "48": {
        loc: {
          start: {
            line: 420,
            column: 12
          },
          end: {
            line: 420,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 420,
            column: 12
          },
          end: {
            line: 420,
            column: 41
          }
        }, {
          start: {
            line: 420,
            column: 45
          },
          end: {
            line: 420,
            column: 58
          }
        }],
        line: 420
      },
      "49": {
        loc: {
          start: {
            line: 424,
            column: 16
          },
          end: {
            line: 426,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 424,
            column: 16
          },
          end: {
            line: 426,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 424
      },
      "50": {
        loc: {
          start: {
            line: 424,
            column: 20
          },
          end: {
            line: 424,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 424,
            column: 20
          },
          end: {
            line: 424,
            column: 38
          }
        }, {
          start: {
            line: 424,
            column: 42
          },
          end: {
            line: 424,
            column: 76
          }
        }],
        line: 424
      },
      "51": {
        loc: {
          start: {
            line: 445,
            column: 4
          },
          end: {
            line: 447,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 445,
            column: 4
          },
          end: {
            line: 447,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 445
      },
      "52": {
        loc: {
          start: {
            line: 445,
            column: 8
          },
          end: {
            line: 445,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 445,
            column: 8
          },
          end: {
            line: 445,
            column: 37
          }
        }, {
          start: {
            line: 445,
            column: 41
          },
          end: {
            line: 445,
            column: 54
          }
        }],
        line: 445
      },
      "53": {
        loc: {
          start: {
            line: 452,
            column: 4
          },
          end: {
            line: 462,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 452,
            column: 4
          },
          end: {
            line: 462,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 452
      },
      "54": {
        loc: {
          start: {
            line: 452,
            column: 8
          },
          end: {
            line: 452,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 452,
            column: 8
          },
          end: {
            line: 452,
            column: 37
          }
        }, {
          start: {
            line: 452,
            column: 41
          },
          end: {
            line: 452,
            column: 54
          }
        }],
        line: 452
      },
      "55": {
        loc: {
          start: {
            line: 456,
            column: 12
          },
          end: {
            line: 458,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 456,
            column: 12
          },
          end: {
            line: 458,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 456
      },
      "56": {
        loc: {
          start: {
            line: 456,
            column: 16
          },
          end: {
            line: 456,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 456,
            column: 16
          },
          end: {
            line: 456,
            column: 34
          }
        }, {
          start: {
            line: 456,
            column: 38
          },
          end: {
            line: 456,
            column: 72
          }
        }],
        line: 456
      },
      "57": {
        loc: {
          start: {
            line: 472,
            column: 8
          },
          end: {
            line: 477,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 472,
            column: 8
          },
          end: {
            line: 477,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 472
      },
      "58": {
        loc: {
          start: {
            line: 476,
            column: 19
          },
          end: {
            line: 476,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 476,
            column: 19
          },
          end: {
            line: 476,
            column: 26
          }
        }, {
          start: {
            line: 476,
            column: 30
          },
          end: {
            line: 476,
            column: 39
          }
        }],
        line: 476
      },
      "59": {
        loc: {
          start: {
            line: 486,
            column: 4
          },
          end: {
            line: 492,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 486,
            column: 4
          },
          end: {
            line: 492,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 486
      },
      "60": {
        loc: {
          start: {
            line: 486,
            column: 8
          },
          end: {
            line: 486,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 486,
            column: 8
          },
          end: {
            line: 486,
            column: 16
          }
        }, {
          start: {
            line: 486,
            column: 20
          },
          end: {
            line: 486,
            column: 47
          }
        }, {
          start: {
            line: 486,
            column: 51
          },
          end: {
            line: 486,
            column: 67
          }
        }],
        line: 486
      },
      "61": {
        loc: {
          start: {
            line: 501,
            column: 8
          },
          end: {
            line: 503,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 501,
            column: 8
          },
          end: {
            line: 503,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 501
      },
      "62": {
        loc: {
          start: {
            line: 501,
            column: 12
          },
          end: {
            line: 501,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 501,
            column: 12
          },
          end: {
            line: 501,
            column: 30
          }
        }, {
          start: {
            line: 501,
            column: 34
          },
          end: {
            line: 501,
            column: 71
          }
        }],
        line: 501
      },
      "63": {
        loc: {
          start: {
            line: 506,
            column: 4
          },
          end: {
            line: 508,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 506,
            column: 4
          },
          end: {
            line: 508,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 506
      },
      "64": {
        loc: {
          start: {
            line: 506,
            column: 8
          },
          end: {
            line: 506,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 506,
            column: 8
          },
          end: {
            line: 506,
            column: 24
          }
        }, {
          start: {
            line: 506,
            column: 28
          },
          end: {
            line: 506,
            column: 64
          }
        }, {
          start: {
            line: 506,
            column: 68
          },
          end: {
            line: 506,
            column: 97
          }
        }],
        line: 506
      },
      "65": {
        loc: {
          start: {
            line: 510,
            column: 4
          },
          end: {
            line: 512,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 510,
            column: 4
          },
          end: {
            line: 512,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 510
      },
      "66": {
        loc: {
          start: {
            line: 510,
            column: 8
          },
          end: {
            line: 510,
            column: 116
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 510,
            column: 8
          },
          end: {
            line: 510,
            column: 30
          }
        }, {
          start: {
            line: 510,
            column: 34
          },
          end: {
            line: 510,
            column: 76
          }
        }, {
          start: {
            line: 510,
            column: 80
          },
          end: {
            line: 510,
            column: 116
          }
        }],
        line: 510
      },
      "67": {
        loc: {
          start: {
            line: 521,
            column: 4
          },
          end: {
            line: 523,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 521,
            column: 4
          },
          end: {
            line: 523,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 521
      },
      "68": {
        loc: {
          start: {
            line: 521,
            column: 8
          },
          end: {
            line: 521,
            column: 122
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 521,
            column: 8
          },
          end: {
            line: 521,
            column: 27
          }
        }, {
          start: {
            line: 521,
            column: 31
          },
          end: {
            line: 521,
            column: 70
          }
        }, {
          start: {
            line: 521,
            column: 74
          },
          end: {
            line: 521,
            column: 122
          }
        }],
        line: 521
      },
      "69": {
        loc: {
          start: {
            line: 552,
            column: 4
          },
          end: {
            line: 563,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 552,
            column: 4
          },
          end: {
            line: 563,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 552
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0, 0],
      "38": [0, 0],
      "39": [0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0, 0],
      "65": [0, 0],
      "66": [0, 0, 0],
      "67": [0, 0],
      "68": [0, 0, 0],
      "69": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\security.ts"],
      sourcesContent: ["import { RateLimiter } from \"../services/analyticsService\" // Corrected import path\r\n\r\n// Dynamic import for DOMPurify to handle SSR\r\nlet DOMPurify: any = null\r\nif (typeof window !== 'undefined') {\r\n  import('dompurify').then((module: any) => {\r\n    DOMPurify = module.default || module\r\n  })\r\n}\r\n\r\n// Content Security Policy headers\r\nexport const cspHeaders = {\r\n  \"Content-Security-Policy\":\r\n    \"default-src 'self'; \" +\r\n    \"script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://unpkg.com; \" +\r\n    \"style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; \" +\r\n    \"img-src 'self' data: https: blob:; \" +\r\n    \"font-src 'self' data: https://fonts.gstatic.com; \" +\r\n    \"connect-src 'self' https://*.supabase.co https://api.github.com https://api.openai.com wss://*.supabase.co; \" +\r\n    \"media-src 'self' data: blob:; \" +\r\n    \"object-src 'none'; \" +\r\n    \"frame-src 'self' https://www.youtube.com https://player.vimeo.com; \" +\r\n    \"frame-ancestors 'none'; \" +\r\n    \"base-uri 'self'; \" +\r\n    \"form-action 'self'; \" +\r\n    \"upgrade-insecure-requests; \" +\r\n    \"block-all-mixed-content;\",\r\n}\r\n\r\n// Rate limiter instance for API calls\r\nexport const rateLimiter = new RateLimiter({\r\n  windowMs: 15 * 60 * 1000, // 15 minutes\r\n  max: 100, // limit each IP to 100 requests per windowMs\r\n})\r\n\r\n// Input sanitization function\r\nexport const sanitizeUserInput = (input: string): string => {\r\n  if (typeof input !== \"string\") {\r\n    return \"\"\r\n  }\r\n  // Fallback sanitization if DOMPurify is not available\r\n  if (!DOMPurify) {\r\n    return input.replace(/<[^>]*>/g, '').trim()\r\n  }\r\n  return DOMPurify.sanitize(input, {\r\n    ALLOWED_TAGS: [\"b\", \"i\", \"em\", \"strong\", \"a\", \"p\", \"br\"],\r\n    ALLOWED_ATTR: [\"href\", \"title\"],\r\n    ALLOW_DATA_ATTR: false,\r\n    FORBID_TAGS: [\"script\", \"object\", \"embed\", \"form\", \"input\"],\r\n    FORBID_ATTR: [\"onerror\", \"onload\", \"onclick\", \"onmouseover\"],\r\n  })\r\n}\r\n\r\n// HTML sanitization for rich content\r\nexport const sanitizeHTML = (html: string): string => {\r\n  if (typeof html !== \"string\") {\r\n    return \"\"\r\n  }\r\n  // Fallback sanitization if DOMPurify is not available\r\n  if (!DOMPurify) {\r\n    return html.replace(/<script[^>]*>.*?<\\/script>/gi, '').replace(/<[^>]*>/g, '').trim()\r\n  }\r\n  return DOMPurify.sanitize(html, {\r\n    ALLOWED_TAGS: [\r\n      \"p\",\r\n      \"br\",\r\n      \"strong\",\r\n      \"em\",\r\n      \"u\",\r\n      \"ol\",\r\n      \"ul\",\r\n      \"li\",\r\n      \"h1\",\r\n      \"h2\",\r\n      \"h3\",\r\n      \"h4\",\r\n      \"h5\",\r\n      \"h6\",\r\n      \"blockquote\",\r\n      \"code\",\r\n      \"pre\",\r\n      \"a\",\r\n      \"img\",\r\n    ],\r\n    ALLOWED_ATTR: {\r\n      \"a\": [\"href\", \"title\", \"target\"],\r\n      \"img\": [\"src\", \"alt\", \"title\", \"width\", \"height\"],\r\n      \"*\": [\"class\"],\r\n    } as Record<string, string[]>,\r\n    ALLOW_DATA_ATTR: false,\r\n    FORBID_TAGS: [\"script\", \"object\", \"embed\", \"form\", \"input\", \"iframe\"],\r\n    FORBID_ATTR: [\"onerror\", \"onload\", \"onclick\", \"onmouseover\", \"style\"],\r\n  })\r\n}\r\n\r\n// URL validation\r\nexport const isValidURL = (url: string): boolean => {\r\n  try {\r\n    const urlObj = new URL(url)\r\n    return [\"http:\", \"https:\"].includes(urlObj.protocol)\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n\r\n// Email validation\r\nexport const isValidEmail = (email: string): boolean => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\r\n  return emailRegex.test(email) && email.length <= 254\r\n}\r\n\r\n// Import standardized password validation\r\nimport { validatePasswordSecure } from './validation'\r\n\r\n// Password strength validation - now uses standardized validation\r\nexport const validatePasswordStrength = (\r\n  password: string,\r\n): {\r\n  isValid: boolean\r\n  errors: string[]\r\n  score: number\r\n} => {\r\n  const result = validatePasswordSecure(password)\r\n  \r\n  if (!result.isValid) {\r\n    return {\r\n      isValid: false,\r\n      errors: result.error ? [result.error] : ['Invalid password'],\r\n      score: 0\r\n    }\r\n  }\r\n  \r\n  // Calculate score based on password strength\r\n  let score = 0\r\n  if (password.length >= 8) score += 1\r\n  if (/[a-z]/.test(password)) score += 1\r\n  if (/[A-Z]/.test(password)) score += 1\r\n  if (/\\d/.test(password)) score += 1\r\n  if (/[!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(password)) score += 1\r\n  \r\n  return {\r\n    isValid: true,\r\n    errors: [],\r\n    score\r\n  }\r\n}\r\n\r\n// CSRF token generation and validation\r\nexport const generateCSRFToken = (): string => {\r\n  const array = new Uint8Array(32)\r\n  if (typeof crypto !== \"undefined\" && crypto.getRandomValues) {\r\n    crypto.getRandomValues(array)\r\n  } else {\r\n    // Fallback for environments without crypto.getRandomValues\r\n    for (let i = 0; i < array.length; i++) {\r\n      array[i] = Math.floor(Math.random() * 256)\r\n    }\r\n  }\r\n  return Array.from(array, (byte) => byte.toString(16).padStart(2, \"0\")).join(\"\")\r\n}\r\n\r\n// Session token validation\r\nexport const isValidSessionToken = (token: string): boolean => {\r\n  if (!token || typeof token !== \"string\") {\r\n    return false\r\n  }\r\n  // Check token format (should be hex string of specific length)\r\n  const tokenRegex = /^[a-f0-9]{64}$/i\r\n  return tokenRegex.test(token)\r\n}\r\n\r\n// SQL injection prevention for search queries\r\nexport const sanitizeSearchQuery = (query: string): string => {\r\n  if (typeof query !== \"string\") {\r\n    return \"\"\r\n  }\r\n  // Use whitelist approach - only allow alphanumeric, spaces, and safe punctuation\r\n  return query\r\n    .replace(/[^a-zA-Z0-9\\s\\-_.@]/g, \"\") // Only allow safe characters\r\n    .replace(/\\s+/g, \" \") // Normalize whitespace\r\n    .trim()\r\n    .substring(0, 100) // Limit length\r\n}\r\n\r\n// File upload validation\r\nexport const validateFileUpload = (\r\n  file: File,\r\n): {\r\n  isValid: boolean\r\n  errors: string[]\r\n} => {\r\n  const errors: string[] = []\r\n  const maxSize = 10 * 1024 * 1024 // 10MB\r\n  const allowedTypes = [\r\n    \"image/jpeg\",\r\n    \"image/png\",\r\n    \"image/gif\",\r\n    \"application/pdf\",\r\n    \"text/plain\",\r\n    \"application/msword\",\r\n    \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\r\n  ]\r\n  if (file.size > maxSize) {\r\n    errors.push(\"File size must be less than 10MB\")\r\n  }\r\n  if (!allowedTypes.includes(file.type)) {\r\n    errors.push(\"File type not allowed\")\r\n  }\r\n  // Check file extension matches MIME type\r\n  const extension = file.name.split(\".\").pop()?.toLowerCase()\r\n  const mimeTypeMap: Record<string, string[]> = {\r\n    \"image/jpeg\": [\"jpg\", \"jpeg\"],\r\n    \"image/png\": [\"png\"],\r\n    \"image/gif\": [\"gif\"],\r\n    \"application/pdf\": [\"pdf\"],\r\n    \"text/plain\": [\"txt\"],\r\n    \"application/msword\": [\"doc\"],\r\n    \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\": [\"docx\"],\r\n  }\r\n  const expectedExtensions = mimeTypeMap[file.type]\r\n  if (expectedExtensions && extension && !expectedExtensions.includes(extension)) {\r\n    errors.push(\"File extension does not match file type\")\r\n  }\r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors,\r\n  }\r\n}\r\n\r\n// XSS prevention for dynamic content\r\nexport const escapeHTML = (text: string): string => {\r\n  if (typeof text !== \"string\") {\r\n    return \"\"\r\n  }\r\n  const div = document.createElement(\"div\")\r\n  div.textContent = text\r\n  return div.innerHTML\r\n}\r\n\r\n// Secure random string generation\r\nexport const generateSecureRandomString = (length = 32): string => {\r\n  const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\r\n  let result = \"\"\r\n\r\n  if (typeof crypto !== \"undefined\" && crypto.getRandomValues) {\r\n    const array = new Uint8Array(length)\r\n    crypto.getRandomValues(array)\r\n    for (let i = 0; i < length; i++) {\r\n      result += chars[array[i] % chars.length]\r\n    }\r\n  } else {\r\n    // Fallback for environments without crypto.getRandomValues\r\n    for (let i = 0; i < length; i++) {\r\n      result += chars[Math.floor(Math.random() * chars.length)]\r\n    }\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n// Import advanced encryption system\r\nimport { advancedEncryption } from './encryption'\r\n\r\n// Legacy encryption key for backward compatibility\r\nconst LEGACY_ENCRYPTION_KEY = typeof window === 'undefined' \r\n  ? process.env.ENCRYPTION_KEY \r\n  : process.env.NEXT_PUBLIC_ENCRYPTION_KEY || 'fallback-client-key'\r\n\r\n/**\r\n * Encrypts API keys using AES-256-GCM encryption\r\n * Automatically handles both new and legacy formats\r\n */\r\nexport const encryptApiKey = async (apiKey: string): Promise<string> => {\r\n  try {\r\n    // Use advanced encryption for new data\r\n    return await advancedEncryption.encryptApiKey(apiKey, {\r\n      encryptedAt: new Date().toISOString(),\r\n      source: 'security_module'\r\n    })\r\n  } catch (error) {\r\n    console.error('Advanced encryption failed, falling back to legacy:', error)\r\n    // Fallback to legacy base64 encoding for compatibility\r\n    if (typeof crypto !== \"undefined\" && crypto.subtle) {\r\n      return btoa(apiKey + \":\" + LEGACY_ENCRYPTION_KEY)\r\n    }\r\n    return btoa(apiKey)\r\n  }\r\n}\r\n\r\n/**\r\n * Decrypts API keys, handling both new AES-256-GCM and legacy formats\r\n */\r\nexport const decryptApiKey = async (encryptedApiKey: string): Promise<string> => {\r\n  try {\r\n    // Check if it's new format (JSON structure)\r\n    if (advancedEncryption.isEncrypted(encryptedApiKey)) {\r\n      const result = await advancedEncryption.decryptApiKey(encryptedApiKey)\r\n      return result.apiKey\r\n    }\r\n    \r\n    // Handle legacy format\r\n    if (typeof crypto !== \"undefined\" && crypto.subtle) {\r\n      try {\r\n        const decoded = atob(encryptedApiKey)\r\n        const parts = decoded.split(\":\")\r\n        if (parts.length === 2 && parts[1] === LEGACY_ENCRYPTION_KEY) {\r\n          return parts[0]\r\n        }\r\n      } catch {\r\n        // Continue to fallback\r\n      }\r\n    }\r\n    \r\n    // Final fallback - simple base64 decode\r\n    try {\r\n      return atob(encryptedApiKey)\r\n    } catch {\r\n      return encryptedApiKey // Return as-is if all decoding fails\r\n    }\r\n  } catch (error) {\r\n    console.error('Decryption failed:', error)\r\n    throw new Error('Failed to decrypt API key')\r\n  }\r\n}\r\n\r\n/**\r\n * Synchronous versions for backward compatibility\r\n * Note: These use legacy encryption and should be migrated\r\n */\r\nexport const encryptApiKeySync = (apiKey: string): string => {\r\n  console.warn('\u26A0\uFE0F  Using legacy synchronous encryption. Migrate to async encryptApiKey()')\r\n  if (typeof crypto !== \"undefined\" && crypto.subtle) {\r\n    return btoa(apiKey + \":\" + LEGACY_ENCRYPTION_KEY)\r\n  }\r\n  return btoa(apiKey)\r\n}\r\n\r\nexport const decryptApiKeySync = (encryptedApiKey: string): string => {\r\n  console.warn('\u26A0\uFE0F  Using legacy synchronous decryption. Migrate to async decryptApiKey()')\r\n  if (typeof crypto !== \"undefined\" && crypto.subtle) {\r\n    try {\r\n      const decoded = atob(encryptedApiKey)\r\n      const parts = decoded.split(\":\")\r\n      if (parts.length === 2 && parts[1] === LEGACY_ENCRYPTION_KEY) {\r\n        return parts[0]\r\n      }\r\n    } catch {\r\n      // Continue to fallback\r\n    }\r\n  }\r\n  try {\r\n    return atob(encryptedApiKey)\r\n  } catch {\r\n    return encryptedApiKey\r\n  }\r\n}\r\n\r\n// Get client IP address\r\nexport const getClientIpAddress = async (): Promise<string> => {\r\n  try {\r\n    // Try to get IP from various sources\r\n    if (typeof window !== \"undefined\") {\r\n      // Client-side: use a service to get public IP\r\n      const response = await fetch('https://api.ipify.org?format=json')\r\n      const data = await response.json()\r\n      return data.ip || 'unknown'\r\n    }\r\n    // Server-side: would get from request headers\r\n    return 'server-side-ip'\r\n  } catch {\r\n    return 'unknown'\r\n  }\r\n}\r\n\r\n// Content validation for training modules\r\nexport const validateTrainingContent = (\r\n  content: unknown,\r\n): {\r\n  isValid: boolean\r\n  errors: string[]\r\n} => {\r\n  const errors: string[] = []\r\n  if (!content || typeof content !== \"object\" || content === null) {\r\n    errors.push(\"Content must be a valid object\")\r\n    return { isValid: false, errors }\r\n  }\r\n  \r\n  const contentObj = content as Record<string, unknown>\r\n  \r\n  // Validate required fields\r\n  const requiredFields = [\"title\", \"description\", \"category\"]\r\n  for (const field of requiredFields) {\r\n    if (!contentObj[field] || typeof contentObj[field] !== \"string\") {\r\n      errors.push(`${field} is required and must be a string`)\r\n    }\r\n  }\r\n  // Validate title length\r\n  if (contentObj.title && typeof contentObj.title === \"string\" && contentObj.title.length > 100) {\r\n    errors.push(\"Title must be less than 100 characters\")\r\n  }\r\n  // Validate description length\r\n  if (contentObj.description && typeof contentObj.description === \"string\" && contentObj.description.length > 1000) {\r\n    errors.push(\"Description must be less than 1000 characters\")\r\n  }\r\n  // Validate category\r\n  const allowedCategories = [\"security\", \"compliance\", \"technical\", \"soft-skills\", \"onboarding\"]\r\n  if (contentObj.category && typeof contentObj.category === \"string\" && !allowedCategories.includes(contentObj.category)) {\r\n    errors.push(\"Invalid category\")\r\n  }\r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors,\r\n  }\r\n}\r\n\r\n// Security headers for API responses\r\nexport const getSecurityHeaders = (): Record<string, string> => {\r\n  return {\r\n    \"X-Content-Type-Options\": \"nosniff\",\r\n    \"X-Frame-Options\": \"DENY\",\r\n    \"X-XSS-Protection\": \"1; mode=block\",\r\n    \"Referrer-Policy\": \"strict-origin-when-cross-origin\",\r\n    \"Permissions-Policy\": \"camera=(), microphone=(), geolocation=()\",\r\n    ...cspHeaders,\r\n  }\r\n}\r\n\r\n// Rate limiting check for user actions\r\nexport const checkRateLimit = (userId: string, action: string): boolean => {\r\n  const key = `${userId}:${action}`\r\n  return rateLimiter.isAllowed(key)\r\n}\r\n\r\n// Audit logging for security events\r\nexport const logSecurityEvent = (event: {\r\n  type: \"login\" | \"logout\" | \"failed_login\" | \"permission_denied\" | \"data_access\" | \"data_modification\"\r\n  userId?: string\r\n  ip?: string\r\n  userAgent?: string\r\n  details?: Record<string, unknown>\r\n}): void => {\r\n  const logEntry = {\r\n    ...event,\r\n    timestamp: new Date().toISOString(),\r\n    sessionId: generateSecureRandomString(16),\r\n  }\r\n  // In a real implementation, this would be sent to a secure logging service\r\n  console.log(\"Security Event:\", logEntry)\r\n  // Send to security monitoring service\r\n  if (typeof fetch !== \"undefined\") {\r\n    fetch(\"/api/security/audit\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        ...getSecurityHeaders(),\r\n      },\r\n      body: JSON.stringify(logEntry),\r\n    }).catch((error) => {\r\n      console.warn(\"Failed to log security event:\", error)\r\n    })\r\n  }\r\n}\r\n\r\n// Security service object with required methods\r\nexport const securityService = {\r\n  validateCSRFToken: (token: string): boolean => {\r\n    return isValidSessionToken(token)\r\n  },\r\n  \r\n  validateSession: (sessionId: string): boolean => {\r\n    return isValidSessionToken(sessionId)\r\n  },\r\n  \r\n  sanitizeInput: (input: string): string => {\r\n    return sanitizeUserInput(input)\r\n  },\r\n  \r\n  generateCSPHeader: (): string => {\r\n    return cspHeaders[\"Content-Security-Policy\"]\r\n  }\r\n}\r\n"],
      names: ["checkRateLimit", "cspHeaders", "decryptApiKey", "decryptApiKeySync", "encryptApiKey", "encryptApiKeySync", "escapeHTML", "generateCSRFToken", "generateSecureRandomString", "getClientIpAddress", "getSecurityHeaders", "isValidEmail", "isValidSessionToken", "isValidURL", "logSecurityEvent", "rateLimiter", "sanitizeHTML", "sanitizeSearchQuery", "sanitizeUserInput", "securityService", "validateFileUpload", "validatePasswordStrength", "validateTrainingContent", "DOMPurify", "window", "then", "module", "default", "RateLimiter", "windowMs", "max", "input", "replace", "trim", "sanitize", "ALLOWED_TAGS", "ALLOWED_ATTR", "ALLOW_DATA_ATTR", "FORBID_TAGS", "FORBID_ATTR", "html", "url", "urlObj", "URL", "includes", "protocol", "email", "emailRegex", "test", "length", "password", "result", "validatePasswordSecure", "isValid", "errors", "error", "score", "array", "Uint8Array", "crypto", "getRandomValues", "i", "Math", "floor", "random", "Array", "from", "byte", "toString", "padStart", "join", "token", "tokenRegex", "query", "substring", "file", "maxSize", "allowedTypes", "size", "push", "type", "extension", "name", "split", "pop", "toLowerCase", "mimeTypeMap", "expectedExtensions", "text", "div", "document", "createElement", "textContent", "innerHTML", "chars", "LEGACY_ENCRYPTION_KEY", "process", "env", "ENCRYPTION_KEY", "NEXT_PUBLIC_ENCRYPTION_KEY", "apiKey", "advancedEncryption", "encryptedAt", "Date", "toISOString", "source", "console", "subtle", "btoa", "encryptedApiKey", "isEncrypted", "decoded", "atob", "parts", "Error", "warn", "response", "fetch", "data", "json", "ip", "content", "contentObj", "requiredFields", "field", "title", "description", "allowedCategories", "category", "userId", "action", "key", "isAllowed", "event", "logEntry", "timestamp", "sessionId", "log", "method", "headers", "body", "JSON", "stringify", "catch", "validateCSRFToken", "validateSession", "sanitizeInput", "generateCSPHeader"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5e6ec50f295743a3de7ec82e144ef3d457a6fab2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1vli5znnne = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1vli5znnne();
cov_1vli5znnne().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1vli5znnne().f[0]++;
  cov_1vli5znnne().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1vli5znnne().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1vli5znnne().s[3]++;
_export(exports, {
  get checkRateLimit() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[1]++;
    cov_1vli5znnne().s[4]++;
    return checkRateLimit;
  },
  get cspHeaders() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[2]++;
    cov_1vli5znnne().s[5]++;
    return cspHeaders;
  },
  get decryptApiKey() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[3]++;
    cov_1vli5znnne().s[6]++;
    return decryptApiKey;
  },
  get decryptApiKeySync() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[4]++;
    cov_1vli5znnne().s[7]++;
    return decryptApiKeySync;
  },
  get encryptApiKey() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[5]++;
    cov_1vli5znnne().s[8]++;
    return encryptApiKey;
  },
  get encryptApiKeySync() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[6]++;
    cov_1vli5znnne().s[9]++;
    return encryptApiKeySync;
  },
  get escapeHTML() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[7]++;
    cov_1vli5znnne().s[10]++;
    return escapeHTML;
  },
  get generateCSRFToken() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[8]++;
    cov_1vli5znnne().s[11]++;
    return generateCSRFToken;
  },
  get generateSecureRandomString() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[9]++;
    cov_1vli5znnne().s[12]++;
    return generateSecureRandomString;
  },
  get getClientIpAddress() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[10]++;
    cov_1vli5znnne().s[13]++;
    return getClientIpAddress;
  },
  get getSecurityHeaders() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[11]++;
    cov_1vli5znnne().s[14]++;
    return getSecurityHeaders;
  },
  get isValidEmail() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[12]++;
    cov_1vli5znnne().s[15]++;
    return isValidEmail;
  },
  get isValidSessionToken() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[13]++;
    cov_1vli5znnne().s[16]++;
    return isValidSessionToken;
  },
  get isValidURL() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[14]++;
    cov_1vli5znnne().s[17]++;
    return isValidURL;
  },
  get logSecurityEvent() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[15]++;
    cov_1vli5znnne().s[18]++;
    return logSecurityEvent;
  },
  get rateLimiter() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[16]++;
    cov_1vli5znnne().s[19]++;
    return rateLimiter;
  },
  get sanitizeHTML() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[17]++;
    cov_1vli5znnne().s[20]++;
    return sanitizeHTML;
  },
  get sanitizeSearchQuery() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[18]++;
    cov_1vli5znnne().s[21]++;
    return sanitizeSearchQuery;
  },
  get sanitizeUserInput() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[19]++;
    cov_1vli5znnne().s[22]++;
    return sanitizeUserInput;
  },
  get securityService() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[20]++;
    cov_1vli5znnne().s[23]++;
    return securityService;
  },
  get validateFileUpload() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[21]++;
    cov_1vli5znnne().s[24]++;
    return validateFileUpload;
  },
  get validatePasswordStrength() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[22]++;
    cov_1vli5znnne().s[25]++;
    return validatePasswordStrength;
  },
  get validateTrainingContent() {
    /* istanbul ignore next */
    cov_1vli5znnne().f[23]++;
    cov_1vli5znnne().s[26]++;
    return validateTrainingContent;
  }
});
const _analyticsService =
/* istanbul ignore next */
(cov_1vli5znnne().s[27]++, require("../services/analyticsService" // Corrected import path
));
const _validation =
/* istanbul ignore next */
(cov_1vli5znnne().s[28]++, require("./validation"));
const _encryption =
/* istanbul ignore next */
(cov_1vli5znnne().s[29]++, require("./encryption"));
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_1vli5znnne().f[24]++;
  cov_1vli5znnne().s[30]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_1vli5znnne().b[0][0]++;
    cov_1vli5znnne().s[31]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[0][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[32]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[33]++, new WeakMap());
  /* istanbul ignore next */
  cov_1vli5znnne().s[34]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_1vli5znnne().f[25]++;
    cov_1vli5znnne().s[35]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_1vli5znnne().b[1][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_1vli5znnne().b[1][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_1vli5znnne().f[26]++;
  cov_1vli5znnne().s[36]++;
  if (
  /* istanbul ignore next */
  (cov_1vli5znnne().b[3][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_1vli5znnne().b[3][1]++, obj) &&
  /* istanbul ignore next */
  (cov_1vli5znnne().b[3][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[2][0]++;
    cov_1vli5znnne().s[37]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[2][1]++;
  }
  cov_1vli5znnne().s[38]++;
  if (
  /* istanbul ignore next */
  (cov_1vli5znnne().b[5][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_1vli5znnne().b[5][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_1vli5znnne().b[5][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[4][0]++;
    cov_1vli5znnne().s[39]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[4][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[40]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_1vli5znnne().s[41]++;
  if (
  /* istanbul ignore next */
  (cov_1vli5znnne().b[7][0]++, cache) &&
  /* istanbul ignore next */
  (cov_1vli5znnne().b[7][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[6][0]++;
    cov_1vli5znnne().s[42]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[6][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[43]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[44]++,
  /* istanbul ignore next */
  (cov_1vli5znnne().b[8][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_1vli5znnne().b[8][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_1vli5znnne().s[45]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_1vli5znnne().s[46]++;
    if (
    /* istanbul ignore next */
    (cov_1vli5znnne().b[10][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_1vli5znnne().b[10][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_1vli5znnne().b[9][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_1vli5znnne().s[47]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_1vli5znnne().b[11][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_1vli5znnne().b[11][1]++, null));
      /* istanbul ignore next */
      cov_1vli5znnne().s[48]++;
      if (
      /* istanbul ignore next */
      (cov_1vli5znnne().b[13][0]++, desc) && (
      /* istanbul ignore next */
      (cov_1vli5znnne().b[13][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_1vli5znnne().b[13][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_1vli5znnne().b[12][0]++;
        cov_1vli5znnne().s[49]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_1vli5znnne().b[12][1]++;
        cov_1vli5znnne().s[50]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_1vli5znnne().b[9][1]++;
    }
  }
  /* istanbul ignore next */
  cov_1vli5znnne().s[51]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_1vli5znnne().s[52]++;
  if (cache) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[14][0]++;
    cov_1vli5znnne().s[53]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[14][1]++;
  }
  cov_1vli5znnne().s[54]++;
  return newObj;
}
// Dynamic import for DOMPurify to handle SSR
let DOMPurify =
/* istanbul ignore next */
(cov_1vli5znnne().s[55]++, null);
/* istanbul ignore next */
cov_1vli5znnne().s[56]++;
if (typeof window !== 'undefined') {
  /* istanbul ignore next */
  cov_1vli5znnne().b[15][0]++;
  cov_1vli5znnne().s[57]++;
  Promise.resolve().then(() => {
    /* istanbul ignore next */
    cov_1vli5znnne().f[27]++;
    cov_1vli5znnne().s[58]++;
    return /*#__PURE__*/_interop_require_wildcard(require("dompurify"));
  }).then(module => {
    /* istanbul ignore next */
    cov_1vli5znnne().f[28]++;
    cov_1vli5znnne().s[59]++;
    DOMPurify =
    /* istanbul ignore next */
    (cov_1vli5znnne().b[16][0]++, module.default) ||
    /* istanbul ignore next */
    (cov_1vli5znnne().b[16][1]++, module);
  });
} else
/* istanbul ignore next */
{
  cov_1vli5znnne().b[15][1]++;
}
const cspHeaders =
/* istanbul ignore next */
(cov_1vli5znnne().s[60]++, {
  "Content-Security-Policy": "default-src 'self'; " + "script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://unpkg.com; " + "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; " + "img-src 'self' data: https: blob:; " + "font-src 'self' data: https://fonts.gstatic.com; " + "connect-src 'self' https://*.supabase.co https://api.github.com https://api.openai.com wss://*.supabase.co; " + "media-src 'self' data: blob:; " + "object-src 'none'; " + "frame-src 'self' https://www.youtube.com https://player.vimeo.com; " + "frame-ancestors 'none'; " + "base-uri 'self'; " + "form-action 'self'; " + "upgrade-insecure-requests; " + "block-all-mixed-content;"
});
const rateLimiter =
/* istanbul ignore next */
(cov_1vli5znnne().s[61]++, new _analyticsService.RateLimiter({
  windowMs: 15 * 60 * 1000,
  max: 100
}));
/* istanbul ignore next */
cov_1vli5znnne().s[62]++;
const sanitizeUserInput = input => {
  /* istanbul ignore next */
  cov_1vli5znnne().f[29]++;
  cov_1vli5znnne().s[63]++;
  if (typeof input !== "string") {
    /* istanbul ignore next */
    cov_1vli5znnne().b[17][0]++;
    cov_1vli5znnne().s[64]++;
    return "";
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[17][1]++;
  }
  // Fallback sanitization if DOMPurify is not available
  cov_1vli5znnne().s[65]++;
  if (!DOMPurify) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[18][0]++;
    cov_1vli5znnne().s[66]++;
    return input.replace(/<[^>]*>/g, '').trim();
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[18][1]++;
  }
  cov_1vli5znnne().s[67]++;
  return DOMPurify.sanitize(input, {
    ALLOWED_TAGS: ["b", "i", "em", "strong", "a", "p", "br"],
    ALLOWED_ATTR: ["href", "title"],
    ALLOW_DATA_ATTR: false,
    FORBID_TAGS: ["script", "object", "embed", "form", "input"],
    FORBID_ATTR: ["onerror", "onload", "onclick", "onmouseover"]
  });
};
/* istanbul ignore next */
cov_1vli5znnne().s[68]++;
const sanitizeHTML = html => {
  /* istanbul ignore next */
  cov_1vli5znnne().f[30]++;
  cov_1vli5znnne().s[69]++;
  if (typeof html !== "string") {
    /* istanbul ignore next */
    cov_1vli5znnne().b[19][0]++;
    cov_1vli5znnne().s[70]++;
    return "";
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[19][1]++;
  }
  // Fallback sanitization if DOMPurify is not available
  cov_1vli5znnne().s[71]++;
  if (!DOMPurify) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[20][0]++;
    cov_1vli5znnne().s[72]++;
    return html.replace(/<script[^>]*>.*?<\/script>/gi, '').replace(/<[^>]*>/g, '').trim();
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[20][1]++;
  }
  cov_1vli5znnne().s[73]++;
  return DOMPurify.sanitize(html, {
    ALLOWED_TAGS: ["p", "br", "strong", "em", "u", "ol", "ul", "li", "h1", "h2", "h3", "h4", "h5", "h6", "blockquote", "code", "pre", "a", "img"],
    ALLOWED_ATTR: {
      "a": ["href", "title", "target"],
      "img": ["src", "alt", "title", "width", "height"],
      "*": ["class"]
    },
    ALLOW_DATA_ATTR: false,
    FORBID_TAGS: ["script", "object", "embed", "form", "input", "iframe"],
    FORBID_ATTR: ["onerror", "onload", "onclick", "onmouseover", "style"]
  });
};
/* istanbul ignore next */
cov_1vli5znnne().s[74]++;
const isValidURL = url => {
  /* istanbul ignore next */
  cov_1vli5znnne().f[31]++;
  cov_1vli5znnne().s[75]++;
  try {
    const urlObj =
    /* istanbul ignore next */
    (cov_1vli5znnne().s[76]++, new URL(url));
    /* istanbul ignore next */
    cov_1vli5znnne().s[77]++;
    return ["http:", "https:"].includes(urlObj.protocol);
  } catch {
    /* istanbul ignore next */
    cov_1vli5znnne().s[78]++;
    return false;
  }
};
/* istanbul ignore next */
cov_1vli5znnne().s[79]++;
const isValidEmail = email => {
  /* istanbul ignore next */
  cov_1vli5znnne().f[32]++;
  const emailRegex =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[80]++, /^[^\s@]+@[^\s@]+\.[^\s@]+$/);
  /* istanbul ignore next */
  cov_1vli5znnne().s[81]++;
  return /* istanbul ignore next */(cov_1vli5znnne().b[21][0]++, emailRegex.test(email)) &&
  /* istanbul ignore next */
  (cov_1vli5znnne().b[21][1]++, email.length <= 254);
};
/* istanbul ignore next */
cov_1vli5znnne().s[82]++;
const validatePasswordStrength = password => {
  /* istanbul ignore next */
  cov_1vli5znnne().f[33]++;
  const result =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[83]++, (0, _validation.validatePasswordSecure)(password));
  /* istanbul ignore next */
  cov_1vli5znnne().s[84]++;
  if (!result.isValid) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[22][0]++;
    cov_1vli5znnne().s[85]++;
    return {
      isValid: false,
      errors: result.error ?
      /* istanbul ignore next */
      (cov_1vli5znnne().b[23][0]++, [result.error]) :
      /* istanbul ignore next */
      (cov_1vli5znnne().b[23][1]++, ['Invalid password']),
      score: 0
    };
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[22][1]++;
  }
  // Calculate score based on password strength
  let score =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[86]++, 0);
  /* istanbul ignore next */
  cov_1vli5znnne().s[87]++;
  if (password.length >= 8) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[24][0]++;
    cov_1vli5znnne().s[88]++;
    score += 1;
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[24][1]++;
  }
  cov_1vli5znnne().s[89]++;
  if (/[a-z]/.test(password)) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[25][0]++;
    cov_1vli5znnne().s[90]++;
    score += 1;
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[25][1]++;
  }
  cov_1vli5znnne().s[91]++;
  if (/[A-Z]/.test(password)) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[26][0]++;
    cov_1vli5znnne().s[92]++;
    score += 1;
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[26][1]++;
  }
  cov_1vli5znnne().s[93]++;
  if (/\d/.test(password)) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[27][0]++;
    cov_1vli5znnne().s[94]++;
    score += 1;
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[27][1]++;
  }
  cov_1vli5znnne().s[95]++;
  if (/[!@#$%^&*()_+\-=[\]{};':"\\|,.<>/?]/.test(password)) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[28][0]++;
    cov_1vli5znnne().s[96]++;
    score += 1;
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[28][1]++;
  }
  cov_1vli5znnne().s[97]++;
  return {
    isValid: true,
    errors: [],
    score
  };
};
/* istanbul ignore next */
cov_1vli5znnne().s[98]++;
const generateCSRFToken = () => {
  /* istanbul ignore next */
  cov_1vli5znnne().f[34]++;
  const array =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[99]++, new Uint8Array(32));
  /* istanbul ignore next */
  cov_1vli5znnne().s[100]++;
  if (
  /* istanbul ignore next */
  (cov_1vli5znnne().b[30][0]++, typeof crypto !== "undefined") &&
  /* istanbul ignore next */
  (cov_1vli5znnne().b[30][1]++, crypto.getRandomValues)) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[29][0]++;
    cov_1vli5znnne().s[101]++;
    crypto.getRandomValues(array);
  } else {
    /* istanbul ignore next */
    cov_1vli5znnne().b[29][1]++;
    cov_1vli5znnne().s[102]++;
    // Fallback for environments without crypto.getRandomValues
    for (let i =
    /* istanbul ignore next */
    (cov_1vli5znnne().s[103]++, 0); i < array.length; i++) {
      /* istanbul ignore next */
      cov_1vli5znnne().s[104]++;
      array[i] = Math.floor(Math.random() * 256);
    }
  }
  /* istanbul ignore next */
  cov_1vli5znnne().s[105]++;
  return Array.from(array, byte => {
    /* istanbul ignore next */
    cov_1vli5znnne().f[35]++;
    cov_1vli5znnne().s[106]++;
    return byte.toString(16).padStart(2, "0");
  }).join("");
};
/* istanbul ignore next */
cov_1vli5znnne().s[107]++;
const isValidSessionToken = token => {
  /* istanbul ignore next */
  cov_1vli5znnne().f[36]++;
  cov_1vli5znnne().s[108]++;
  if (
  /* istanbul ignore next */
  (cov_1vli5znnne().b[32][0]++, !token) ||
  /* istanbul ignore next */
  (cov_1vli5znnne().b[32][1]++, typeof token !== "string")) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[31][0]++;
    cov_1vli5znnne().s[109]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[31][1]++;
  }
  // Check token format (should be hex string of specific length)
  const tokenRegex =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[110]++, /^[a-f0-9]{64}$/i);
  /* istanbul ignore next */
  cov_1vli5znnne().s[111]++;
  return tokenRegex.test(token);
};
/* istanbul ignore next */
cov_1vli5znnne().s[112]++;
const sanitizeSearchQuery = query => {
  /* istanbul ignore next */
  cov_1vli5znnne().f[37]++;
  cov_1vli5znnne().s[113]++;
  if (typeof query !== "string") {
    /* istanbul ignore next */
    cov_1vli5znnne().b[33][0]++;
    cov_1vli5znnne().s[114]++;
    return "";
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[33][1]++;
  }
  // Use whitelist approach - only allow alphanumeric, spaces, and safe punctuation
  cov_1vli5znnne().s[115]++;
  return query.replace(/[^a-zA-Z0-9\s\-_.@]/g, "") // Only allow safe characters
  .replace(/\s+/g, " ") // Normalize whitespace
  .trim().substring(0, 100) // Limit length
  ;
};
/* istanbul ignore next */
cov_1vli5znnne().s[116]++;
const validateFileUpload = file => {
  /* istanbul ignore next */
  cov_1vli5znnne().f[38]++;
  const errors =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[117]++, []);
  const maxSize =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[118]++, 10 * 1024 * 1024) // 10MB
  ;
  const allowedTypes =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[119]++, ["image/jpeg", "image/png", "image/gif", "application/pdf", "text/plain", "application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"]);
  /* istanbul ignore next */
  cov_1vli5znnne().s[120]++;
  if (file.size > maxSize) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[34][0]++;
    cov_1vli5znnne().s[121]++;
    errors.push("File size must be less than 10MB");
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[34][1]++;
  }
  cov_1vli5znnne().s[122]++;
  if (!allowedTypes.includes(file.type)) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[35][0]++;
    cov_1vli5znnne().s[123]++;
    errors.push("File type not allowed");
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[35][1]++;
  }
  // Check file extension matches MIME type
  const extension =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[124]++, file.name.split(".").pop()?.toLowerCase());
  const mimeTypeMap =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[125]++, {
    "image/jpeg": ["jpg", "jpeg"],
    "image/png": ["png"],
    "image/gif": ["gif"],
    "application/pdf": ["pdf"],
    "text/plain": ["txt"],
    "application/msword": ["doc"],
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ["docx"]
  });
  const expectedExtensions =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[126]++, mimeTypeMap[file.type]);
  /* istanbul ignore next */
  cov_1vli5znnne().s[127]++;
  if (
  /* istanbul ignore next */
  (cov_1vli5znnne().b[37][0]++, expectedExtensions) &&
  /* istanbul ignore next */
  (cov_1vli5znnne().b[37][1]++, extension) &&
  /* istanbul ignore next */
  (cov_1vli5znnne().b[37][2]++, !expectedExtensions.includes(extension))) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[36][0]++;
    cov_1vli5znnne().s[128]++;
    errors.push("File extension does not match file type");
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[36][1]++;
  }
  cov_1vli5znnne().s[129]++;
  return {
    isValid: errors.length === 0,
    errors
  };
};
/* istanbul ignore next */
cov_1vli5znnne().s[130]++;
const escapeHTML = text => {
  /* istanbul ignore next */
  cov_1vli5znnne().f[39]++;
  cov_1vli5znnne().s[131]++;
  if (typeof text !== "string") {
    /* istanbul ignore next */
    cov_1vli5znnne().b[38][0]++;
    cov_1vli5znnne().s[132]++;
    return "";
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[38][1]++;
  }
  const div =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[133]++, document.createElement("div"));
  /* istanbul ignore next */
  cov_1vli5znnne().s[134]++;
  div.textContent = text;
  /* istanbul ignore next */
  cov_1vli5znnne().s[135]++;
  return div.innerHTML;
};
/* istanbul ignore next */
cov_1vli5znnne().s[136]++;
const generateSecureRandomString = (length =
/* istanbul ignore next */
(cov_1vli5znnne().b[39][0]++, 32)) => {
  /* istanbul ignore next */
  cov_1vli5znnne().f[40]++;
  const chars =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[137]++, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789");
  let result =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[138]++, "");
  /* istanbul ignore next */
  cov_1vli5znnne().s[139]++;
  if (
  /* istanbul ignore next */
  (cov_1vli5znnne().b[41][0]++, typeof crypto !== "undefined") &&
  /* istanbul ignore next */
  (cov_1vli5znnne().b[41][1]++, crypto.getRandomValues)) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[40][0]++;
    const array =
    /* istanbul ignore next */
    (cov_1vli5znnne().s[140]++, new Uint8Array(length));
    /* istanbul ignore next */
    cov_1vli5znnne().s[141]++;
    crypto.getRandomValues(array);
    /* istanbul ignore next */
    cov_1vli5znnne().s[142]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1vli5znnne().s[143]++, 0); i < length; i++) {
      /* istanbul ignore next */
      cov_1vli5znnne().s[144]++;
      result += chars[array[i] % chars.length];
    }
  } else {
    /* istanbul ignore next */
    cov_1vli5znnne().b[40][1]++;
    cov_1vli5znnne().s[145]++;
    // Fallback for environments without crypto.getRandomValues
    for (let i =
    /* istanbul ignore next */
    (cov_1vli5znnne().s[146]++, 0); i < length; i++) {
      /* istanbul ignore next */
      cov_1vli5znnne().s[147]++;
      result += chars[Math.floor(Math.random() * chars.length)];
    }
  }
  /* istanbul ignore next */
  cov_1vli5znnne().s[148]++;
  return result;
};
// Legacy encryption key for backward compatibility
const LEGACY_ENCRYPTION_KEY =
/* istanbul ignore next */
(cov_1vli5znnne().s[149]++, typeof window === 'undefined' ?
/* istanbul ignore next */
(cov_1vli5znnne().b[42][0]++, process.env.ENCRYPTION_KEY) :
/* istanbul ignore next */
(cov_1vli5znnne().b[42][1]++,
/* istanbul ignore next */
(cov_1vli5znnne().b[43][0]++, process.env.NEXT_PUBLIC_ENCRYPTION_KEY) ||
/* istanbul ignore next */
(cov_1vli5znnne().b[43][1]++, 'fallback-client-key')));
/* istanbul ignore next */
cov_1vli5znnne().s[150]++;
const encryptApiKey = async apiKey => {
  /* istanbul ignore next */
  cov_1vli5znnne().f[41]++;
  cov_1vli5znnne().s[151]++;
  try {
    /* istanbul ignore next */
    cov_1vli5znnne().s[152]++;
    // Use advanced encryption for new data
    return await _encryption.advancedEncryption.encryptApiKey(apiKey, {
      encryptedAt: new Date().toISOString(),
      source: 'security_module'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1vli5znnne().s[153]++;
    console.error('Advanced encryption failed, falling back to legacy:', error);
    // Fallback to legacy base64 encoding for compatibility
    /* istanbul ignore next */
    cov_1vli5znnne().s[154]++;
    if (
    /* istanbul ignore next */
    (cov_1vli5znnne().b[45][0]++, typeof crypto !== "undefined") &&
    /* istanbul ignore next */
    (cov_1vli5znnne().b[45][1]++, crypto.subtle)) {
      /* istanbul ignore next */
      cov_1vli5znnne().b[44][0]++;
      cov_1vli5znnne().s[155]++;
      return btoa(apiKey + ":" + LEGACY_ENCRYPTION_KEY);
    } else
    /* istanbul ignore next */
    {
      cov_1vli5znnne().b[44][1]++;
    }
    cov_1vli5znnne().s[156]++;
    return btoa(apiKey);
  }
};
/* istanbul ignore next */
cov_1vli5znnne().s[157]++;
const decryptApiKey = async encryptedApiKey => {
  /* istanbul ignore next */
  cov_1vli5znnne().f[42]++;
  cov_1vli5znnne().s[158]++;
  try {
    /* istanbul ignore next */
    cov_1vli5znnne().s[159]++;
    // Check if it's new format (JSON structure)
    if (_encryption.advancedEncryption.isEncrypted(encryptedApiKey)) {
      /* istanbul ignore next */
      cov_1vli5znnne().b[46][0]++;
      const result =
      /* istanbul ignore next */
      (cov_1vli5znnne().s[160]++, await _encryption.advancedEncryption.decryptApiKey(encryptedApiKey));
      /* istanbul ignore next */
      cov_1vli5znnne().s[161]++;
      return result.apiKey;
    } else
    /* istanbul ignore next */
    {
      cov_1vli5znnne().b[46][1]++;
    }
    // Handle legacy format
    cov_1vli5znnne().s[162]++;
    if (
    /* istanbul ignore next */
    (cov_1vli5znnne().b[48][0]++, typeof crypto !== "undefined") &&
    /* istanbul ignore next */
    (cov_1vli5znnne().b[48][1]++, crypto.subtle)) {
      /* istanbul ignore next */
      cov_1vli5znnne().b[47][0]++;
      cov_1vli5znnne().s[163]++;
      try {
        const decoded =
        /* istanbul ignore next */
        (cov_1vli5znnne().s[164]++, atob(encryptedApiKey));
        const parts =
        /* istanbul ignore next */
        (cov_1vli5znnne().s[165]++, decoded.split(":"));
        /* istanbul ignore next */
        cov_1vli5znnne().s[166]++;
        if (
        /* istanbul ignore next */
        (cov_1vli5znnne().b[50][0]++, parts.length === 2) &&
        /* istanbul ignore next */
        (cov_1vli5znnne().b[50][1]++, parts[1] === LEGACY_ENCRYPTION_KEY)) {
          /* istanbul ignore next */
          cov_1vli5znnne().b[49][0]++;
          cov_1vli5znnne().s[167]++;
          return parts[0];
        } else
        /* istanbul ignore next */
        {
          cov_1vli5znnne().b[49][1]++;
        }
      } catch {
        // Continue to fallback
      }
    } else
    /* istanbul ignore next */
    {
      cov_1vli5znnne().b[47][1]++;
    }
    // Final fallback - simple base64 decode
    cov_1vli5znnne().s[168]++;
    try {
      /* istanbul ignore next */
      cov_1vli5znnne().s[169]++;
      return atob(encryptedApiKey);
    } catch {
      /* istanbul ignore next */
      cov_1vli5znnne().s[170]++;
      return encryptedApiKey // Return as-is if all decoding fails
      ;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1vli5znnne().s[171]++;
    console.error('Decryption failed:', error);
    /* istanbul ignore next */
    cov_1vli5znnne().s[172]++;
    throw new Error('Failed to decrypt API key');
  }
};
/* istanbul ignore next */
cov_1vli5znnne().s[173]++;
const encryptApiKeySync = apiKey => {
  /* istanbul ignore next */
  cov_1vli5znnne().f[43]++;
  cov_1vli5znnne().s[174]++;
  console.warn('⚠️  Using legacy synchronous encryption. Migrate to async encryptApiKey()');
  /* istanbul ignore next */
  cov_1vli5znnne().s[175]++;
  if (
  /* istanbul ignore next */
  (cov_1vli5znnne().b[52][0]++, typeof crypto !== "undefined") &&
  /* istanbul ignore next */
  (cov_1vli5znnne().b[52][1]++, crypto.subtle)) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[51][0]++;
    cov_1vli5znnne().s[176]++;
    return btoa(apiKey + ":" + LEGACY_ENCRYPTION_KEY);
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[51][1]++;
  }
  cov_1vli5znnne().s[177]++;
  return btoa(apiKey);
};
/* istanbul ignore next */
cov_1vli5znnne().s[178]++;
const decryptApiKeySync = encryptedApiKey => {
  /* istanbul ignore next */
  cov_1vli5znnne().f[44]++;
  cov_1vli5znnne().s[179]++;
  console.warn('⚠️  Using legacy synchronous decryption. Migrate to async decryptApiKey()');
  /* istanbul ignore next */
  cov_1vli5znnne().s[180]++;
  if (
  /* istanbul ignore next */
  (cov_1vli5znnne().b[54][0]++, typeof crypto !== "undefined") &&
  /* istanbul ignore next */
  (cov_1vli5znnne().b[54][1]++, crypto.subtle)) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[53][0]++;
    cov_1vli5znnne().s[181]++;
    try {
      const decoded =
      /* istanbul ignore next */
      (cov_1vli5znnne().s[182]++, atob(encryptedApiKey));
      const parts =
      /* istanbul ignore next */
      (cov_1vli5znnne().s[183]++, decoded.split(":"));
      /* istanbul ignore next */
      cov_1vli5znnne().s[184]++;
      if (
      /* istanbul ignore next */
      (cov_1vli5znnne().b[56][0]++, parts.length === 2) &&
      /* istanbul ignore next */
      (cov_1vli5znnne().b[56][1]++, parts[1] === LEGACY_ENCRYPTION_KEY)) {
        /* istanbul ignore next */
        cov_1vli5znnne().b[55][0]++;
        cov_1vli5znnne().s[185]++;
        return parts[0];
      } else
      /* istanbul ignore next */
      {
        cov_1vli5znnne().b[55][1]++;
      }
    } catch {
      // Continue to fallback
    }
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[53][1]++;
  }
  cov_1vli5znnne().s[186]++;
  try {
    /* istanbul ignore next */
    cov_1vli5znnne().s[187]++;
    return atob(encryptedApiKey);
  } catch {
    /* istanbul ignore next */
    cov_1vli5znnne().s[188]++;
    return encryptedApiKey;
  }
};
/* istanbul ignore next */
cov_1vli5znnne().s[189]++;
const getClientIpAddress = async () => {
  /* istanbul ignore next */
  cov_1vli5znnne().f[45]++;
  cov_1vli5znnne().s[190]++;
  try {
    /* istanbul ignore next */
    cov_1vli5znnne().s[191]++;
    // Try to get IP from various sources
    if (typeof window !== "undefined") {
      /* istanbul ignore next */
      cov_1vli5znnne().b[57][0]++;
      // Client-side: use a service to get public IP
      const response =
      /* istanbul ignore next */
      (cov_1vli5znnne().s[192]++, await fetch('https://api.ipify.org?format=json'));
      const data =
      /* istanbul ignore next */
      (cov_1vli5znnne().s[193]++, await response.json());
      /* istanbul ignore next */
      cov_1vli5znnne().s[194]++;
      return /* istanbul ignore next */(cov_1vli5znnne().b[58][0]++, data.ip) ||
      /* istanbul ignore next */
      (cov_1vli5znnne().b[58][1]++, 'unknown');
    } else
    /* istanbul ignore next */
    {
      cov_1vli5znnne().b[57][1]++;
    }
    // Server-side: would get from request headers
    cov_1vli5znnne().s[195]++;
    return 'server-side-ip';
  } catch {
    /* istanbul ignore next */
    cov_1vli5znnne().s[196]++;
    return 'unknown';
  }
};
/* istanbul ignore next */
cov_1vli5znnne().s[197]++;
const validateTrainingContent = content => {
  /* istanbul ignore next */
  cov_1vli5znnne().f[46]++;
  const errors =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[198]++, []);
  /* istanbul ignore next */
  cov_1vli5znnne().s[199]++;
  if (
  /* istanbul ignore next */
  (cov_1vli5znnne().b[60][0]++, !content) ||
  /* istanbul ignore next */
  (cov_1vli5znnne().b[60][1]++, typeof content !== "object") ||
  /* istanbul ignore next */
  (cov_1vli5znnne().b[60][2]++, content === null)) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[59][0]++;
    cov_1vli5znnne().s[200]++;
    errors.push("Content must be a valid object");
    /* istanbul ignore next */
    cov_1vli5znnne().s[201]++;
    return {
      isValid: false,
      errors
    };
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[59][1]++;
  }
  const contentObj =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[202]++, content);
  // Validate required fields
  const requiredFields =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[203]++, ["title", "description", "category"]);
  /* istanbul ignore next */
  cov_1vli5znnne().s[204]++;
  for (const field of requiredFields) {
    /* istanbul ignore next */
    cov_1vli5znnne().s[205]++;
    if (
    /* istanbul ignore next */
    (cov_1vli5znnne().b[62][0]++, !contentObj[field]) ||
    /* istanbul ignore next */
    (cov_1vli5znnne().b[62][1]++, typeof contentObj[field] !== "string")) {
      /* istanbul ignore next */
      cov_1vli5znnne().b[61][0]++;
      cov_1vli5znnne().s[206]++;
      errors.push(`${field} is required and must be a string`);
    } else
    /* istanbul ignore next */
    {
      cov_1vli5znnne().b[61][1]++;
    }
  }
  // Validate title length
  /* istanbul ignore next */
  cov_1vli5znnne().s[207]++;
  if (
  /* istanbul ignore next */
  (cov_1vli5znnne().b[64][0]++, contentObj.title) &&
  /* istanbul ignore next */
  (cov_1vli5znnne().b[64][1]++, typeof contentObj.title === "string") &&
  /* istanbul ignore next */
  (cov_1vli5znnne().b[64][2]++, contentObj.title.length > 100)) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[63][0]++;
    cov_1vli5znnne().s[208]++;
    errors.push("Title must be less than 100 characters");
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[63][1]++;
  }
  // Validate description length
  cov_1vli5znnne().s[209]++;
  if (
  /* istanbul ignore next */
  (cov_1vli5znnne().b[66][0]++, contentObj.description) &&
  /* istanbul ignore next */
  (cov_1vli5znnne().b[66][1]++, typeof contentObj.description === "string") &&
  /* istanbul ignore next */
  (cov_1vli5znnne().b[66][2]++, contentObj.description.length > 1000)) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[65][0]++;
    cov_1vli5znnne().s[210]++;
    errors.push("Description must be less than 1000 characters");
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[65][1]++;
  }
  // Validate category
  const allowedCategories =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[211]++, ["security", "compliance", "technical", "soft-skills", "onboarding"]);
  /* istanbul ignore next */
  cov_1vli5znnne().s[212]++;
  if (
  /* istanbul ignore next */
  (cov_1vli5znnne().b[68][0]++, contentObj.category) &&
  /* istanbul ignore next */
  (cov_1vli5znnne().b[68][1]++, typeof contentObj.category === "string") &&
  /* istanbul ignore next */
  (cov_1vli5znnne().b[68][2]++, !allowedCategories.includes(contentObj.category))) {
    /* istanbul ignore next */
    cov_1vli5znnne().b[67][0]++;
    cov_1vli5znnne().s[213]++;
    errors.push("Invalid category");
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[67][1]++;
  }
  cov_1vli5znnne().s[214]++;
  return {
    isValid: errors.length === 0,
    errors
  };
};
/* istanbul ignore next */
cov_1vli5znnne().s[215]++;
const getSecurityHeaders = () => {
  /* istanbul ignore next */
  cov_1vli5znnne().f[47]++;
  cov_1vli5znnne().s[216]++;
  return {
    "X-Content-Type-Options": "nosniff",
    "X-Frame-Options": "DENY",
    "X-XSS-Protection": "1; mode=block",
    "Referrer-Policy": "strict-origin-when-cross-origin",
    "Permissions-Policy": "camera=(), microphone=(), geolocation=()",
    ...cspHeaders
  };
};
/* istanbul ignore next */
cov_1vli5znnne().s[217]++;
const checkRateLimit = (userId, action) => {
  /* istanbul ignore next */
  cov_1vli5znnne().f[48]++;
  const key =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[218]++, `${userId}:${action}`);
  /* istanbul ignore next */
  cov_1vli5znnne().s[219]++;
  return rateLimiter.isAllowed(key);
};
/* istanbul ignore next */
cov_1vli5znnne().s[220]++;
const logSecurityEvent = event => {
  /* istanbul ignore next */
  cov_1vli5znnne().f[49]++;
  const logEntry =
  /* istanbul ignore next */
  (cov_1vli5znnne().s[221]++, {
    ...event,
    timestamp: new Date().toISOString(),
    sessionId: generateSecureRandomString(16)
  });
  // In a real implementation, this would be sent to a secure logging service
  /* istanbul ignore next */
  cov_1vli5znnne().s[222]++;
  console.log("Security Event:", logEntry);
  // Send to security monitoring service
  /* istanbul ignore next */
  cov_1vli5znnne().s[223]++;
  if (typeof fetch !== "undefined") {
    /* istanbul ignore next */
    cov_1vli5znnne().b[69][0]++;
    cov_1vli5znnne().s[224]++;
    fetch("/api/security/audit", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        ...getSecurityHeaders()
      },
      body: JSON.stringify(logEntry)
    }).catch(error => {
      /* istanbul ignore next */
      cov_1vli5znnne().f[50]++;
      cov_1vli5znnne().s[225]++;
      console.warn("Failed to log security event:", error);
    });
  } else
  /* istanbul ignore next */
  {
    cov_1vli5znnne().b[69][1]++;
  }
};
const securityService =
/* istanbul ignore next */
(cov_1vli5znnne().s[226]++, {
  validateCSRFToken: token => {
    /* istanbul ignore next */
    cov_1vli5znnne().f[51]++;
    cov_1vli5znnne().s[227]++;
    return isValidSessionToken(token);
  },
  validateSession: sessionId => {
    /* istanbul ignore next */
    cov_1vli5znnne().f[52]++;
    cov_1vli5znnne().s[228]++;
    return isValidSessionToken(sessionId);
  },
  sanitizeInput: input => {
    /* istanbul ignore next */
    cov_1vli5znnne().f[53]++;
    cov_1vli5znnne().s[229]++;
    return sanitizeUserInput(input);
  },
  generateCSPHeader: () => {
    /* istanbul ignore next */
    cov_1vli5znnne().f[54]++;
    cov_1vli5znnne().s[230]++;
    return cspHeaders["Content-Security-Policy"];
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,