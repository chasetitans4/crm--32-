{"version":3,"names":["SecurityMiddleware","cov_2oxqfgjyto","f","s","securityMiddleware","constructor","config","b","requestCounts","Map","enableCSRF","enableRateLimit","enableInputSanitization","enableSessionValidation","enableAuditLogging","maxRequestsPerMinute","sessionTimeoutMinutes","validateRequest","context","requestData","csrfToken","results","rateLimitResult","checkRateLimit","allowed","push","csrfResult","validateCSRF","sessionId","sessionResult","validateSession","sanitizationResult","sanitizeInput","logSecurityEvent","checks","map","r","reason","action","metadata","key","ipAddress","userId","now","Date","windowStart","current","get","resetTime","set","count","limit","token","isValid","_security","securityService","validateCSRFToken","data","sanitized","JSON","stringify","hasChanges","undefined","error","Error","message","event","_auditLogService","auditLogService","log","resource","details","userAgent","severity","category","success","console","getSecurityHeaders","generateCSPHeader","cleanup","keysToDelete","forEach","value","delete","getMetrics","activeRateLimits","size","timestamp","toISOString","setInterval"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\middleware\\securityMiddleware.ts"],"sourcesContent":["import { securityService } from \"../utils/security\"\nimport { auditLogService } from \"../services/auditLogService\"\n\nexport interface SecurityMiddlewareConfig {\n  enableCSRF: boolean\n  enableRateLimit: boolean\n  enableInputSanitization: boolean\n  enableSessionValidation: boolean\n  enableAuditLogging: boolean\n  maxRequestsPerMinute: number\n  sessionTimeoutMinutes: number\n}\n\nexport interface SecurityContext {\n  userId?: string\n  userRole?: string\n  sessionId?: string\n  ipAddress?: string\n  userAgent?: string\n  timestamp: Date\n}\n\nexport interface SecurityResult {\n  allowed: boolean\n  reason?: string\n  action?: \"block\" | \"warn\" | \"log\"\n  metadata?: Record<string, any>\n}\n\nexport class SecurityMiddleware {\n  private config: SecurityMiddlewareConfig\n  private requestCounts: Map<string, { count: number; resetTime: number }> = new Map()\n\n  constructor(config: Partial<SecurityMiddlewareConfig> = {}) {\n    this.config = {\n      enableCSRF: true,\n      enableRateLimit: true,\n      enableInputSanitization: true,\n      enableSessionValidation: true,\n      enableAuditLogging: true,\n      maxRequestsPerMinute: 60,\n      sessionTimeoutMinutes: 30,\n      ...config,\n    }\n  }\n\n  async validateRequest(context: SecurityContext, requestData?: Record<string, unknown>, csrfToken?: string): Promise<SecurityResult> {\n    const results: SecurityResult[] = []\n\n    // Rate limiting check\n    if (this.config.enableRateLimit) {\n      const rateLimitResult = this.checkRateLimit(context)\n      if (!rateLimitResult.allowed) {\n        return rateLimitResult\n      }\n      results.push(rateLimitResult)\n    }\n\n    // CSRF token validation\n    if (this.config.enableCSRF && csrfToken) {\n      const csrfResult = await this.validateCSRF(csrfToken, context)\n      if (!csrfResult.allowed) {\n        return csrfResult\n      }\n      results.push(csrfResult)\n    }\n\n    // Session validation\n    if (this.config.enableSessionValidation && context.sessionId) {\n      const sessionResult = await this.validateSession(context)\n      if (!sessionResult.allowed) {\n        return sessionResult\n      }\n      results.push(sessionResult)\n    }\n\n    // Input sanitization\n    if (this.config.enableInputSanitization && requestData) {\n      const sanitizationResult = this.sanitizeInput(requestData)\n      results.push(sanitizationResult)\n    }\n\n    // Audit logging\n    if (this.config.enableAuditLogging) {\n      await this.logSecurityEvent(context, \"request_validated\", {\n        checks: results.map((r) => ({ allowed: r.allowed, reason: r.reason })),\n      })\n    }\n\n    return {\n      allowed: true,\n      action: \"log\",\n      metadata: { checks: results },\n    }\n  }\n\n  private checkRateLimit(context: SecurityContext): SecurityResult {\n    const key = context.ipAddress || context.userId || \"anonymous\"\n    const now = Date.now()\n    const windowStart = now - 60 * 1000 // 1 minute window\n\n    const current = this.requestCounts.get(key)\n    if (!current || current.resetTime < now) {\n      this.requestCounts.set(key, { count: 1, resetTime: now + 60 * 1000 })\n      return { allowed: true, action: \"log\" }\n    }\n\n    if (current.count >= this.config.maxRequestsPerMinute) {\n      return {\n        allowed: false,\n        reason: \"Rate limit exceeded\",\n        action: \"block\",\n        metadata: { limit: this.config.maxRequestsPerMinute, current: current.count },\n      }\n    }\n\n    current.count++\n    return { allowed: true, action: \"log\" }\n  }\n\n  private async validateCSRF(token: string, context: SecurityContext): Promise<SecurityResult> {\n    const isValid = securityService.validateCSRFToken(token)\n\n    if (!isValid) {\n      await this.logSecurityEvent(context, \"csrf_validation_failed\", { token })\n      return {\n        allowed: false,\n        reason: \"Invalid CSRF token\",\n        action: \"block\",\n      }\n    }\n\n    return { allowed: true, action: \"log\" }\n  }\n\n  private async validateSession(context: SecurityContext): Promise<SecurityResult> {\n    if (!context.sessionId) {\n      return {\n        allowed: false,\n        reason: \"No session ID provided\",\n        action: \"block\",\n      }\n    }\n\n    const isValid = securityService.validateSession(context.sessionId)\n\n    if (!isValid) {\n      await this.logSecurityEvent(context, \"session_validation_failed\", {\n        sessionId: context.sessionId,\n      })\n      return {\n        allowed: false,\n        reason: \"Invalid or expired session\",\n        action: \"block\",\n      }\n    }\n\n    return { allowed: true, action: \"log\" }\n  }\n\n  private sanitizeInput(data: Record<string, unknown>): SecurityResult {\n    try {\n      const sanitized = securityService.sanitizeInput(JSON.stringify(data))\n      const hasChanges = sanitized !== JSON.stringify(data)\n\n      return {\n        allowed: true,\n        action: hasChanges ? \"warn\" : \"log\",\n        reason: hasChanges ? \"Input was sanitized\" : undefined,\n        metadata: { sanitized: hasChanges },\n      }\n    } catch (error) {\n      return {\n        allowed: false,\n        reason: \"Input sanitization failed\",\n        action: \"block\",\n        metadata: { error: error instanceof Error ? error.message : \"Unknown error\" },\n      }\n    }\n  }\n\n  private async logSecurityEvent(\n    context: SecurityContext,\n    event: string,\n    metadata: Record<string, unknown>,\n  ): Promise<void> {\n    try {\n      await auditLogService.log({\n        userId: context.userId || \"anonymous\",\n        action: `security.${event}`,\n        resource: \"security_middleware\",\n        details: {\n          ...metadata,\n          ipAddress: context.ipAddress,\n          userAgent: context.userAgent,\n          sessionId: context.sessionId,\n        },\n        severity: (metadata.severity as \"low\" | \"medium\" | \"high\" | \"critical\") || \"low\",\n        category: \"security\",\n        success: true,\n      })\n    } catch (error) {\n      console.error(\"Failed to log security event:\", error)\n    }\n  }\n\n  // Security headers for HTTP responses\n  getSecurityHeaders(): Record<string, string> {\n    return {\n      \"X-Content-Type-Options\": \"nosniff\",\n      \"X-Frame-Options\": \"DENY\",\n      \"X-XSS-Protection\": \"1; mode=block\",\n      \"Strict-Transport-Security\": \"max-age=31536000; includeSubDomains\",\n      \"Referrer-Policy\": \"strict-origin-when-cross-origin\",\n      \"Content-Security-Policy\": securityService.generateCSPHeader(),\n      \"Permissions-Policy\": \"camera=(), microphone=(), geolocation=()\",\n    }\n  }\n\n  // Clean up expired rate limit entries\n  cleanup(): void {\n    const now = Date.now()\n    const keysToDelete: string[] = []\n    this.requestCounts.forEach((value, key) => {\n      if (value.resetTime < now) {\n        keysToDelete.push(key)\n      }\n    })\n    keysToDelete.forEach(key => this.requestCounts.delete(key))\n  }\n\n  // Get security metrics\n  getMetrics(): Record<string, any> {\n    return {\n      activeRateLimits: this.requestCounts.size,\n      config: this.config,\n      timestamp: new Date().toISOString(),\n    }\n  }\n}\n\n// Export singleton instance\nexport const securityMiddleware = new SecurityMiddleware()\n\n// Auto-cleanup every 5 minutes\nsetInterval(\n  () => {\n    securityMiddleware.cleanup()\n  },\n  5 * 60 * 1000,\n)\n"],"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","ignoreList":[]}