{"version":3,"names":["cov_puedg6w3b","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","version","sources","sourcesContent","names","mappings","_coverageSchema","coverage","actualCoverage","formatTestRunReport","isTestRunSuccessful","runTests","testCases","Promise","resolve","results","passedCount","failedCount","skippedCount","totalDuration","forEach","testName","duration","Math","floor","random","randomStatus","status","errorMessage","push","report","totalTests","length","passedTests","failedTests","skippedTests","Number","parseFloat","toFixed","timestamp","Date","toISOString","setTimeout","summary","toLocaleString","result","index","toUpperCase"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\testRunner.ts"],"sourcesContent":["// src/utils/testRunner.ts\n\n/**\n * This utility file provides functions for simulating and managing test runs.\n * In a real application, this would integrate with a testing framework like Jest or React Testing Library.\n */\n\n/**\n * Represents the result of a single test case.\n */\nexport interface TestCaseResult {\n  name: string\n  status: \"passed\" | \"failed\" | \"skipped\"\n  duration: number // in milliseconds\n  errorMessage?: string\n}\n\n/**\n * Represents the overall report of a test run.\n */\nexport interface TestRunReport {\n  totalTests: number\n  passedTests: number\n  failedTests: number\n  skippedTests: number\n  totalDuration: number // in milliseconds\n  results: TestCaseResult[]\n  timestamp: string\n}\n\n/**\n * Simulates running a set of test cases.\n * @param testCases An array of test case names to simulate.\n * @returns A promise that resolves with a TestRunReport.\n */\nexport async function runTests(testCases: string[]): Promise<TestRunReport> {\n  return new Promise((resolve) => {\n    const results: TestCaseResult[] = []\n    let passedCount = 0\n    let failedCount = 0\n    let skippedCount = 0\n    let totalDuration = 0\n\n    testCases.forEach((testName) => {\n      const duration = Math.floor(Math.random() * 100) + 10 // 10-110ms\n      totalDuration += duration\n\n      const randomStatus = Math.random()\n      let status: TestCaseResult[\"status\"]\n      let errorMessage: string | undefined\n\n      if (randomStatus < 0.8) {\n        // 80% pass rate\n        status = \"passed\"\n        passedCount++\n      } else if (randomStatus < 0.95) {\n        // 15% fail rate\n        status = \"failed\"\n        failedCount++\n        errorMessage = `Assertion failed for ${testName}: Expected true to be false.`\n      } else {\n        // 5% skip rate\n        status = \"skipped\"\n        skippedCount++\n      }\n\n      results.push({\n        name: testName,\n        status,\n        duration,\n        errorMessage,\n      })\n    })\n\n    const report: TestRunReport = {\n      totalTests: testCases.length,\n      passedTests: passedCount,\n      failedTests: failedCount,\n      skippedTests: skippedCount,\n      totalDuration: Number.parseFloat(totalDuration.toFixed(2)),\n      results: results,\n      timestamp: new Date().toISOString(),\n    }\n\n    setTimeout(() => resolve(report), 1000) // Simulate test run duration\n  })\n}\n\n/**\n * Formats a test run report into a human-readable string.\n * @param report The TestRunReport to format.\n * @returns A formatted string summary of the test run.\n */\nexport function formatTestRunReport(report: TestRunReport): string {\n  let summary = `Test Run Report (Generated: ${new Date(report.timestamp).toLocaleString()}):\\n`\n  summary += `Total Tests: ${report.totalTests}\\n`\n  summary += `Passed: ${report.passedTests}\\n`\n  summary += `Failed: ${report.failedTests}\\n`\n  summary += `Skipped: ${report.skippedTests}\\n`\n  summary += `Total Duration: ${report.totalDuration}ms\\n\\n`\n\n  if (report.results.length > 0) {\n    summary += \"Individual Test Results:\\n\"\n    report.results.forEach((result, index) => {\n      summary += `${index + 1}. [${result.status.toUpperCase()}] ${result.name} (${result.duration}ms)`\n      if (result.errorMessage) {\n        summary += ` - Error: ${result.errorMessage}`\n      }\n      summary += \"\\n\"\n    })\n  } else {\n    summary += \"No test results to display.\\n\"\n  }\n  return summary\n}\n\n/**\n * Determines if a test run was successful (all tests passed).\n * @param report The TestRunReport to check.\n * @returns True if all tests passed, false otherwise.\n */\nexport function isTestRunSuccessful(report: TestRunReport): boolean {\n  return report.failedTests === 0 && report.totalTests > 0\n}\n"],"mappings":"AAAA;AAEA;;;GAAA,CAKA;;MAEC;;AAAA;AAAA,SAAAA,cAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MA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","ignoreList":[]}