{"version":3,"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\tests\\components\\Button.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '../utils/testUtils';\nimport { Button } from '@/components/ui/Button';\n\ndescribe('Button Component', () => {\n  it('renders with default props', () => {\n    render(<Button>Click me</Button>);\n    \n    const button = screen.getByRole('button', { name: /click me/i });\n    expect(button).toBeInTheDocument();\n    expect(button).toHaveClass('inline-flex');\n  });\n\n  it('renders with different variants', () => {\n    const { rerender } = render(<Button variant=\"default\">Default</Button>);\n    \n    let button = screen.getByRole('button');\n    expect(button).toHaveClass('bg-primary');\n\n    rerender(<Button variant=\"secondary\">Secondary</Button>);\n    button = screen.getByRole('button');\n    expect(button).toHaveClass('bg-secondary');\n\n    rerender(<Button variant=\"destructive\">Destructive</Button>);\n    button = screen.getByRole('button');\n    expect(button).toHaveClass('bg-destructive');\n  });\n\n  it('renders with different sizes', () => {\n    const { rerender } = render(<Button size=\"sm\">Small</Button>);\n    \n    let button = screen.getByRole('button');\n    expect(button).toHaveClass('h-9');\n\n    rerender(<Button size=\"lg\">Large</Button>);\n    button = screen.getByRole('button');\n    expect(button).toHaveClass('h-11');\n  });\n\n  it('handles click events', () => {\n    const handleClick = jest.fn();\n    render(<Button onClick={handleClick}>Click me</Button>);\n    \n    const button = screen.getByRole('button');\n    fireEvent.click(button);\n    \n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n\n  // Loading state test removed - not implemented in current Button component\n\n  it('can be disabled', () => {\n    const handleClick = jest.fn();\n    render(\n      <Button disabled onClick={handleClick}>\n        Disabled\n      </Button>\n    );\n    \n    const button = screen.getByRole('button');\n    expect(button).toBeDisabled();\n    \n    fireEvent.click(button);\n    expect(handleClick).not.toHaveBeenCalled();\n  });\n\n  // Polymorphic component test removed - 'as' prop not implemented in current Button component\n\n  it('forwards refs correctly', () => {\n    const ref = React.createRef<HTMLButtonElement>();\n    render(<Button ref={ref}>Button</Button>);\n    \n    expect(ref.current).toBeInstanceOf(HTMLButtonElement);\n    expect(ref.current).toHaveTextContent('Button');\n  });\n\n  it('supports keyboard navigation', async () => {\n    const handleClick = jest.fn();\n    render(<Button onClick={handleClick}>Button</Button>);\n    \n    const button = screen.getByRole('button');\n    \n    // Test Enter key\n    fireEvent.keyDown(button, { key: 'Enter' });\n    expect(handleClick).toHaveBeenCalledTimes(1);\n    \n    // Test Space key\n    fireEvent.keyDown(button, { key: ' ' });\n    expect(handleClick).toHaveBeenCalledTimes(2);\n  });\n\n  it('has proper ARIA attributes', () => {\n    render(\n      <Button\n        aria-label=\"Custom label\"\n        aria-describedby=\"description\"\n        disabled\n      >\n        Button\n      </Button>\n    );\n    \n    const button = screen.getByRole('button');\n    expect(button).toHaveAttribute('aria-label', 'Custom label');\n    expect(button).toHaveAttribute('aria-describedby', 'description');\n    expect(button).toHaveAttribute('aria-disabled', 'true');\n  });\n\n  it('renders with children content', () => {\n    render(\n      <Button>\n        <span data-testid=\"icon\">ðŸ”¥</span>\n        With Content\n      </Button>\n    );\n    \n    expect(screen.getByTestId('icon')).toBeInTheDocument();\n    expect(screen.getByText('With Content')).toBeInTheDocument();\n  });\n\n  it('handles async operations', async () => {\n    const asyncHandler = jest.fn().mockResolvedValue('success');\n    \n    render(<Button onClick={asyncHandler}>Async Button</Button>);\n    \n    const button = screen.getByRole('button');\n    fireEvent.click(button);\n    \n    await waitFor(() => {\n      expect(asyncHandler).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  it('prevents double clicks when loading', () => {\n    const handleClick = jest.fn();\n    const { rerender } = render(\n      <Button onClick={handleClick}>Button</Button>\n    );\n    \n    const button = screen.getByRole('button');\n    \n    // First click\n    fireEvent.click(button);\n    expect(handleClick).toHaveBeenCalledTimes(1);\n    \n    // Set loading state\n    rerender(<Button loading onClick={handleClick}>Button</Button>);\n    \n    // Second click should be ignored\n    fireEvent.click(button);\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n\n  it('applies custom className', () => {\n    render(<Button className=\"custom-class\">Button</Button>);\n    \n    const button = screen.getByRole('button');\n    expect(button).toHaveClass('btn', 'custom-class');\n  });\n\n  it('spreads additional props', () => {\n    render(\n      <Button\n        data-testid=\"custom-button\"\n        title=\"Custom title\"\n        tabIndex={-1}\n      >\n        Button\n      </Button>\n    );\n    \n    const button = screen.getByTestId('custom-button');\n    expect(button).toHaveAttribute('title', 'Custom title');\n    expect(button).toHaveAttribute('tabIndex', '-1');\n  });\n});\n\n// Performance tests\ndescribe('Button Performance', () => {\n  it('renders quickly', async () => {\n    const { measureRenderTime } = await import('../utils/testUtils');\n    \n    const renderTime = await measureRenderTime.performanceHelpers.measureRenderTime(() => {\n      render(<Button>Performance Test</Button>);\n    });\n    \n    // Should render in less than 100ms\n    expect(renderTime).toBeLessThan(100);\n  });\n\n  it('does not cause memory leaks', () => {\n    const { checkMemoryLeaks } = performanceHelpers;\n    const memoryCheck = checkMemoryLeaks();\n    \n    const { unmount } = render(<Button>Memory Test</Button>);\n    unmount();\n    \n    const memoryDiff = memoryCheck.getMemoryDiff();\n    // Memory difference should be minimal\n    expect(Math.abs(memoryDiff)).toBeLessThan(1000000); // 1MB threshold\n  });\n});\n\n// Accessibility tests\ndescribe('Button Accessibility', () => {\n  it('meets accessibility standards', async () => {\n    const { a11yHelpers } = await import('../utils/testUtils');\n    \n    render(<Button>Accessible Button</Button>);\n    \n    const button = screen.getByRole('button');\n    \n    // Check ARIA attributes\n    const ariaAttributes = a11yHelpers.checkAriaAttributes(button);\n    expect(Object.keys(ariaAttributes).length).toBeGreaterThanOrEqual(0);\n    \n    // Check keyboard navigation\n    const keyboardResults = await a11yHelpers.checkKeyboardNavigation(button);\n    expect(keyboardResults.canFocus).toBe(true);\n    \n    // Check color contrast\n    const contrastResults = a11yHelpers.checkColorContrast(button);\n    expect(contrastResults.hasGoodContrast).toBe(true);\n  });\n\n  it('supports screen readers', () => {\n    render(\n      <Button aria-label=\"Save document\" aria-describedby=\"save-help\">\n        Save\n      </Button>\n    );\n    \n    const button = screen.getByRole('button', { name: /save document/i });\n    expect(button).toBeInTheDocument();\n    expect(button).toHaveAttribute('aria-describedby', 'save-help');\n  });\n\n  it('has proper focus management', () => {\n    render(<Button autoFocus>Auto Focus Button</Button>);\n    \n    const button = screen.getByRole('button');\n    expect(document.activeElement).toBe(button);\n  });\n});"],"names":["describe","it","render","Button","button","screen","getByRole","name","expect","toBeInTheDocument","toHaveClass","rerender","variant","size","handleClick","jest","fn","onClick","fireEvent","click","toHaveBeenCalledTimes","disabled","toBeDisabled","not","toHaveBeenCalled","ref","React","createRef","current","toBeInstanceOf","HTMLButtonElement","toHaveTextContent","keyDown","key","aria-label","aria-describedby","toHaveAttribute","span","data-testid","getByTestId","getByText","asyncHandler","mockResolvedValue","waitFor","loading","className","title","tabIndex","measureRenderTime","renderTime","performanceHelpers","toBeLessThan","checkMemoryLeaks","memoryCheck","unmount","memoryDiff","getMemoryDiff","Math","abs","a11yHelpers","ariaAttributes","checkAriaAttributes","Object","keys","length","toBeGreaterThanOrEqual","keyboardResults","checkKeyboardNavigation","canFocus","toBe","contrastResults","checkColorContrast","hasGoodContrast","autoFocus","document","activeElement"],"mappings":"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"}