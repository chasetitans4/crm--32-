d7ce2d6b4b6476e364695d8930eb7a43
"use strict";

/* istanbul ignore next */
function cov_2da5pni0dr() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\secureStorage.ts";
  var hash = "388d6f2aa5bdab47266f42ce9c7a9270f295c7a8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\secureStorage.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 48,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 29
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 29
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 37
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 29
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 37
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 43
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 32
        }
      },
      "11": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 29
        }
      },
      "12": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 29
        }
      },
      "13": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 37
        }
      },
      "14": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 29
        }
      },
      "15": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 37
        }
      },
      "16": {
        start: {
          line: 49,
          column: 18
        },
        end: {
          line: 49,
          column: 39
        }
      },
      "17": {
        start: {
          line: 50,
          column: 20
        },
        end: {
          line: 50,
          column: 43
        }
      },
      "18": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "19": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "20": {
        start: {
          line: 60,
          column: 39
        },
        end: {
          line: 60,
          column: 78
        }
      },
      "21": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 58
        }
      },
      "22": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 49
        }
      },
      "23": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 67
        }
      },
      "24": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 69
        }
      },
      "25": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "26": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 80,
          column: 13
        }
      },
      "27": {
        start: {
          line: 76,
          column: 39
        },
        end: {
          line: 76,
          column: 90
        }
      },
      "28": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 58
        }
      },
      "29": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 49
        }
      },
      "30": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 76
        }
      },
      "31": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 78
        }
      },
      "32": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "33": {
        start: {
          line: 90,
          column: 26
        },
        end: {
          line: 90,
          column: 51
        }
      },
      "34": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 44
        }
      },
      "35": {
        start: {
          line: 91,
          column: 32
        },
        end: {
          line: 91,
          column: 44
        }
      },
      "36": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 96,
          column: 13
        }
      },
      "37": {
        start: {
          line: 93,
          column: 16
        },
        end: {
          line: 93,
          column: 63
        }
      },
      "38": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 95,
          column: 29
        }
      },
      "39": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 70
        }
      },
      "40": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 24
        }
      },
      "41": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "42": {
        start: {
          line: 108,
          column: 26
        },
        end: {
          line: 108,
          column: 51
        }
      },
      "43": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 44
        }
      },
      "44": {
        start: {
          line: 109,
          column: 32
        },
        end: {
          line: 109,
          column: 44
        }
      },
      "45": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "46": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 117,
          column: 17
        }
      },
      "47": {
        start: {
          line: 113,
          column: 20
        },
        end: {
          line: 113,
          column: 79
        }
      },
      "48": {
        start: {
          line: 116,
          column: 20
        },
        end: {
          line: 116,
          column: 67
        }
      },
      "49": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 29
        }
      },
      "50": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 79
        }
      },
      "51": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 24
        }
      },
      "52": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "53": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 41
        }
      },
      "54": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 68
        }
      },
      "55": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "56": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 33
        }
      },
      "57": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 61
        }
      },
      "58": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "59": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 45
        }
      },
      "60": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 64
        }
      },
      "61": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 22
        }
      },
      "62": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 175
        }
      },
      "63": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 36
        }
      },
      "64": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 39
        }
      },
      "65": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "66": {
        start: {
          line: 173,
          column: 31
        },
        end: {
          line: 173,
          column: 52
        }
      },
      "67": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 42
        }
      },
      "68": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 75
        }
      },
      "69": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 82
        }
      },
      "70": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "71": {
        start: {
          line: 184,
          column: 26
        },
        end: {
          line: 184,
          column: 43
        }
      },
      "72": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 44
        }
      },
      "73": {
        start: {
          line: 185,
          column: 32
        },
        end: {
          line: 185,
          column: 44
        }
      },
      "74": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 37
        }
      },
      "75": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 78
        }
      },
      "76": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 24
        }
      },
      "77": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "78": {
        start: {
          line: 196,
          column: 25
        },
        end: {
          line: 196,
          column: 42
        }
      },
      "79": {
        start: {
          line: 197,
          column: 34
        },
        end: {
          line: 197,
          column: 36
        }
      },
      "80": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 209,
          column: 15
        }
      },
      "81": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 208,
          column: 17
        }
      },
      "82": {
        start: {
          line: 201,
          column: 34
        },
        end: {
          line: 201,
          column: 59
        }
      },
      "83": {
        start: {
          line: 202,
          column: 20
        },
        end: {
          line: 207,
          column: 21
        }
      },
      "84": {
        start: {
          line: 203,
          column: 24
        },
        end: {
          line: 206,
          column: 27
        }
      },
      "85": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 231,
          column: 13
        }
      },
      "86": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 230,
          column: 17
        }
      },
      "87": {
        start: {
          line: 214,
          column: 20
        },
        end: {
          line: 216,
          column: 21
        }
      },
      "88": {
        start: {
          line: 215,
          column: 24
        },
        end: {
          line: 215,
          column: 33
        }
      },
      "89": {
        start: {
          line: 219,
          column: 20
        },
        end: {
          line: 224,
          column: 21
        }
      },
      "90": {
        start: {
          line: 220,
          column: 24
        },
        end: {
          line: 220,
          column: 76
        }
      },
      "91": {
        start: {
          line: 223,
          column: 24
        },
        end: {
          line: 223,
          column: 42
        }
      },
      "92": {
        start: {
          line: 226,
          column: 43
        },
        end: {
          line: 226,
          column: 98
        }
      },
      "93": {
        start: {
          line: 227,
          column: 20
        },
        end: {
          line: 227,
          column: 62
        }
      },
      "94": {
        start: {
          line: 229,
          column: 20
        },
        end: {
          line: 229,
          column: 76
        }
      },
      "95": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 232,
          column: 101
        }
      },
      "96": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 78
        }
      },
      "97": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 270,
          column: 9
        }
      },
      "98": {
        start: {
          line: 241,
          column: 25
        },
        end: {
          line: 241,
          column: 42
        }
      },
      "99": {
        start: {
          line: 242,
          column: 34
        },
        end: {
          line: 242,
          column: 36
        }
      },
      "100": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 254,
          column: 15
        }
      },
      "101": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 253,
          column: 17
        }
      },
      "102": {
        start: {
          line: 246,
          column: 34
        },
        end: {
          line: 246,
          column: 59
        }
      },
      "103": {
        start: {
          line: 247,
          column: 20
        },
        end: {
          line: 252,
          column: 21
        }
      },
      "104": {
        start: {
          line: 248,
          column: 24
        },
        end: {
          line: 251,
          column: 27
        }
      },
      "105": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 266,
          column: 15
        }
      },
      "106": {
        start: {
          line: 257,
          column: 16
        },
        end: {
          line: 265,
          column: 17
        }
      },
      "107": {
        start: {
          line: 259,
          column: 20
        },
        end: {
          line: 259,
          column: 60
        }
      },
      "108": {
        start: {
          line: 263,
          column: 43
        },
        end: {
          line: 263,
          column: 82
        }
      },
      "109": {
        start: {
          line: 264,
          column: 20
        },
        end: {
          line: 264,
          column: 62
        }
      },
      "110": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 94
        }
      },
      "111": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 69
        }
      },
      "112": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 281,
          column: 9
        }
      },
      "113": {
        start: {
          line: 276,
          column: 31
        },
        end: {
          line: 276,
          column: 52
        }
      },
      "114": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 277,
          column: 54
        }
      },
      "115": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 76
        }
      },
      "116": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 74
        }
      },
      "117": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 293,
          column: 9
        }
      },
      "118": {
        start: {
          line: 287,
          column: 31
        },
        end: {
          line: 287,
          column: 60
        }
      },
      "119": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 288,
          column: 49
        }
      },
      "120": {
        start: {
          line: 288,
          column: 37
        },
        end: {
          line: 288,
          column: 49
        }
      },
      "121": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 42
        }
      },
      "122": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 79
        }
      },
      "123": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 292,
          column: 24
        }
      },
      "124": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 304,
          column: 11
        }
      },
      "125": {
        start: {
          line: 307,
          column: 22
        },
        end: {
          line: 307,
          column: 41
        }
      },
      "126": {
        start: {
          line: 308,
          column: 22
        },
        end: {
          line: 308,
          column: 69
        }
      },
      "127": {
        start: {
          line: 308,
          column: 36
        },
        end: {
          line: 308,
          column: 69
        }
      },
      "128": {
        start: {
          line: 309,
          column: 22
        },
        end: {
          line: 309,
          column: 55
        }
      },
      "129": {
        start: {
          line: 309,
          column: 29
        },
        end: {
          line: 309,
          column: 55
        }
      },
      "130": {
        start: {
          line: 310,
          column: 25
        },
        end: {
          line: 310,
          column: 61
        }
      },
      "131": {
        start: {
          line: 310,
          column: 32
        },
        end: {
          line: 310,
          column: 61
        }
      },
      "132": {
        start: {
          line: 311,
          column: 22
        },
        end: {
          line: 311,
          column: 69
        }
      },
      "133": {
        start: {
          line: 311,
          column: 36
        },
        end: {
          line: 311,
          column: 69
        }
      },
      "134": {
        start: {
          line: 312,
          column: 22
        },
        end: {
          line: 312,
          column: 55
        }
      },
      "135": {
        start: {
          line: 312,
          column: 29
        },
        end: {
          line: 312,
          column: 55
        }
      },
      "136": {
        start: {
          line: 314,
          column: 4
        },
        end: {
          line: 314,
          column: 57
        }
      },
      "137": {
        start: {
          line: 317,
          column: 4
        },
        end: {
          line: 317,
          column: 50
        }
      },
      "138": {
        start: {
          line: 320,
          column: 4
        },
        end: {
          line: 320,
          column: 57
        }
      },
      "139": {
        start: {
          line: 323,
          column: 4
        },
        end: {
          line: 323,
          column: 50
        }
      },
      "140": {
        start: {
          line: 326,
          column: 4
        },
        end: {
          line: 326,
          column: 61
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 25
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 25
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 33
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 25
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 33
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 39
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 28
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 30
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 25
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 25
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 36
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 33
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 39
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 25
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 42
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 33
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 45
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 57,
            column: 6
          },
          end: {
            line: 57,
            column: 7
          }
        },
        loc: {
          start: {
            line: 57,
            column: 26
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 57
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 73,
            column: 6
          },
          end: {
            line: 73,
            column: 7
          }
        },
        loc: {
          start: {
            line: 73,
            column: 38
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 73
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 88,
            column: 6
          },
          end: {
            line: 88,
            column: 7
          }
        },
        loc: {
          start: {
            line: 88,
            column: 19
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 88
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 106,
            column: 6
          },
          end: {
            line: 106,
            column: 7
          }
        },
        loc: {
          start: {
            line: 106,
            column: 31
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 106
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 128,
            column: 6
          },
          end: {
            line: 128,
            column: 7
          }
        },
        loc: {
          start: {
            line: 128,
            column: 22
          },
          end: {
            line: 134,
            column: 5
          }
        },
        line: 128
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 137,
            column: 6
          },
          end: {
            line: 137,
            column: 7
          }
        },
        loc: {
          start: {
            line: 137,
            column: 14
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 137
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 146,
            column: 6
          },
          end: {
            line: 146,
            column: 7
          }
        },
        loc: {
          start: {
            line: 146,
            column: 19
          },
          end: {
            line: 153,
            column: 5
          }
        },
        line: 146
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 156,
            column: 6
          },
          end: {
            line: 156,
            column: 7
          }
        },
        loc: {
          start: {
            line: 156,
            column: 26
          },
          end: {
            line: 158,
            column: 5
          }
        },
        line: 156
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 161,
            column: 6
          },
          end: {
            line: 161,
            column: 7
          }
        },
        loc: {
          start: {
            line: 161,
            column: 27
          },
          end: {
            line: 163,
            column: 5
          }
        },
        line: 161
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 166,
            column: 6
          },
          end: {
            line: 166,
            column: 7
          }
        },
        loc: {
          start: {
            line: 166,
            column: 30
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 166
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 171,
            column: 6
          },
          end: {
            line: 171,
            column: 7
          }
        },
        loc: {
          start: {
            line: 171,
            column: 26
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 171
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 182,
            column: 6
          },
          end: {
            line: 182,
            column: 7
          }
        },
        loc: {
          start: {
            line: 182,
            column: 19
          },
          end: {
            line: 191,
            column: 5
          }
        },
        line: 182
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 194,
            column: 6
          },
          end: {
            line: 194,
            column: 7
          }
        },
        loc: {
          start: {
            line: 194,
            column: 42
          },
          end: {
            line: 236,
            column: 5
          }
        },
        line: 194
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 199,
            column: 25
          },
          end: {
            line: 199,
            column: 26
          }
        },
        loc: {
          start: {
            line: 199,
            column: 32
          },
          end: {
            line: 209,
            column: 13
          }
        },
        line: 199
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 239,
            column: 6
          },
          end: {
            line: 239,
            column: 7
          }
        },
        loc: {
          start: {
            line: 239,
            column: 28
          },
          end: {
            line: 271,
            column: 5
          }
        },
        line: 239
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 244,
            column: 25
          },
          end: {
            line: 244,
            column: 26
          }
        },
        loc: {
          start: {
            line: 244,
            column: 32
          },
          end: {
            line: 254,
            column: 13
          }
        },
        line: 244
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 256,
            column: 34
          },
          end: {
            line: 256,
            column: 35
          }
        },
        loc: {
          start: {
            line: 256,
            column: 52
          },
          end: {
            line: 266,
            column: 13
          }
        },
        line: 256
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 274,
            column: 6
          },
          end: {
            line: 274,
            column: 7
          }
        },
        loc: {
          start: {
            line: 274,
            column: 38
          },
          end: {
            line: 282,
            column: 5
          }
        },
        line: 274
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 285,
            column: 6
          },
          end: {
            line: 285,
            column: 7
          }
        },
        loc: {
          start: {
            line: 285,
            column: 31
          },
          end: {
            line: 294,
            column: 5
          }
        },
        line: 285
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 295,
            column: 4
          },
          end: {
            line: 295,
            column: 5
          }
        },
        loc: {
          start: {
            line: 295,
            column: 17
          },
          end: {
            line: 305,
            column: 5
          }
        },
        line: 295
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 308,
            column: 22
          },
          end: {
            line: 308,
            column: 23
          }
        },
        loc: {
          start: {
            line: 308,
            column: 36
          },
          end: {
            line: 308,
            column: 69
          }
        },
        line: 308
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 309,
            column: 22
          },
          end: {
            line: 309,
            column: 23
          }
        },
        loc: {
          start: {
            line: 309,
            column: 29
          },
          end: {
            line: 309,
            column: 55
          }
        },
        line: 309
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 310,
            column: 25
          },
          end: {
            line: 310,
            column: 26
          }
        },
        loc: {
          start: {
            line: 310,
            column: 32
          },
          end: {
            line: 310,
            column: 61
          }
        },
        line: 310
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 311,
            column: 22
          },
          end: {
            line: 311,
            column: 23
          }
        },
        loc: {
          start: {
            line: 311,
            column: 36
          },
          end: {
            line: 311,
            column: 69
          }
        },
        line: 311
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 312,
            column: 22
          },
          end: {
            line: 312,
            column: 23
          }
        },
        loc: {
          start: {
            line: 312,
            column: 29
          },
          end: {
            line: 312,
            column: 55
          }
        },
        line: 312
      },
      "38": {
        name: "setSecureItemAdvanced",
        decl: {
          start: {
            line: 313,
            column: 15
          },
          end: {
            line: 313,
            column: 36
          }
        },
        loc: {
          start: {
            line: 313,
            column: 49
          },
          end: {
            line: 315,
            column: 1
          }
        },
        line: 313
      },
      "39": {
        name: "getSecureItemAdvanced",
        decl: {
          start: {
            line: 316,
            column: 15
          },
          end: {
            line: 316,
            column: 36
          }
        },
        loc: {
          start: {
            line: 316,
            column: 42
          },
          end: {
            line: 318,
            column: 1
          }
        },
        line: 316
      },
      "40": {
        name: "setSecureJSONAdvanced",
        decl: {
          start: {
            line: 319,
            column: 15
          },
          end: {
            line: 319,
            column: 36
          }
        },
        loc: {
          start: {
            line: 319,
            column: 49
          },
          end: {
            line: 321,
            column: 1
          }
        },
        line: 319
      },
      "41": {
        name: "getSecureJSONAdvanced",
        decl: {
          start: {
            line: 322,
            column: 15
          },
          end: {
            line: 322,
            column: 36
          }
        },
        loc: {
          start: {
            line: 322,
            column: 42
          },
          end: {
            line: 324,
            column: 1
          }
        },
        line: 322
      },
      "42": {
        name: "migrateToAdvancedEncryption",
        decl: {
          start: {
            line: 325,
            column: 15
          },
          end: {
            line: 325,
            column: 42
          }
        },
        loc: {
          start: {
            line: 325,
            column: 45
          },
          end: {
            line: 327,
            column: 1
          }
        },
        line: 325
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        }, {
          start: {
            line: 62,
            column: 19
          },
          end: {
            line: 64,
            column: 13
          }
        }],
        line: 59
      },
      "1": {
        loc: {
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        }, {
          start: {
            line: 78,
            column: 19
          },
          end: {
            line: 80,
            column: 13
          }
        }],
        line: 75
      },
      "2": {
        loc: {
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 91,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 91,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "3": {
        loc: {
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 96,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 96,
            column: 13
          }
        }, {
          start: {
            line: 94,
            column: 19
          },
          end: {
            line: 96,
            column: 13
          }
        }],
        line: 92
      },
      "4": {
        loc: {
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 109,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 109,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "5": {
        loc: {
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 120,
            column: 13
          }
        }, {
          start: {
            line: 118,
            column: 19
          },
          end: {
            line: 120,
            column: 13
          }
        }],
        line: 110
      },
      "6": {
        loc: {
          start: {
            line: 112,
            column: 16
          },
          end: {
            line: 117,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 16
          },
          end: {
            line: 117,
            column: 17
          }
        }, {
          start: {
            line: 114,
            column: 23
          },
          end: {
            line: 117,
            column: 17
          }
        }],
        line: 112
      },
      "7": {
        loc: {
          start: {
            line: 157,
            column: 15
          },
          end: {
            line: 157,
            column: 174
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 15
          },
          end: {
            line: 157,
            column: 42
          }
        }, {
          start: {
            line: 157,
            column: 46
          },
          end: {
            line: 157,
            column: 67
          }
        }, {
          start: {
            line: 157,
            column: 71
          },
          end: {
            line: 157,
            column: 95
          }
        }, {
          start: {
            line: 157,
            column: 99
          },
          end: {
            line: 157,
            column: 121
          }
        }, {
          start: {
            line: 157,
            column: 125
          },
          end: {
            line: 157,
            column: 144
          }
        }, {
          start: {
            line: 157,
            column: 148
          },
          end: {
            line: 157,
            column: 174
          }
        }],
        line: 157
      },
      "8": {
        loc: {
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 185,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 185,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "9": {
        loc: {
          start: {
            line: 200,
            column: 16
          },
          end: {
            line: 208,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 16
          },
          end: {
            line: 208,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "10": {
        loc: {
          start: {
            line: 202,
            column: 20
          },
          end: {
            line: 207,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 20
          },
          end: {
            line: 207,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "11": {
        loc: {
          start: {
            line: 214,
            column: 20
          },
          end: {
            line: 216,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 20
          },
          end: {
            line: 216,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "12": {
        loc: {
          start: {
            line: 245,
            column: 16
          },
          end: {
            line: 253,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 16
          },
          end: {
            line: 253,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "13": {
        loc: {
          start: {
            line: 247,
            column: 20
          },
          end: {
            line: 252,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 20
          },
          end: {
            line: 252,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "14": {
        loc: {
          start: {
            line: 288,
            column: 12
          },
          end: {
            line: 288,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 288,
            column: 12
          },
          end: {
            line: 288,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 288
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0, 0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\secureStorage.ts"],
      sourcesContent: ["import { encryptApiKeySync as encryptData, decryptApiKeySync as decryptData, encryptApiKey, decryptApiKey } from './security'\nimport { advancedEncryption } from './encryption'\n\n/**\n * Secure storage utility that encrypts sensitive data before storing in localStorage\n * and decrypts it when retrieving. Falls back to regular localStorage for non-sensitive data.\n */\nclass SecureStorage {\n  private readonly sensitiveKeys = new Set([\n    'auth_token',\n    'auth_user',\n    'api_keys',\n    'user_credentials',\n    'session_data',\n    'payment_info',\n    'personal_data'\n  ])\n\n  /**\n   * Store data securely. Encrypts sensitive data, stores others normally.\n   */\n  setItem(key: string, value: string): void {\n    try {\n      if (this.isSensitiveKey(key)) {\n        const encryptedValue = encryptData(value)\n        localStorage.setItem(key, encryptedValue)\n      } else {\n        localStorage.setItem(key, value)\n      }\n    } catch (error) {\n      console.error(`Failed to store item '${key}':`, error)\n      throw new Error(`Secure storage failed for key: ${key}`)\n    }\n  }\n\n  /**\n   * Store data securely using advanced AES-256-GCM encryption (async)\n   * Recommended for new implementations\n   */\n  async setItemSecure(key: string, value: string): Promise<void> {\n    try {\n      if (this.isSensitiveKey(key)) {\n        const encryptedValue = await advancedEncryption.encrypt(value)\n        localStorage.setItem(key, encryptedValue)\n      } else {\n        localStorage.setItem(key, value)\n      }\n    } catch (error) {\n      console.error(`Failed to store item securely '${key}':`, error)\n      throw new Error(`Advanced secure storage failed for key: ${key}`)\n    }\n  }\n\n  /**\n   * Retrieve data securely. Decrypts sensitive data, returns others normally.\n   */\n  getItem(key: string): string | null {\n    try {\n      const value = localStorage.getItem(key)\n      if (value === null) return null\n\n      if (this.isSensitiveKey(key)) {\n        return decryptData(value)\n      } else {\n        return value\n      }\n    } catch (error) {\n      console.error(`Failed to retrieve item '${key}':`, error)\n      // Return null instead of throwing to maintain localStorage API compatibility\n      return null\n    }\n  }\n\n  /**\n   * Retrieve data securely using advanced decryption (async)\n   * Automatically handles both new and legacy encrypted formats\n   */\n  async getItemSecure(key: string): Promise<string | null> {\n    try {\n      const value = localStorage.getItem(key)\n      if (value === null) return null\n\n      if (this.isSensitiveKey(key)) {\n        // Check if it's new format first\n        if (advancedEncryption.isEncrypted(value)) {\n          return await advancedEncryption.decrypt(value)\n        } else {\n          // Fall back to legacy decryption\n          return decryptData(value)\n        }\n      } else {\n        return value\n      }\n    } catch (error) {\n      console.error(`Failed to retrieve item securely '${key}':`, error)\n      return null\n    }\n  }\n\n  /**\n   * Remove item from storage\n   */\n  removeItem(key: string): void {\n    try {\n      localStorage.removeItem(key)\n    } catch (error) {\n      console.error(`Failed to remove item '${key}':`, error)\n    }\n  }\n\n  /**\n   * Clear all storage\n   */\n  clear(): void {\n    try {\n      localStorage.clear()\n    } catch (error) {\n      console.error('Failed to clear storage:', error)\n    }\n  }\n\n  /**\n   * Get all keys from storage\n   */\n  getAllKeys(): string[] {\n    try {\n      return Object.keys(localStorage)\n    } catch (error) {\n      console.error('Failed to get storage keys:', error)\n      return []\n    }\n  }\n\n  /**\n   * Check if a key contains sensitive data\n   */\n  private isSensitiveKey(key: string): boolean {\n    return this.sensitiveKeys.has(key) || \n           key.includes('token') || \n           key.includes('password') || \n           key.includes('secret') || \n           key.includes('key') ||\n           key.includes('credential')\n  }\n\n  /**\n   * Add a key to the sensitive keys list\n   */\n  addSensitiveKey(key: string): void {\n    this.sensitiveKeys.add(key)\n  }\n\n  /**\n   * Remove a key from the sensitive keys list\n   */\n  removeSensitiveKey(key: string): void {\n    this.sensitiveKeys.delete(key)\n  }\n\n  /**\n   * Store JSON data securely\n   */\n  setJSON(key: string, value: unknown): void {\n    try {\n      const jsonString = JSON.stringify(value)\n      this.setItem(key, jsonString)\n    } catch (error) {\n      console.error(`Failed to store JSON for key '${key}':`, error)\n      throw new Error(`Failed to serialize and store data for key: ${key}`)\n    }\n  }\n\n  /**\n   * Retrieve JSON data securely\n   */\n  getJSON<T = unknown>(key: string): T | null {\n    try {\n      const value = this.getItem(key)\n      if (value === null) return null\n      return JSON.parse(value) as T\n    } catch (error) {\n      console.error(`Failed to retrieve JSON for key '${key}':`, error)\n      return null\n    }\n  }\n\n  /**\n   * Migrate existing localStorage data to advanced secure storage\n   */\n  async migrateToAdvancedEncryption(): Promise<void> {\n    try {\n      const keys = this.getAllKeys()\n      const sensitiveData: Array<{key: string, value: string}> = []\n      \n      // Identify sensitive data that needs migration\n      keys.forEach(key => {\n        if (this.isSensitiveKey(key)) {\n          const value = localStorage.getItem(key)\n          if (value) {\n            sensitiveData.push({ key, value })\n          }\n        }\n      })\n      \n      // Migrate to advanced encryption\n      for (const { key, value } of sensitiveData) {\n        try {\n          // Check if already using advanced encryption\n          if (advancedEncryption.isEncrypted(value)) {\n            continue // Already migrated\n          }\n          \n          // Try to decrypt legacy format first\n          let plaintext: string\n          try {\n            plaintext = decryptData(value)\n          } catch {\n            // Assume it's unencrypted plaintext\n            plaintext = value\n          }\n          \n          // Re-encrypt with advanced encryption\n          const encryptedValue = await advancedEncryption.encrypt(plaintext)\n          localStorage.setItem(key, encryptedValue)\n        } catch (error) {\n          console.error(`Failed to migrate key '${key}':`, error)\n        }\n      }\n      \n      console.log(`\u2705 Migrated ${sensitiveData.length} sensitive items to advanced encryption`)\n    } catch (error) {\n      console.error('Failed to migrate to advanced encryption:', error)\n    }\n  }\n\n  /**\n   * Legacy migration method for backward compatibility\n   */\n  migrateExistingData(): void {\n    try {\n      const keys = this.getAllKeys()\n      const sensitiveData: Array<{key: string, value: string}> = []\n      \n      // Identify sensitive data that needs migration\n      keys.forEach(key => {\n        if (this.isSensitiveKey(key)) {\n          const value = localStorage.getItem(key)\n          if (value) {\n            sensitiveData.push({ key, value })\n          }\n        }\n      })\n      \n      // Re-encrypt sensitive data\n      sensitiveData.forEach(({ key, value }) => {\n        try {\n          // Try to decrypt first to see if it's already encrypted\n          decryptData(value)\n          // If no error, it's already encrypted\n        } catch {\n          // Not encrypted, so encrypt it now\n          const encryptedValue = encryptData(value)\n          localStorage.setItem(key, encryptedValue)\n        }\n      })\n      \n      console.log(`Migrated ${sensitiveData.length} sensitive items to secure storage`)\n    } catch (error) {\n      console.error('Failed to migrate existing data:', error)\n    }\n  }\n\n  /**\n   * Store JSON data securely using advanced encryption\n   */\n  async setJSONSecure(key: string, value: unknown): Promise<void> {\n    try {\n      const jsonString = JSON.stringify(value)\n      await this.setItemSecure(key, jsonString)\n    } catch (error) {\n      console.error(`Failed to store JSON securely '${key}':`, error)\n      throw new Error(`Secure JSON storage failed for key: ${key}`)\n    }\n  }\n\n  /**\n   * Retrieve JSON data securely using advanced decryption\n   */\n  async getJSONSecure<T = unknown>(key: string): Promise<T | null> {\n    try {\n      const jsonString = await this.getItemSecure(key)\n      if (jsonString === null) return null\n      return JSON.parse(jsonString) as T\n    } catch (error) {\n      console.error(`Failed to retrieve JSON securely '${key}':`, error)\n      return null\n    }\n  }\n}\n\n// Create and export singleton instance\nexport const secureStorage = new SecureStorage()\n\n// Export class for testing\nexport { SecureStorage }\n\n// Export convenience functions (legacy)\nexport const setSecureItem = (key: string, value: string) => secureStorage.setItem(key, value)\nexport const getSecureItem = (key: string) => secureStorage.getItem(key)\nexport const removeSecureItem = (key: string) => secureStorage.removeItem(key)\nexport const setSecureJSON = (key: string, value: unknown) => secureStorage.setJSON(key, value)\nexport const getSecureJSON = <T = unknown>(key: string) => secureStorage.getJSON<T>(key)\n\n// Export advanced secure functions (recommended for new code)\nexport async function setSecureItemAdvanced(key: string, value: string): Promise<void> {\n  return await secureStorage.setItemSecure(key, value)\n}\n\nexport async function getSecureItemAdvanced(key: string): Promise<string | null> {\n  return await secureStorage.getItemSecure(key)\n}\n\nexport async function setSecureJSONAdvanced(key: string, value: unknown): Promise<void> {\n  return await secureStorage.setJSONSecure(key, value)\n}\n\nexport async function getSecureJSONAdvanced<T = unknown>(key: string): Promise<T | null> {\n  return await secureStorage.getJSONSecure<T>(key)\n}\n\nexport async function migrateToAdvancedEncryption(): Promise<void> {\n  return await secureStorage.migrateToAdvancedEncryption()\n}"],
      names: ["SecureStorage", "getSecureItem", "getSecureItemAdvanced", "getSecureJSON", "getSecureJSONAdvanced", "migrateToAdvancedEncryption", "removeSecureItem", "secureStorage", "setSecureItem", "setSecureItemAdvanced", "setSecureJSON", "setSecureJSONAdvanced", "setItem", "key", "value", "isSensitiveKey", "encryptedValue", "encryptData", "localStorage", "error", "console", "Error", "setItemSecure", "advancedEncryption", "encrypt", "getItem", "decryptData", "getItemSecure", "isEncrypted", "decrypt", "removeItem", "clear", "getAllKeys", "Object", "keys", "sensitiveKeys", "has", "includes", "addSensitiveKey", "add", "removeSensitiveKey", "delete", "setJSON", "jsonString", "JSON", "stringify", "getJSON", "parse", "sensitiveData", "forEach", "push", "plaintext", "log", "length", "migrateExistingData", "setJSONSecure", "getJSONSecure", "Set"],
      mappings: ";;;;;;;;;;;QAgTSA;eAAAA;;QAIIC;eAAAA;;QAUSC;eAAAA;;QAPTC;eAAAA;;QAeSC;eAAAA;;QAIAC;eAAAA;;QArBTC;eAAAA;;QARAC;eAAAA;;QAMAC;eAAAA;;QAOSC;eAAAA;;QAJTC;eAAAA;;QAYSC;eAAAA;;;0BAlU2F;4BAC9E;AAEnC;;;CAGC,GACD,MAAMX;IAWJ;;GAEC,GACDY,QAAQC,GAAW,EAAEC,KAAa,EAAQ;QACxC,IAAI;YACF,IAAI,IAAI,CAACC,cAAc,CAACF,MAAM;gBAC5B,MAAMG,iBAAiBC,IAAAA,2BAAW,EAACH;gBACnCI,aAAaN,OAAO,CAACC,KAAKG;YAC5B,OAAO;gBACLE,aAAaN,OAAO,CAACC,KAAKC;YAC5B;QACF,EAAE,OAAOK,OAAO;YACdC,QAAQD,KAAK,CAAC,CAAC,sBAAsB,EAAEN,IAAI,EAAE,CAAC,EAAEM;YAChD,MAAM,IAAIE,MAAM,CAAC,+BAA+B,EAAER,KAAK;QACzD;IACF;IAEA;;;GAGC,GACD,MAAMS,cAAcT,GAAW,EAAEC,KAAa,EAAiB;QAC7D,IAAI;YACF,IAAI,IAAI,CAACC,cAAc,CAACF,MAAM;gBAC5B,MAAMG,iBAAiB,MAAMO,8BAAkB,CAACC,OAAO,CAACV;gBACxDI,aAAaN,OAAO,CAACC,KAAKG;YAC5B,OAAO;gBACLE,aAAaN,OAAO,CAACC,KAAKC;YAC5B;QACF,EAAE,OAAOK,OAAO;YACdC,QAAQD,KAAK,CAAC,CAAC,+BAA+B,EAAEN,IAAI,EAAE,CAAC,EAAEM;YACzD,MAAM,IAAIE,MAAM,CAAC,wCAAwC,EAAER,KAAK;QAClE;IACF;IAEA;;GAEC,GACDY,QAAQZ,GAAW,EAAiB;QAClC,IAAI;YACF,MAAMC,QAAQI,aAAaO,OAAO,CAACZ;YACnC,IAAIC,UAAU,MAAM,OAAO;YAE3B,IAAI,IAAI,CAACC,cAAc,CAACF,MAAM;gBAC5B,OAAOa,IAAAA,2BAAW,EAACZ;YACrB,OAAO;gBACL,OAAOA;YACT;QACF,EAAE,OAAOK,OAAO;YACdC,QAAQD,KAAK,CAAC,CAAC,yBAAyB,EAAEN,IAAI,EAAE,CAAC,EAAEM;YACnD,6EAA6E;YAC7E,OAAO;QACT;IACF;IAEA;;;GAGC,GACD,MAAMQ,cAAcd,GAAW,EAA0B;QACvD,IAAI;YACF,MAAMC,QAAQI,aAAaO,OAAO,CAACZ;YACnC,IAAIC,UAAU,MAAM,OAAO;YAE3B,IAAI,IAAI,CAACC,cAAc,CAACF,MAAM;gBAC5B,iCAAiC;gBACjC,IAAIU,8BAAkB,CAACK,WAAW,CAACd,QAAQ;oBACzC,OAAO,MAAMS,8BAAkB,CAACM,OAAO,CAACf;gBAC1C,OAAO;oBACL,iCAAiC;oBACjC,OAAOY,IAAAA,2BAAW,EAACZ;gBACrB;YACF,OAAO;gBACL,OAAOA;YACT;QACF,EAAE,OAAOK,OAAO;YACdC,QAAQD,KAAK,CAAC,CAAC,kCAAkC,EAAEN,IAAI,EAAE,CAAC,EAAEM;YAC5D,OAAO;QACT;IACF;IAEA;;GAEC,GACDW,WAAWjB,GAAW,EAAQ;QAC5B,IAAI;YACFK,aAAaY,UAAU,CAACjB;QAC1B,EAAE,OAAOM,OAAO;YACdC,QAAQD,KAAK,CAAC,CAAC,uBAAuB,EAAEN,IAAI,EAAE,CAAC,EAAEM;QACnD;IACF;IAEA;;GAEC,GACDY,QAAc;QACZ,IAAI;YACFb,aAAaa,KAAK;QACpB,EAAE,OAAOZ,OAAO;YACdC,QAAQD,KAAK,CAAC,4BAA4BA;QAC5C;IACF;IAEA;;GAEC,GACDa,aAAuB;QACrB,IAAI;YACF,OAAOC,OAAOC,IAAI,CAAChB;QACrB,EAAE,OAAOC,OAAO;YACdC,QAAQD,KAAK,CAAC,+BAA+BA;YAC7C,OAAO,EAAE;QACX;IACF;IAEA;;GAEC,GACD,AAAQJ,eAAeF,GAAW,EAAW;QAC3C,OAAO,IAAI,CAACsB,aAAa,CAACC,GAAG,CAACvB,QACvBA,IAAIwB,QAAQ,CAAC,YACbxB,IAAIwB,QAAQ,CAAC,eACbxB,IAAIwB,QAAQ,CAAC,aACbxB,IAAIwB,QAAQ,CAAC,UACbxB,IAAIwB,QAAQ,CAAC;IACtB;IAEA;;GAEC,GACDC,gBAAgBzB,GAAW,EAAQ;QACjC,IAAI,CAACsB,aAAa,CAACI,GAAG,CAAC1B;IACzB;IAEA;;GAEC,GACD2B,mBAAmB3B,GAAW,EAAQ;QACpC,IAAI,CAACsB,aAAa,CAACM,MAAM,CAAC5B;IAC5B;IAEA;;GAEC,GACD6B,QAAQ7B,GAAW,EAAEC,KAAc,EAAQ;QACzC,IAAI;YACF,MAAM6B,aAAaC,KAAKC,SAAS,CAAC/B;YAClC,IAAI,CAACF,OAAO,CAACC,KAAK8B;QACpB,EAAE,OAAOxB,OAAO;YACdC,QAAQD,KAAK,CAAC,CAAC,8BAA8B,EAAEN,IAAI,EAAE,CAAC,EAAEM;YACxD,MAAM,IAAIE,MAAM,CAAC,4CAA4C,EAAER,KAAK;QACtE;IACF;IAEA;;GAEC,GACDiC,QAAqBjC,GAAW,EAAY;QAC1C,IAAI;YACF,MAAMC,QAAQ,IAAI,CAACW,OAAO,CAACZ;YAC3B,IAAIC,UAAU,MAAM,OAAO;YAC3B,OAAO8B,KAAKG,KAAK,CAACjC;QACpB,EAAE,OAAOK,OAAO;YACdC,QAAQD,KAAK,CAAC,CAAC,iCAAiC,EAAEN,IAAI,EAAE,CAAC,EAAEM;YAC3D,OAAO;QACT;IACF;IAEA;;GAEC,GACD,MAAMd,8BAA6C;QACjD,IAAI;YACF,MAAM6B,OAAO,IAAI,CAACF,UAAU;YAC5B,MAAMgB,gBAAqD,EAAE;YAE7D,+CAA+C;YAC/Cd,KAAKe,OAAO,CAACpC,CAAAA;gBACX,IAAI,IAAI,CAACE,cAAc,CAACF,MAAM;oBAC5B,MAAMC,QAAQI,aAAaO,OAAO,CAACZ;oBACnC,IAAIC,OAAO;wBACTkC,cAAcE,IAAI,CAAC;4BAAErC;4BAAKC;wBAAM;oBAClC;gBACF;YACF;YAEA,iCAAiC;YACjC,KAAK,MAAM,EAAED,GAAG,EAAEC,KAAK,EAAE,IAAIkC,cAAe;gBAC1C,IAAI;oBACF,6CAA6C;oBAC7C,IAAIzB,8BAAkB,CAACK,WAAW,CAACd,QAAQ;wBACzC,UAAS,mBAAmB;oBAC9B;oBAEA,qCAAqC;oBACrC,IAAIqC;oBACJ,IAAI;wBACFA,YAAYzB,IAAAA,2BAAW,EAACZ;oBAC1B,EAAE,OAAM;wBACN,oCAAoC;wBACpCqC,YAAYrC;oBACd;oBAEA,sCAAsC;oBACtC,MAAME,iBAAiB,MAAMO,8BAAkB,CAACC,OAAO,CAAC2B;oBACxDjC,aAAaN,OAAO,CAACC,KAAKG;gBAC5B,EAAE,OAAOG,OAAO;oBACdC,QAAQD,KAAK,CAAC,CAAC,uBAAuB,EAAEN,IAAI,EAAE,CAAC,EAAEM;gBACnD;YACF;YAEAC,QAAQgC,GAAG,CAAC,CAAC,WAAW,EAAEJ,cAAcK,MAAM,CAAC,uCAAuC,CAAC;QACzF,EAAE,OAAOlC,OAAO;YACdC,QAAQD,KAAK,CAAC,6CAA6CA;QAC7D;IACF;IAEA;;GAEC,GACDmC,sBAA4B;QAC1B,IAAI;YACF,MAAMpB,OAAO,IAAI,CAACF,UAAU;YAC5B,MAAMgB,gBAAqD,EAAE;YAE7D,+CAA+C;YAC/Cd,KAAKe,OAAO,CAACpC,CAAAA;gBACX,IAAI,IAAI,CAACE,cAAc,CAACF,MAAM;oBAC5B,MAAMC,QAAQI,aAAaO,OAAO,CAACZ;oBACnC,IAAIC,OAAO;wBACTkC,cAAcE,IAAI,CAAC;4BAAErC;4BAAKC;wBAAM;oBAClC;gBACF;YACF;YAEA,4BAA4B;YAC5BkC,cAAcC,OAAO,CAAC,CAAC,EAAEpC,GAAG,EAAEC,KAAK,EAAE;gBACnC,IAAI;oBACF,wDAAwD;oBACxDY,IAAAA,2BAAW,EAACZ;gBACZ,sCAAsC;gBACxC,EAAE,OAAM;oBACN,mCAAmC;oBACnC,MAAME,iBAAiBC,IAAAA,2BAAW,EAACH;oBACnCI,aAAaN,OAAO,CAACC,KAAKG;gBAC5B;YACF;YAEAI,QAAQgC,GAAG,CAAC,CAAC,SAAS,EAAEJ,cAAcK,MAAM,CAAC,kCAAkC,CAAC;QAClF,EAAE,OAAOlC,OAAO;YACdC,QAAQD,KAAK,CAAC,oCAAoCA;QACpD;IACF;IAEA;;GAEC,GACD,MAAMoC,cAAc1C,GAAW,EAAEC,KAAc,EAAiB;QAC9D,IAAI;YACF,MAAM6B,aAAaC,KAAKC,SAAS,CAAC/B;YAClC,MAAM,IAAI,CAACQ,aAAa,CAACT,KAAK8B;QAChC,EAAE,OAAOxB,OAAO;YACdC,QAAQD,KAAK,CAAC,CAAC,+BAA+B,EAAEN,IAAI,EAAE,CAAC,EAAEM;YACzD,MAAM,IAAIE,MAAM,CAAC,oCAAoC,EAAER,KAAK;QAC9D;IACF;IAEA;;GAEC,GACD,MAAM2C,cAA2B3C,GAAW,EAAqB;QAC/D,IAAI;YACF,MAAM8B,aAAa,MAAM,IAAI,CAAChB,aAAa,CAACd;YAC5C,IAAI8B,eAAe,MAAM,OAAO;YAChC,OAAOC,KAAKG,KAAK,CAACJ;QACpB,EAAE,OAAOxB,OAAO;YACdC,QAAQD,KAAK,CAAC,CAAC,kCAAkC,EAAEN,IAAI,EAAE,CAAC,EAAEM;YAC5D,OAAO;QACT;IACF;;aAjSiBgB,gBAAgB,IAAIsB,IAAI;YACvC;YACA;YACA;YACA;YACA;YACA;YACA;SACD;;AA0RH;AAGO,MAAMlD,gBAAgB,IAAIP;AAM1B,MAAMQ,gBAAgB,CAACK,KAAaC,QAAkBP,cAAcK,OAAO,CAACC,KAAKC;AACjF,MAAMb,gBAAgB,CAACY,MAAgBN,cAAckB,OAAO,CAACZ;AAC7D,MAAMP,mBAAmB,CAACO,MAAgBN,cAAcuB,UAAU,CAACjB;AACnE,MAAMH,gBAAgB,CAACG,KAAaC,QAAmBP,cAAcmC,OAAO,CAAC7B,KAAKC;AAClF,MAAMX,gBAAgB,CAAcU,MAAgBN,cAAcuC,OAAO,CAAIjC;AAG7E,eAAeJ,sBAAsBI,GAAW,EAAEC,KAAa;IACpE,OAAO,MAAMP,cAAce,aAAa,CAACT,KAAKC;AAChD;AAEO,eAAeZ,sBAAsBW,GAAW;IACrD,OAAO,MAAMN,cAAcoB,aAAa,CAACd;AAC3C;AAEO,eAAeF,sBAAsBE,GAAW,EAAEC,KAAc;IACrE,OAAO,MAAMP,cAAcgD,aAAa,CAAC1C,KAAKC;AAChD;AAEO,eAAeV,sBAAmCS,GAAW;IAClE,OAAO,MAAMN,cAAciD,aAAa,CAAI3C;AAC9C;AAEO,eAAeR;IACpB,OAAO,MAAME,cAAcF,2BAA2B;AACxD"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "388d6f2aa5bdab47266f42ce9c7a9270f295c7a8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2da5pni0dr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2da5pni0dr();
cov_2da5pni0dr().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2da5pni0dr().f[0]++;
  cov_2da5pni0dr().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2da5pni0dr().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2da5pni0dr().s[3]++;
_export(exports, {
  get SecureStorage() {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[1]++;
    cov_2da5pni0dr().s[4]++;
    return SecureStorage;
  },
  get getSecureItem() {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[2]++;
    cov_2da5pni0dr().s[5]++;
    return getSecureItem;
  },
  get getSecureItemAdvanced() {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[3]++;
    cov_2da5pni0dr().s[6]++;
    return getSecureItemAdvanced;
  },
  get getSecureJSON() {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[4]++;
    cov_2da5pni0dr().s[7]++;
    return getSecureJSON;
  },
  get getSecureJSONAdvanced() {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[5]++;
    cov_2da5pni0dr().s[8]++;
    return getSecureJSONAdvanced;
  },
  get migrateToAdvancedEncryption() {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[6]++;
    cov_2da5pni0dr().s[9]++;
    return migrateToAdvancedEncryption;
  },
  get removeSecureItem() {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[7]++;
    cov_2da5pni0dr().s[10]++;
    return removeSecureItem;
  },
  get secureStorage() {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[8]++;
    cov_2da5pni0dr().s[11]++;
    return secureStorage;
  },
  get setSecureItem() {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[9]++;
    cov_2da5pni0dr().s[12]++;
    return setSecureItem;
  },
  get setSecureItemAdvanced() {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[10]++;
    cov_2da5pni0dr().s[13]++;
    return setSecureItemAdvanced;
  },
  get setSecureJSON() {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[11]++;
    cov_2da5pni0dr().s[14]++;
    return setSecureJSON;
  },
  get setSecureJSONAdvanced() {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[12]++;
    cov_2da5pni0dr().s[15]++;
    return setSecureJSONAdvanced;
  }
});
const _security =
/* istanbul ignore next */
(cov_2da5pni0dr().s[16]++, require("./security"));
const _encryption =
/* istanbul ignore next */
(cov_2da5pni0dr().s[17]++, require("./encryption"));
/**
 * Secure storage utility that encrypts sensitive data before storing in localStorage
 * and decrypts it when retrieving. Falls back to regular localStorage for non-sensitive data.
 */
class SecureStorage {
  /**
  * Store data securely. Encrypts sensitive data, stores others normally.
  */
  setItem(key, value) {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[13]++;
    cov_2da5pni0dr().s[18]++;
    try {
      /* istanbul ignore next */
      cov_2da5pni0dr().s[19]++;
      if (this.isSensitiveKey(key)) {
        /* istanbul ignore next */
        cov_2da5pni0dr().b[0][0]++;
        const encryptedValue =
        /* istanbul ignore next */
        (cov_2da5pni0dr().s[20]++, (0, _security.encryptApiKeySync)(value));
        /* istanbul ignore next */
        cov_2da5pni0dr().s[21]++;
        localStorage.setItem(key, encryptedValue);
      } else {
        /* istanbul ignore next */
        cov_2da5pni0dr().b[0][1]++;
        cov_2da5pni0dr().s[22]++;
        localStorage.setItem(key, value);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2da5pni0dr().s[23]++;
      console.error(`Failed to store item '${key}':`, error);
      /* istanbul ignore next */
      cov_2da5pni0dr().s[24]++;
      throw new Error(`Secure storage failed for key: ${key}`);
    }
  }
  /**
  * Store data securely using advanced AES-256-GCM encryption (async)
  * Recommended for new implementations
  */
  async setItemSecure(key, value) {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[14]++;
    cov_2da5pni0dr().s[25]++;
    try {
      /* istanbul ignore next */
      cov_2da5pni0dr().s[26]++;
      if (this.isSensitiveKey(key)) {
        /* istanbul ignore next */
        cov_2da5pni0dr().b[1][0]++;
        const encryptedValue =
        /* istanbul ignore next */
        (cov_2da5pni0dr().s[27]++, await _encryption.advancedEncryption.encrypt(value));
        /* istanbul ignore next */
        cov_2da5pni0dr().s[28]++;
        localStorage.setItem(key, encryptedValue);
      } else {
        /* istanbul ignore next */
        cov_2da5pni0dr().b[1][1]++;
        cov_2da5pni0dr().s[29]++;
        localStorage.setItem(key, value);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2da5pni0dr().s[30]++;
      console.error(`Failed to store item securely '${key}':`, error);
      /* istanbul ignore next */
      cov_2da5pni0dr().s[31]++;
      throw new Error(`Advanced secure storage failed for key: ${key}`);
    }
  }
  /**
  * Retrieve data securely. Decrypts sensitive data, returns others normally.
  */
  getItem(key) {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[15]++;
    cov_2da5pni0dr().s[32]++;
    try {
      const value =
      /* istanbul ignore next */
      (cov_2da5pni0dr().s[33]++, localStorage.getItem(key));
      /* istanbul ignore next */
      cov_2da5pni0dr().s[34]++;
      if (value === null) {
        /* istanbul ignore next */
        cov_2da5pni0dr().b[2][0]++;
        cov_2da5pni0dr().s[35]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2da5pni0dr().b[2][1]++;
      }
      cov_2da5pni0dr().s[36]++;
      if (this.isSensitiveKey(key)) {
        /* istanbul ignore next */
        cov_2da5pni0dr().b[3][0]++;
        cov_2da5pni0dr().s[37]++;
        return (0, _security.decryptApiKeySync)(value);
      } else {
        /* istanbul ignore next */
        cov_2da5pni0dr().b[3][1]++;
        cov_2da5pni0dr().s[38]++;
        return value;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2da5pni0dr().s[39]++;
      console.error(`Failed to retrieve item '${key}':`, error);
      // Return null instead of throwing to maintain localStorage API compatibility
      /* istanbul ignore next */
      cov_2da5pni0dr().s[40]++;
      return null;
    }
  }
  /**
  * Retrieve data securely using advanced decryption (async)
  * Automatically handles both new and legacy encrypted formats
  */
  async getItemSecure(key) {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[16]++;
    cov_2da5pni0dr().s[41]++;
    try {
      const value =
      /* istanbul ignore next */
      (cov_2da5pni0dr().s[42]++, localStorage.getItem(key));
      /* istanbul ignore next */
      cov_2da5pni0dr().s[43]++;
      if (value === null) {
        /* istanbul ignore next */
        cov_2da5pni0dr().b[4][0]++;
        cov_2da5pni0dr().s[44]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2da5pni0dr().b[4][1]++;
      }
      cov_2da5pni0dr().s[45]++;
      if (this.isSensitiveKey(key)) {
        /* istanbul ignore next */
        cov_2da5pni0dr().b[5][0]++;
        cov_2da5pni0dr().s[46]++;
        // Check if it's new format first
        if (_encryption.advancedEncryption.isEncrypted(value)) {
          /* istanbul ignore next */
          cov_2da5pni0dr().b[6][0]++;
          cov_2da5pni0dr().s[47]++;
          return await _encryption.advancedEncryption.decrypt(value);
        } else {
          /* istanbul ignore next */
          cov_2da5pni0dr().b[6][1]++;
          cov_2da5pni0dr().s[48]++;
          // Fall back to legacy decryption
          return (0, _security.decryptApiKeySync)(value);
        }
      } else {
        /* istanbul ignore next */
        cov_2da5pni0dr().b[5][1]++;
        cov_2da5pni0dr().s[49]++;
        return value;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2da5pni0dr().s[50]++;
      console.error(`Failed to retrieve item securely '${key}':`, error);
      /* istanbul ignore next */
      cov_2da5pni0dr().s[51]++;
      return null;
    }
  }
  /**
  * Remove item from storage
  */
  removeItem(key) {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[17]++;
    cov_2da5pni0dr().s[52]++;
    try {
      /* istanbul ignore next */
      cov_2da5pni0dr().s[53]++;
      localStorage.removeItem(key);
    } catch (error) {
      /* istanbul ignore next */
      cov_2da5pni0dr().s[54]++;
      console.error(`Failed to remove item '${key}':`, error);
    }
  }
  /**
  * Clear all storage
  */
  clear() {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[18]++;
    cov_2da5pni0dr().s[55]++;
    try {
      /* istanbul ignore next */
      cov_2da5pni0dr().s[56]++;
      localStorage.clear();
    } catch (error) {
      /* istanbul ignore next */
      cov_2da5pni0dr().s[57]++;
      console.error('Failed to clear storage:', error);
    }
  }
  /**
  * Get all keys from storage
  */
  getAllKeys() {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[19]++;
    cov_2da5pni0dr().s[58]++;
    try {
      /* istanbul ignore next */
      cov_2da5pni0dr().s[59]++;
      return Object.keys(localStorage);
    } catch (error) {
      /* istanbul ignore next */
      cov_2da5pni0dr().s[60]++;
      console.error('Failed to get storage keys:', error);
      /* istanbul ignore next */
      cov_2da5pni0dr().s[61]++;
      return [];
    }
  }
  /**
  * Check if a key contains sensitive data
  */
  isSensitiveKey(key) {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[20]++;
    cov_2da5pni0dr().s[62]++;
    return /* istanbul ignore next */(cov_2da5pni0dr().b[7][0]++, this.sensitiveKeys.has(key)) ||
    /* istanbul ignore next */
    (cov_2da5pni0dr().b[7][1]++, key.includes('token')) ||
    /* istanbul ignore next */
    (cov_2da5pni0dr().b[7][2]++, key.includes('password')) ||
    /* istanbul ignore next */
    (cov_2da5pni0dr().b[7][3]++, key.includes('secret')) ||
    /* istanbul ignore next */
    (cov_2da5pni0dr().b[7][4]++, key.includes('key')) ||
    /* istanbul ignore next */
    (cov_2da5pni0dr().b[7][5]++, key.includes('credential'));
  }
  /**
  * Add a key to the sensitive keys list
  */
  addSensitiveKey(key) {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[21]++;
    cov_2da5pni0dr().s[63]++;
    this.sensitiveKeys.add(key);
  }
  /**
  * Remove a key from the sensitive keys list
  */
  removeSensitiveKey(key) {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[22]++;
    cov_2da5pni0dr().s[64]++;
    this.sensitiveKeys.delete(key);
  }
  /**
  * Store JSON data securely
  */
  setJSON(key, value) {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[23]++;
    cov_2da5pni0dr().s[65]++;
    try {
      const jsonString =
      /* istanbul ignore next */
      (cov_2da5pni0dr().s[66]++, JSON.stringify(value));
      /* istanbul ignore next */
      cov_2da5pni0dr().s[67]++;
      this.setItem(key, jsonString);
    } catch (error) {
      /* istanbul ignore next */
      cov_2da5pni0dr().s[68]++;
      console.error(`Failed to store JSON for key '${key}':`, error);
      /* istanbul ignore next */
      cov_2da5pni0dr().s[69]++;
      throw new Error(`Failed to serialize and store data for key: ${key}`);
    }
  }
  /**
  * Retrieve JSON data securely
  */
  getJSON(key) {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[24]++;
    cov_2da5pni0dr().s[70]++;
    try {
      const value =
      /* istanbul ignore next */
      (cov_2da5pni0dr().s[71]++, this.getItem(key));
      /* istanbul ignore next */
      cov_2da5pni0dr().s[72]++;
      if (value === null) {
        /* istanbul ignore next */
        cov_2da5pni0dr().b[8][0]++;
        cov_2da5pni0dr().s[73]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2da5pni0dr().b[8][1]++;
      }
      cov_2da5pni0dr().s[74]++;
      return JSON.parse(value);
    } catch (error) {
      /* istanbul ignore next */
      cov_2da5pni0dr().s[75]++;
      console.error(`Failed to retrieve JSON for key '${key}':`, error);
      /* istanbul ignore next */
      cov_2da5pni0dr().s[76]++;
      return null;
    }
  }
  /**
  * Migrate existing localStorage data to advanced secure storage
  */
  async migrateToAdvancedEncryption() {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[25]++;
    cov_2da5pni0dr().s[77]++;
    try {
      const keys =
      /* istanbul ignore next */
      (cov_2da5pni0dr().s[78]++, this.getAllKeys());
      const sensitiveData =
      /* istanbul ignore next */
      (cov_2da5pni0dr().s[79]++, []);
      // Identify sensitive data that needs migration
      /* istanbul ignore next */
      cov_2da5pni0dr().s[80]++;
      keys.forEach(key => {
        /* istanbul ignore next */
        cov_2da5pni0dr().f[26]++;
        cov_2da5pni0dr().s[81]++;
        if (this.isSensitiveKey(key)) {
          /* istanbul ignore next */
          cov_2da5pni0dr().b[9][0]++;
          const value =
          /* istanbul ignore next */
          (cov_2da5pni0dr().s[82]++, localStorage.getItem(key));
          /* istanbul ignore next */
          cov_2da5pni0dr().s[83]++;
          if (value) {
            /* istanbul ignore next */
            cov_2da5pni0dr().b[10][0]++;
            cov_2da5pni0dr().s[84]++;
            sensitiveData.push({
              key,
              value
            });
          } else
          /* istanbul ignore next */
          {
            cov_2da5pni0dr().b[10][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_2da5pni0dr().b[9][1]++;
        }
      });
      // Migrate to advanced encryption
      /* istanbul ignore next */
      cov_2da5pni0dr().s[85]++;
      for (const {
        key,
        value
      } of sensitiveData) {
        /* istanbul ignore next */
        cov_2da5pni0dr().s[86]++;
        try {
          /* istanbul ignore next */
          cov_2da5pni0dr().s[87]++;
          // Check if already using advanced encryption
          if (_encryption.advancedEncryption.isEncrypted(value)) {
            /* istanbul ignore next */
            cov_2da5pni0dr().b[11][0]++;
            cov_2da5pni0dr().s[88]++;
            continue; // Already migrated
          } else
          /* istanbul ignore next */
          {
            cov_2da5pni0dr().b[11][1]++;
          }
          // Try to decrypt legacy format first
          let plaintext;
          /* istanbul ignore next */
          cov_2da5pni0dr().s[89]++;
          try {
            /* istanbul ignore next */
            cov_2da5pni0dr().s[90]++;
            plaintext = (0, _security.decryptApiKeySync)(value);
          } catch {
            /* istanbul ignore next */
            cov_2da5pni0dr().s[91]++;
            // Assume it's unencrypted plaintext
            plaintext = value;
          }
          // Re-encrypt with advanced encryption
          const encryptedValue =
          /* istanbul ignore next */
          (cov_2da5pni0dr().s[92]++, await _encryption.advancedEncryption.encrypt(plaintext));
          /* istanbul ignore next */
          cov_2da5pni0dr().s[93]++;
          localStorage.setItem(key, encryptedValue);
        } catch (error) {
          /* istanbul ignore next */
          cov_2da5pni0dr().s[94]++;
          console.error(`Failed to migrate key '${key}':`, error);
        }
      }
      /* istanbul ignore next */
      cov_2da5pni0dr().s[95]++;
      console.log(`✅ Migrated ${sensitiveData.length} sensitive items to advanced encryption`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2da5pni0dr().s[96]++;
      console.error('Failed to migrate to advanced encryption:', error);
    }
  }
  /**
  * Legacy migration method for backward compatibility
  */
  migrateExistingData() {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[27]++;
    cov_2da5pni0dr().s[97]++;
    try {
      const keys =
      /* istanbul ignore next */
      (cov_2da5pni0dr().s[98]++, this.getAllKeys());
      const sensitiveData =
      /* istanbul ignore next */
      (cov_2da5pni0dr().s[99]++, []);
      // Identify sensitive data that needs migration
      /* istanbul ignore next */
      cov_2da5pni0dr().s[100]++;
      keys.forEach(key => {
        /* istanbul ignore next */
        cov_2da5pni0dr().f[28]++;
        cov_2da5pni0dr().s[101]++;
        if (this.isSensitiveKey(key)) {
          /* istanbul ignore next */
          cov_2da5pni0dr().b[12][0]++;
          const value =
          /* istanbul ignore next */
          (cov_2da5pni0dr().s[102]++, localStorage.getItem(key));
          /* istanbul ignore next */
          cov_2da5pni0dr().s[103]++;
          if (value) {
            /* istanbul ignore next */
            cov_2da5pni0dr().b[13][0]++;
            cov_2da5pni0dr().s[104]++;
            sensitiveData.push({
              key,
              value
            });
          } else
          /* istanbul ignore next */
          {
            cov_2da5pni0dr().b[13][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_2da5pni0dr().b[12][1]++;
        }
      });
      // Re-encrypt sensitive data
      /* istanbul ignore next */
      cov_2da5pni0dr().s[105]++;
      sensitiveData.forEach(({
        key,
        value
      }) => {
        /* istanbul ignore next */
        cov_2da5pni0dr().f[29]++;
        cov_2da5pni0dr().s[106]++;
        try {
          /* istanbul ignore next */
          cov_2da5pni0dr().s[107]++;
          // Try to decrypt first to see if it's already encrypted
          (0, _security.decryptApiKeySync)(value);
          // If no error, it's already encrypted
        } catch {
          // Not encrypted, so encrypt it now
          const encryptedValue =
          /* istanbul ignore next */
          (cov_2da5pni0dr().s[108]++, (0, _security.encryptApiKeySync)(value));
          /* istanbul ignore next */
          cov_2da5pni0dr().s[109]++;
          localStorage.setItem(key, encryptedValue);
        }
      });
      /* istanbul ignore next */
      cov_2da5pni0dr().s[110]++;
      console.log(`Migrated ${sensitiveData.length} sensitive items to secure storage`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2da5pni0dr().s[111]++;
      console.error('Failed to migrate existing data:', error);
    }
  }
  /**
  * Store JSON data securely using advanced encryption
  */
  async setJSONSecure(key, value) {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[30]++;
    cov_2da5pni0dr().s[112]++;
    try {
      const jsonString =
      /* istanbul ignore next */
      (cov_2da5pni0dr().s[113]++, JSON.stringify(value));
      /* istanbul ignore next */
      cov_2da5pni0dr().s[114]++;
      await this.setItemSecure(key, jsonString);
    } catch (error) {
      /* istanbul ignore next */
      cov_2da5pni0dr().s[115]++;
      console.error(`Failed to store JSON securely '${key}':`, error);
      /* istanbul ignore next */
      cov_2da5pni0dr().s[116]++;
      throw new Error(`Secure JSON storage failed for key: ${key}`);
    }
  }
  /**
  * Retrieve JSON data securely using advanced decryption
  */
  async getJSONSecure(key) {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[31]++;
    cov_2da5pni0dr().s[117]++;
    try {
      const jsonString =
      /* istanbul ignore next */
      (cov_2da5pni0dr().s[118]++, await this.getItemSecure(key));
      /* istanbul ignore next */
      cov_2da5pni0dr().s[119]++;
      if (jsonString === null) {
        /* istanbul ignore next */
        cov_2da5pni0dr().b[14][0]++;
        cov_2da5pni0dr().s[120]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_2da5pni0dr().b[14][1]++;
      }
      cov_2da5pni0dr().s[121]++;
      return JSON.parse(jsonString);
    } catch (error) {
      /* istanbul ignore next */
      cov_2da5pni0dr().s[122]++;
      console.error(`Failed to retrieve JSON securely '${key}':`, error);
      /* istanbul ignore next */
      cov_2da5pni0dr().s[123]++;
      return null;
    }
  }
  constructor() {
    /* istanbul ignore next */
    cov_2da5pni0dr().f[32]++;
    cov_2da5pni0dr().s[124]++;
    this.sensitiveKeys = new Set(['auth_token', 'auth_user', 'api_keys', 'user_credentials', 'session_data', 'payment_info', 'personal_data']);
  }
}
const secureStorage =
/* istanbul ignore next */
(cov_2da5pni0dr().s[125]++, new SecureStorage());
/* istanbul ignore next */
cov_2da5pni0dr().s[126]++;
const setSecureItem = (key, value) => {
  /* istanbul ignore next */
  cov_2da5pni0dr().f[33]++;
  cov_2da5pni0dr().s[127]++;
  return secureStorage.setItem(key, value);
};
/* istanbul ignore next */
cov_2da5pni0dr().s[128]++;
const getSecureItem = key => {
  /* istanbul ignore next */
  cov_2da5pni0dr().f[34]++;
  cov_2da5pni0dr().s[129]++;
  return secureStorage.getItem(key);
};
/* istanbul ignore next */
cov_2da5pni0dr().s[130]++;
const removeSecureItem = key => {
  /* istanbul ignore next */
  cov_2da5pni0dr().f[35]++;
  cov_2da5pni0dr().s[131]++;
  return secureStorage.removeItem(key);
};
/* istanbul ignore next */
cov_2da5pni0dr().s[132]++;
const setSecureJSON = (key, value) => {
  /* istanbul ignore next */
  cov_2da5pni0dr().f[36]++;
  cov_2da5pni0dr().s[133]++;
  return secureStorage.setJSON(key, value);
};
/* istanbul ignore next */
cov_2da5pni0dr().s[134]++;
const getSecureJSON = key => {
  /* istanbul ignore next */
  cov_2da5pni0dr().f[37]++;
  cov_2da5pni0dr().s[135]++;
  return secureStorage.getJSON(key);
};
async function setSecureItemAdvanced(key, value) {
  /* istanbul ignore next */
  cov_2da5pni0dr().f[38]++;
  cov_2da5pni0dr().s[136]++;
  return await secureStorage.setItemSecure(key, value);
}
async function getSecureItemAdvanced(key) {
  /* istanbul ignore next */
  cov_2da5pni0dr().f[39]++;
  cov_2da5pni0dr().s[137]++;
  return await secureStorage.getItemSecure(key);
}
async function setSecureJSONAdvanced(key, value) {
  /* istanbul ignore next */
  cov_2da5pni0dr().f[40]++;
  cov_2da5pni0dr().s[138]++;
  return await secureStorage.setJSONSecure(key, value);
}
async function getSecureJSONAdvanced(key) {
  /* istanbul ignore next */
  cov_2da5pni0dr().f[41]++;
  cov_2da5pni0dr().s[139]++;
  return await secureStorage.getJSONSecure(key);
}
async function migrateToAdvancedEncryption() {
  /* istanbul ignore next */
  cov_2da5pni0dr().f[42]++;
  cov_2da5pni0dr().s[140]++;
  return await secureStorage.migrateToAdvancedEncryption();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,