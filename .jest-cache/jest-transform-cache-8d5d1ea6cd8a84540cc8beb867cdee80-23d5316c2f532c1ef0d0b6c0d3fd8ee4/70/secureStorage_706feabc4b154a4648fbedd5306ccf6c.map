{"version":3,"names":["SecureStorage","cov_2da5pni0dr","f","s","getSecureItem","getSecureItemAdvanced","getSecureJSON","getSecureJSONAdvanced","migrateToAdvancedEncryption","removeSecureItem","secureStorage","setSecureItem","setSecureItemAdvanced","setSecureJSON","setSecureJSONAdvanced","setItem","key","value","isSensitiveKey","b","encryptedValue","_security","encryptApiKeySync","localStorage","error","console","Error","setItemSecure","_encryption","advancedEncryption","encrypt","getItem","decryptApiKeySync","getItemSecure","isEncrypted","decrypt","removeItem","clear","getAllKeys","Object","keys","sensitiveKeys","has","includes","addSensitiveKey","add","removeSensitiveKey","delete","setJSON","jsonString","JSON","stringify","getJSON","parse","sensitiveData","forEach","push","plaintext","log","length","migrateExistingData","setJSONSecure","getJSONSecure","Set"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\secureStorage.ts"],"sourcesContent":["import { encryptApiKeySync as encryptData, decryptApiKeySync as decryptData, encryptApiKey, decryptApiKey } from './security'\nimport { advancedEncryption } from './encryption'\n\n/**\n * Secure storage utility that encrypts sensitive data before storing in localStorage\n * and decrypts it when retrieving. Falls back to regular localStorage for non-sensitive data.\n */\nclass SecureStorage {\n  private readonly sensitiveKeys = new Set([\n    'auth_token',\n    'auth_user',\n    'api_keys',\n    'user_credentials',\n    'session_data',\n    'payment_info',\n    'personal_data'\n  ])\n\n  /**\n   * Store data securely. Encrypts sensitive data, stores others normally.\n   */\n  setItem(key: string, value: string): void {\n    try {\n      if (this.isSensitiveKey(key)) {\n        const encryptedValue = encryptData(value)\n        localStorage.setItem(key, encryptedValue)\n      } else {\n        localStorage.setItem(key, value)\n      }\n    } catch (error) {\n      console.error(`Failed to store item '${key}':`, error)\n      throw new Error(`Secure storage failed for key: ${key}`)\n    }\n  }\n\n  /**\n   * Store data securely using advanced AES-256-GCM encryption (async)\n   * Recommended for new implementations\n   */\n  async setItemSecure(key: string, value: string): Promise<void> {\n    try {\n      if (this.isSensitiveKey(key)) {\n        const encryptedValue = await advancedEncryption.encrypt(value)\n        localStorage.setItem(key, encryptedValue)\n      } else {\n        localStorage.setItem(key, value)\n      }\n    } catch (error) {\n      console.error(`Failed to store item securely '${key}':`, error)\n      throw new Error(`Advanced secure storage failed for key: ${key}`)\n    }\n  }\n\n  /**\n   * Retrieve data securely. Decrypts sensitive data, returns others normally.\n   */\n  getItem(key: string): string | null {\n    try {\n      const value = localStorage.getItem(key)\n      if (value === null) return null\n\n      if (this.isSensitiveKey(key)) {\n        return decryptData(value)\n      } else {\n        return value\n      }\n    } catch (error) {\n      console.error(`Failed to retrieve item '${key}':`, error)\n      // Return null instead of throwing to maintain localStorage API compatibility\n      return null\n    }\n  }\n\n  /**\n   * Retrieve data securely using advanced decryption (async)\n   * Automatically handles both new and legacy encrypted formats\n   */\n  async getItemSecure(key: string): Promise<string | null> {\n    try {\n      const value = localStorage.getItem(key)\n      if (value === null) return null\n\n      if (this.isSensitiveKey(key)) {\n        // Check if it's new format first\n        if (advancedEncryption.isEncrypted(value)) {\n          return await advancedEncryption.decrypt(value)\n        } else {\n          // Fall back to legacy decryption\n          return decryptData(value)\n        }\n      } else {\n        return value\n      }\n    } catch (error) {\n      console.error(`Failed to retrieve item securely '${key}':`, error)\n      return null\n    }\n  }\n\n  /**\n   * Remove item from storage\n   */\n  removeItem(key: string): void {\n    try {\n      localStorage.removeItem(key)\n    } catch (error) {\n      console.error(`Failed to remove item '${key}':`, error)\n    }\n  }\n\n  /**\n   * Clear all storage\n   */\n  clear(): void {\n    try {\n      localStorage.clear()\n    } catch (error) {\n      console.error('Failed to clear storage:', error)\n    }\n  }\n\n  /**\n   * Get all keys from storage\n   */\n  getAllKeys(): string[] {\n    try {\n      return Object.keys(localStorage)\n    } catch (error) {\n      console.error('Failed to get storage keys:', error)\n      return []\n    }\n  }\n\n  /**\n   * Check if a key contains sensitive data\n   */\n  private isSensitiveKey(key: string): boolean {\n    return this.sensitiveKeys.has(key) || \n           key.includes('token') || \n           key.includes('password') || \n           key.includes('secret') || \n           key.includes('key') ||\n           key.includes('credential')\n  }\n\n  /**\n   * Add a key to the sensitive keys list\n   */\n  addSensitiveKey(key: string): void {\n    this.sensitiveKeys.add(key)\n  }\n\n  /**\n   * Remove a key from the sensitive keys list\n   */\n  removeSensitiveKey(key: string): void {\n    this.sensitiveKeys.delete(key)\n  }\n\n  /**\n   * Store JSON data securely\n   */\n  setJSON(key: string, value: unknown): void {\n    try {\n      const jsonString = JSON.stringify(value)\n      this.setItem(key, jsonString)\n    } catch (error) {\n      console.error(`Failed to store JSON for key '${key}':`, error)\n      throw new Error(`Failed to serialize and store data for key: ${key}`)\n    }\n  }\n\n  /**\n   * Retrieve JSON data securely\n   */\n  getJSON<T = unknown>(key: string): T | null {\n    try {\n      const value = this.getItem(key)\n      if (value === null) return null\n      return JSON.parse(value) as T\n    } catch (error) {\n      console.error(`Failed to retrieve JSON for key '${key}':`, error)\n      return null\n    }\n  }\n\n  /**\n   * Migrate existing localStorage data to advanced secure storage\n   */\n  async migrateToAdvancedEncryption(): Promise<void> {\n    try {\n      const keys = this.getAllKeys()\n      const sensitiveData: Array<{key: string, value: string}> = []\n      \n      // Identify sensitive data that needs migration\n      keys.forEach(key => {\n        if (this.isSensitiveKey(key)) {\n          const value = localStorage.getItem(key)\n          if (value) {\n            sensitiveData.push({ key, value })\n          }\n        }\n      })\n      \n      // Migrate to advanced encryption\n      for (const { key, value } of sensitiveData) {\n        try {\n          // Check if already using advanced encryption\n          if (advancedEncryption.isEncrypted(value)) {\n            continue // Already migrated\n          }\n          \n          // Try to decrypt legacy format first\n          let plaintext: string\n          try {\n            plaintext = decryptData(value)\n          } catch {\n            // Assume it's unencrypted plaintext\n            plaintext = value\n          }\n          \n          // Re-encrypt with advanced encryption\n          const encryptedValue = await advancedEncryption.encrypt(plaintext)\n          localStorage.setItem(key, encryptedValue)\n        } catch (error) {\n          console.error(`Failed to migrate key '${key}':`, error)\n        }\n      }\n      \n      console.log(`âœ… Migrated ${sensitiveData.length} sensitive items to advanced encryption`)\n    } catch (error) {\n      console.error('Failed to migrate to advanced encryption:', error)\n    }\n  }\n\n  /**\n   * Legacy migration method for backward compatibility\n   */\n  migrateExistingData(): void {\n    try {\n      const keys = this.getAllKeys()\n      const sensitiveData: Array<{key: string, value: string}> = []\n      \n      // Identify sensitive data that needs migration\n      keys.forEach(key => {\n        if (this.isSensitiveKey(key)) {\n          const value = localStorage.getItem(key)\n          if (value) {\n            sensitiveData.push({ key, value })\n          }\n        }\n      })\n      \n      // Re-encrypt sensitive data\n      sensitiveData.forEach(({ key, value }) => {\n        try {\n          // Try to decrypt first to see if it's already encrypted\n          decryptData(value)\n          // If no error, it's already encrypted\n        } catch {\n          // Not encrypted, so encrypt it now\n          const encryptedValue = encryptData(value)\n          localStorage.setItem(key, encryptedValue)\n        }\n      })\n      \n      console.log(`Migrated ${sensitiveData.length} sensitive items to secure storage`)\n    } catch (error) {\n      console.error('Failed to migrate existing data:', error)\n    }\n  }\n\n  /**\n   * Store JSON data securely using advanced encryption\n   */\n  async setJSONSecure(key: string, value: unknown): Promise<void> {\n    try {\n      const jsonString = JSON.stringify(value)\n      await this.setItemSecure(key, jsonString)\n    } catch (error) {\n      console.error(`Failed to store JSON securely '${key}':`, error)\n      throw new Error(`Secure JSON storage failed for key: ${key}`)\n    }\n  }\n\n  /**\n   * Retrieve JSON data securely using advanced decryption\n   */\n  async getJSONSecure<T = unknown>(key: string): Promise<T | null> {\n    try {\n      const jsonString = await this.getItemSecure(key)\n      if (jsonString === null) return null\n      return JSON.parse(jsonString) as T\n    } catch (error) {\n      console.error(`Failed to retrieve JSON securely '${key}':`, error)\n      return null\n    }\n  }\n}\n\n// Create and export singleton instance\nexport const secureStorage = new SecureStorage()\n\n// Export class for testing\nexport { SecureStorage }\n\n// Export convenience functions (legacy)\nexport const setSecureItem = (key: string, value: string) => secureStorage.setItem(key, value)\nexport const getSecureItem = (key: string) => secureStorage.getItem(key)\nexport const removeSecureItem = (key: string) => secureStorage.removeItem(key)\nexport const setSecureJSON = (key: string, value: unknown) => secureStorage.setJSON(key, value)\nexport const getSecureJSON = <T = unknown>(key: string) => secureStorage.getJSON<T>(key)\n\n// Export advanced secure functions (recommended for new code)\nexport async function setSecureItemAdvanced(key: string, value: string): Promise<void> {\n  return await secureStorage.setItemSecure(key, value)\n}\n\nexport async function getSecureItemAdvanced(key: string): Promise<string | null> {\n  return await secureStorage.getItemSecure(key)\n}\n\nexport async function setSecureJSONAdvanced(key: string, value: unknown): Promise<void> {\n  return await secureStorage.setJSONSecure(key, value)\n}\n\nexport async function getSecureJSONAdvanced<T = unknown>(key: string): Promise<T | null> {\n  return await secureStorage.getJSONSecure<T>(key)\n}\n\nexport async function migrateToAdvancedEncryption(): Promise<void> {\n  return await secureStorage.migrateToAdvancedEncryption()\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}