6c56ad86561a2bba6bdbbb0bfa8ee68c
"use strict";

/* istanbul ignore next */
function cov_1o2i3u45x7() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\emailService.ts";
  var hash = "35835deb2715660287c2fb7f751789581f611a3f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\emailService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 24
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 28
        }
      },
      "6": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 19,
          column: 44
        }
      },
      "7": {
        start: {
          line: 20,
          column: 30
        },
        end: {
          line: 20,
          column: 74
        }
      },
      "8": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 51
        }
      },
      "9": {
        start: {
          line: 22,
          column: 39
        },
        end: {
          line: 22,
          column: 51
        }
      },
      "10": {
        start: {
          line: 23,
          column: 28
        },
        end: {
          line: 23,
          column: 41
        }
      },
      "11": {
        start: {
          line: 24,
          column: 27
        },
        end: {
          line: 24,
          column: 40
        }
      },
      "12": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 27,
          column: 20
        }
      },
      "13": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 66
        }
      },
      "14": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 32,
          column: 5
        }
      },
      "15": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 19
        }
      },
      "16": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 37,
          column: 5
        }
      },
      "17": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 36,
          column: 10
        }
      },
      "18": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 53
        }
      },
      "19": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "20": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 30
        }
      },
      "21": {
        start: {
          line: 42,
          column: 17
        },
        end: {
          line: 44,
          column: 5
        }
      },
      "22": {
        start: {
          line: 45,
          column: 32
        },
        end: {
          line: 45,
          column: 88
        }
      },
      "23": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "24": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "25": {
        start: {
          line: 48,
          column: 23
        },
        end: {
          line: 48,
          column: 95
        }
      },
      "26": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 53,
          column: 13
        }
      },
      "27": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 50,
          column: 57
        }
      },
      "28": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 39
        }
      },
      "29": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 56,
          column: 25
        }
      },
      "30": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 59,
          column: 5
        }
      },
      "31": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 31
        }
      },
      "32": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 60,
          column: 18
        }
      },
      "33": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 67
        }
      },
      "34": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "35": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 76,
          column: 14
        }
      },
      "36": {
        start: {
          line: 78,
          column: 19
        },
        end: {
          line: 78,
          column: 42
        }
      },
      "37": {
        start: {
          line: 79,
          column: 23
        },
        end: {
          line: 79,
          column: 88
        }
      },
      "38": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 55
        }
      },
      "39": {
        start: {
          line: 81,
          column: 24
        },
        end: {
          line: 81,
          column: 58
        }
      },
      "40": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 41
        }
      },
      "41": {
        start: {
          line: 83,
          column: 20
        },
        end: {
          line: 83,
          column: 39
        }
      },
      "42": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 88,
          column: 10
        }
      },
      "43": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "44": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 33
        }
      },
      "45": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "46": {
        start: {
          line: 97,
          column: 29
        },
        end: {
          line: 97,
          column: 116
        }
      },
      "47": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 61
        }
      },
      "48": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 57
        }
      },
      "49": {
        start: {
          line: 100,
          column: 28
        },
        end: {
          line: 100,
          column: 73
        }
      },
      "50": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 48
        }
      },
      "51": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 29
        }
      },
      "52": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 66
        }
      },
      "53": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 55
        }
      },
      "54": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "55": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 27
        }
      },
      "56": {
        start: {
          line: 114,
          column: 30
        },
        end: {
          line: 114,
          column: 58
        }
      },
      "57": {
        start: {
          line: 115,
          column: 22
        },
        end: {
          line: 115,
          column: 42
        }
      },
      "58": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 68
        }
      },
      "59": {
        start: {
          line: 118,
          column: 33
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "60": {
        start: {
          line: 121,
          column: 32
        },
        end: {
          line: 121,
          column: 34
        }
      },
      "61": {
        start: {
          line: 123,
          column: 31
        },
        end: {
          line: 123,
          column: 76
        }
      },
      "62": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 128,
          column: 11
        }
      },
      "63": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 37
        }
      },
      "64": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "65": {
        start: {
          line: 132,
          column: 38
        },
        end: {
          line: 132,
          column: 86
        }
      },
      "66": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 137,
          column: 15
        }
      },
      "67": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 44
        }
      },
      "68": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "69": {
        start: {
          line: 142,
          column: 39
        },
        end: {
          line: 142,
          column: 104
        }
      },
      "70": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 147,
          column: 14
        }
      },
      "71": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 45
        }
      },
      "72": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "73": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 168,
          column: 16
        }
      },
      "74": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 166,
          column: 17
        }
      },
      "75": {
        start: {
          line: 154,
          column: 49
        },
        end: {
          line: 154,
          column: 97
        }
      },
      "76": {
        start: {
          line: 155,
          column: 20
        },
        end: {
          line: 165,
          column: 22
        }
      },
      "77": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 167,
          column: 34
        }
      },
      "78": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 48
        }
      },
      "79": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 44
        }
      },
      "80": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 49
        }
      },
      "81": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 59
        }
      },
      "82": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 32
        }
      },
      "83": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "84": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 27
        }
      },
      "85": {
        start: {
          line: 182,
          column: 30
        },
        end: {
          line: 182,
          column: 90
        }
      },
      "86": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "87": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 56
        }
      },
      "88": {
        start: {
          line: 186,
          column: 33
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "89": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "90": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 196,
          column: 13
        }
      },
      "91": {
        start: {
          line: 192,
          column: 33
        },
        end: {
          line: 192,
          column: 57
        }
      },
      "92": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 193,
          column: 119
        }
      },
      "93": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 195,
          column: 70
        }
      },
      "94": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "95": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 205,
          column: 13
        }
      },
      "96": {
        start: {
          line: 201,
          column: 36
        },
        end: {
          line: 201,
          column: 63
        }
      },
      "97": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 131
        }
      },
      "98": {
        start: {
          line: 204,
          column: 16
        },
        end: {
          line: 204,
          column: 73
        }
      },
      "99": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "100": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "101": {
        start: {
          line: 210,
          column: 36
        },
        end: {
          line: 210,
          column: 138
        }
      },
      "102": {
        start: {
          line: 211,
          column: 16
        },
        end: {
          line: 211,
          column: 68
        }
      },
      "103": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 74
        }
      },
      "104": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "105": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 234,
          column: 16
        }
      },
      "106": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 232,
          column: 17
        }
      },
      "107": {
        start: {
          line: 220,
          column: 20
        },
        end: {
          line: 231,
          column: 21
        }
      },
      "108": {
        start: {
          line: 221,
          column: 47
        },
        end: {
          line: 221,
          column: 74
        }
      },
      "109": {
        start: {
          line: 222,
          column: 24
        },
        end: {
          line: 227,
          column: 26
        }
      },
      "110": {
        start: {
          line: 229,
          column: 24
        },
        end: {
          line: 229,
          column: 78
        }
      },
      "111": {
        start: {
          line: 230,
          column: 24
        },
        end: {
          line: 230,
          column: 42
        }
      },
      "112": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 34
        }
      },
      "113": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 236,
          column: 32
        }
      },
      "114": {
        start: {
          line: 244,
          column: 26
        },
        end: {
          line: 249,
          column: 12
        }
      },
      "115": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 247,
          column: 13
        }
      },
      "116": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 90
        }
      },
      "117": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 60
        }
      },
      "118": {
        start: {
          line: 250,
          column: 30
        },
        end: {
          line: 250,
          column: 91
        }
      },
      "119": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 259,
          column: 11
        }
      },
      "120": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 281,
          column: 9
        }
      },
      "121": {
        start: {
          line: 265,
          column: 38
        },
        end: {
          line: 265,
          column: 151
        }
      },
      "122": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 268,
          column: 13
        }
      },
      "123": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 267,
          column: 28
        }
      },
      "124": {
        start: {
          line: 270,
          column: 30
        },
        end: {
          line: 275,
          column: 16
        }
      },
      "125": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 273,
          column: 17
        }
      },
      "126": {
        start: {
          line: 272,
          column: 20
        },
        end: {
          line: 272,
          column: 94
        }
      },
      "127": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 274,
          column: 64
        }
      },
      "128": {
        start: {
          line: 276,
          column: 33
        },
        end: {
          line: 276,
          column: 129
        }
      },
      "129": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 277,
          column: 52
        }
      },
      "130": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 71
        }
      },
      "131": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 24
        }
      },
      "132": {
        start: {
          line: 286,
          column: 34
        },
        end: {
          line: 292,
          column: 9
        }
      },
      "133": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 293,
          column: 72
        }
      },
      "134": {
        start: {
          line: 293,
          column: 49
        },
        end: {
          line: 293,
          column: 70
        }
      },
      "135": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 297,
          column: 29
        }
      },
      "136": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 320,
          column: 9
        }
      },
      "137": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 40
        }
      },
      "138": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 36
        }
      },
      "139": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 312,
          column: 15
        }
      },
      "140": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 314,
          column: 29
        }
      },
      "141": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 35
        }
      },
      "142": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 37
        }
      },
      "143": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 75
        }
      },
      "144": {
        start: {
          line: 324,
          column: 22
        },
        end: {
          line: 324,
          column: 53
        }
      },
      "145": {
        start: {
          line: 326,
          column: 22
        },
        end: {
          line: 326,
          column: 47
        }
      },
      "146": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 331,
          column: 9
        }
      },
      "147": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 32
        }
      },
      "148": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 329,
          column: 40
        }
      },
      "149": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 330,
          column: 54
        }
      },
      "150": {
        start: {
          line: 333,
          column: 29
        },
        end: {
          line: 333,
          column: 50
        }
      },
      "151": {
        start: {
          line: 334,
          column: 31
        },
        end: {
          line: 334,
          column: 71
        }
      },
      "152": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 338,
          column: 9
        }
      },
      "153": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 336,
          column: 34
        }
      },
      "154": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 337,
          column: 54
        }
      },
      "155": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 346,
          column: 9
        }
      },
      "156": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 345,
          column: 14
        }
      },
      "157": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 354,
          column: 9
        }
      },
      "158": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 353,
          column: 14
        }
      },
      "159": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 358,
          column: 10
        }
      },
      "160": {
        start: {
          line: 361,
          column: 32
        },
        end: {
          line: 361,
          column: 120
        }
      },
      "161": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 384,
          column: 9
        }
      },
      "162": {
        start: {
          line: 364,
          column: 33
        },
        end: {
          line: 371,
          column: 13
        }
      },
      "163": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 382,
          column: 15
        }
      },
      "164": {
        start: {
          line: 383,
          column: 12
        },
        end: {
          line: 383,
          column: 32
        }
      },
      "165": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 395,
          column: 10
        }
      },
      "166": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 403,
          column: 33
        }
      },
      "167": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 411,
          column: 9
        }
      },
      "168": {
        start: {
          line: 408,
          column: 12
        },
        end: {
          line: 410,
          column: 14
        }
      },
      "169": {
        start: {
          line: 412,
          column: 22
        },
        end: {
          line: 412,
          column: 53
        }
      },
      "170": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 422,
          column: 9
        }
      },
      "171": {
        start: {
          line: 415,
          column: 29
        },
        end: {
          line: 415,
          column: 60
        }
      },
      "172": {
        start: {
          line: 416,
          column: 12
        },
        end: {
          line: 421,
          column: 13
        }
      },
      "173": {
        start: {
          line: 417,
          column: 16
        },
        end: {
          line: 420,
          column: 18
        }
      },
      "174": {
        start: {
          line: 424,
          column: 36
        },
        end: {
          line: 424,
          column: 85
        }
      },
      "175": {
        start: {
          line: 424,
          column: 67
        },
        end: {
          line: 424,
          column: 81
        }
      },
      "176": {
        start: {
          line: 425,
          column: 30
        },
        end: {
          line: 425,
          column: 65
        }
      },
      "177": {
        start: {
          line: 426,
          column: 8
        },
        end: {
          line: 431,
          column: 9
        }
      },
      "178": {
        start: {
          line: 427,
          column: 12
        },
        end: {
          line: 430,
          column: 14
        }
      },
      "179": {
        start: {
          line: 432,
          column: 8
        },
        end: {
          line: 434,
          column: 10
        }
      },
      "180": {
        start: {
          line: 438,
          column: 8
        },
        end: {
          line: 444,
          column: 9
        }
      },
      "181": {
        start: {
          line: 439,
          column: 12
        },
        end: {
          line: 443,
          column: 14
        }
      },
      "182": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 445,
          column: 26
        }
      },
      "183": {
        start: {
          line: 448,
          column: 8
        },
        end: {
          line: 450,
          column: 9
        }
      },
      "184": {
        start: {
          line: 449,
          column: 12
        },
        end: {
          line: 449,
          column: 52
        }
      },
      "185": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 466,
          column: 9
        }
      },
      "186": {
        start: {
          line: 453,
          column: 12
        },
        end: {
          line: 462,
          column: 13
        }
      },
      "187": {
        start: {
          line: 455,
          column: 20
        },
        end: {
          line: 455,
          column: 62
        }
      },
      "188": {
        start: {
          line: 457,
          column: 20
        },
        end: {
          line: 457,
          column: 62
        }
      },
      "189": {
        start: {
          line: 459,
          column: 20
        },
        end: {
          line: 459,
          column: 59
        }
      },
      "190": {
        start: {
          line: 461,
          column: 20
        },
        end: {
          line: 461,
          column: 66
        }
      },
      "191": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 465,
          column: 25
        }
      },
      "192": {
        start: {
          line: 470,
          column: 25
        },
        end: {
          line: 474,
          column: 10
        }
      },
      "193": {
        start: {
          line: 475,
          column: 8
        },
        end: {
          line: 475,
          column: 27
        }
      },
      "194": {
        start: {
          line: 479,
          column: 25
        },
        end: {
          line: 483,
          column: 10
        }
      },
      "195": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 484,
          column: 27
        }
      },
      "196": {
        start: {
          line: 489,
          column: 8
        },
        end: {
          line: 489,
          column: 20
        }
      },
      "197": {
        start: {
          line: 493,
          column: 8
        },
        end: {
          line: 495,
          column: 9
        }
      },
      "198": {
        start: {
          line: 494,
          column: 12
        },
        end: {
          line: 494,
          column: 59
        }
      },
      "199": {
        start: {
          line: 497,
          column: 27
        },
        end: {
          line: 497,
          column: 61
        }
      },
      "200": {
        start: {
          line: 498,
          column: 8
        },
        end: {
          line: 500,
          column: 9
        }
      },
      "201": {
        start: {
          line: 499,
          column: 12
        },
        end: {
          line: 499,
          column: 47
        }
      },
      "202": {
        start: {
          line: 502,
          column: 8
        },
        end: {
          line: 511,
          column: 9
        }
      },
      "203": {
        start: {
          line: 503,
          column: 41
        },
        end: {
          line: 503,
          column: 100
        }
      },
      "204": {
        start: {
          line: 504,
          column: 12
        },
        end: {
          line: 506,
          column: 13
        }
      },
      "205": {
        start: {
          line: 505,
          column: 16
        },
        end: {
          line: 505,
          column: 61
        }
      },
      "206": {
        start: {
          line: 508,
          column: 12
        },
        end: {
          line: 510,
          column: 13
        }
      },
      "207": {
        start: {
          line: 509,
          column: 16
        },
        end: {
          line: 509,
          column: 118
        }
      },
      "208": {
        start: {
          line: 509,
          column: 87
        },
        end: {
          line: 509,
          column: 115
        }
      },
      "209": {
        start: {
          line: 512,
          column: 29
        },
        end: {
          line: 542,
          column: 9
        }
      },
      "210": {
        start: {
          line: 543,
          column: 8
        },
        end: {
          line: 596,
          column: 9
        }
      },
      "211": {
        start: {
          line: 545,
          column: 37
        },
        end: {
          line: 545,
          column: 134
        }
      },
      "212": {
        start: {
          line: 547,
          column: 36
        },
        end: {
          line: 547,
          column: 48
        }
      },
      "213": {
        start: {
          line: 548,
          column: 12
        },
        end: {
          line: 550,
          column: 13
        }
      },
      "214": {
        start: {
          line: 549,
          column: 16
        },
        end: {
          line: 549,
          column: 89
        }
      },
      "215": {
        start: {
          line: 552,
          column: 12
        },
        end: {
          line: 552,
          column: 53
        }
      },
      "216": {
        start: {
          line: 554,
          column: 12
        },
        end: {
          line: 554,
          column: 44
        }
      },
      "217": {
        start: {
          line: 555,
          column: 12
        },
        end: {
          line: 555,
          column: 46
        }
      },
      "218": {
        start: {
          line: 557,
          column: 12
        },
        end: {
          line: 560,
          column: 13
        }
      },
      "219": {
        start: {
          line: 558,
          column: 39
        },
        end: {
          line: 558,
          column: 106
        }
      },
      "220": {
        start: {
          line: 558,
          column: 88
        },
        end: {
          line: 558,
          column: 102
        }
      },
      "221": {
        start: {
          line: 559,
          column: 16
        },
        end: {
          line: 559,
          column: 79
        }
      },
      "222": {
        start: {
          line: 561,
          column: 12
        },
        end: {
          line: 561,
          column: 65
        }
      },
      "223": {
        start: {
          line: 563,
          column: 12
        },
        end: {
          line: 591,
          column: 15
        }
      },
      "224": {
        start: {
          line: 592,
          column: 12
        },
        end: {
          line: 592,
          column: 37
        }
      },
      "225": {
        start: {
          line: 594,
          column: 12
        },
        end: {
          line: 594,
          column: 43
        }
      },
      "226": {
        start: {
          line: 595,
          column: 12
        },
        end: {
          line: 595,
          column: 70
        }
      },
      "227": {
        start: {
          line: 601,
          column: 20
        },
        end: {
          line: 601,
          column: 87
        }
      },
      "228": {
        start: {
          line: 602,
          column: 8
        },
        end: {
          line: 604,
          column: 9
        }
      },
      "229": {
        start: {
          line: 603,
          column: 12
        },
        end: {
          line: 603,
          column: 47
        }
      },
      "230": {
        start: {
          line: 605,
          column: 32
        },
        end: {
          line: 607,
          column: 10
        }
      },
      "231": {
        start: {
          line: 608,
          column: 8
        },
        end: {
          line: 610,
          column: 9
        }
      },
      "232": {
        start: {
          line: 609,
          column: 12
        },
        end: {
          line: 609,
          column: 70
        }
      },
      "233": {
        start: {
          line: 612,
          column: 23
        },
        end: {
          line: 646,
          column: 11
        }
      },
      "234": {
        start: {
          line: 613,
          column: 26
        },
        end: {
          line: 640,
          column: 13
        }
      },
      "235": {
        start: {
          line: 642,
          column: 12
        },
        end: {
          line: 644,
          column: 13
        }
      },
      "236": {
        start: {
          line: 643,
          column: 16
        },
        end: {
          line: 643,
          column: 69
        }
      },
      "237": {
        start: {
          line: 645,
          column: 12
        },
        end: {
          line: 645,
          column: 25
        }
      },
      "238": {
        start: {
          line: 647,
          column: 8
        },
        end: {
          line: 647,
          column: 22
        }
      },
      "239": {
        start: {
          line: 650,
          column: 8
        },
        end: {
          line: 662,
          column: 9
        }
      },
      "240": {
        start: {
          line: 652,
          column: 16
        },
        end: {
          line: 652,
          column: 51
        }
      },
      "241": {
        start: {
          line: 653,
          column: 16
        },
        end: {
          line: 653,
          column: 22
        }
      },
      "242": {
        start: {
          line: 655,
          column: 16
        },
        end: {
          line: 655,
          column: 51
        }
      },
      "243": {
        start: {
          line: 656,
          column: 16
        },
        end: {
          line: 656,
          column: 22
        }
      },
      "244": {
        start: {
          line: 658,
          column: 16
        },
        end: {
          line: 658,
          column: 48
        }
      },
      "245": {
        start: {
          line: 659,
          column: 16
        },
        end: {
          line: 659,
          column: 22
        }
      },
      "246": {
        start: {
          line: 661,
          column: 16
        },
        end: {
          line: 661,
          column: 62
        }
      },
      "247": {
        start: {
          line: 665,
          column: 22
        },
        end: {
          line: 665,
          column: 57
        }
      },
      "248": {
        start: {
          line: 666,
          column: 25
        },
        end: {
          line: 673,
          column: 10
        }
      },
      "249": {
        start: {
          line: 674,
          column: 8
        },
        end: {
          line: 676,
          column: 9
        }
      },
      "250": {
        start: {
          line: 675,
          column: 12
        },
        end: {
          line: 675,
          column: 73
        }
      },
      "251": {
        start: {
          line: 679,
          column: 22
        },
        end: {
          line: 679,
          column: 57
        }
      },
      "252": {
        start: {
          line: 680,
          column: 25
        },
        end: {
          line: 689,
          column: 10
        }
      },
      "253": {
        start: {
          line: 690,
          column: 8
        },
        end: {
          line: 692,
          column: 9
        }
      },
      "254": {
        start: {
          line: 691,
          column: 12
        },
        end: {
          line: 691,
          column: 73
        }
      },
      "255": {
        start: {
          line: 700,
          column: 8
        },
        end: {
          line: 721,
          column: 10
        }
      },
      "256": {
        start: {
          line: 707,
          column: 49
        },
        end: {
          line: 709,
          column: 25
        }
      },
      "257": {
        start: {
          line: 710,
          column: 50
        },
        end: {
          line: 712,
          column: 25
        }
      },
      "258": {
        start: {
          line: 713,
          column: 52
        },
        end: {
          line: 715,
          column: 25
        }
      },
      "259": {
        start: {
          line: 724,
          column: 8
        },
        end: {
          line: 746,
          column: 10
        }
      },
      "260": {
        start: {
          line: 730,
          column: 51
        },
        end: {
          line: 734,
          column: 17
        }
      },
      "261": {
        start: {
          line: 735,
          column: 52
        },
        end: {
          line: 739,
          column: 17
        }
      },
      "262": {
        start: {
          line: 740,
          column: 54
        },
        end: {
          line: 744,
          column: 17
        }
      },
      "263": {
        start: {
          line: 751,
          column: 20
        },
        end: {
          line: 751,
          column: 30
        }
      },
      "264": {
        start: {
          line: 752,
          column: 25
        },
        end: {
          line: 752,
          column: 38
        }
      },
      "265": {
        start: {
          line: 753,
          column: 8
        },
        end: {
          line: 753,
          column: 49
        }
      },
      "266": {
        start: {
          line: 754,
          column: 8
        },
        end: {
          line: 754,
          column: 38
        }
      },
      "267": {
        start: {
          line: 755,
          column: 32
        },
        end: {
          line: 755,
          column: 66
        }
      },
      "268": {
        start: {
          line: 756,
          column: 8
        },
        end: {
          line: 760,
          column: 28
        }
      },
      "269": {
        start: {
          line: 757,
          column: 12
        },
        end: {
          line: 757,
          column: 30
        }
      },
      "270": {
        start: {
          line: 759,
          column: 12
        },
        end: {
          line: 759,
          column: 68
        }
      },
      "271": {
        start: {
          line: 759,
          column: 28
        },
        end: {
          line: 759,
          column: 45
        }
      },
      "272": {
        start: {
          line: 763,
          column: 8
        },
        end: {
          line: 773,
          column: 9
        }
      },
      "273": {
        start: {
          line: 765,
          column: 12
        },
        end: {
          line: 769,
          column: 13
        }
      },
      "274": {
        start: {
          line: 766,
          column: 16
        },
        end: {
          line: 766,
          column: 46
        }
      },
      "275": {
        start: {
          line: 767,
          column: 16
        },
        end: {
          line: 767,
          column: 51
        }
      },
      "276": {
        start: {
          line: 768,
          column: 16
        },
        end: {
          line: 768,
          column: 50
        }
      },
      "277": {
        start: {
          line: 776,
          column: 27
        },
        end: {
          line: 776,
          column: 37
        }
      },
      "278": {
        start: {
          line: 777,
          column: 8
        },
        end: {
          line: 777,
          column: 97
        }
      },
      "279": {
        start: {
          line: 778,
          column: 31
        },
        end: {
          line: 778,
          column: 41
        }
      },
      "280": {
        start: {
          line: 779,
          column: 8
        },
        end: {
          line: 779,
          column: 109
        }
      },
      "281": {
        start: {
          line: 781,
          column: 8
        },
        end: {
          line: 781,
          column: 121
        }
      },
      "282": {
        start: {
          line: 783,
          column: 8
        },
        end: {
          line: 783,
          column: 126
        }
      },
      "283": {
        start: {
          line: 786,
          column: 23
        },
        end: {
          line: 786,
          column: 33
        }
      },
      "284": {
        start: {
          line: 787,
          column: 8
        },
        end: {
          line: 787,
          column: 90
        }
      },
      "285": {
        start: {
          line: 789,
          column: 36
        },
        end: {
          line: 789,
          column: 180
        }
      },
      "286": {
        start: {
          line: 790,
          column: 8
        },
        end: {
          line: 806,
          column: 9
        }
      },
      "287": {
        start: {
          line: 791,
          column: 12
        },
        end: {
          line: 805,
          column: 13
        }
      },
      "288": {
        start: {
          line: 793,
          column: 39
        },
        end: {
          line: 793,
          column: 100
        }
      },
      "289": {
        start: {
          line: 793,
          column: 77
        },
        end: {
          line: 793,
          column: 91
        }
      },
      "290": {
        start: {
          line: 794,
          column: 33
        },
        end: {
          line: 794,
          column: 63
        }
      },
      "291": {
        start: {
          line: 796,
          column: 16
        },
        end: {
          line: 798,
          column: 38
        }
      },
      "292": {
        start: {
          line: 800,
          column: 16
        },
        end: {
          line: 804,
          column: 17
        }
      },
      "293": {
        start: {
          line: 801,
          column: 34
        },
        end: {
          line: 801,
          column: 72
        }
      },
      "294": {
        start: {
          line: 802,
          column: 20
        },
        end: {
          line: 802,
          column: 82
        }
      },
      "295": {
        start: {
          line: 803,
          column: 20
        },
        end: {
          line: 803,
          column: 69
        }
      },
      "296": {
        start: {
          line: 809,
          column: 8
        },
        end: {
          line: 809,
          column: 77
        }
      },
      "297": {
        start: {
          line: 809,
          column: 33
        },
        end: {
          line: 809,
          column: 77
        }
      },
      "298": {
        start: {
          line: 810,
          column: 23
        },
        end: {
          line: 810,
          column: 33
        }
      },
      "299": {
        start: {
          line: 811,
          column: 8
        },
        end: {
          line: 811,
          column: 92
        }
      },
      "300": {
        start: {
          line: 812,
          column: 8
        },
        end: {
          line: 812,
          column: 118
        }
      },
      "301": {
        start: {
          line: 816,
          column: 28
        },
        end: {
          line: 822,
          column: 9
        }
      },
      "302": {
        start: {
          line: 823,
          column: 26
        },
        end: {
          line: 836,
          column: 10
        }
      },
      "303": {
        start: {
          line: 837,
          column: 8
        },
        end: {
          line: 839,
          column: 9
        }
      },
      "304": {
        start: {
          line: 838,
          column: 12
        },
        end: {
          line: 838,
          column: 75
        }
      },
      "305": {
        start: {
          line: 840,
          column: 8
        },
        end: {
          line: 840,
          column: 27
        }
      },
      "306": {
        start: {
          line: 843,
          column: 20
        },
        end: {
          line: 843,
          column: 110
        }
      },
      "307": {
        start: {
          line: 844,
          column: 8
        },
        end: {
          line: 846,
          column: 9
        }
      },
      "308": {
        start: {
          line: 845,
          column: 12
        },
        end: {
          line: 845,
          column: 51
        }
      },
      "309": {
        start: {
          line: 847,
          column: 32
        },
        end: {
          line: 847,
          column: 43
        }
      },
      "310": {
        start: {
          line: 848,
          column: 8
        },
        end: {
          line: 850,
          column: 9
        }
      },
      "311": {
        start: {
          line: 849,
          column: 12
        },
        end: {
          line: 849,
          column: 73
        }
      },
      "312": {
        start: {
          line: 851,
          column: 8
        },
        end: {
          line: 864,
          column: 16
        }
      },
      "313": {
        start: {
          line: 851,
          column: 45
        },
        end: {
          line: 864,
          column: 13
        }
      },
      "314": {
        start: {
          line: 867,
          column: 25
        },
        end: {
          line: 867,
          column: 59
        }
      },
      "315": {
        start: {
          line: 868,
          column: 8
        },
        end: {
          line: 870,
          column: 9
        }
      },
      "316": {
        start: {
          line: 869,
          column: 12
        },
        end: {
          line: 869,
          column: 50
        }
      },
      "317": {
        start: {
          line: 871,
          column: 22
        },
        end: {
          line: 871,
          column: 38
        }
      },
      "318": {
        start: {
          line: 872,
          column: 19
        },
        end: {
          line: 872,
          column: 32
        }
      },
      "319": {
        start: {
          line: 874,
          column: 8
        },
        end: {
          line: 878,
          column: 11
        }
      },
      "320": {
        start: {
          line: 875,
          column: 32
        },
        end: {
          line: 875,
          column: 44
        }
      },
      "321": {
        start: {
          line: 876,
          column: 12
        },
        end: {
          line: 876,
          column: 75
        }
      },
      "322": {
        start: {
          line: 877,
          column: 12
        },
        end: {
          line: 877,
          column: 69
        }
      },
      "323": {
        start: {
          line: 880,
          column: 8
        },
        end: {
          line: 882,
          column: 32
        }
      },
      "324": {
        start: {
          line: 883,
          column: 8
        },
        end: {
          line: 886,
          column: 10
        }
      },
      "325": {
        start: {
          line: 889,
          column: 32
        },
        end: {
          line: 889,
          column: 114
        }
      },
      "326": {
        start: {
          line: 890,
          column: 8
        },
        end: {
          line: 890,
          column: 31
        }
      },
      "327": {
        start: {
          line: 890,
          column: 19
        },
        end: {
          line: 890,
          column: 31
        }
      },
      "328": {
        start: {
          line: 891,
          column: 8
        },
        end: {
          line: 904,
          column: 10
        }
      },
      "329": {
        start: {
          line: 908,
          column: 8
        },
        end: {
          line: 910,
          column: 9
        }
      },
      "330": {
        start: {
          line: 909,
          column: 12
        },
        end: {
          line: 909,
          column: 45
        }
      },
      "331": {
        start: {
          line: 911,
          column: 8
        },
        end: {
          line: 913,
          column: 26
        }
      },
      "332": {
        start: {
          line: 912,
          column: 12
        },
        end: {
          line: 912,
          column: 30
        }
      },
      "333": {
        start: {
          line: 916,
          column: 8
        },
        end: {
          line: 916,
          column: 38
        }
      },
      "334": {
        start: {
          line: 916,
          column: 31
        },
        end: {
          line: 916,
          column: 38
        }
      },
      "335": {
        start: {
          line: 917,
          column: 8
        },
        end: {
          line: 926,
          column: 9
        }
      },
      "336": {
        start: {
          line: 919,
          column: 12
        },
        end: {
          line: 923,
          column: 13
        }
      },
      "337": {
        start: {
          line: 921,
          column: 20
        },
        end: {
          line: 921,
          column: 51
        }
      },
      "338": {
        start: {
          line: 922,
          column: 20
        },
        end: {
          line: 922,
          column: 26
        }
      },
      "339": {
        start: {
          line: 934,
          column: 20
        },
        end: {
          line: 934,
          column: 89
        }
      },
      "340": {
        start: {
          line: 935,
          column: 8
        },
        end: {
          line: 937,
          column: 9
        }
      },
      "341": {
        start: {
          line: 936,
          column: 12
        },
        end: {
          line: 936,
          column: 122
        }
      },
      "342": {
        start: {
          line: 938,
          column: 32
        },
        end: {
          line: 938,
          column: 43
        }
      },
      "343": {
        start: {
          line: 939,
          column: 8
        },
        end: {
          line: 941,
          column: 9
        }
      },
      "344": {
        start: {
          line: 940,
          column: 12
        },
        end: {
          line: 940,
          column: 73
        }
      },
      "345": {
        start: {
          line: 942,
          column: 23
        },
        end: {
          line: 942,
          column: 33
        }
      },
      "346": {
        start: {
          line: 943,
          column: 21
        },
        end: {
          line: 943,
          column: 67
        }
      },
      "347": {
        start: {
          line: 943,
          column: 40
        },
        end: {
          line: 943,
          column: 59
        }
      },
      "348": {
        start: {
          line: 944,
          column: 23
        },
        end: {
          line: 944,
          column: 59
        }
      },
      "349": {
        start: {
          line: 944,
          column: 42
        },
        end: {
          line: 944,
          column: 51
        }
      },
      "350": {
        start: {
          line: 945,
          column: 24
        },
        end: {
          line: 945,
          column: 70
        }
      },
      "351": {
        start: {
          line: 945,
          column: 43
        },
        end: {
          line: 945,
          column: 62
        }
      },
      "352": {
        start: {
          line: 946,
          column: 24
        },
        end: {
          line: 946,
          column: 70
        }
      },
      "353": {
        start: {
          line: 946,
          column: 43
        },
        end: {
          line: 946,
          column: 62
        }
      },
      "354": {
        start: {
          line: 947,
          column: 24
        },
        end: {
          line: 947,
          column: 72
        }
      },
      "355": {
        start: {
          line: 947,
          column: 43
        },
        end: {
          line: 947,
          column: 64
        }
      },
      "356": {
        start: {
          line: 948,
          column: 8
        },
        end: {
          line: 960,
          column: 10
        }
      },
      "357": {
        start: {
          line: 964,
          column: 22
        },
        end: {
          line: 964,
          column: 53
        }
      },
      "358": {
        start: {
          line: 965,
          column: 8
        },
        end: {
          line: 981,
          column: 10
        }
      },
      "359": {
        start: {
          line: 985,
          column: 8
        },
        end: {
          line: 987,
          column: 9
        }
      },
      "360": {
        start: {
          line: 986,
          column: 12
        },
        end: {
          line: 986,
          column: 45
        }
      },
      "361": {
        start: {
          line: 990,
          column: 8
        },
        end: {
          line: 990,
          column: 27
        }
      },
      "362": {
        start: {
          line: 991,
          column: 8
        },
        end: {
          line: 991,
          column: 33
        }
      },
      "363": {
        start: {
          line: 992,
          column: 8
        },
        end: {
          line: 992,
          column: 33
        }
      },
      "364": {
        start: {
          line: 994,
          column: 8
        },
        end: {
          line: 999,
          column: 10
        }
      },
      "365": {
        start: {
          line: 1001,
          column: 8
        },
        end: {
          line: 1008,
          column: 10
        }
      },
      "366": {
        start: {
          line: 1010,
          column: 8
        },
        end: {
          line: 1018,
          column: 10
        }
      },
      "367": {
        start: {
          line: 1021,
          column: 21
        },
        end: {
          line: 1021,
          column: 39
        }
      },
      "368": {
        start: {
          line: 1022,
          column: 17
        },
        end: {
          line: 1022,
          column: 29
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 19
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 24
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 21,
            column: 9
          },
          end: {
            line: 21,
            column: 33
          }
        },
        loc: {
          start: {
            line: 21,
            column: 47
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 21
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 25,
            column: 39
          },
          end: {
            line: 25,
            column: 40
          }
        },
        loc: {
          start: {
            line: 25,
            column: 61
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "5": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 29,
            column: 9
          },
          end: {
            line: 29,
            column: 34
          }
        },
        loc: {
          start: {
            line: 29,
            column: 53
          },
          end: {
            line: 61,
            column: 1
          }
        },
        line: 29
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 65,
            column: 6
          },
          end: {
            line: 65,
            column: 7
          }
        },
        loc: {
          start: {
            line: 65,
            column: 30
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 65
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 70,
            column: 6
          },
          end: {
            line: 70,
            column: 7
          }
        },
        loc: {
          start: {
            line: 70,
            column: 29
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 70
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 92,
            column: 6
          },
          end: {
            line: 92,
            column: 7
          }
        },
        loc: {
          start: {
            line: 92,
            column: 47
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 92
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 110,
            column: 6
          },
          end: {
            line: 110,
            column: 7
          }
        },
        loc: {
          start: {
            line: 110,
            column: 49
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 110
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 152,
            column: 85
          },
          end: {
            line: 152,
            column: 86
          }
        },
        loc: {
          start: {
            line: 152,
            column: 105
          },
          end: {
            line: 168,
            column: 13
          }
        },
        line: 152
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 178,
            column: 6
          },
          end: {
            line: 178,
            column: 7
          }
        },
        loc: {
          start: {
            line: 178,
            column: 49
          },
          end: {
            line: 237,
            column: 5
          }
        },
        line: 178
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 218,
            column: 85
          },
          end: {
            line: 218,
            column: 86
          }
        },
        loc: {
          start: {
            line: 218,
            column: 105
          },
          end: {
            line: 234,
            column: 13
          }
        },
        line: 218
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 240,
            column: 6
          },
          end: {
            line: 240,
            column: 7
          }
        },
        loc: {
          start: {
            line: 240,
            column: 51
          },
          end: {
            line: 260,
            column: 5
          }
        },
        line: 240
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 244,
            column: 59
          },
          end: {
            line: 244,
            column: 60
          }
        },
        loc: {
          start: {
            line: 244,
            column: 63
          },
          end: {
            line: 249,
            column: 9
          }
        },
        line: 244
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 263,
            column: 6
          },
          end: {
            line: 263,
            column: 7
          }
        },
        loc: {
          start: {
            line: 263,
            column: 44
          },
          end: {
            line: 282,
            column: 5
          }
        },
        line: 263
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 270,
            column: 63
          },
          end: {
            line: 270,
            column: 64
          }
        },
        loc: {
          start: {
            line: 270,
            column: 67
          },
          end: {
            line: 275,
            column: 13
          }
        },
        line: 270
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 285,
            column: 6
          },
          end: {
            line: 285,
            column: 7
          }
        },
        loc: {
          start: {
            line: 285,
            column: 37
          },
          end: {
            line: 294,
            column: 5
          }
        },
        line: 285
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 293,
            column: 38
          },
          end: {
            line: 293,
            column: 39
          }
        },
        loc: {
          start: {
            line: 293,
            column: 49
          },
          end: {
            line: 293,
            column: 70
          }
        },
        line: 293
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 296,
            column: 4
          },
          end: {
            line: 296,
            column: 5
          }
        },
        loc: {
          start: {
            line: 296,
            column: 28
          },
          end: {
            line: 321,
            column: 5
          }
        },
        line: 296
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 323,
            column: 4
          },
          end: {
            line: 323,
            column: 5
          }
        },
        loc: {
          start: {
            line: 323,
            column: 34
          },
          end: {
            line: 359,
            column: 5
          }
        },
        line: 323
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 360,
            column: 4
          },
          end: {
            line: 360,
            column: 5
          }
        },
        loc: {
          start: {
            line: 360,
            column: 31
          },
          end: {
            line: 396,
            column: 5
          }
        },
        line: 360
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 397,
            column: 4
          },
          end: {
            line: 397,
            column: 5
          }
        },
        loc: {
          start: {
            line: 397,
            column: 41
          },
          end: {
            line: 404,
            column: 5
          }
        },
        line: 397
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 406,
            column: 4
          },
          end: {
            line: 406,
            column: 5
          }
        },
        loc: {
          start: {
            line: 406,
            column: 51
          },
          end: {
            line: 435,
            column: 5
          }
        },
        line: 406
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 424,
            column: 55
          },
          end: {
            line: 424,
            column: 56
          }
        },
        loc: {
          start: {
            line: 424,
            column: 67
          },
          end: {
            line: 424,
            column: 81
          }
        },
        line: 424
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 436,
            column: 4
          },
          end: {
            line: 436,
            column: 5
          }
        },
        loc: {
          start: {
            line: 436,
            column: 41
          },
          end: {
            line: 446,
            column: 5
          }
        },
        line: 436
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 447,
            column: 4
          },
          end: {
            line: 447,
            column: 5
          }
        },
        loc: {
          start: {
            line: 447,
            column: 27
          },
          end: {
            line: 467,
            column: 5
          }
        },
        line: 447
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 468,
            column: 4
          },
          end: {
            line: 468,
            column: 5
          }
        },
        loc: {
          start: {
            line: 468,
            column: 34
          },
          end: {
            line: 476,
            column: 5
          }
        },
        line: 468
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 477,
            column: 4
          },
          end: {
            line: 477,
            column: 5
          }
        },
        loc: {
          start: {
            line: 477,
            column: 34
          },
          end: {
            line: 485,
            column: 5
          }
        },
        line: 477
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 486,
            column: 4
          },
          end: {
            line: 486,
            column: 5
          }
        },
        loc: {
          start: {
            line: 486,
            column: 31
          },
          end: {
            line: 490,
            column: 5
          }
        },
        line: 486
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 492,
            column: 4
          },
          end: {
            line: 492,
            column: 5
          }
        },
        loc: {
          start: {
            line: 492,
            column: 37
          },
          end: {
            line: 597,
            column: 5
          }
        },
        line: 492
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 509,
            column: 80
          },
          end: {
            line: 509,
            column: 81
          }
        },
        loc: {
          start: {
            line: 509,
            column: 87
          },
          end: {
            line: 509,
            column: 115
          }
        },
        line: 509
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 558,
            column: 76
          },
          end: {
            line: 558,
            column: 77
          }
        },
        loc: {
          start: {
            line: 558,
            column: 88
          },
          end: {
            line: 558,
            column: 102
          }
        },
        line: 558
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 600,
            column: 6
          },
          end: {
            line: 600,
            column: 7
          }
        },
        loc: {
          start: {
            line: 600,
            column: 38
          },
          end: {
            line: 648,
            column: 5
          }
        },
        line: 600
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 612,
            column: 58
          },
          end: {
            line: 612,
            column: 59
          }
        },
        loc: {
          start: {
            line: 612,
            column: 77
          },
          end: {
            line: 646,
            column: 9
          }
        },
        line: 612
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 649,
            column: 4
          },
          end: {
            line: 649,
            column: 5
          }
        },
        loc: {
          start: {
            line: 649,
            column: 35
          },
          end: {
            line: 663,
            column: 5
          }
        },
        line: 649
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 664,
            column: 4
          },
          end: {
            line: 664,
            column: 5
          }
        },
        loc: {
          start: {
            line: 664,
            column: 34
          },
          end: {
            line: 677,
            column: 5
          }
        },
        line: 664
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 678,
            column: 4
          },
          end: {
            line: 678,
            column: 5
          }
        },
        loc: {
          start: {
            line: 678,
            column: 34
          },
          end: {
            line: 693,
            column: 5
          }
        },
        line: 678
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 694,
            column: 4
          },
          end: {
            line: 694,
            column: 5
          }
        },
        loc: {
          start: {
            line: 694,
            column: 31
          },
          end: {
            line: 698,
            column: 5
          }
        },
        line: 694
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 699,
            column: 4
          },
          end: {
            line: 699,
            column: 5
          }
        },
        loc: {
          start: {
            line: 699,
            column: 35
          },
          end: {
            line: 722,
            column: 5
          }
        },
        line: 699
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 707,
            column: 39
          },
          end: {
            line: 707,
            column: 40
          }
        },
        loc: {
          start: {
            line: 707,
            column: 49
          },
          end: {
            line: 709,
            column: 25
          }
        },
        line: 707
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 710,
            column: 40
          },
          end: {
            line: 710,
            column: 41
          }
        },
        loc: {
          start: {
            line: 710,
            column: 50
          },
          end: {
            line: 712,
            column: 25
          }
        },
        line: 710
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 713,
            column: 42
          },
          end: {
            line: 713,
            column: 43
          }
        },
        loc: {
          start: {
            line: 713,
            column: 52
          },
          end: {
            line: 715,
            column: 25
          }
        },
        line: 713
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 723,
            column: 4
          },
          end: {
            line: 723,
            column: 5
          }
        },
        loc: {
          start: {
            line: 723,
            column: 35
          },
          end: {
            line: 747,
            column: 5
          }
        },
        line: 723
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 730,
            column: 41
          },
          end: {
            line: 730,
            column: 42
          }
        },
        loc: {
          start: {
            line: 730,
            column: 51
          },
          end: {
            line: 734,
            column: 17
          }
        },
        line: 730
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 735,
            column: 42
          },
          end: {
            line: 735,
            column: 43
          }
        },
        loc: {
          start: {
            line: 735,
            column: 52
          },
          end: {
            line: 739,
            column: 17
          }
        },
        line: 735
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 740,
            column: 44
          },
          end: {
            line: 740,
            column: 45
          }
        },
        loc: {
          start: {
            line: 740,
            column: 54
          },
          end: {
            line: 744,
            column: 17
          }
        },
        line: 740
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 749,
            column: 4
          },
          end: {
            line: 749,
            column: 5
          }
        },
        loc: {
          start: {
            line: 749,
            column: 22
          },
          end: {
            line: 761,
            column: 5
          }
        },
        line: 749
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 756,
            column: 19
          },
          end: {
            line: 756,
            column: 20
          }
        },
        loc: {
          start: {
            line: 756,
            column: 23
          },
          end: {
            line: 760,
            column: 9
          }
        },
        line: 756
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 759,
            column: 24
          },
          end: {
            line: 759,
            column: 25
          }
        },
        loc: {
          start: {
            line: 759,
            column: 28
          },
          end: {
            line: 759,
            column: 45
          }
        },
        line: 759
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 762,
            column: 4
          },
          end: {
            line: 762,
            column: 5
          }
        },
        loc: {
          start: {
            line: 762,
            column: 23
          },
          end: {
            line: 774,
            column: 5
          }
        },
        line: 762
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 775,
            column: 4
          },
          end: {
            line: 775,
            column: 5
          }
        },
        loc: {
          start: {
            line: 775,
            column: 29
          },
          end: {
            line: 784,
            column: 5
          }
        },
        line: 775
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 785,
            column: 4
          },
          end: {
            line: 785,
            column: 5
          }
        },
        loc: {
          start: {
            line: 785,
            column: 34
          },
          end: {
            line: 807,
            column: 5
          }
        },
        line: 785
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 793,
            column: 65
          },
          end: {
            line: 793,
            column: 66
          }
        },
        loc: {
          start: {
            line: 793,
            column: 77
          },
          end: {
            line: 793,
            column: 91
          }
        },
        line: 793
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 808,
            column: 4
          },
          end: {
            line: 808,
            column: 5
          }
        },
        loc: {
          start: {
            line: 808,
            column: 33
          },
          end: {
            line: 813,
            column: 5
          }
        },
        line: 808
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 815,
            column: 4
          },
          end: {
            line: 815,
            column: 5
          }
        },
        loc: {
          start: {
            line: 815,
            column: 35
          },
          end: {
            line: 841,
            column: 5
          }
        },
        line: 815
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 842,
            column: 4
          },
          end: {
            line: 842,
            column: 5
          }
        },
        loc: {
          start: {
            line: 842,
            column: 33
          },
          end: {
            line: 865,
            column: 5
          }
        },
        line: 842
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 851,
            column: 32
          },
          end: {
            line: 851,
            column: 33
          }
        },
        loc: {
          start: {
            line: 851,
            column: 45
          },
          end: {
            line: 864,
            column: 13
          }
        },
        line: 851
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 866,
            column: 4
          },
          end: {
            line: 866,
            column: 5
          }
        },
        loc: {
          start: {
            line: 866,
            column: 48
          },
          end: {
            line: 887,
            column: 5
          }
        },
        line: 866
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 874,
            column: 42
          },
          end: {
            line: 874,
            column: 43
          }
        },
        loc: {
          start: {
            line: 874,
            column: 58
          },
          end: {
            line: 878,
            column: 9
          }
        },
        line: 874
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 888,
            column: 4
          },
          end: {
            line: 888,
            column: 5
          }
        },
        loc: {
          start: {
            line: 888,
            column: 26
          },
          end: {
            line: 905,
            column: 5
          }
        },
        line: 888
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 907,
            column: 4
          },
          end: {
            line: 907,
            column: 5
          }
        },
        loc: {
          start: {
            line: 907,
            column: 16
          },
          end: {
            line: 914,
            column: 5
          }
        },
        line: 907
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 911,
            column: 40
          },
          end: {
            line: 911,
            column: 41
          }
        },
        loc: {
          start: {
            line: 911,
            column: 44
          },
          end: {
            line: 913,
            column: 9
          }
        },
        line: 911
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 915,
            column: 4
          },
          end: {
            line: 915,
            column: 5
          }
        },
        loc: {
          start: {
            line: 915,
            column: 23
          },
          end: {
            line: 927,
            column: 5
          }
        },
        line: 915
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 928,
            column: 4
          },
          end: {
            line: 928,
            column: 5
          }
        },
        loc: {
          start: {
            line: 928,
            column: 30
          },
          end: {
            line: 931,
            column: 5
          }
        },
        line: 928
      },
      "65": {
        name: "(anonymous_65)",
        decl: {
          start: {
            line: 933,
            column: 4
          },
          end: {
            line: 933,
            column: 5
          }
        },
        loc: {
          start: {
            line: 933,
            column: 34
          },
          end: {
            line: 961,
            column: 5
          }
        },
        line: 933
      },
      "66": {
        name: "(anonymous_66)",
        decl: {
          start: {
            line: 943,
            column: 35
          },
          end: {
            line: 943,
            column: 36
          }
        },
        loc: {
          start: {
            line: 943,
            column: 40
          },
          end: {
            line: 943,
            column: 59
          }
        },
        line: 943
      },
      "67": {
        name: "(anonymous_67)",
        decl: {
          start: {
            line: 944,
            column: 37
          },
          end: {
            line: 944,
            column: 38
          }
        },
        loc: {
          start: {
            line: 944,
            column: 42
          },
          end: {
            line: 944,
            column: 51
          }
        },
        line: 944
      },
      "68": {
        name: "(anonymous_68)",
        decl: {
          start: {
            line: 945,
            column: 38
          },
          end: {
            line: 945,
            column: 39
          }
        },
        loc: {
          start: {
            line: 945,
            column: 43
          },
          end: {
            line: 945,
            column: 62
          }
        },
        line: 945
      },
      "69": {
        name: "(anonymous_69)",
        decl: {
          start: {
            line: 946,
            column: 38
          },
          end: {
            line: 946,
            column: 39
          }
        },
        loc: {
          start: {
            line: 946,
            column: 43
          },
          end: {
            line: 946,
            column: 62
          }
        },
        line: 946
      },
      "70": {
        name: "(anonymous_70)",
        decl: {
          start: {
            line: 947,
            column: 38
          },
          end: {
            line: 947,
            column: 39
          }
        },
        loc: {
          start: {
            line: 947,
            column: 43
          },
          end: {
            line: 947,
            column: 64
          }
        },
        line: 947
      },
      "71": {
        name: "(anonymous_71)",
        decl: {
          start: {
            line: 963,
            column: 4
          },
          end: {
            line: 963,
            column: 5
          }
        },
        loc: {
          start: {
            line: 963,
            column: 33
          },
          end: {
            line: 982,
            column: 5
          }
        },
        line: 963
      },
      "72": {
        name: "(anonymous_72)",
        decl: {
          start: {
            line: 984,
            column: 4
          },
          end: {
            line: 984,
            column: 5
          }
        },
        loc: {
          start: {
            line: 984,
            column: 14
          },
          end: {
            line: 988,
            column: 5
          }
        },
        line: 984
      },
      "73": {
        name: "(anonymous_73)",
        decl: {
          start: {
            line: 989,
            column: 4
          },
          end: {
            line: 989,
            column: 5
          }
        },
        loc: {
          start: {
            line: 989,
            column: 17
          },
          end: {
            line: 1019,
            column: 5
          }
        },
        line: 989
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 26,
            column: 15
          },
          end: {
            line: 26,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 26,
            column: 29
          },
          end: {
            line: 26,
            column: 45
          }
        }, {
          start: {
            line: 26,
            column: 48
          },
          end: {
            line: 26,
            column: 65
          }
        }],
        line: 26
      },
      "2": {
        loc: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "3": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 20
          }
        }, {
          start: {
            line: 30,
            column: 24
          },
          end: {
            line: 30,
            column: 27
          }
        }, {
          start: {
            line: 30,
            column: 31
          },
          end: {
            line: 30,
            column: 45
          }
        }],
        line: 30
      },
      "4": {
        loc: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "5": {
        loc: {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 33,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 33,
            column: 20
          }
        }, {
          start: {
            line: 33,
            column: 24
          },
          end: {
            line: 33,
            column: 47
          }
        }, {
          start: {
            line: 33,
            column: 51
          },
          end: {
            line: 33,
            column: 76
          }
        }],
        line: 33
      },
      "6": {
        loc: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "7": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 39,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 39,
            column: 13
          }
        }, {
          start: {
            line: 39,
            column: 17
          },
          end: {
            line: 39,
            column: 31
          }
        }],
        line: 39
      },
      "8": {
        loc: {
          start: {
            line: 45,
            column: 32
          },
          end: {
            line: 45,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 32
          },
          end: {
            line: 45,
            column: 53
          }
        }, {
          start: {
            line: 45,
            column: 57
          },
          end: {
            line: 45,
            column: 88
          }
        }],
        line: 45
      },
      "9": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "10": {
        loc: {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 47,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 47,
            column: 29
          }
        }, {
          start: {
            line: 47,
            column: 33
          },
          end: {
            line: 47,
            column: 79
          }
        }],
        line: 47
      },
      "11": {
        loc: {
          start: {
            line: 48,
            column: 23
          },
          end: {
            line: 48,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 48,
            column: 47
          },
          end: {
            line: 48,
            column: 88
          }
        }, {
          start: {
            line: 48,
            column: 91
          },
          end: {
            line: 48,
            column: 95
          }
        }],
        line: 48
      },
      "12": {
        loc: {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        }, {
          start: {
            line: 51,
            column: 19
          },
          end: {
            line: 53,
            column: 13
          }
        }],
        line: 49
      },
      "13": {
        loc: {
          start: {
            line: 49,
            column: 16
          },
          end: {
            line: 49,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 16
          },
          end: {
            line: 49,
            column: 20
          }
        }, {
          start: {
            line: 49,
            column: 25
          },
          end: {
            line: 49,
            column: 33
          }
        }, {
          start: {
            line: 49,
            column: 37
          },
          end: {
            line: 49,
            column: 45
          }
        }],
        line: 49
      },
      "14": {
        loc: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "15": {
        loc: {
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "16": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "17": {
        loc: {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 93,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 93,
            column: 43
          }
        }, {
          start: {
            line: 93,
            column: 47
          },
          end: {
            line: 93,
            column: 50
          }
        }, {
          start: {
            line: 93,
            column: 54
          },
          end: {
            line: 93,
            column: 58
          }
        }],
        line: 93
      },
      "18": {
        loc: {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "19": {
        loc: {
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "20": {
        loc: {
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "21": {
        loc: {
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 141,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 141,
            column: 50
          }
        }, {
          start: {
            line: 141,
            column: 54
          },
          end: {
            line: 141,
            column: 70
          }
        }],
        line: 141
      },
      "22": {
        loc: {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "23": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 151,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 151,
            column: 53
          }
        }, {
          start: {
            line: 151,
            column: 57
          },
          end: {
            line: 151,
            column: 76
          }
        }],
        line: 151
      },
      "24": {
        loc: {
          start: {
            line: 153,
            column: 16
          },
          end: {
            line: 166,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 16
          },
          end: {
            line: 166,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "25": {
        loc: {
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "26": {
        loc: {
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 179,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 179,
            column: 32
          }
        }, {
          start: {
            line: 179,
            column: 36
          },
          end: {
            line: 179,
            column: 60
          }
        }],
        line: 179
      },
      "27": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "28": {
        loc: {
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "29": {
        loc: {
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "30": {
        loc: {
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "31": {
        loc: {
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 208,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 208,
            column: 57
          }
        }, {
          start: {
            line: 208,
            column: 61
          },
          end: {
            line: 208,
            column: 77
          }
        }],
        line: 208
      },
      "32": {
        loc: {
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "33": {
        loc: {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 217,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 217,
            column: 60
          }
        }, {
          start: {
            line: 217,
            column: 64
          },
          end: {
            line: 217,
            column: 83
          }
        }],
        line: 217
      },
      "34": {
        loc: {
          start: {
            line: 219,
            column: 16
          },
          end: {
            line: 232,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 16
          },
          end: {
            line: 232,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "35": {
        loc: {
          start: {
            line: 219,
            column: 20
          },
          end: {
            line: 219,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 219,
            column: 20
          },
          end: {
            line: 219,
            column: 42
          }
        }, {
          start: {
            line: 219,
            column: 46
          },
          end: {
            line: 219,
            column: 61
          }
        }],
        line: 219
      },
      "36": {
        loc: {
          start: {
            line: 226,
            column: 34
          },
          end: {
            line: 226,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 226,
            column: 34
          },
          end: {
            line: 226,
            column: 57
          }
        }, {
          start: {
            line: 226,
            column: 61
          },
          end: {
            line: 226,
            column: 76
          }
        }],
        line: 226
      },
      "37": {
        loc: {
          start: {
            line: 244,
            column: 26
          },
          end: {
            line: 249,
            column: 12
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 244,
            column: 26
          },
          end: {
            line: 244,
            column: 54
          }
        }, {
          start: {
            line: 244,
            column: 58
          },
          end: {
            line: 249,
            column: 12
          }
        }],
        line: 244
      },
      "38": {
        loc: {
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 247,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 247,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "39": {
        loc: {
          start: {
            line: 266,
            column: 12
          },
          end: {
            line: 268,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 12
          },
          end: {
            line: 268,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "40": {
        loc: {
          start: {
            line: 270,
            column: 30
          },
          end: {
            line: 275,
            column: 16
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 270,
            column: 30
          },
          end: {
            line: 270,
            column: 58
          }
        }, {
          start: {
            line: 270,
            column: 62
          },
          end: {
            line: 275,
            column: 16
          }
        }],
        line: 270
      },
      "41": {
        loc: {
          start: {
            line: 271,
            column: 16
          },
          end: {
            line: 273,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 271,
            column: 16
          },
          end: {
            line: 273,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 271
      },
      "42": {
        loc: {
          start: {
            line: 327,
            column: 8
          },
          end: {
            line: 331,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 8
          },
          end: {
            line: 331,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 327
      },
      "43": {
        loc: {
          start: {
            line: 335,
            column: 8
          },
          end: {
            line: 338,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 335,
            column: 8
          },
          end: {
            line: 338,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 335
      },
      "44": {
        loc: {
          start: {
            line: 340,
            column: 8
          },
          end: {
            line: 346,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 340,
            column: 8
          },
          end: {
            line: 346,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 340
      },
      "45": {
        loc: {
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 354,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 354,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 348
      },
      "46": {
        loc: {
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 384,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 384,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 362
      },
      "47": {
        loc: {
          start: {
            line: 362,
            column: 12
          },
          end: {
            line: 362,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 362,
            column: 12
          },
          end: {
            line: 362,
            column: 17
          }
        }, {
          start: {
            line: 362,
            column: 21
          },
          end: {
            line: 362,
            column: 26
          }
        }],
        line: 362
      },
      "48": {
        loc: {
          start: {
            line: 407,
            column: 8
          },
          end: {
            line: 411,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 407,
            column: 8
          },
          end: {
            line: 411,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 407
      },
      "49": {
        loc: {
          start: {
            line: 407,
            column: 12
          },
          end: {
            line: 407,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 407,
            column: 12
          },
          end: {
            line: 407,
            column: 24
          }
        }, {
          start: {
            line: 407,
            column: 28
          },
          end: {
            line: 407,
            column: 52
          }
        }],
        line: 407
      },
      "50": {
        loc: {
          start: {
            line: 416,
            column: 12
          },
          end: {
            line: 421,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 416,
            column: 12
          },
          end: {
            line: 421,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 416
      },
      "51": {
        loc: {
          start: {
            line: 426,
            column: 8
          },
          end: {
            line: 431,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 426,
            column: 8
          },
          end: {
            line: 431,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 426
      },
      "52": {
        loc: {
          start: {
            line: 438,
            column: 8
          },
          end: {
            line: 444,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 438,
            column: 8
          },
          end: {
            line: 444,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 438
      },
      "53": {
        loc: {
          start: {
            line: 438,
            column: 12
          },
          end: {
            line: 438,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 438,
            column: 12
          },
          end: {
            line: 438,
            column: 55
          }
        }, {
          start: {
            line: 438,
            column: 59
          },
          end: {
            line: 438,
            column: 88
          }
        }],
        line: 438
      },
      "54": {
        loc: {
          start: {
            line: 448,
            column: 8
          },
          end: {
            line: 450,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 448,
            column: 8
          },
          end: {
            line: 450,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 448
      },
      "55": {
        loc: {
          start: {
            line: 453,
            column: 12
          },
          end: {
            line: 462,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 454,
            column: 16
          },
          end: {
            line: 455,
            column: 62
          }
        }, {
          start: {
            line: 456,
            column: 16
          },
          end: {
            line: 457,
            column: 62
          }
        }, {
          start: {
            line: 458,
            column: 16
          },
          end: {
            line: 459,
            column: 59
          }
        }, {
          start: {
            line: 460,
            column: 16
          },
          end: {
            line: 461,
            column: 66
          }
        }],
        line: 453
      },
      "56": {
        loc: {
          start: {
            line: 493,
            column: 8
          },
          end: {
            line: 495,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 493,
            column: 8
          },
          end: {
            line: 495,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 493
      },
      "57": {
        loc: {
          start: {
            line: 498,
            column: 8
          },
          end: {
            line: 500,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 498,
            column: 8
          },
          end: {
            line: 500,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 498
      },
      "58": {
        loc: {
          start: {
            line: 502,
            column: 8
          },
          end: {
            line: 511,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 502,
            column: 8
          },
          end: {
            line: 511,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 502
      },
      "59": {
        loc: {
          start: {
            line: 504,
            column: 12
          },
          end: {
            line: 506,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 504,
            column: 12
          },
          end: {
            line: 506,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 504
      },
      "60": {
        loc: {
          start: {
            line: 508,
            column: 12
          },
          end: {
            line: 510,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 508,
            column: 12
          },
          end: {
            line: 510,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 508
      },
      "61": {
        loc: {
          start: {
            line: 514,
            column: 18
          },
          end: {
            line: 514,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 514,
            column: 18
          },
          end: {
            line: 514,
            column: 39
          }
        }, {
          start: {
            line: 514,
            column: 43
          },
          end: {
            line: 514,
            column: 45
          }
        }],
        line: 514
      },
      "62": {
        loc: {
          start: {
            line: 515,
            column: 16
          },
          end: {
            line: 515,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 515,
            column: 16
          },
          end: {
            line: 515,
            column: 26
          }
        }, {
          start: {
            line: 515,
            column: 30
          },
          end: {
            line: 515,
            column: 32
          }
        }],
        line: 515
      },
      "63": {
        loc: {
          start: {
            line: 518,
            column: 21
          },
          end: {
            line: 518,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 518,
            column: 21
          },
          end: {
            line: 518,
            column: 36
          }
        }, {
          start: {
            line: 518,
            column: 40
          },
          end: {
            line: 518,
            column: 42
          }
        }],
        line: 518
      },
      "64": {
        loc: {
          start: {
            line: 519,
            column: 18
          },
          end: {
            line: 519,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 519,
            column: 18
          },
          end: {
            line: 519,
            column: 30
          }
        }, {
          start: {
            line: 519,
            column: 34
          },
          end: {
            line: 519,
            column: 36
          }
        }],
        line: 519
      },
      "65": {
        loc: {
          start: {
            line: 520,
            column: 22
          },
          end: {
            line: 520,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 520,
            column: 22
          },
          end: {
            line: 520,
            column: 38
          }
        }, {
          start: {
            line: 520,
            column: 42
          },
          end: {
            line: 520,
            column: 48
          }
        }],
        line: 520
      },
      "66": {
        loc: {
          start: {
            line: 522,
            column: 22
          },
          end: {
            line: 522,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 522,
            column: 22
          },
          end: {
            line: 522,
            column: 38
          }
        }, {
          start: {
            line: 522,
            column: 42
          },
          end: {
            line: 522,
            column: 50
          }
        }],
        line: 522
      },
      "67": {
        loc: {
          start: {
            line: 531,
            column: 20
          },
          end: {
            line: 531,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 531,
            column: 20
          },
          end: {
            line: 531,
            column: 34
          }
        }, {
          start: {
            line: 531,
            column: 38
          },
          end: {
            line: 531,
            column: 40
          }
        }],
        line: 531
      },
      "68": {
        loc: {
          start: {
            line: 545,
            column: 37
          },
          end: {
            line: 545,
            column: 134
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 545,
            column: 37
          },
          end: {
            line: 545,
            column: 82
          }
        }, {
          start: {
            line: 545,
            column: 86
          },
          end: {
            line: 545,
            column: 134
          }
        }],
        line: 545
      },
      "69": {
        loc: {
          start: {
            line: 548,
            column: 12
          },
          end: {
            line: 550,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 548,
            column: 12
          },
          end: {
            line: 550,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 548
      },
      "70": {
        loc: {
          start: {
            line: 548,
            column: 16
          },
          end: {
            line: 548,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 548,
            column: 16
          },
          end: {
            line: 548,
            column: 46
          }
        }, {
          start: {
            line: 548,
            column: 50
          },
          end: {
            line: 548,
            column: 66
          }
        }],
        line: 548
      },
      "71": {
        loc: {
          start: {
            line: 557,
            column: 12
          },
          end: {
            line: 560,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 557,
            column: 12
          },
          end: {
            line: 560,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 557
      },
      "72": {
        loc: {
          start: {
            line: 602,
            column: 8
          },
          end: {
            line: 604,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 602,
            column: 8
          },
          end: {
            line: 604,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 602
      },
      "73": {
        loc: {
          start: {
            line: 608,
            column: 8
          },
          end: {
            line: 610,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 608,
            column: 8
          },
          end: {
            line: 610,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 608
      },
      "74": {
        loc: {
          start: {
            line: 612,
            column: 42
          },
          end: {
            line: 612,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 612,
            column: 42
          },
          end: {
            line: 612,
            column: 46
          }
        }, {
          start: {
            line: 612,
            column: 50
          },
          end: {
            line: 612,
            column: 52
          }
        }],
        line: 612
      },
      "75": {
        loc: {
          start: {
            line: 642,
            column: 12
          },
          end: {
            line: 644,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 642,
            column: 12
          },
          end: {
            line: 644,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 642
      },
      "76": {
        loc: {
          start: {
            line: 650,
            column: 8
          },
          end: {
            line: 662,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 651,
            column: 12
          },
          end: {
            line: 653,
            column: 22
          }
        }, {
          start: {
            line: 654,
            column: 12
          },
          end: {
            line: 656,
            column: 22
          }
        }, {
          start: {
            line: 657,
            column: 12
          },
          end: {
            line: 659,
            column: 22
          }
        }, {
          start: {
            line: 660,
            column: 12
          },
          end: {
            line: 661,
            column: 62
          }
        }],
        line: 650
      },
      "77": {
        loc: {
          start: {
            line: 674,
            column: 8
          },
          end: {
            line: 676,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 674,
            column: 8
          },
          end: {
            line: 676,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 674
      },
      "78": {
        loc: {
          start: {
            line: 690,
            column: 8
          },
          end: {
            line: 692,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 690,
            column: 8
          },
          end: {
            line: 692,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 690
      },
      "79": {
        loc: {
          start: {
            line: 704,
            column: 31
          },
          end: {
            line: 704,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 704,
            column: 31
          },
          end: {
            line: 704,
            column: 52
          }
        }, {
          start: {
            line: 704,
            column: 56
          },
          end: {
            line: 704,
            column: 58
          }
        }],
        line: 704
      },
      "80": {
        loc: {
          start: {
            line: 710,
            column: 24
          },
          end: {
            line: 712,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 710,
            column: 24
          },
          end: {
            line: 712,
            column: 27
          }
        }, {
          start: {
            line: 712,
            column: 31
          },
          end: {
            line: 712,
            column: 33
          }
        }],
        line: 710
      },
      "81": {
        loc: {
          start: {
            line: 713,
            column: 25
          },
          end: {
            line: 715,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 713,
            column: 25
          },
          end: {
            line: 715,
            column: 27
          }
        }, {
          start: {
            line: 715,
            column: 31
          },
          end: {
            line: 715,
            column: 33
          }
        }],
        line: 713
      },
      "82": {
        loc: {
          start: {
            line: 717,
            column: 30
          },
          end: {
            line: 717,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 717,
            column: 60
          },
          end: {
            line: 717,
            column: 72
          }
        }, {
          start: {
            line: 717,
            column: 75
          },
          end: {
            line: 717,
            column: 84
          }
        }],
        line: 717
      },
      "83": {
        loc: {
          start: {
            line: 718,
            column: 30
          },
          end: {
            line: 718,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 718,
            column: 60
          },
          end: {
            line: 718,
            column: 72
          }
        }, {
          start: {
            line: 718,
            column: 75
          },
          end: {
            line: 718,
            column: 84
          }
        }],
        line: 718
      },
      "84": {
        loc: {
          start: {
            line: 727,
            column: 29
          },
          end: {
            line: 727,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 727,
            column: 59
          },
          end: {
            line: 727,
            column: 65
          }
        }, {
          start: {
            line: 727,
            column: 68
          },
          end: {
            line: 727,
            column: 74
          }
        }],
        line: 727
      },
      "85": {
        loc: {
          start: {
            line: 735,
            column: 26
          },
          end: {
            line: 739,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 735,
            column: 26
          },
          end: {
            line: 739,
            column: 19
          }
        }, {
          start: {
            line: 739,
            column: 23
          },
          end: {
            line: 739,
            column: 25
          }
        }],
        line: 735
      },
      "86": {
        loc: {
          start: {
            line: 740,
            column: 27
          },
          end: {
            line: 744,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 740,
            column: 27
          },
          end: {
            line: 744,
            column: 19
          }
        }, {
          start: {
            line: 744,
            column: 23
          },
          end: {
            line: 744,
            column: 25
          }
        }],
        line: 740
      },
      "87": {
        loc: {
          start: {
            line: 745,
            column: 24
          },
          end: {
            line: 745,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 745,
            column: 54
          },
          end: {
            line: 745,
            column: 60
          }
        }, {
          start: {
            line: 745,
            column: 63
          },
          end: {
            line: 745,
            column: 108
          }
        }],
        line: 745
      },
      "88": {
        loc: {
          start: {
            line: 745,
            column: 63
          },
          end: {
            line: 745,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 745,
            column: 92
          },
          end: {
            line: 745,
            column: 97
          }
        }, {
          start: {
            line: 745,
            column: 100
          },
          end: {
            line: 745,
            column: 108
          }
        }],
        line: 745
      },
      "89": {
        loc: {
          start: {
            line: 765,
            column: 12
          },
          end: {
            line: 769,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 765,
            column: 12
          },
          end: {
            line: 769,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 765
      },
      "90": {
        loc: {
          start: {
            line: 790,
            column: 8
          },
          end: {
            line: 806,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 790,
            column: 8
          },
          end: {
            line: 806,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 790
      },
      "91": {
        loc: {
          start: {
            line: 793,
            column: 39
          },
          end: {
            line: 793,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 793,
            column: 39
          },
          end: {
            line: 793,
            column: 95
          }
        }, {
          start: {
            line: 793,
            column: 99
          },
          end: {
            line: 793,
            column: 100
          }
        }],
        line: 793
      },
      "92": {
        loc: {
          start: {
            line: 800,
            column: 16
          },
          end: {
            line: 804,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 800,
            column: 16
          },
          end: {
            line: 804,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 800
      },
      "93": {
        loc: {
          start: {
            line: 809,
            column: 8
          },
          end: {
            line: 809,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 809,
            column: 8
          },
          end: {
            line: 809,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 809
      },
      "94": {
        loc: {
          start: {
            line: 837,
            column: 8
          },
          end: {
            line: 839,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 837,
            column: 8
          },
          end: {
            line: 839,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 837
      },
      "95": {
        loc: {
          start: {
            line: 844,
            column: 8
          },
          end: {
            line: 846,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 844,
            column: 8
          },
          end: {
            line: 846,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 844
      },
      "96": {
        loc: {
          start: {
            line: 848,
            column: 8
          },
          end: {
            line: 850,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 848,
            column: 8
          },
          end: {
            line: 850,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 848
      },
      "97": {
        loc: {
          start: {
            line: 851,
            column: 16
          },
          end: {
            line: 851,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 851,
            column: 16
          },
          end: {
            line: 851,
            column: 20
          }
        }, {
          start: {
            line: 851,
            column: 24
          },
          end: {
            line: 851,
            column: 26
          }
        }],
        line: 851
      },
      "98": {
        loc: {
          start: {
            line: 858,
            column: 27
          },
          end: {
            line: 858,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 858,
            column: 27
          },
          end: {
            line: 858,
            column: 45
          }
        }, {
          start: {
            line: 858,
            column: 49
          },
          end: {
            line: 858,
            column: 51
          }
        }],
        line: 858
      },
      "99": {
        loc: {
          start: {
            line: 868,
            column: 8
          },
          end: {
            line: 870,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 868,
            column: 8
          },
          end: {
            line: 870,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 868
      },
      "100": {
        loc: {
          start: {
            line: 890,
            column: 8
          },
          end: {
            line: 890,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 890,
            column: 8
          },
          end: {
            line: 890,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 890
      },
      "101": {
        loc: {
          start: {
            line: 898,
            column: 23
          },
          end: {
            line: 898,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 898,
            column: 23
          },
          end: {
            line: 898,
            column: 37
          }
        }, {
          start: {
            line: 898,
            column: 41
          },
          end: {
            line: 898,
            column: 43
          }
        }],
        line: 898
      },
      "102": {
        loc: {
          start: {
            line: 908,
            column: 8
          },
          end: {
            line: 910,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 908,
            column: 8
          },
          end: {
            line: 910,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 908
      },
      "103": {
        loc: {
          start: {
            line: 916,
            column: 8
          },
          end: {
            line: 916,
            column: 38
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 916,
            column: 8
          },
          end: {
            line: 916,
            column: 38
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 916
      },
      "104": {
        loc: {
          start: {
            line: 919,
            column: 12
          },
          end: {
            line: 923,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 920,
            column: 16
          },
          end: {
            line: 922,
            column: 26
          }
        }],
        line: 919
      },
      "105": {
        loc: {
          start: {
            line: 935,
            column: 8
          },
          end: {
            line: 937,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 935,
            column: 8
          },
          end: {
            line: 937,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 935
      },
      "106": {
        loc: {
          start: {
            line: 939,
            column: 8
          },
          end: {
            line: 941,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 939,
            column: 8
          },
          end: {
            line: 941,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 939
      },
      "107": {
        loc: {
          start: {
            line: 942,
            column: 23
          },
          end: {
            line: 942,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 942,
            column: 23
          },
          end: {
            line: 942,
            column: 27
          }
        }, {
          start: {
            line: 942,
            column: 31
          },
          end: {
            line: 942,
            column: 33
          }
        }],
        line: 942
      },
      "108": {
        loc: {
          start: {
            line: 956,
            column: 22
          },
          end: {
            line: 956,
            column: 56
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 956,
            column: 33
          },
          end: {
            line: 956,
            column: 52
          }
        }, {
          start: {
            line: 956,
            column: 55
          },
          end: {
            line: 956,
            column: 56
          }
        }],
        line: 956
      },
      "109": {
        loc: {
          start: {
            line: 957,
            column: 23
          },
          end: {
            line: 957,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 957,
            column: 36
          },
          end: {
            line: 957,
            column: 58
          }
        }, {
          start: {
            line: 957,
            column: 61
          },
          end: {
            line: 957,
            column: 62
          }
        }],
        line: 957
      },
      "110": {
        loc: {
          start: {
            line: 958,
            column: 23
          },
          end: {
            line: 958,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 958,
            column: 34
          },
          end: {
            line: 958,
            column: 54
          }
        }, {
          start: {
            line: 958,
            column: 57
          },
          end: {
            line: 958,
            column: 58
          }
        }],
        line: 958
      },
      "111": {
        loc: {
          start: {
            line: 959,
            column: 24
          },
          end: {
            line: 959,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 959,
            column: 35
          },
          end: {
            line: 959,
            column: 55
          }
        }, {
          start: {
            line: 959,
            column: 58
          },
          end: {
            line: 959,
            column: 59
          }
        }],
        line: 959
      },
      "112": {
        loc: {
          start: {
            line: 985,
            column: 8
          },
          end: {
            line: 987,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 985,
            column: 8
          },
          end: {
            line: 987,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 985
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0,
      "338": 0,
      "339": 0,
      "340": 0,
      "341": 0,
      "342": 0,
      "343": 0,
      "344": 0,
      "345": 0,
      "346": 0,
      "347": 0,
      "348": 0,
      "349": 0,
      "350": 0,
      "351": 0,
      "352": 0,
      "353": 0,
      "354": 0,
      "355": 0,
      "356": 0,
      "357": 0,
      "358": 0,
      "359": 0,
      "360": 0,
      "361": 0,
      "362": 0,
      "363": 0,
      "364": 0,
      "365": 0,
      "366": 0,
      "367": 0,
      "368": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0, 0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0, 0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0, 0],
      "92": [0, 0],
      "93": [0, 0],
      "94": [0, 0],
      "95": [0, 0],
      "96": [0, 0],
      "97": [0, 0],
      "98": [0, 0],
      "99": [0, 0],
      "100": [0, 0],
      "101": [0, 0],
      "102": [0, 0],
      "103": [0, 0],
      "104": [0],
      "105": [0, 0],
      "106": [0, 0],
      "107": [0, 0],
      "108": [0, 0],
      "109": [0, 0],
      "110": [0, 0],
      "111": [0, 0],
      "112": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\emailService.ts"],
      sourcesContent: ["import { supabase } from \"../lib/supabase\"\r\nimport type { Database } from \"../lib/supabase\"\r\nimport * as crypto from \"crypto\"\r\n\r\ntype Tables<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Row\"]\r\n\r\n// Email encryption configuration\r\ninterface EmailEncryptionConfig {\r\n  enabled: boolean\r\n  algorithm: string\r\n  keySize: number\r\n  encryptAttachments: boolean\r\n  encryptSubject: boolean\r\n  encryptMetadata: boolean\r\n}\r\n\r\nexport interface EmailConfig {\r\n  provider: \"mailjet\" | \"outlook\" | \"smtp\"\r\n  smtpHost?: string\r\n  smtpPort?: number\r\n  smtpSecure?: boolean\r\n  username: string\r\n  password?: string\r\n  accessToken?: string\r\n  refreshToken?: string\r\n  clientId?: string\r\n  clientSecret?: string\r\n}\r\n\r\nexport interface EmailMessage {\r\n  id: string\r\n  from: string\r\n  to: string[]\r\n  cc?: string[]\r\n  bcc?: string[]\r\n  subject: string\r\n  body: string\r\n  bodyType: \"text\" | \"html\"\r\n  attachments?: EmailAttachment[]\r\n  priority: \"low\" | \"normal\" | \"high\"\r\n  readReceipt?: boolean\r\n  deliveryReceipt?: boolean\r\n  scheduledAt?: string\r\n  sentAt?: string\r\n  status: \"draft\" | \"scheduled\" | \"sent\" | \"failed\" | \"delivered\" | \"read\"\r\n  threadId?: string\r\n  inReplyTo?: string\r\n  references?: string[]\r\n  labels?: string[]\r\n  folder: string\r\n  isRead: boolean\r\n  isStarred: boolean\r\n  isImportant: boolean\r\n  clientId?: string\r\n  projectId?: string\r\n  taskId?: string\r\n  metadata?: Record<string, any>\r\n  created_at: string\r\n  updated_at: string\r\n  // Encryption fields\r\n  isEncrypted?: boolean\r\n  encryptionKeyId?: string\r\n  encryptedFields?: string[]\r\n}\r\n\r\nexport interface EmailAttachment {\r\n  id: string\r\n  filename: string\r\n  contentType: string\r\n  size: number\r\n  data?: string // base64 encoded\r\n  url?: string\r\n  cid?: string // for inline attachments\r\n  // Encryption fields\r\n  isEncrypted?: boolean\r\n  encryptionKeyId?: string\r\n  originalSize?: number\r\n}\r\n\r\nexport interface EmailTemplate {\r\n  id: string\r\n  name: string\r\n  subject: string\r\n  body: string\r\n  bodyType: \"text\" | \"html\"\r\n  category: string\r\n  variables: string[]\r\n  isActive: boolean\r\n  usage_count: number\r\n  created_by: string\r\n  created_at: string\r\n  updated_at: string\r\n}\r\n\r\nexport interface EmailAutomation {\r\n  id: string\r\n  name: string\r\n  trigger: {\r\n    type: \"schedule\" | \"event\" | \"condition\"\r\n    schedule?: string // cron expression\r\n    event?: string\r\n    condition?: Record<string, any>\r\n  }\r\n  actions: EmailAutomationAction[]\r\n  isActive: boolean\r\n  lastRun?: string\r\n  nextRun?: string\r\n  runCount: number\r\n  created_at: string\r\n  updated_at: string\r\n}\r\n\r\nexport interface EmailAutomationAction {\r\n  type: \"send_email\" | \"add_label\" | \"move_folder\" | \"create_task\" | \"update_client\"\r\n  templateId?: string\r\n  recipients?: string[]\r\n  data?: Record<string, any>\r\n}\r\n\r\nexport interface EmailSignature {\r\n  id: string\r\n  name: string\r\n  content: string\r\n  isDefault: boolean\r\n  created_at: string\r\n}\r\n\r\nexport interface EmailAnalytics {\r\n  sent: number\r\n  received: number\r\n  opened: number\r\n  clicked: number\r\n  replied: number\r\n  bounced: number\r\n  unsubscribed: number\r\n  openRate: number\r\n  clickRate: number\r\n  replyRate: number\r\n  bounceRate: number\r\n}\r\n\r\nexport interface EmailQuota {\r\n  userId: string\r\n  dailyLimit: number\r\n  monthlyLimit: number\r\n  dailySent: number\r\n  monthlySent: number\r\n  lastResetDate: string\r\n  attachmentSizeLimit: number // in MB\r\n  storageUsed: number // in MB\r\n  storageLimit: number // in MB\r\n}\r\n\r\nexport interface EmailRetentionPolicy {\r\n  sentEmailRetentionDays: number\r\n  receivedEmailRetentionDays: number\r\n  attachmentRetentionDays: number\r\n  deletedEmailRetentionDays: number\r\n  maxAttachmentSize: number // in MB\r\n  compressAttachments: boolean\r\n  autoDeleteOldEmails: boolean\r\n}\r\n\r\nclass EmailService {\r\n  private config: EmailConfig | null = null\r\n  private isConnected = false\r\n  private syncInterval: NodeJS.Timeout | null = null\r\n\r\n  // Email quotas - moderate limits\r\n  private readonly DEFAULT_QUOTAS = {\r\n    dailyLimit: 100,\r\n    monthlyLimit: 2000,\r\n    attachmentSizeLimit: 10, // 10MB per attachment\r\n    storageLimit: 500, // 500MB total storage per user\r\n  }\r\n\r\n  // Email encryption configuration\r\n  private readonly ENCRYPTION_CONFIG: EmailEncryptionConfig = {\r\n    enabled: process.env.NODE_ENV === 'production',\r\n    algorithm: 'aes-256-gcm',\r\n    keySize: 32,\r\n    encryptAttachments: true,\r\n    encryptSubject: false, // Keep subject unencrypted for searchability\r\n    encryptMetadata: true,\r\n  }\r\n\r\n  // Retention policies\r\n  private readonly DEFAULT_RETENTION: EmailRetentionPolicy = {\r\n    sentEmailRetentionDays: 365, // 1 year\r\n    receivedEmailRetentionDays: 365, // 1 year\r\n    attachmentRetentionDays: 180, // 6 months\r\n    deletedEmailRetentionDays: 30, // 30 days in trash\r\n    maxAttachmentSize: 10, // 10MB\r\n    compressAttachments: true,\r\n    autoDeleteOldEmails: true,\r\n  }\r\n\r\n  /**\r\n   * Generate encryption key for email data\r\n   */\r\n  private generateEncryptionKey(): Buffer {\r\n    return crypto.randomBytes(this.ENCRYPTION_CONFIG.keySize)\r\n  }\r\n\r\n  /**\r\n   * Encrypt sensitive email data\r\n   */\r\n  private encryptData(data: string, key: Buffer): { encrypted: string; iv: string; tag: string } {\r\n    if (!this.ENCRYPTION_CONFIG.enabled) {\r\n      return { encrypted: data, iv: '', tag: '' }\r\n    }\r\n\r\n    const iv = crypto.randomBytes(16)\r\n    const cipher = crypto.createCipheriv(this.ENCRYPTION_CONFIG.algorithm, key, iv)\r\n    ;(cipher as any).setAAD(Buffer.from('email-encryption'))\r\n\r\n    let encrypted = cipher.update(data, 'utf8', 'hex')\r\n    encrypted += cipher.final('hex')\r\n\r\n    const tag = (cipher as any).getAuthTag()\r\n\r\n    return {\r\n      encrypted,\r\n      iv: iv.toString('hex'),\r\n      tag: tag.toString('hex')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Decrypt email data\r\n   */\r\n  private decryptData(encryptedData: string, key: Buffer, iv: string, tag: string): string {\r\n    if (!this.ENCRYPTION_CONFIG.enabled || !iv || !tag) {\r\n      return encryptedData\r\n    }\r\n\r\n    try {\r\n      const decipher = crypto.createDecipheriv(this.ENCRYPTION_CONFIG.algorithm, key, Buffer.from(iv, 'hex'))\r\n      ;(decipher as any).setAAD(Buffer.from('email-encryption'))\r\n      ;(decipher as any).setAuthTag(Buffer.from(tag, 'hex'))\r\n\r\n      let decrypted = decipher.update(encryptedData, 'hex', 'utf8')\r\n      decrypted += decipher.final('utf8')\r\n\r\n      return decrypted\r\n    } catch (error) {\r\n      console.error('Failed to decrypt email data:', error)\r\n      throw new Error('Email decryption failed')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Encrypt email message before storage\r\n   */\r\n  private async encryptEmailMessage(message: EmailMessage, userId: string): Promise<EmailMessage> {\r\n    if (!this.ENCRYPTION_CONFIG.enabled) {\r\n      return message\r\n    }\r\n\r\n    const encryptionKey = this.generateEncryptionKey()\r\n    const keyId = crypto.randomUUID()\r\n    \r\n    // Store encryption key securely (in production, use a proper key management service)\r\n    await this.storeEncryptionKey(keyId, encryptionKey, userId)\r\n\r\n    const encryptedMessage = { ...message }\r\n    const encryptedFields: string[] = []\r\n\r\n    // Encrypt email body\r\n    const bodyEncryption = this.encryptData(message.body, encryptionKey)\r\n    encryptedMessage.body = JSON.stringify({\r\n      encrypted: bodyEncryption.encrypted,\r\n      iv: bodyEncryption.iv,\r\n      tag: bodyEncryption.tag\r\n    })\r\n    encryptedFields.push('body')\r\n\r\n    // Encrypt subject if configured\r\n    if (this.ENCRYPTION_CONFIG.encryptSubject) {\r\n      const subjectEncryption = this.encryptData(message.subject, encryptionKey)\r\n      encryptedMessage.subject = JSON.stringify({\r\n        encrypted: subjectEncryption.encrypted,\r\n        iv: subjectEncryption.iv,\r\n        tag: subjectEncryption.tag\r\n      })\r\n      encryptedFields.push('subject')\r\n    }\r\n\r\n    // Encrypt metadata if configured\r\n    if (this.ENCRYPTION_CONFIG.encryptMetadata && message.metadata) {\r\n      const metadataEncryption = this.encryptData(JSON.stringify(message.metadata), encryptionKey)\r\n      encryptedMessage.metadata = {\r\n        encrypted: metadataEncryption.encrypted,\r\n        iv: metadataEncryption.iv,\r\n        tag: metadataEncryption.tag\r\n      }\r\n      encryptedFields.push('metadata')\r\n    }\r\n\r\n    // Encrypt attachments if configured\r\n    if (this.ENCRYPTION_CONFIG.encryptAttachments && message.attachments) {\r\n      encryptedMessage.attachments = await Promise.all(\r\n        message.attachments.map(async (attachment) => {\r\n          if (attachment.data) {\r\n            const attachmentEncryption = this.encryptData(attachment.data, encryptionKey)\r\n            return {\r\n              ...attachment,\r\n              data: JSON.stringify({\r\n                encrypted: attachmentEncryption.encrypted,\r\n                iv: attachmentEncryption.iv,\r\n                tag: attachmentEncryption.tag\r\n              }),\r\n              isEncrypted: true,\r\n              encryptionKeyId: keyId,\r\n              originalSize: attachment.size\r\n            }\r\n          }\r\n          return attachment\r\n        })\r\n      )\r\n      encryptedFields.push('attachments')\r\n    }\r\n\r\n    encryptedMessage.isEncrypted = true\r\n    encryptedMessage.encryptionKeyId = keyId\r\n    encryptedMessage.encryptedFields = encryptedFields\r\n\r\n    return encryptedMessage\r\n  }\r\n\r\n  /**\r\n   * Decrypt email message after retrieval\r\n   */\r\n  private async decryptEmailMessage(message: EmailMessage, userId: string): Promise<EmailMessage> {\r\n    if (!message.isEncrypted || !message.encryptionKeyId) {\r\n      return message\r\n    }\r\n\r\n    const encryptionKey = await this.getEncryptionKey(message.encryptionKeyId, userId)\r\n    if (!encryptionKey) {\r\n      throw new Error('Encryption key not found')\r\n    }\r\n\r\n    const decryptedMessage = { ...message }\r\n\r\n    // Decrypt body\r\n    if (message.encryptedFields?.includes('body')) {\r\n      try {\r\n        const bodyData = JSON.parse(message.body)\r\n        decryptedMessage.body = this.decryptData(bodyData.encrypted, encryptionKey, bodyData.iv, bodyData.tag)\r\n      } catch (error) {\r\n        console.error('Failed to decrypt email body:', error)\r\n      }\r\n    }\r\n\r\n    // Decrypt subject\r\n    if (message.encryptedFields?.includes('subject')) {\r\n      try {\r\n        const subjectData = JSON.parse(message.subject)\r\n        decryptedMessage.subject = this.decryptData(subjectData.encrypted, encryptionKey, subjectData.iv, subjectData.tag)\r\n      } catch (error) {\r\n        console.error('Failed to decrypt email subject:', error)\r\n      }\r\n    }\r\n\r\n    // Decrypt metadata\r\n    if (message.encryptedFields?.includes('metadata') && message.metadata) {\r\n      try {\r\n        const metadataStr = this.decryptData(\r\n          (message.metadata as any).encrypted,\r\n          encryptionKey,\r\n          (message.metadata as any).iv,\r\n          (message.metadata as any).tag\r\n        )\r\n        decryptedMessage.metadata = JSON.parse(metadataStr)\r\n      } catch (error) {\r\n        console.error('Failed to decrypt email metadata:', error)\r\n      }\r\n    }\r\n\r\n    // Decrypt attachments\r\n    if (message.encryptedFields?.includes('attachments') && message.attachments) {\r\n      decryptedMessage.attachments = await Promise.all(\r\n        message.attachments.map(async (attachment) => {\r\n          if (attachment.isEncrypted && attachment.data) {\r\n            try {\r\n              const attachmentData = JSON.parse(attachment.data)\r\n              return {\r\n                ...attachment,\r\n                data: this.decryptData(attachmentData.encrypted, encryptionKey, attachmentData.iv, attachmentData.tag),\r\n                isEncrypted: false,\r\n                size: attachment.originalSize || attachment.size\r\n              }\r\n            } catch (error) {\r\n              console.error('Failed to decrypt attachment:', error)\r\n              return attachment\r\n            }\r\n          }\r\n          return attachment\r\n        })\r\n      )\r\n    }\r\n\r\n    return decryptedMessage\r\n  }\r\n\r\n  /**\r\n   * Store encryption key securely\r\n   */\r\n  private async storeEncryptionKey(keyId: string, key: Buffer, userId: string): Promise<void> {\r\n    // In production, use a proper key management service like AWS KMS, Azure Key Vault, etc.\r\n    // For now, store in database with additional encryption\r\n    // Security: Require strong encryption key in production\r\n    const masterKey = process.env.EMAIL_MASTER_KEY || (() => {\r\n      if (process.env.NODE_ENV === 'production') {\r\n        throw new Error('EMAIL_MASTER_KEY must be set in production environment')\r\n      }\r\n      return 'dev-only-master-key-not-for-production'\r\n    })()\r\n    const keyEncryption = this.encryptData(key.toString('hex'), Buffer.from(masterKey))\r\n\r\n    await (supabase as any).from('email_encryption_keys').insert({\r\n      id: keyId,\r\n      user_id: userId,\r\n      encrypted_key: keyEncryption.encrypted,\r\n      key_iv: keyEncryption.iv,\r\n      key_tag: keyEncryption.tag,\r\n      created_at: new Date().toISOString(),\r\n      expires_at: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString() // 1 year\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Retrieve encryption key\r\n   */\r\n  private async getEncryptionKey(keyId: string, userId: string): Promise<Buffer | null> {\r\n    try {\r\n      const { data: keyData } = await (supabase as any)\r\n        .from('email_encryption_keys')\r\n        .select('*')\r\n        .eq('id', keyId)\r\n        .eq('user_id', userId)\r\n        .single()\r\n\r\n      if (!keyData) {\r\n        return null\r\n      }\r\n\r\n      // Security: Require strong encryption key in production\r\n    const masterKey = process.env.EMAIL_MASTER_KEY || (() => {\r\n      if (process.env.NODE_ENV === 'production') {\r\n        throw new Error('EMAIL_MASTER_KEY must be set in production environment')\r\n      }\r\n      return 'dev-only-master-key-not-for-production'\r\n    })()\r\n      const decryptedKey = this.decryptData(\r\n        keyData.encrypted_key,\r\n        Buffer.from(masterKey),\r\n        keyData.key_iv,\r\n        keyData.key_tag\r\n      )\r\n\r\n      return Buffer.from(decryptedKey, 'hex')\r\n    } catch (error) {\r\n      console.error('Failed to retrieve encryption key:', error)\r\n      return null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate email content for sensitive data\r\n   */\r\n  private containsSensitiveData(content: string): boolean {\r\n    const sensitivePatterns = [\r\n      /\\b\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}\\b/, // Credit card numbers\r\n      /\\b\\d{3}-\\d{2}-\\d{4}\\b/, // SSN\r\n      /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/, // Email addresses\r\n      /\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b/, // Phone numbers\r\n      /\\b(?:password|pwd|pass|secret|key|token)\\s*[:=]\\s*\\S+/i, // Passwords/secrets\r\n    ]\r\n\r\n    return sensitivePatterns.some(pattern => pattern.test(content))\r\n  }\r\n\r\n  // Configuration\r\n  async configure(config: EmailConfig): Promise<void> {\r\n    this.config = config\r\n\r\n    try {\r\n      await this.testConnection()\r\n      this.isConnected = true\r\n\r\n      // Save configuration\r\n      await (supabase as any).from(\"email_configs\").upsert({\r\n        provider: config.provider,\r\n        username: config.username,\r\n        smtp_host: config.smtpHost,\r\n        smtp_port: config.smtpPort,\r\n        smtp_secure: config.smtpSecure,\r\n        access_token: config.accessToken,\r\n        refresh_token: config.refreshToken,\r\n        client_id: config.clientId,\r\n        updated_at: new Date().toISOString(),\r\n      } as any)\r\n\r\n      // Start sync if not already running\r\n      this.startSync()\r\n\r\n      // Start cleanup job\r\n      this.startCleanupJob()\r\n    } catch (error: any) {\r\n      this.isConnected = false\r\n      throw new Error(`Failed to configure email: ${error.message}`)\r\n    }\r\n  }\r\n\r\n  // Quota Management\r\n  async checkEmailQuota(userId: string): Promise<{ canSend: boolean; reason?: string; quota: EmailQuota }> {\r\n    const quota = await this.getUserQuota(userId)\r\n\r\n    // Reset daily counter if needed\r\n    const today = new Date().toDateString()\r\n    if (quota.lastResetDate !== today) {\r\n      quota.dailySent = 0\r\n      quota.lastResetDate = today\r\n      await this.updateUserQuota(userId, quota)\r\n    }\r\n\r\n    // Reset monthly counter if needed\r\n    const currentMonth = new Date().getMonth()\r\n    const lastResetMonth = new Date(quota.lastResetDate).getMonth()\r\n    if (currentMonth !== lastResetMonth) {\r\n      quota.monthlySent = 0\r\n      await this.updateUserQuota(userId, quota)\r\n    }\r\n\r\n    // Check daily limit\r\n    if (quota.dailySent >= quota.dailyLimit) {\r\n      return {\r\n        canSend: false,\r\n        reason: `Daily email limit reached (${quota.dailyLimit}). Resets tomorrow.`,\r\n        quota,\r\n      }\r\n    }\r\n\r\n    // Check monthly limit\r\n    if (quota.monthlySent >= quota.monthlyLimit) {\r\n      return {\r\n        canSend: false,\r\n        reason: `Monthly email limit reached (${quota.monthlyLimit}). Resets next month.`,\r\n        quota,\r\n      }\r\n    }\r\n\r\n    return { canSend: true, quota }\r\n  }\r\n\r\n  async getUserQuota(userId: string): Promise<EmailQuota> {\r\n    const { data, error } = await (supabase as any).from(\"email_quotas\").select(\"*\").eq(\"user_id\", userId).single()\r\n\r\n    if (error || !data) {\r\n      // Create default quota for new user\r\n      const defaultQuota: EmailQuota = {\r\n        userId,\r\n        ...this.DEFAULT_QUOTAS,\r\n        dailySent: 0,\r\n        monthlySent: 0,\r\n        lastResetDate: new Date().toDateString(),\r\n        storageUsed: 0,\r\n      }\r\n\r\n      await (supabase as any).from(\"email_quotas\").insert({\r\n        user_id: userId,\r\n        daily_limit: defaultQuota.dailyLimit,\r\n        monthly_limit: defaultQuota.monthlyLimit,\r\n        daily_sent: defaultQuota.dailySent,\r\n        monthly_sent: defaultQuota.monthlySent,\r\n        last_reset_date: defaultQuota.lastResetDate,\r\n        attachment_size_limit: defaultQuota.attachmentSizeLimit,\r\n        storage_used: defaultQuota.storageUsed,\r\n        storage_limit: defaultQuota.storageLimit,\r\n      } as any)\r\n\r\n      return defaultQuota\r\n    }\r\n\r\n    return {\r\n      userId: data.user_id,\r\n      dailyLimit: data.daily_limit,\r\n      monthlyLimit: data.monthly_limit,\r\n      dailySent: data.daily_sent,\r\n      monthlySent: data.monthly_sent,\r\n      lastResetDate: data.last_reset_date,\r\n      attachmentSizeLimit: data.attachment_size_limit,\r\n      storageUsed: data.storage_used,\r\n      storageLimit: data.storage_limit,\r\n    }\r\n  }\r\n\r\n  async updateUserQuota(userId: string, quota: EmailQuota): Promise<void> {\r\n    await (supabase as any)\r\n      .from(\"email_quotas\")\r\n      .update({\r\n        daily_sent: quota.dailySent,\r\n        monthly_sent: quota.monthlySent,\r\n        last_reset_date: quota.lastResetDate,\r\n        storage_used: quota.storageUsed,\r\n      } as any)\r\n      .eq(\"user_id\", userId)\r\n  }\r\n\r\n  // Attachment Management with Size Limits\r\n  async validateAttachments(\r\n    attachments: EmailAttachment[],\r\n    userId: string,\r\n  ): Promise<{ valid: boolean; reason?: string }> {\r\n    if (!attachments || attachments.length === 0) {\r\n      return { valid: true }\r\n    }\r\n\r\n    const quota = await this.getUserQuota(userId)\r\n\r\n    // Check individual attachment size\r\n    for (const attachment of attachments) {\r\n      const sizeInMB = attachment.size / (1024 * 1024)\r\n      if (sizeInMB > quota.attachmentSizeLimit) {\r\n        return {\r\n          valid: false,\r\n          reason: `Attachment \"${attachment.filename}\" exceeds size limit of ${quota.attachmentSizeLimit}MB`,\r\n        }\r\n      }\r\n    }\r\n\r\n    // Check total storage usage\r\n    const totalAttachmentSize = attachments.reduce((sum, att) => sum + att.size, 0)\r\n    const totalSizeInMB = totalAttachmentSize / (1024 * 1024)\r\n\r\n    if (quota.storageUsed + totalSizeInMB > quota.storageLimit) {\r\n      return {\r\n        valid: false,\r\n        reason: `Storage limit exceeded. Available: ${(quota.storageLimit - quota.storageUsed).toFixed(1)}MB, Required: ${totalSizeInMB.toFixed(1)}MB`,\r\n      }\r\n    }\r\n\r\n    return { valid: true }\r\n  }\r\n\r\n  async compressAttachment(attachment: EmailAttachment): Promise<EmailAttachment> {\r\n    // Simple compression simulation - in real implementation, use image compression libraries\r\n    if (attachment.contentType.startsWith(\"image/\") && attachment.size > 1024 * 1024) {\r\n      return {\r\n        ...attachment,\r\n        size: Math.floor(attachment.size * 0.7), // Simulate 30% compression\r\n        filename: attachment.filename.replace(/(\\.[^.]+)$/, \"_compressed$1\"),\r\n      }\r\n    }\r\n    return attachment\r\n  }\r\n\r\n  async testConnection(): Promise<boolean> {\r\n    if (!this.config) {\r\n      throw new Error(\"Email not configured\")\r\n    }\r\n\r\n    try {\r\n      // Test connection based on provider\r\n      switch (this.config.provider) {\r\n        case \"mailjet\":\r\n          return await this.testMailjetConnection()\r\n        case \"outlook\":\r\n          return await this.testOutlookConnection()\r\n        case \"smtp\":\r\n          return await this.testSmtpConnection()\r\n        default:\r\n          throw new Error(\"Unsupported email provider\")\r\n      }\r\n    } catch (error) {\r\n      // Silent error handling - Email connection test failed\r\n      return false\r\n    }\r\n  }\r\n\r\n  private async testMailjetConnection(): Promise<boolean> {\r\n    // Test Mailjet API connection\r\n    const response = await fetch(\"https://api.mailjet.com/v3/REST/contact\", {\r\n      headers: {\r\n        Authorization: `Basic ${btoa(`${this.config?.clientId}:${this.config?.clientSecret}`)}`,\r\n      },\r\n    })\r\n    return response.ok\r\n  }\r\n\r\n  private async testOutlookConnection(): Promise<boolean> {\r\n    // Test Outlook API connection\r\n    const response = await fetch(\"https://graph.microsoft.com/v1.0/me\", {\r\n      headers: {\r\n        Authorization: `Bearer ${this.config?.accessToken}`,\r\n      },\r\n    })\r\n    return response.ok\r\n  }\r\n\r\n  private async testSmtpConnection(): Promise<boolean> {\r\n    // For SMTP, we'll simulate a connection test\r\n    // In a real implementation, you'd test the SMTP connection\r\n    return true\r\n  }\r\n\r\n  // Email Operations with Quota Checks\r\n  async sendEmail(message: Partial<EmailMessage>, userId: string): Promise<EmailMessage> {\r\n    if (!this.isConnected) {\r\n      throw new Error(\"Email service not connected\")\r\n    }\r\n\r\n    // Check quota\r\n    const quotaCheck = await this.checkEmailQuota(userId)\r\n    if (!quotaCheck.canSend) {\r\n      throw new Error(quotaCheck.reason)\r\n    }\r\n\r\n    // Validate attachments\r\n    if (message.attachments) {\r\n      const attachmentValidation = await this.validateAttachments(message.attachments, userId)\r\n      if (!attachmentValidation.valid) {\r\n        throw new Error(attachmentValidation.reason)\r\n      }\r\n\r\n      // Compress attachments if enabled\r\n      if (this.DEFAULT_RETENTION.compressAttachments) {\r\n        message.attachments = await Promise.all(message.attachments.map((att) => this.compressAttachment(att)))\r\n      }\r\n    }\r\n\r\n    const emailMessage: EmailMessage = {\r\n      id: crypto.randomUUID(),\r\n      from: this.config?.username || \"\",\r\n      to: message.to || [],\r\n      cc: message.cc,\r\n      bcc: message.bcc,\r\n      subject: message.subject || \"\",\r\n      body: message.body || \"\",\r\n      bodyType: message.bodyType || \"html\",\r\n      attachments: message.attachments,\r\n      priority: message.priority || \"normal\",\r\n      readReceipt: message.readReceipt,\r\n      deliveryReceipt: message.deliveryReceipt,\r\n      scheduledAt: message.scheduledAt,\r\n      sentAt: new Date().toISOString(),\r\n      status: \"sent\",\r\n      threadId: message.threadId,\r\n      inReplyTo: message.inReplyTo,\r\n      references: message.references,\r\n      labels: message.labels || [],\r\n      folder: \"sent\",\r\n      isRead: true,\r\n      isStarred: false,\r\n      isImportant: false,\r\n      clientId: message.clientId,\r\n      projectId: message.projectId,\r\n      taskId: message.taskId,\r\n      metadata: message.metadata,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString(),\r\n    }\r\n\r\n    try {\r\n      // Check if email contains sensitive data and encrypt if needed\r\n      const hasSensitiveData = this.containsSensitiveData(emailMessage.body) || \r\n                              this.containsSensitiveData(emailMessage.subject)\r\n\r\n      // Encrypt email if it contains sensitive data or encryption is enabled\r\n      let finalEmailMessage = emailMessage\r\n      if (this.ENCRYPTION_CONFIG.enabled || hasSensitiveData) {\r\n        finalEmailMessage = await this.encryptEmailMessage(emailMessage, userId)\r\n      }\r\n\r\n      // Send email based on provider (use original unencrypted message for sending)\r\n      await this.sendViaProvider(emailMessage)\r\n\r\n      // Update quota\r\n      quotaCheck.quota.dailySent += 1\r\n      quotaCheck.quota.monthlySent += 1\r\n\r\n      // Update storage usage\r\n      if (finalEmailMessage.attachments) {\r\n        const attachmentSize = finalEmailMessage.attachments.reduce((sum, att) => sum + att.size, 0)\r\n        quotaCheck.quota.storageUsed += attachmentSize / (1024 * 1024)\r\n      }\r\n\r\n      await this.updateUserQuota(userId, quotaCheck.quota)\r\n\r\n      // Save encrypted email to database\r\n      await (supabase as any).from(\"emails\").insert({\r\n        id: finalEmailMessage.id,\r\n        from_email: finalEmailMessage.from,\r\n        to_email: finalEmailMessage.to,\r\n        cc_email: finalEmailMessage.cc,\r\n        bcc_email: finalEmailMessage.bcc,\r\n        subject: finalEmailMessage.subject,\r\n        body: finalEmailMessage.body,\r\n        body_type: finalEmailMessage.bodyType,\r\n        attachments: finalEmailMessage.attachments,\r\n        priority: finalEmailMessage.priority,\r\n        status: finalEmailMessage.status,\r\n        thread_id: finalEmailMessage.threadId,\r\n        folder: finalEmailMessage.folder,\r\n        is_read: finalEmailMessage.isRead,\r\n        is_starred: finalEmailMessage.isStarred,\r\n        is_important: finalEmailMessage.isImportant,\r\n        client_id: finalEmailMessage.clientId,\r\n        project_id: finalEmailMessage.projectId,\r\n        task_id: finalEmailMessage.taskId,\r\n        metadata: finalEmailMessage.metadata,\r\n        sent_at: finalEmailMessage.sentAt,\r\n        created_at: finalEmailMessage.created_at,\r\n        updated_at: finalEmailMessage.updated_at,\r\n        user_id: userId,\r\n        is_encrypted: finalEmailMessage.isEncrypted,\r\n        encryption_key_id: finalEmailMessage.encryptionKeyId,\r\n        encrypted_fields: finalEmailMessage.encryptedFields,\r\n      } as any)\r\n\r\n      return finalEmailMessage\r\n    } catch (error: any) {\r\n      emailMessage.status = \"failed\"\r\n      throw new Error(`Failed to send email: ${error.message}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve and decrypt email messages\r\n   */\r\n  async getEmails(userId: string, folder?: string): Promise<EmailMessage[]> {\r\n    let query = (supabase as any).from(\"emails\").select(\"*\").eq(\"user_id\", userId)\r\n    \r\n    if (folder) {\r\n      query = query.eq(\"folder\", folder)\r\n    }\r\n\r\n    const { data, error } = await query.order(\"created_at\", { ascending: false })\r\n\r\n    if (error) {\r\n      throw new Error(`Failed to get emails: ${error.message}`)\r\n    }\r\n\r\n    // Decrypt emails if they are encrypted\r\n    const emails = await Promise.all(\r\n      (data || []).map(async (emailData: any) => {\r\n        const email: EmailMessage = {\r\n          id: emailData.id,\r\n          from: emailData.from_email,\r\n          to: emailData.to_email,\r\n          cc: emailData.cc_email,\r\n          bcc: emailData.bcc_email,\r\n          subject: emailData.subject,\r\n          body: emailData.body,\r\n          bodyType: emailData.body_type,\r\n          attachments: emailData.attachments,\r\n          priority: emailData.priority,\r\n          status: emailData.status,\r\n          threadId: emailData.thread_id,\r\n          folder: emailData.folder,\r\n          isRead: emailData.is_read,\r\n          isStarred: emailData.is_starred,\r\n          isImportant: emailData.is_important,\r\n          clientId: emailData.client_id,\r\n          projectId: emailData.project_id,\r\n          taskId: emailData.task_id,\r\n          metadata: emailData.metadata,\r\n          sentAt: emailData.sent_at,\r\n          created_at: emailData.created_at,\r\n          updated_at: emailData.updated_at,\r\n          isEncrypted: emailData.is_encrypted,\r\n          encryptionKeyId: emailData.encryption_key_id,\r\n          encryptedFields: emailData.encrypted_fields,\r\n        }\r\n\r\n        // Decrypt if encrypted\r\n        if (email.isEncrypted) {\r\n          return await this.decryptEmailMessage(email, userId)\r\n        }\r\n\r\n        return email\r\n      })\r\n    )\r\n\r\n    return emails\r\n  }\r\n\r\n  private async sendViaProvider(message: EmailMessage): Promise<void> {\r\n    switch (this.config?.provider) {\r\n      case \"mailjet\":\r\n        await this.sendViaMailjet(message)\r\n        break\r\n      case \"outlook\":\r\n        await this.sendViaOutlook(message)\r\n        break\r\n      case \"smtp\":\r\n        await this.sendViaSmtp(message)\r\n        break\r\n      default:\r\n        throw new Error(\"Unsupported email provider\")\r\n    }\r\n  }\r\n\r\n  private async sendViaMailjet(message: EmailMessage): Promise<void> {\r\n    const email = this.formatEmailForMailjet(message)\r\n\r\n    const response = await fetch(\"https://api.mailjet.com/v3.1/send\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Basic ${btoa(`${this.config?.clientId}:${this.config?.clientSecret}`)}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(email),\r\n    })\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Mailjet API error: ${response.statusText}`)\r\n    }\r\n  }\r\n\r\n  private async sendViaOutlook(message: EmailMessage): Promise<void> {\r\n    const email = this.formatEmailForOutlook(message)\r\n\r\n    const response = await fetch(\"https://graph.microsoft.com/v1.0/me/sendMail\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${this.config?.accessToken}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ message: email }),\r\n    })\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Outlook API error: ${response.statusText}`)\r\n    }\r\n  }\r\n\r\n  private async sendViaSmtp(message: EmailMessage): Promise<void> {\r\n    // SMTP implementation would go here\r\n    // For now, we'll simulate sending\r\n    // Silent logging - Sending via SMTP\r\n  }\r\n\r\n  private formatEmailForMailjet(message: EmailMessage): any {\r\n    return {\r\n      Messages: [\r\n        {\r\n          From: {\r\n            Email: this.config?.username || \"\",\r\n            Name: \"CRM System\",\r\n          },\r\n          To: message.to.map((email) => ({ Email: email })),\r\n          Cc: message.cc?.map((email) => ({ Email: email })) || [],\r\n          Bcc: message.bcc?.map((email) => ({ Email: email })) || [],\r\n          Subject: message.subject,\r\n          HTMLPart: message.bodyType === \"html\" ? message.body : undefined,\r\n          TextPart: message.bodyType === \"text\" ? message.body : undefined,\r\n        },\r\n      ],\r\n    }\r\n  }\r\n\r\n  private formatEmailForOutlook(message: EmailMessage): any {\r\n    return {\r\n      subject: message.subject,\r\n      body: {\r\n        contentType: message.bodyType === \"html\" ? \"HTML\" : \"Text\",\r\n        content: message.body,\r\n      },\r\n      toRecipients: message.to.map((email) => ({ emailAddress: { address: email } })),\r\n      ccRecipients: message.cc?.map((email) => ({ emailAddress: { address: email } })) || [],\r\n      bccRecipients: message.bcc?.map((email) => ({ emailAddress: { address: email } })) || [],\r\n      importance: message.priority === \"high\" ? \"high\" : message.priority === \"low\" ? \"low\" : \"normal\",\r\n    }\r\n  }\r\n\r\n  // Cleanup and Retention\r\n  private startCleanupJob(): void {\r\n    // Run cleanup daily at 2 AM\r\n    const now = new Date()\r\n    const tomorrow = new Date(now)\r\n    tomorrow.setDate(tomorrow.getDate() + 1)\r\n    tomorrow.setHours(2, 0, 0, 0)\r\n\r\n    const msUntilTomorrow = tomorrow.getTime() - now.getTime()\r\n\r\n    setTimeout(() => {\r\n      this.runCleanup()\r\n      // Then run every 24 hours\r\n      setInterval(() => this.runCleanup(), 24 * 60 * 60 * 1000)\r\n    }, msUntilTomorrow)\r\n  }\r\n\r\n  private async runCleanup(): Promise<void> {\r\n    try {\r\n      // Silent logging - Starting email cleanup job\r\n\r\n      if (this.DEFAULT_RETENTION.autoDeleteOldEmails) {\r\n        await this.cleanupOldEmails()\r\n        await this.cleanupOldAttachments()\r\n        await this.cleanupDeletedEmails()\r\n      }\r\n\r\n      // Silent logging - Email cleanup job completed\r\n    } catch (error) {\r\n      // Silent error handling - Email cleanup job failed\r\n    }\r\n  }\r\n\r\n  private async cleanupOldEmails(): Promise<void> {\r\n    const sentCutoff = new Date()\r\n    sentCutoff.setDate(sentCutoff.getDate() - this.DEFAULT_RETENTION.sentEmailRetentionDays)\r\n\r\n    const receivedCutoff = new Date()\r\n    receivedCutoff.setDate(receivedCutoff.getDate() - this.DEFAULT_RETENTION.receivedEmailRetentionDays)\r\n\r\n    // Delete old sent emails\r\n    await (supabase as any).from(\"emails\").delete().eq(\"folder\", \"sent\").lt(\"created_at\", sentCutoff.toISOString())\r\n\r\n    // Delete old received emails\r\n    await (supabase as any).from(\"emails\").delete().eq(\"folder\", \"inbox\").lt(\"created_at\", receivedCutoff.toISOString())\r\n  }\r\n\r\n  private async cleanupOldAttachments(): Promise<void> {\r\n    const cutoff = new Date()\r\n    cutoff.setDate(cutoff.getDate() - this.DEFAULT_RETENTION.attachmentRetentionDays)\r\n\r\n    // Get emails with attachments older than retention period\r\n    const { data: oldEmails } = await (supabase as any)\r\n      .from(\"emails\")\r\n      .select(\"id, attachments, user_id\")\r\n      .not(\"attachments\", \"is\", null)\r\n      .lt(\"created_at\", cutoff.toISOString())\r\n\r\n    if (oldEmails) {\r\n      for (const email of oldEmails as any[]) {\r\n        // Calculate storage to be freed\r\n        const attachmentSize = (email as any).attachments?.reduce((sum: number, att: any) => sum + att.size, 0) || 0\r\n        const sizeInMB = attachmentSize / (1024 * 1024)\r\n\r\n        // Remove attachments from email\r\n        await (supabase as any).from(\"emails\").update({ attachments: null } as any).eq(\"id\", (email as any).id)\r\n\r\n        // Update user storage quota\r\n        if ((email as any).user_id) {\r\n          const quota = await this.getUserQuota((email as any).user_id)\r\n          quota.storageUsed = Math.max(0, quota.storageUsed - sizeInMB)\r\n          await this.updateUserQuota((email as any).user_id, quota)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private async cleanupDeletedEmails(): Promise<void> {\r\n    if (!supabase) throw new Error('Database not initialized')\r\n    \r\n    const cutoff = new Date()\r\n    cutoff.setDate(cutoff.getDate() - this.DEFAULT_RETENTION.deletedEmailRetentionDays)\r\n\r\n    await supabase.from(\"emails\").delete().eq(\"folder\", \"trash\").lt(\"updated_at\", cutoff.toISOString())\r\n  }\r\n\r\n  // Email Templates\r\n  async createTemplate(\r\n    template: Omit<EmailTemplate, \"id\" | \"usage_count\" | \"created_at\" | \"updated_at\">,\r\n  ): Promise<EmailTemplate> {\r\n    const newTemplate: EmailTemplate = {\r\n      id: crypto.randomUUID(),\r\n      usage_count: 0,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString(),\r\n      ...template,\r\n    }\r\n\r\n    const { error } = await (supabase as any).from(\"email_templates\").insert({\r\n      id: newTemplate.id,\r\n      name: newTemplate.name,\r\n      subject: newTemplate.subject,\r\n      body: newTemplate.body,\r\n      body_type: newTemplate.bodyType,\r\n      category: newTemplate.category,\r\n      variables: newTemplate.variables,\r\n      is_active: newTemplate.isActive,\r\n      usage_count: newTemplate.usage_count,\r\n      created_by: newTemplate.created_by,\r\n      created_at: newTemplate.created_at,\r\n      updated_at: newTemplate.updated_at,\r\n    } as any)\r\n\r\n    if (error) {\r\n      throw new Error(`Failed to create template: ${error.message}`)\r\n    }\r\n\r\n    return newTemplate\r\n  }\r\n\r\n  async getTemplates(category?: string): Promise<EmailTemplate[]> {\r\n    let query = (supabase as any).from(\"email_templates\").select(\"*\").eq(\"is_active\", true).order(\"name\")\r\n\r\n    if (category) {\r\n      query = query.eq(\"category\", category)\r\n    }\r\n\r\n    const { data, error } = await query\r\n\r\n    if (error) {\r\n      throw new Error(`Failed to get templates: ${error.message}`)\r\n    }\r\n\r\n    return (data || []).map((template: any) => ({\r\n      id: template.id,\r\n      name: template.name,\r\n      subject: template.subject,\r\n      body: template.body,\r\n      bodyType: template.body_type,\r\n      category: template.category,\r\n      variables: template.variables || [],\r\n      isActive: template.is_active,\r\n      usage_count: template.usage_count,\r\n      created_by: template.created_by,\r\n      created_at: template.created_at,\r\n      updated_at: template.updated_at,\r\n    }))\r\n  }\r\n\r\n  async renderTemplate(\r\n    templateId: string,\r\n    variables: Record<string, string>,\r\n  ): Promise<{ subject: string; body: string }> {\r\n    const template = await this.getTemplate(templateId)\r\n    if (!template) {\r\n      throw new Error(\"Template not found\")\r\n    }\r\n\r\n    let subject = template.subject\r\n    let body = template.body\r\n\r\n    // Replace variables\r\n    Object.entries(variables).forEach(([key, value]) => {\r\n      const placeholder = `{{${key}}}`\r\n      subject = subject.replace(new RegExp(placeholder, \"g\"), value)\r\n      body = body.replace(new RegExp(placeholder, \"g\"), value)\r\n    })\r\n\r\n    // Increment usage count\r\n    await (supabase as any)\r\n      .from(\"email_templates\")\r\n      .update({ usage_count: template.usage_count + 1 } as any)\r\n      .eq(\"id\", templateId)\r\n\r\n    return { subject, body }\r\n  }\r\n\r\n  private async getTemplate(id: string): Promise<EmailTemplate | null> {\r\n    const { data, error } = await (supabase as any).from(\"email_templates\").select(\"*\").eq(\"id\", id).single()\r\n\r\n    if (error) return null\r\n\r\n    return {\r\n      id: (data as any).id,\r\n      name: (data as any).name,\r\n      subject: (data as any).subject,\r\n      body: (data as any).body,\r\n      bodyType: (data as any).body_type,\r\n      category: (data as any).category,\r\n      variables: (data as any).variables || [],\r\n      isActive: (data as any).is_active,\r\n      usage_count: (data as any).usage_count,\r\n      created_by: (data as any).created_by,\r\n      created_at: (data as any).created_at,\r\n      updated_at: (data as any).updated_at,\r\n    }\r\n  }\r\n\r\n  // Email Sync\r\n  private startSync(): void {\r\n    if (this.syncInterval) {\r\n      clearInterval(this.syncInterval)\r\n    }\r\n\r\n    this.syncInterval = setInterval(\r\n      () => {\r\n        this.syncEmails()\r\n      },\r\n      5 * 60 * 1000,\r\n    ) // Sync every 5 minutes\r\n  }\r\n\r\n  private async syncEmails(): Promise<void> {\r\n    if (!this.isConnected) return\r\n\r\n    try {\r\n      // Sync based on provider\r\n      switch (this.config?.provider) {\r\n                case \"outlook\":\r\n          await this.syncOutlookEmails()\r\n          break\r\n      }\r\n    } catch (error) {\r\n      // Silent error handling - Email sync failed\r\n    }\r\n  }\r\n\r\n  \r\n  private async syncOutlookEmails(): Promise<void> {\r\n    // Outlook sync implementation\r\n    // Silent logging - Syncing Outlook emails\r\n  }\r\n\r\n  // Analytics\r\n  async getAnalytics(dateRange?: { start: Date; end: Date }): Promise<EmailAnalytics> {\r\n    let query = (supabase as any).from(\"emails\").select(\"status, is_read, metadata\")\r\n\r\n    if (dateRange) {\r\n      query = query.gte(\"created_at\", dateRange.start.toISOString()).lte(\"created_at\", dateRange.end.toISOString())\r\n    }\r\n\r\n    const { data, error } = await query\r\n\r\n    if (error) {\r\n      throw new Error(`Failed to get analytics: ${error.message}`)\r\n    }\r\n\r\n    const emails = data || []\r\n    const sent = emails.filter((e: any) => e.status === \"sent\").length\r\n    const opened = emails.filter((e: any) => e.is_read).length\r\n    const clicked = emails.filter((e: any) => e.metadata?.clicked).length\r\n    const replied = emails.filter((e: any) => e.metadata?.replied).length\r\n    const bounced = emails.filter((e: any) => e.status === \"failed\").length\r\n\r\n    return {\r\n      sent,\r\n      received: emails.length - sent,\r\n      opened,\r\n      clicked,\r\n      replied,\r\n      bounced,\r\n      unsubscribed: 0, // Would need separate tracking\r\n      openRate: sent > 0 ? (opened / sent) * 100 : 0,\r\n      clickRate: opened > 0 ? (clicked / opened) * 100 : 0,\r\n      replyRate: sent > 0 ? (replied / sent) * 100 : 0,\r\n      bounceRate: sent > 0 ? (bounced / sent) * 100 : 0,\r\n    }\r\n  }\r\n\r\n  // Quota Management Methods\r\n  async getQuotaStatus(userId: string): Promise<{\r\n    daily: { used: number; limit: number; remaining: number }\r\n    monthly: { used: number; limit: number; remaining: number }\r\n    storage: { used: number; limit: number; remaining: number }\r\n  }> {\r\n    const quota = await this.getUserQuota(userId)\r\n\r\n    return {\r\n      daily: {\r\n        used: quota.dailySent,\r\n        limit: quota.dailyLimit,\r\n        remaining: quota.dailyLimit - quota.dailySent,\r\n      },\r\n      monthly: {\r\n        used: quota.monthlySent,\r\n        limit: quota.monthlyLimit,\r\n        remaining: quota.monthlyLimit - quota.monthlySent,\r\n      },\r\n      storage: {\r\n        used: quota.storageUsed,\r\n        limit: quota.storageLimit,\r\n        remaining: quota.storageLimit - quota.storageUsed,\r\n      },\r\n    }\r\n  }\r\n\r\n  // Cleanup\r\n  destroy(): void {\r\n    if (this.syncInterval) {\r\n      clearInterval(this.syncInterval)\r\n    }\r\n  }\r\n}\r\n\r\nexport const emailService = new EmailService()\r\nexport default emailService\r\n"],
      names: ["emailService", "EmailService", "generateEncryptionKey", "crypto", "randomBytes", "ENCRYPTION_CONFIG", "keySize", "encryptData", "data", "key", "enabled", "encrypted", "iv", "tag", "cipher", "createCipheriv", "algorithm", "setAAD", "Buffer", "from", "update", "final", "getAuthTag", "toString", "decryptData", "encryptedData", "decipher", "createDecipheriv", "setAuthTag", "decrypted", "error", "console", "Error", "encryptEmailMessage", "message", "userId", "encryptionKey", "keyId", "randomUUID", "storeEncryptionKey", "encryptedMessage", "encryptedFields", "bodyEncryption", "body", "JSON", "stringify", "push", "encryptSubject", "subjectEncryption", "subject", "encryptMetadata", "metadata", "metadataEncryption", "encryptAttachments", "attachments", "Promise", "all", "map", "attachment", "attachmentEncryption", "isEncrypted", "encryptionKeyId", "originalSize", "size", "decryptEmailMessage", "getEncryptionKey", "decryptedMessage", "includes", "bodyData", "parse", "subjectData", "metadataStr", "attachmentData", "masterKey", "process", "env", "EMAIL_MASTER_KEY", "NODE_ENV", "keyEncryption", "supabase", "insert", "id", "user_id", "encrypted_key", "key_iv", "key_tag", "created_at", "Date", "toISOString", "expires_at", "now", "keyData", "select", "eq", "single", "decryptedKey", "containsSensitiveData", "content", "sensitivePatterns", "some", "pattern", "test", "configure", "config", "testConnection", "isConnected", "upsert", "provider", "username", "smtp_host", "smtpHost", "smtp_port", "smtpPort", "smtp_secure", "smtpSecure", "access_token", "accessToken", "refresh_token", "refreshToken", "client_id", "clientId", "updated_at", "startSync", "startCleanupJob", "checkEmailQuota", "quota", "getUserQuota", "today", "toDateString", "lastResetDate", "dailySent", "updateUserQuota", "currentMonth", "getMonth", "lastResetMonth", "monthlySent", "dailyLimit", "canSend", "reason", "monthlyLimit", "defaultQuota", "DEFAULT_QUOTAS", "storageUsed", "daily_limit", "monthly_limit", "daily_sent", "monthly_sent", "last_reset_date", "attachment_size_limit", "attachmentSizeLimit", "storage_used", "storage_limit", "storageLimit", "validateAttachments", "length", "valid", "sizeInMB", "filename", "totalAttachmentSize", "reduce", "sum", "att", "totalSizeInMB", "toFixed", "compressAttachment", "contentType", "startsWith", "Math", "floor", "replace", "testMailjetConnection", "testOutlookConnection", "testSmtpConnection", "response", "fetch", "headers", "Authorization", "btoa", "clientSecret", "ok", "sendEmail", "quotaCheck", "attachmentValidation", "DEFAULT_RETENTION", "compressAttachments", "emailMessage", "to", "cc", "bcc", "bodyType", "priority", "readReceipt", "deliveryReceipt", "scheduledAt", "sentAt", "status", "threadId", "inReplyTo", "references", "labels", "folder", "isRead", "isStarred", "isImportant", "projectId", "taskId", "hasSensitiveData", "finalEmailMessage", "sendViaProvider", "attachmentSize", "from_email", "to_email", "cc_email", "bcc_email", "body_type", "thread_id", "is_read", "is_starred", "is_important", "project_id", "task_id", "sent_at", "is_encrypted", "encryption_key_id", "encrypted_fields", "getEmails", "query", "order", "ascending", "emails", "emailData", "email", "sendViaMailjet", "sendViaOutlook", "sendViaSmtp", "formatEmailForMailjet", "method", "statusText", "formatEmailForOutlook", "Messages", "From", "Email", "Name", "To", "Cc", "Bcc", "Subject", "HTMLPart", "undefined", "TextPart", "toRecipients", "emailAddress", "address", "ccRecipients", "bccRecipients", "importance", "tomorrow", "setDate", "getDate", "setHours", "msUntilTomorrow", "getTime", "setTimeout", "runCleanup", "setInterval", "autoDeleteOldEmails", "cleanupOldEmails", "cleanupOldAttachments", "cleanupDeletedEmails", "sentCutoff", "sentEmailRetentionDays", "receivedCutoff", "receivedEmailRetentionDays", "delete", "lt", "cutoff", "attachmentRetentionDays", "oldEmails", "not", "max", "deletedEmailRetentionDays", "createTemplate", "template", "newTemplate", "usage_count", "name", "category", "variables", "is_active", "isActive", "created_by", "getTemplates", "renderTemplate", "templateId", "getTemplate", "Object", "entries", "forEach", "value", "placeholder", "RegExp", "syncInterval", "clearInterval", "syncEmails", "syncOutlookEmails", "getAnalytics", "dateRange", "gte", "start", "lte", "end", "sent", "filter", "e", "opened", "clicked", "replied", "bounced", "received", "unsubscribed", "openRate", "clickRate", "replyRate", "bounceRate", "getQuotaStatus", "daily", "used", "limit", "remaining", "monthly", "storage", "destroy", "maxAttachmentSize"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "35835deb2715660287c2fb7f751789581f611a3f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1o2i3u45x7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1o2i3u45x7();
cov_1o2i3u45x7().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1o2i3u45x7().f[0]++;
  cov_1o2i3u45x7().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1o2i3u45x7().s[3]++;
_export(exports, {
  get default() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[1]++;
    cov_1o2i3u45x7().s[4]++;
    return _default;
  },
  get emailService() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[2]++;
    cov_1o2i3u45x7().s[5]++;
    return emailService;
  }
});
const _supabase =
/* istanbul ignore next */
(cov_1o2i3u45x7().s[6]++, require("../lib/supabase"));
const _crypto =
/* istanbul ignore next */
(/*#__PURE__*/cov_1o2i3u45x7().s[7]++, _interop_require_wildcard(require("crypto")));
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_1o2i3u45x7().f[3]++;
  cov_1o2i3u45x7().s[8]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_1o2i3u45x7().b[0][0]++;
    cov_1o2i3u45x7().s[9]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_1o2i3u45x7().b[0][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_1o2i3u45x7().s[10]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_1o2i3u45x7().s[11]++, new WeakMap());
  /* istanbul ignore next */
  cov_1o2i3u45x7().s[12]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[4]++;
    cov_1o2i3u45x7().s[13]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[1][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[1][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_1o2i3u45x7().f[5]++;
  cov_1o2i3u45x7().s[14]++;
  if (
  /* istanbul ignore next */
  (cov_1o2i3u45x7().b[3][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_1o2i3u45x7().b[3][1]++, obj) &&
  /* istanbul ignore next */
  (cov_1o2i3u45x7().b[3][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().b[2][0]++;
    cov_1o2i3u45x7().s[15]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_1o2i3u45x7().b[2][1]++;
  }
  cov_1o2i3u45x7().s[16]++;
  if (
  /* istanbul ignore next */
  (cov_1o2i3u45x7().b[5][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_1o2i3u45x7().b[5][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_1o2i3u45x7().b[5][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().b[4][0]++;
    cov_1o2i3u45x7().s[17]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_1o2i3u45x7().b[4][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_1o2i3u45x7().s[18]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_1o2i3u45x7().s[19]++;
  if (
  /* istanbul ignore next */
  (cov_1o2i3u45x7().b[7][0]++, cache) &&
  /* istanbul ignore next */
  (cov_1o2i3u45x7().b[7][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().b[6][0]++;
    cov_1o2i3u45x7().s[20]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_1o2i3u45x7().b[6][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_1o2i3u45x7().s[21]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_1o2i3u45x7().s[22]++,
  /* istanbul ignore next */
  (cov_1o2i3u45x7().b[8][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_1o2i3u45x7().b[8][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_1o2i3u45x7().s[23]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[10][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[10][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[9][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_1o2i3u45x7().s[25]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[11][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[11][1]++, null));
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[26]++;
      if (
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[13][0]++, desc) && (
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[13][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[13][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[12][0]++;
        cov_1o2i3u45x7().s[27]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[12][1]++;
        cov_1o2i3u45x7().s[28]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[9][1]++;
    }
  }
  /* istanbul ignore next */
  cov_1o2i3u45x7().s[29]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_1o2i3u45x7().s[30]++;
  if (cache) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().b[14][0]++;
    cov_1o2i3u45x7().s[31]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_1o2i3u45x7().b[14][1]++;
  }
  cov_1o2i3u45x7().s[32]++;
  return newObj;
}
class EmailService {
  /**
  * Generate encryption key for email data
  */
  generateEncryptionKey() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[6]++;
    cov_1o2i3u45x7().s[33]++;
    return _crypto.randomBytes(this.ENCRYPTION_CONFIG.keySize);
  }
  /**
  * Encrypt sensitive email data
  */
  encryptData(data, key) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[7]++;
    cov_1o2i3u45x7().s[34]++;
    if (!this.ENCRYPTION_CONFIG.enabled) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[15][0]++;
      cov_1o2i3u45x7().s[35]++;
      return {
        encrypted: data,
        iv: '',
        tag: ''
      };
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[15][1]++;
    }
    const iv =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[36]++, _crypto.randomBytes(16));
    const cipher =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[37]++, _crypto.createCipheriv(this.ENCRYPTION_CONFIG.algorithm, key, iv));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[38]++;
    cipher.setAAD(Buffer.from('email-encryption'));
    let encrypted =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[39]++, cipher.update(data, 'utf8', 'hex'));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[40]++;
    encrypted += cipher.final('hex');
    const tag =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[41]++, cipher.getAuthTag());
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[42]++;
    return {
      encrypted,
      iv: iv.toString('hex'),
      tag: tag.toString('hex')
    };
  }
  /**
  * Decrypt email data
  */
  decryptData(encryptedData, key, iv, tag) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[8]++;
    cov_1o2i3u45x7().s[43]++;
    if (
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[17][0]++, !this.ENCRYPTION_CONFIG.enabled) ||
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[17][1]++, !iv) ||
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[17][2]++, !tag)) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[16][0]++;
      cov_1o2i3u45x7().s[44]++;
      return encryptedData;
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[16][1]++;
    }
    cov_1o2i3u45x7().s[45]++;
    try {
      const decipher =
      /* istanbul ignore next */
      (cov_1o2i3u45x7().s[46]++, _crypto.createDecipheriv(this.ENCRYPTION_CONFIG.algorithm, key, Buffer.from(iv, 'hex')));
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[47]++;
      decipher.setAAD(Buffer.from('email-encryption'));
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[48]++;
      decipher.setAuthTag(Buffer.from(tag, 'hex'));
      let decrypted =
      /* istanbul ignore next */
      (cov_1o2i3u45x7().s[49]++, decipher.update(encryptedData, 'hex', 'utf8'));
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[50]++;
      decrypted += decipher.final('utf8');
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[51]++;
      return decrypted;
    } catch (error) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[52]++;
      console.error('Failed to decrypt email data:', error);
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[53]++;
      throw new Error('Email decryption failed');
    }
  }
  /**
  * Encrypt email message before storage
  */
  async encryptEmailMessage(message, userId) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[9]++;
    cov_1o2i3u45x7().s[54]++;
    if (!this.ENCRYPTION_CONFIG.enabled) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[18][0]++;
      cov_1o2i3u45x7().s[55]++;
      return message;
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[18][1]++;
    }
    const encryptionKey =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[56]++, this.generateEncryptionKey());
    const keyId =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[57]++, _crypto.randomUUID());
    // Store encryption key securely (in production, use a proper key management service)
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[58]++;
    await this.storeEncryptionKey(keyId, encryptionKey, userId);
    const encryptedMessage =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[59]++, {
      ...message
    });
    const encryptedFields =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[60]++, []);
    // Encrypt email body
    const bodyEncryption =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[61]++, this.encryptData(message.body, encryptionKey));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[62]++;
    encryptedMessage.body = JSON.stringify({
      encrypted: bodyEncryption.encrypted,
      iv: bodyEncryption.iv,
      tag: bodyEncryption.tag
    });
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[63]++;
    encryptedFields.push('body');
    // Encrypt subject if configured
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[64]++;
    if (this.ENCRYPTION_CONFIG.encryptSubject) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[19][0]++;
      const subjectEncryption =
      /* istanbul ignore next */
      (cov_1o2i3u45x7().s[65]++, this.encryptData(message.subject, encryptionKey));
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[66]++;
      encryptedMessage.subject = JSON.stringify({
        encrypted: subjectEncryption.encrypted,
        iv: subjectEncryption.iv,
        tag: subjectEncryption.tag
      });
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[67]++;
      encryptedFields.push('subject');
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[19][1]++;
    }
    // Encrypt metadata if configured
    cov_1o2i3u45x7().s[68]++;
    if (
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[21][0]++, this.ENCRYPTION_CONFIG.encryptMetadata) &&
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[21][1]++, message.metadata)) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[20][0]++;
      const metadataEncryption =
      /* istanbul ignore next */
      (cov_1o2i3u45x7().s[69]++, this.encryptData(JSON.stringify(message.metadata), encryptionKey));
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[70]++;
      encryptedMessage.metadata = {
        encrypted: metadataEncryption.encrypted,
        iv: metadataEncryption.iv,
        tag: metadataEncryption.tag
      };
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[71]++;
      encryptedFields.push('metadata');
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[20][1]++;
    }
    // Encrypt attachments if configured
    cov_1o2i3u45x7().s[72]++;
    if (
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[23][0]++, this.ENCRYPTION_CONFIG.encryptAttachments) &&
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[23][1]++, message.attachments)) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[22][0]++;
      cov_1o2i3u45x7().s[73]++;
      encryptedMessage.attachments = await Promise.all(message.attachments.map(async attachment => {
        /* istanbul ignore next */
        cov_1o2i3u45x7().f[10]++;
        cov_1o2i3u45x7().s[74]++;
        if (attachment.data) {
          /* istanbul ignore next */
          cov_1o2i3u45x7().b[24][0]++;
          const attachmentEncryption =
          /* istanbul ignore next */
          (cov_1o2i3u45x7().s[75]++, this.encryptData(attachment.data, encryptionKey));
          /* istanbul ignore next */
          cov_1o2i3u45x7().s[76]++;
          return {
            ...attachment,
            data: JSON.stringify({
              encrypted: attachmentEncryption.encrypted,
              iv: attachmentEncryption.iv,
              tag: attachmentEncryption.tag
            }),
            isEncrypted: true,
            encryptionKeyId: keyId,
            originalSize: attachment.size
          };
        } else
        /* istanbul ignore next */
        {
          cov_1o2i3u45x7().b[24][1]++;
        }
        cov_1o2i3u45x7().s[77]++;
        return attachment;
      }));
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[78]++;
      encryptedFields.push('attachments');
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[22][1]++;
    }
    cov_1o2i3u45x7().s[79]++;
    encryptedMessage.isEncrypted = true;
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[80]++;
    encryptedMessage.encryptionKeyId = keyId;
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[81]++;
    encryptedMessage.encryptedFields = encryptedFields;
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[82]++;
    return encryptedMessage;
  }
  /**
  * Decrypt email message after retrieval
  */
  async decryptEmailMessage(message, userId) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[11]++;
    cov_1o2i3u45x7().s[83]++;
    if (
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[26][0]++, !message.isEncrypted) ||
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[26][1]++, !message.encryptionKeyId)) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[25][0]++;
      cov_1o2i3u45x7().s[84]++;
      return message;
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[25][1]++;
    }
    const encryptionKey =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[85]++, await this.getEncryptionKey(message.encryptionKeyId, userId));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[86]++;
    if (!encryptionKey) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[27][0]++;
      cov_1o2i3u45x7().s[87]++;
      throw new Error('Encryption key not found');
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[27][1]++;
    }
    const decryptedMessage =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[88]++, {
      ...message
    });
    // Decrypt body
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[89]++;
    if (message.encryptedFields?.includes('body')) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[28][0]++;
      cov_1o2i3u45x7().s[90]++;
      try {
        const bodyData =
        /* istanbul ignore next */
        (cov_1o2i3u45x7().s[91]++, JSON.parse(message.body));
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[92]++;
        decryptedMessage.body = this.decryptData(bodyData.encrypted, encryptionKey, bodyData.iv, bodyData.tag);
      } catch (error) {
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[93]++;
        console.error('Failed to decrypt email body:', error);
      }
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[28][1]++;
    }
    // Decrypt subject
    cov_1o2i3u45x7().s[94]++;
    if (message.encryptedFields?.includes('subject')) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[29][0]++;
      cov_1o2i3u45x7().s[95]++;
      try {
        const subjectData =
        /* istanbul ignore next */
        (cov_1o2i3u45x7().s[96]++, JSON.parse(message.subject));
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[97]++;
        decryptedMessage.subject = this.decryptData(subjectData.encrypted, encryptionKey, subjectData.iv, subjectData.tag);
      } catch (error) {
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[98]++;
        console.error('Failed to decrypt email subject:', error);
      }
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[29][1]++;
    }
    // Decrypt metadata
    cov_1o2i3u45x7().s[99]++;
    if (
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[31][0]++, message.encryptedFields?.includes('metadata')) &&
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[31][1]++, message.metadata)) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[30][0]++;
      cov_1o2i3u45x7().s[100]++;
      try {
        const metadataStr =
        /* istanbul ignore next */
        (cov_1o2i3u45x7().s[101]++, this.decryptData(message.metadata.encrypted, encryptionKey, message.metadata.iv, message.metadata.tag));
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[102]++;
        decryptedMessage.metadata = JSON.parse(metadataStr);
      } catch (error) {
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[103]++;
        console.error('Failed to decrypt email metadata:', error);
      }
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[30][1]++;
    }
    // Decrypt attachments
    cov_1o2i3u45x7().s[104]++;
    if (
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[33][0]++, message.encryptedFields?.includes('attachments')) &&
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[33][1]++, message.attachments)) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[32][0]++;
      cov_1o2i3u45x7().s[105]++;
      decryptedMessage.attachments = await Promise.all(message.attachments.map(async attachment => {
        /* istanbul ignore next */
        cov_1o2i3u45x7().f[12]++;
        cov_1o2i3u45x7().s[106]++;
        if (
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[35][0]++, attachment.isEncrypted) &&
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[35][1]++, attachment.data)) {
          /* istanbul ignore next */
          cov_1o2i3u45x7().b[34][0]++;
          cov_1o2i3u45x7().s[107]++;
          try {
            const attachmentData =
            /* istanbul ignore next */
            (cov_1o2i3u45x7().s[108]++, JSON.parse(attachment.data));
            /* istanbul ignore next */
            cov_1o2i3u45x7().s[109]++;
            return {
              ...attachment,
              data: this.decryptData(attachmentData.encrypted, encryptionKey, attachmentData.iv, attachmentData.tag),
              isEncrypted: false,
              size:
              /* istanbul ignore next */
              (cov_1o2i3u45x7().b[36][0]++, attachment.originalSize) ||
              /* istanbul ignore next */
              (cov_1o2i3u45x7().b[36][1]++, attachment.size)
            };
          } catch (error) {
            /* istanbul ignore next */
            cov_1o2i3u45x7().s[110]++;
            console.error('Failed to decrypt attachment:', error);
            /* istanbul ignore next */
            cov_1o2i3u45x7().s[111]++;
            return attachment;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1o2i3u45x7().b[34][1]++;
        }
        cov_1o2i3u45x7().s[112]++;
        return attachment;
      }));
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[32][1]++;
    }
    cov_1o2i3u45x7().s[113]++;
    return decryptedMessage;
  }
  /**
  * Store encryption key securely
  */
  async storeEncryptionKey(keyId, key, userId) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[13]++;
    // In production, use a proper key management service like AWS KMS, Azure Key Vault, etc.
    // For now, store in database with additional encryption
    // Security: Require strong encryption key in production
    const masterKey =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[114]++,
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[37][0]++, process.env.EMAIL_MASTER_KEY) ||
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[37][1]++, (() => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[14]++;
      cov_1o2i3u45x7().s[115]++;
      if (process.env.NODE_ENV === 'production') {
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[38][0]++;
        cov_1o2i3u45x7().s[116]++;
        throw new Error('EMAIL_MASTER_KEY must be set in production environment');
      } else
      /* istanbul ignore next */
      {
        cov_1o2i3u45x7().b[38][1]++;
      }
      cov_1o2i3u45x7().s[117]++;
      return 'dev-only-master-key-not-for-production';
    })()));
    const keyEncryption =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[118]++, this.encryptData(key.toString('hex'), Buffer.from(masterKey)));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[119]++;
    await _supabase.supabase.from('email_encryption_keys').insert({
      id: keyId,
      user_id: userId,
      encrypted_key: keyEncryption.encrypted,
      key_iv: keyEncryption.iv,
      key_tag: keyEncryption.tag,
      created_at: new Date().toISOString(),
      expires_at: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString() // 1 year
    });
  }
  /**
  * Retrieve encryption key
  */
  async getEncryptionKey(keyId, userId) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[15]++;
    cov_1o2i3u45x7().s[120]++;
    try {
      const {
        data: keyData
      } =
      /* istanbul ignore next */
      (cov_1o2i3u45x7().s[121]++, await _supabase.supabase.from('email_encryption_keys').select('*').eq('id', keyId).eq('user_id', userId).single());
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[122]++;
      if (!keyData) {
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[39][0]++;
        cov_1o2i3u45x7().s[123]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_1o2i3u45x7().b[39][1]++;
      }
      // Security: Require strong encryption key in production
      const masterKey =
      /* istanbul ignore next */
      (cov_1o2i3u45x7().s[124]++,
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[40][0]++, process.env.EMAIL_MASTER_KEY) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[40][1]++, (() => {
        /* istanbul ignore next */
        cov_1o2i3u45x7().f[16]++;
        cov_1o2i3u45x7().s[125]++;
        if (process.env.NODE_ENV === 'production') {
          /* istanbul ignore next */
          cov_1o2i3u45x7().b[41][0]++;
          cov_1o2i3u45x7().s[126]++;
          throw new Error('EMAIL_MASTER_KEY must be set in production environment');
        } else
        /* istanbul ignore next */
        {
          cov_1o2i3u45x7().b[41][1]++;
        }
        cov_1o2i3u45x7().s[127]++;
        return 'dev-only-master-key-not-for-production';
      })()));
      const decryptedKey =
      /* istanbul ignore next */
      (cov_1o2i3u45x7().s[128]++, this.decryptData(keyData.encrypted_key, Buffer.from(masterKey), keyData.key_iv, keyData.key_tag));
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[129]++;
      return Buffer.from(decryptedKey, 'hex');
    } catch (error) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[130]++;
      console.error('Failed to retrieve encryption key:', error);
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[131]++;
      return null;
    }
  }
  /**
  * Validate email content for sensitive data
  */
  containsSensitiveData(content) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[17]++;
    const sensitivePatterns =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[132]++, [/\b\d{4}[-\s]?\d{4}[-\s]?\d{4}[-\s]?\d{4}\b/, /\b\d{3}-\d{2}-\d{4}\b/, /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/, /\b\d{3}[-.]?\d{3}[-.]?\d{4}\b/, /\b(?:password|pwd|pass|secret|key|token)\s*[:=]\s*\S+/i]);
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[133]++;
    return sensitivePatterns.some(pattern => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[18]++;
      cov_1o2i3u45x7().s[134]++;
      return pattern.test(content);
    });
  }
  // Configuration
  async configure(config) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[19]++;
    cov_1o2i3u45x7().s[135]++;
    this.config = config;
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[136]++;
    try {
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[137]++;
      await this.testConnection();
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[138]++;
      this.isConnected = true;
      // Save configuration
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[139]++;
      await _supabase.supabase.from("email_configs").upsert({
        provider: config.provider,
        username: config.username,
        smtp_host: config.smtpHost,
        smtp_port: config.smtpPort,
        smtp_secure: config.smtpSecure,
        access_token: config.accessToken,
        refresh_token: config.refreshToken,
        client_id: config.clientId,
        updated_at: new Date().toISOString()
      });
      // Start sync if not already running
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[140]++;
      this.startSync();
      // Start cleanup job
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[141]++;
      this.startCleanupJob();
    } catch (error) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[142]++;
      this.isConnected = false;
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[143]++;
      throw new Error(`Failed to configure email: ${error.message}`);
    }
  }
  // Quota Management
  async checkEmailQuota(userId) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[20]++;
    const quota =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[144]++, await this.getUserQuota(userId));
    // Reset daily counter if needed
    const today =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[145]++, new Date().toDateString());
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[146]++;
    if (quota.lastResetDate !== today) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[42][0]++;
      cov_1o2i3u45x7().s[147]++;
      quota.dailySent = 0;
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[148]++;
      quota.lastResetDate = today;
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[149]++;
      await this.updateUserQuota(userId, quota);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[42][1]++;
    }
    // Reset monthly counter if needed
    const currentMonth =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[150]++, new Date().getMonth());
    const lastResetMonth =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[151]++, new Date(quota.lastResetDate).getMonth());
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[152]++;
    if (currentMonth !== lastResetMonth) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[43][0]++;
      cov_1o2i3u45x7().s[153]++;
      quota.monthlySent = 0;
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[154]++;
      await this.updateUserQuota(userId, quota);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[43][1]++;
    }
    // Check daily limit
    cov_1o2i3u45x7().s[155]++;
    if (quota.dailySent >= quota.dailyLimit) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[44][0]++;
      cov_1o2i3u45x7().s[156]++;
      return {
        canSend: false,
        reason: `Daily email limit reached (${quota.dailyLimit}). Resets tomorrow.`,
        quota
      };
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[44][1]++;
    }
    // Check monthly limit
    cov_1o2i3u45x7().s[157]++;
    if (quota.monthlySent >= quota.monthlyLimit) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[45][0]++;
      cov_1o2i3u45x7().s[158]++;
      return {
        canSend: false,
        reason: `Monthly email limit reached (${quota.monthlyLimit}). Resets next month.`,
        quota
      };
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[45][1]++;
    }
    cov_1o2i3u45x7().s[159]++;
    return {
      canSend: true,
      quota
    };
  }
  async getUserQuota(userId) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[21]++;
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[160]++, await _supabase.supabase.from("email_quotas").select("*").eq("user_id", userId).single());
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[161]++;
    if (
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[47][0]++, error) ||
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[47][1]++, !data)) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[46][0]++;
      // Create default quota for new user
      const defaultQuota =
      /* istanbul ignore next */
      (cov_1o2i3u45x7().s[162]++, {
        userId,
        ...this.DEFAULT_QUOTAS,
        dailySent: 0,
        monthlySent: 0,
        lastResetDate: new Date().toDateString(),
        storageUsed: 0
      });
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[163]++;
      await _supabase.supabase.from("email_quotas").insert({
        user_id: userId,
        daily_limit: defaultQuota.dailyLimit,
        monthly_limit: defaultQuota.monthlyLimit,
        daily_sent: defaultQuota.dailySent,
        monthly_sent: defaultQuota.monthlySent,
        last_reset_date: defaultQuota.lastResetDate,
        attachment_size_limit: defaultQuota.attachmentSizeLimit,
        storage_used: defaultQuota.storageUsed,
        storage_limit: defaultQuota.storageLimit
      });
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[164]++;
      return defaultQuota;
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[46][1]++;
    }
    cov_1o2i3u45x7().s[165]++;
    return {
      userId: data.user_id,
      dailyLimit: data.daily_limit,
      monthlyLimit: data.monthly_limit,
      dailySent: data.daily_sent,
      monthlySent: data.monthly_sent,
      lastResetDate: data.last_reset_date,
      attachmentSizeLimit: data.attachment_size_limit,
      storageUsed: data.storage_used,
      storageLimit: data.storage_limit
    };
  }
  async updateUserQuota(userId, quota) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[22]++;
    cov_1o2i3u45x7().s[166]++;
    await _supabase.supabase.from("email_quotas").update({
      daily_sent: quota.dailySent,
      monthly_sent: quota.monthlySent,
      last_reset_date: quota.lastResetDate,
      storage_used: quota.storageUsed
    }).eq("user_id", userId);
  }
  // Attachment Management with Size Limits
  async validateAttachments(attachments, userId) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[23]++;
    cov_1o2i3u45x7().s[167]++;
    if (
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[49][0]++, !attachments) ||
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[49][1]++, attachments.length === 0)) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[48][0]++;
      cov_1o2i3u45x7().s[168]++;
      return {
        valid: true
      };
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[48][1]++;
    }
    const quota =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[169]++, await this.getUserQuota(userId));
    // Check individual attachment size
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[170]++;
    for (const attachment of attachments) {
      const sizeInMB =
      /* istanbul ignore next */
      (cov_1o2i3u45x7().s[171]++, attachment.size / (1024 * 1024));
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[172]++;
      if (sizeInMB > quota.attachmentSizeLimit) {
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[50][0]++;
        cov_1o2i3u45x7().s[173]++;
        return {
          valid: false,
          reason: `Attachment "${attachment.filename}" exceeds size limit of ${quota.attachmentSizeLimit}MB`
        };
      } else
      /* istanbul ignore next */
      {
        cov_1o2i3u45x7().b[50][1]++;
      }
    }
    // Check total storage usage
    const totalAttachmentSize =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[174]++, attachments.reduce((sum, att) => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[24]++;
      cov_1o2i3u45x7().s[175]++;
      return sum + att.size;
    }, 0));
    const totalSizeInMB =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[176]++, totalAttachmentSize / (1024 * 1024));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[177]++;
    if (quota.storageUsed + totalSizeInMB > quota.storageLimit) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[51][0]++;
      cov_1o2i3u45x7().s[178]++;
      return {
        valid: false,
        reason: `Storage limit exceeded. Available: ${(quota.storageLimit - quota.storageUsed).toFixed(1)}MB, Required: ${totalSizeInMB.toFixed(1)}MB`
      };
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[51][1]++;
    }
    cov_1o2i3u45x7().s[179]++;
    return {
      valid: true
    };
  }
  async compressAttachment(attachment) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[25]++;
    cov_1o2i3u45x7().s[180]++;
    // Simple compression simulation - in real implementation, use image compression libraries
    if (
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[53][0]++, attachment.contentType.startsWith("image/")) &&
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[53][1]++, attachment.size > 1024 * 1024)) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[52][0]++;
      cov_1o2i3u45x7().s[181]++;
      return {
        ...attachment,
        size: Math.floor(attachment.size * 0.7),
        filename: attachment.filename.replace(/(\.[^.]+)$/, "_compressed$1")
      };
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[52][1]++;
    }
    cov_1o2i3u45x7().s[182]++;
    return attachment;
  }
  async testConnection() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[26]++;
    cov_1o2i3u45x7().s[183]++;
    if (!this.config) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[54][0]++;
      cov_1o2i3u45x7().s[184]++;
      throw new Error("Email not configured");
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[54][1]++;
    }
    cov_1o2i3u45x7().s[185]++;
    try {
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[186]++;
      // Test connection based on provider
      switch (this.config.provider) {
        case "mailjet":
          /* istanbul ignore next */
          cov_1o2i3u45x7().b[55][0]++;
          cov_1o2i3u45x7().s[187]++;
          return await this.testMailjetConnection();
        case "outlook":
          /* istanbul ignore next */
          cov_1o2i3u45x7().b[55][1]++;
          cov_1o2i3u45x7().s[188]++;
          return await this.testOutlookConnection();
        case "smtp":
          /* istanbul ignore next */
          cov_1o2i3u45x7().b[55][2]++;
          cov_1o2i3u45x7().s[189]++;
          return await this.testSmtpConnection();
        default:
          /* istanbul ignore next */
          cov_1o2i3u45x7().b[55][3]++;
          cov_1o2i3u45x7().s[190]++;
          throw new Error("Unsupported email provider");
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[191]++;
      // Silent error handling - Email connection test failed
      return false;
    }
  }
  async testMailjetConnection() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[27]++;
    // Test Mailjet API connection
    const response =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[192]++, await fetch("https://api.mailjet.com/v3/REST/contact", {
      headers: {
        Authorization: `Basic ${btoa(`${this.config?.clientId}:${this.config?.clientSecret}`)}`
      }
    }));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[193]++;
    return response.ok;
  }
  async testOutlookConnection() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[28]++;
    // Test Outlook API connection
    const response =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[194]++, await fetch("https://graph.microsoft.com/v1.0/me", {
      headers: {
        Authorization: `Bearer ${this.config?.accessToken}`
      }
    }));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[195]++;
    return response.ok;
  }
  async testSmtpConnection() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[29]++;
    cov_1o2i3u45x7().s[196]++;
    // For SMTP, we'll simulate a connection test
    // In a real implementation, you'd test the SMTP connection
    return true;
  }
  // Email Operations with Quota Checks
  async sendEmail(message, userId) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[30]++;
    cov_1o2i3u45x7().s[197]++;
    if (!this.isConnected) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[56][0]++;
      cov_1o2i3u45x7().s[198]++;
      throw new Error("Email service not connected");
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[56][1]++;
    }
    // Check quota
    const quotaCheck =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[199]++, await this.checkEmailQuota(userId));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[200]++;
    if (!quotaCheck.canSend) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[57][0]++;
      cov_1o2i3u45x7().s[201]++;
      throw new Error(quotaCheck.reason);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[57][1]++;
    }
    // Validate attachments
    cov_1o2i3u45x7().s[202]++;
    if (message.attachments) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[58][0]++;
      const attachmentValidation =
      /* istanbul ignore next */
      (cov_1o2i3u45x7().s[203]++, await this.validateAttachments(message.attachments, userId));
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[204]++;
      if (!attachmentValidation.valid) {
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[59][0]++;
        cov_1o2i3u45x7().s[205]++;
        throw new Error(attachmentValidation.reason);
      } else
      /* istanbul ignore next */
      {
        cov_1o2i3u45x7().b[59][1]++;
      }
      // Compress attachments if enabled
      cov_1o2i3u45x7().s[206]++;
      if (this.DEFAULT_RETENTION.compressAttachments) {
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[60][0]++;
        cov_1o2i3u45x7().s[207]++;
        message.attachments = await Promise.all(message.attachments.map(att => {
          /* istanbul ignore next */
          cov_1o2i3u45x7().f[31]++;
          cov_1o2i3u45x7().s[208]++;
          return this.compressAttachment(att);
        }));
      } else
      /* istanbul ignore next */
      {
        cov_1o2i3u45x7().b[60][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[58][1]++;
    }
    const emailMessage =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[209]++, {
      id: _crypto.randomUUID(),
      from:
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[61][0]++, this.config?.username) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[61][1]++, ""),
      to:
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[62][0]++, message.to) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[62][1]++, []),
      cc: message.cc,
      bcc: message.bcc,
      subject:
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[63][0]++, message.subject) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[63][1]++, ""),
      body:
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[64][0]++, message.body) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[64][1]++, ""),
      bodyType:
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[65][0]++, message.bodyType) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[65][1]++, "html"),
      attachments: message.attachments,
      priority:
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[66][0]++, message.priority) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[66][1]++, "normal"),
      readReceipt: message.readReceipt,
      deliveryReceipt: message.deliveryReceipt,
      scheduledAt: message.scheduledAt,
      sentAt: new Date().toISOString(),
      status: "sent",
      threadId: message.threadId,
      inReplyTo: message.inReplyTo,
      references: message.references,
      labels:
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[67][0]++, message.labels) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[67][1]++, []),
      folder: "sent",
      isRead: true,
      isStarred: false,
      isImportant: false,
      clientId: message.clientId,
      projectId: message.projectId,
      taskId: message.taskId,
      metadata: message.metadata,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[210]++;
    try {
      // Check if email contains sensitive data and encrypt if needed
      const hasSensitiveData =
      /* istanbul ignore next */
      (cov_1o2i3u45x7().s[211]++,
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[68][0]++, this.containsSensitiveData(emailMessage.body)) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[68][1]++, this.containsSensitiveData(emailMessage.subject)));
      // Encrypt email if it contains sensitive data or encryption is enabled
      let finalEmailMessage =
      /* istanbul ignore next */
      (cov_1o2i3u45x7().s[212]++, emailMessage);
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[213]++;
      if (
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[70][0]++, this.ENCRYPTION_CONFIG.enabled) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[70][1]++, hasSensitiveData)) {
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[69][0]++;
        cov_1o2i3u45x7().s[214]++;
        finalEmailMessage = await this.encryptEmailMessage(emailMessage, userId);
      } else
      /* istanbul ignore next */
      {
        cov_1o2i3u45x7().b[69][1]++;
      }
      // Send email based on provider (use original unencrypted message for sending)
      cov_1o2i3u45x7().s[215]++;
      await this.sendViaProvider(emailMessage);
      // Update quota
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[216]++;
      quotaCheck.quota.dailySent += 1;
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[217]++;
      quotaCheck.quota.monthlySent += 1;
      // Update storage usage
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[218]++;
      if (finalEmailMessage.attachments) {
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[71][0]++;
        const attachmentSize =
        /* istanbul ignore next */
        (cov_1o2i3u45x7().s[219]++, finalEmailMessage.attachments.reduce((sum, att) => {
          /* istanbul ignore next */
          cov_1o2i3u45x7().f[32]++;
          cov_1o2i3u45x7().s[220]++;
          return sum + att.size;
        }, 0));
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[221]++;
        quotaCheck.quota.storageUsed += attachmentSize / (1024 * 1024);
      } else
      /* istanbul ignore next */
      {
        cov_1o2i3u45x7().b[71][1]++;
      }
      cov_1o2i3u45x7().s[222]++;
      await this.updateUserQuota(userId, quotaCheck.quota);
      // Save encrypted email to database
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[223]++;
      await _supabase.supabase.from("emails").insert({
        id: finalEmailMessage.id,
        from_email: finalEmailMessage.from,
        to_email: finalEmailMessage.to,
        cc_email: finalEmailMessage.cc,
        bcc_email: finalEmailMessage.bcc,
        subject: finalEmailMessage.subject,
        body: finalEmailMessage.body,
        body_type: finalEmailMessage.bodyType,
        attachments: finalEmailMessage.attachments,
        priority: finalEmailMessage.priority,
        status: finalEmailMessage.status,
        thread_id: finalEmailMessage.threadId,
        folder: finalEmailMessage.folder,
        is_read: finalEmailMessage.isRead,
        is_starred: finalEmailMessage.isStarred,
        is_important: finalEmailMessage.isImportant,
        client_id: finalEmailMessage.clientId,
        project_id: finalEmailMessage.projectId,
        task_id: finalEmailMessage.taskId,
        metadata: finalEmailMessage.metadata,
        sent_at: finalEmailMessage.sentAt,
        created_at: finalEmailMessage.created_at,
        updated_at: finalEmailMessage.updated_at,
        user_id: userId,
        is_encrypted: finalEmailMessage.isEncrypted,
        encryption_key_id: finalEmailMessage.encryptionKeyId,
        encrypted_fields: finalEmailMessage.encryptedFields
      });
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[224]++;
      return finalEmailMessage;
    } catch (error) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[225]++;
      emailMessage.status = "failed";
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[226]++;
      throw new Error(`Failed to send email: ${error.message}`);
    }
  }
  /**
  * Retrieve and decrypt email messages
  */
  async getEmails(userId, folder) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[33]++;
    let query =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[227]++, _supabase.supabase.from("emails").select("*").eq("user_id", userId));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[228]++;
    if (folder) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[72][0]++;
      cov_1o2i3u45x7().s[229]++;
      query = query.eq("folder", folder);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[72][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[230]++, await query.order("created_at", {
      ascending: false
    }));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[231]++;
    if (error) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[73][0]++;
      cov_1o2i3u45x7().s[232]++;
      throw new Error(`Failed to get emails: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[73][1]++;
    }
    // Decrypt emails if they are encrypted
    const emails =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[233]++, await Promise.all((
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[74][0]++, data) ||
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[74][1]++, [])).map(async emailData => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[34]++;
      const email =
      /* istanbul ignore next */
      (cov_1o2i3u45x7().s[234]++, {
        id: emailData.id,
        from: emailData.from_email,
        to: emailData.to_email,
        cc: emailData.cc_email,
        bcc: emailData.bcc_email,
        subject: emailData.subject,
        body: emailData.body,
        bodyType: emailData.body_type,
        attachments: emailData.attachments,
        priority: emailData.priority,
        status: emailData.status,
        threadId: emailData.thread_id,
        folder: emailData.folder,
        isRead: emailData.is_read,
        isStarred: emailData.is_starred,
        isImportant: emailData.is_important,
        clientId: emailData.client_id,
        projectId: emailData.project_id,
        taskId: emailData.task_id,
        metadata: emailData.metadata,
        sentAt: emailData.sent_at,
        created_at: emailData.created_at,
        updated_at: emailData.updated_at,
        isEncrypted: emailData.is_encrypted,
        encryptionKeyId: emailData.encryption_key_id,
        encryptedFields: emailData.encrypted_fields
      });
      // Decrypt if encrypted
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[235]++;
      if (email.isEncrypted) {
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[75][0]++;
        cov_1o2i3u45x7().s[236]++;
        return await this.decryptEmailMessage(email, userId);
      } else
      /* istanbul ignore next */
      {
        cov_1o2i3u45x7().b[75][1]++;
      }
      cov_1o2i3u45x7().s[237]++;
      return email;
    })));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[238]++;
    return emails;
  }
  async sendViaProvider(message) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[35]++;
    cov_1o2i3u45x7().s[239]++;
    switch (this.config?.provider) {
      case "mailjet":
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[76][0]++;
        cov_1o2i3u45x7().s[240]++;
        await this.sendViaMailjet(message);
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[241]++;
        break;
      case "outlook":
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[76][1]++;
        cov_1o2i3u45x7().s[242]++;
        await this.sendViaOutlook(message);
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[243]++;
        break;
      case "smtp":
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[76][2]++;
        cov_1o2i3u45x7().s[244]++;
        await this.sendViaSmtp(message);
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[245]++;
        break;
      default:
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[76][3]++;
        cov_1o2i3u45x7().s[246]++;
        throw new Error("Unsupported email provider");
    }
  }
  async sendViaMailjet(message) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[36]++;
    const email =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[247]++, this.formatEmailForMailjet(message));
    const response =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[248]++, await fetch("https://api.mailjet.com/v3.1/send", {
      method: "POST",
      headers: {
        Authorization: `Basic ${btoa(`${this.config?.clientId}:${this.config?.clientSecret}`)}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify(email)
    }));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[249]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[77][0]++;
      cov_1o2i3u45x7().s[250]++;
      throw new Error(`Mailjet API error: ${response.statusText}`);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[77][1]++;
    }
  }
  async sendViaOutlook(message) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[37]++;
    const email =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[251]++, this.formatEmailForOutlook(message));
    const response =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[252]++, await fetch("https://graph.microsoft.com/v1.0/me/sendMail", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${this.config?.accessToken}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        message: email
      })
    }));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[253]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[78][0]++;
      cov_1o2i3u45x7().s[254]++;
      throw new Error(`Outlook API error: ${response.statusText}`);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[78][1]++;
    }
  }
  async sendViaSmtp(message) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[38]++;
  } // SMTP implementation would go here
  // For now, we'll simulate sending
  // Silent logging - Sending via SMTP
  formatEmailForMailjet(message) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[39]++;
    cov_1o2i3u45x7().s[255]++;
    return {
      Messages: [{
        From: {
          Email:
          /* istanbul ignore next */
          (cov_1o2i3u45x7().b[79][0]++, this.config?.username) ||
          /* istanbul ignore next */
          (cov_1o2i3u45x7().b[79][1]++, ""),
          Name: "CRM System"
        },
        To: message.to.map(email => {
          /* istanbul ignore next */
          cov_1o2i3u45x7().f[40]++;
          cov_1o2i3u45x7().s[256]++;
          return {
            Email: email
          };
        }),
        Cc:
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[80][0]++, message.cc?.map(email => {
          /* istanbul ignore next */
          cov_1o2i3u45x7().f[41]++;
          cov_1o2i3u45x7().s[257]++;
          return {
            Email: email
          };
        })) ||
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[80][1]++, []),
        Bcc:
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[81][0]++, message.bcc?.map(email => {
          /* istanbul ignore next */
          cov_1o2i3u45x7().f[42]++;
          cov_1o2i3u45x7().s[258]++;
          return {
            Email: email
          };
        })) ||
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[81][1]++, []),
        Subject: message.subject,
        HTMLPart: message.bodyType === "html" ?
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[82][0]++, message.body) :
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[82][1]++, undefined),
        TextPart: message.bodyType === "text" ?
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[83][0]++, message.body) :
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[83][1]++, undefined)
      }]
    };
  }
  formatEmailForOutlook(message) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[43]++;
    cov_1o2i3u45x7().s[259]++;
    return {
      subject: message.subject,
      body: {
        contentType: message.bodyType === "html" ?
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[84][0]++, "HTML") :
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[84][1]++, "Text"),
        content: message.body
      },
      toRecipients: message.to.map(email => {
        /* istanbul ignore next */
        cov_1o2i3u45x7().f[44]++;
        cov_1o2i3u45x7().s[260]++;
        return {
          emailAddress: {
            address: email
          }
        };
      }),
      ccRecipients:
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[85][0]++, message.cc?.map(email => {
        /* istanbul ignore next */
        cov_1o2i3u45x7().f[45]++;
        cov_1o2i3u45x7().s[261]++;
        return {
          emailAddress: {
            address: email
          }
        };
      })) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[85][1]++, []),
      bccRecipients:
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[86][0]++, message.bcc?.map(email => {
        /* istanbul ignore next */
        cov_1o2i3u45x7().f[46]++;
        cov_1o2i3u45x7().s[262]++;
        return {
          emailAddress: {
            address: email
          }
        };
      })) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[86][1]++, []),
      importance: message.priority === "high" ?
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[87][0]++, "high") :
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[87][1]++, message.priority === "low" ?
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[88][0]++, "low") :
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[88][1]++, "normal"))
    };
  }
  // Cleanup and Retention
  startCleanupJob() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[47]++;
    // Run cleanup daily at 2 AM
    const now =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[263]++, new Date());
    const tomorrow =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[264]++, new Date(now));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[265]++;
    tomorrow.setDate(tomorrow.getDate() + 1);
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[266]++;
    tomorrow.setHours(2, 0, 0, 0);
    const msUntilTomorrow =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[267]++, tomorrow.getTime() - now.getTime());
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[268]++;
    setTimeout(() => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[48]++;
      cov_1o2i3u45x7().s[269]++;
      this.runCleanup();
      // Then run every 24 hours
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[270]++;
      setInterval(() => {
        /* istanbul ignore next */
        cov_1o2i3u45x7().f[49]++;
        cov_1o2i3u45x7().s[271]++;
        return this.runCleanup();
      }, 24 * 60 * 60 * 1000);
    }, msUntilTomorrow);
  }
  async runCleanup() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[50]++;
    cov_1o2i3u45x7().s[272]++;
    try {
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[273]++;
      // Silent logging - Starting email cleanup job
      if (this.DEFAULT_RETENTION.autoDeleteOldEmails) {
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[89][0]++;
        cov_1o2i3u45x7().s[274]++;
        await this.cleanupOldEmails();
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[275]++;
        await this.cleanupOldAttachments();
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[276]++;
        await this.cleanupDeletedEmails();
      } else
      /* istanbul ignore next */
      {
        cov_1o2i3u45x7().b[89][1]++;
      }
      // Silent logging - Email cleanup job completed
    } catch (error) {
      // Silent error handling - Email cleanup job failed
    }
  }
  async cleanupOldEmails() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[51]++;
    const sentCutoff =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[277]++, new Date());
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[278]++;
    sentCutoff.setDate(sentCutoff.getDate() - this.DEFAULT_RETENTION.sentEmailRetentionDays);
    const receivedCutoff =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[279]++, new Date());
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[280]++;
    receivedCutoff.setDate(receivedCutoff.getDate() - this.DEFAULT_RETENTION.receivedEmailRetentionDays);
    // Delete old sent emails
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[281]++;
    await _supabase.supabase.from("emails").delete().eq("folder", "sent").lt("created_at", sentCutoff.toISOString());
    // Delete old received emails
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[282]++;
    await _supabase.supabase.from("emails").delete().eq("folder", "inbox").lt("created_at", receivedCutoff.toISOString());
  }
  async cleanupOldAttachments() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[52]++;
    const cutoff =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[283]++, new Date());
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[284]++;
    cutoff.setDate(cutoff.getDate() - this.DEFAULT_RETENTION.attachmentRetentionDays);
    // Get emails with attachments older than retention period
    const {
      data: oldEmails
    } =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[285]++, await _supabase.supabase.from("emails").select("id, attachments, user_id").not("attachments", "is", null).lt("created_at", cutoff.toISOString()));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[286]++;
    if (oldEmails) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[90][0]++;
      cov_1o2i3u45x7().s[287]++;
      for (const email of oldEmails) {
        // Calculate storage to be freed
        const attachmentSize =
        /* istanbul ignore next */
        (cov_1o2i3u45x7().s[288]++,
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[91][0]++, email.attachments?.reduce((sum, att) => {
          /* istanbul ignore next */
          cov_1o2i3u45x7().f[53]++;
          cov_1o2i3u45x7().s[289]++;
          return sum + att.size;
        }, 0)) ||
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[91][1]++, 0));
        const sizeInMB =
        /* istanbul ignore next */
        (cov_1o2i3u45x7().s[290]++, attachmentSize / (1024 * 1024));
        // Remove attachments from email
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[291]++;
        await _supabase.supabase.from("emails").update({
          attachments: null
        }).eq("id", email.id);
        // Update user storage quota
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[292]++;
        if (email.user_id) {
          /* istanbul ignore next */
          cov_1o2i3u45x7().b[92][0]++;
          const quota =
          /* istanbul ignore next */
          (cov_1o2i3u45x7().s[293]++, await this.getUserQuota(email.user_id));
          /* istanbul ignore next */
          cov_1o2i3u45x7().s[294]++;
          quota.storageUsed = Math.max(0, quota.storageUsed - sizeInMB);
          /* istanbul ignore next */
          cov_1o2i3u45x7().s[295]++;
          await this.updateUserQuota(email.user_id, quota);
        } else
        /* istanbul ignore next */
        {
          cov_1o2i3u45x7().b[92][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[90][1]++;
    }
  }
  async cleanupDeletedEmails() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[54]++;
    cov_1o2i3u45x7().s[296]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[93][0]++;
      cov_1o2i3u45x7().s[297]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[93][1]++;
    }
    const cutoff =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[298]++, new Date());
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[299]++;
    cutoff.setDate(cutoff.getDate() - this.DEFAULT_RETENTION.deletedEmailRetentionDays);
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[300]++;
    await _supabase.supabase.from("emails").delete().eq("folder", "trash").lt("updated_at", cutoff.toISOString());
  }
  // Email Templates
  async createTemplate(template) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[55]++;
    const newTemplate =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[301]++, {
      id: _crypto.randomUUID(),
      usage_count: 0,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      ...template
    });
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[302]++, await _supabase.supabase.from("email_templates").insert({
      id: newTemplate.id,
      name: newTemplate.name,
      subject: newTemplate.subject,
      body: newTemplate.body,
      body_type: newTemplate.bodyType,
      category: newTemplate.category,
      variables: newTemplate.variables,
      is_active: newTemplate.isActive,
      usage_count: newTemplate.usage_count,
      created_by: newTemplate.created_by,
      created_at: newTemplate.created_at,
      updated_at: newTemplate.updated_at
    }));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[303]++;
    if (error) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[94][0]++;
      cov_1o2i3u45x7().s[304]++;
      throw new Error(`Failed to create template: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[94][1]++;
    }
    cov_1o2i3u45x7().s[305]++;
    return newTemplate;
  }
  async getTemplates(category) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[56]++;
    let query =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[306]++, _supabase.supabase.from("email_templates").select("*").eq("is_active", true).order("name"));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[307]++;
    if (category) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[95][0]++;
      cov_1o2i3u45x7().s[308]++;
      query = query.eq("category", category);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[95][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[309]++, await query);
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[310]++;
    if (error) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[96][0]++;
      cov_1o2i3u45x7().s[311]++;
      throw new Error(`Failed to get templates: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[96][1]++;
    }
    cov_1o2i3u45x7().s[312]++;
    return (
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[97][0]++, data) ||
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[97][1]++, [])).map(template => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[57]++;
      cov_1o2i3u45x7().s[313]++;
      return {
        id: template.id,
        name: template.name,
        subject: template.subject,
        body: template.body,
        bodyType: template.body_type,
        category: template.category,
        variables:
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[98][0]++, template.variables) ||
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[98][1]++, []),
        isActive: template.is_active,
        usage_count: template.usage_count,
        created_by: template.created_by,
        created_at: template.created_at,
        updated_at: template.updated_at
      };
    });
  }
  async renderTemplate(templateId, variables) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[58]++;
    const template =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[314]++, await this.getTemplate(templateId));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[315]++;
    if (!template) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[99][0]++;
      cov_1o2i3u45x7().s[316]++;
      throw new Error("Template not found");
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[99][1]++;
    }
    let subject =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[317]++, template.subject);
    let body =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[318]++, template.body);
    // Replace variables
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[319]++;
    Object.entries(variables).forEach(([key, value]) => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[59]++;
      const placeholder =
      /* istanbul ignore next */
      (cov_1o2i3u45x7().s[320]++, `{{${key}}}`);
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[321]++;
      subject = subject.replace(new RegExp(placeholder, "g"), value);
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[322]++;
      body = body.replace(new RegExp(placeholder, "g"), value);
    });
    // Increment usage count
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[323]++;
    await _supabase.supabase.from("email_templates").update({
      usage_count: template.usage_count + 1
    }).eq("id", templateId);
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[324]++;
    return {
      subject,
      body
    };
  }
  async getTemplate(id) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[60]++;
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[325]++, await _supabase.supabase.from("email_templates").select("*").eq("id", id).single());
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[326]++;
    if (error) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[100][0]++;
      cov_1o2i3u45x7().s[327]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[100][1]++;
    }
    cov_1o2i3u45x7().s[328]++;
    return {
      id: data.id,
      name: data.name,
      subject: data.subject,
      body: data.body,
      bodyType: data.body_type,
      category: data.category,
      variables:
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[101][0]++, data.variables) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[101][1]++, []),
      isActive: data.is_active,
      usage_count: data.usage_count,
      created_by: data.created_by,
      created_at: data.created_at,
      updated_at: data.updated_at
    };
  }
  // Email Sync
  startSync() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[61]++;
    cov_1o2i3u45x7().s[329]++;
    if (this.syncInterval) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[102][0]++;
      cov_1o2i3u45x7().s[330]++;
      clearInterval(this.syncInterval);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[102][1]++;
    }
    cov_1o2i3u45x7().s[331]++;
    this.syncInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[62]++;
      cov_1o2i3u45x7().s[332]++;
      this.syncEmails();
    }, 5 * 60 * 1000); // Sync every 5 minutes
  }
  async syncEmails() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[63]++;
    cov_1o2i3u45x7().s[333]++;
    if (!this.isConnected) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[103][0]++;
      cov_1o2i3u45x7().s[334]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[103][1]++;
    }
    cov_1o2i3u45x7().s[335]++;
    try {
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[336]++;
      // Sync based on provider
      switch (this.config?.provider) {
        case "outlook":
          /* istanbul ignore next */
          cov_1o2i3u45x7().b[104][0]++;
          cov_1o2i3u45x7().s[337]++;
          await this.syncOutlookEmails();
          /* istanbul ignore next */
          cov_1o2i3u45x7().s[338]++;
          break;
      }
    } catch (error) {
      // Silent error handling - Email sync failed
    }
  }
  async syncOutlookEmails() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[64]++;
  } // Outlook sync implementation
  // Silent logging - Syncing Outlook emails
  // Analytics
  async getAnalytics(dateRange) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[65]++;
    let query =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[339]++, _supabase.supabase.from("emails").select("status, is_read, metadata"));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[340]++;
    if (dateRange) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[105][0]++;
      cov_1o2i3u45x7().s[341]++;
      query = query.gte("created_at", dateRange.start.toISOString()).lte("created_at", dateRange.end.toISOString());
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[105][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[342]++, await query);
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[343]++;
    if (error) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[106][0]++;
      cov_1o2i3u45x7().s[344]++;
      throw new Error(`Failed to get analytics: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[106][1]++;
    }
    const emails =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[345]++,
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[107][0]++, data) ||
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[107][1]++, []));
    const sent =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[346]++, emails.filter(e => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[66]++;
      cov_1o2i3u45x7().s[347]++;
      return e.status === "sent";
    }).length);
    const opened =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[348]++, emails.filter(e => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[67]++;
      cov_1o2i3u45x7().s[349]++;
      return e.is_read;
    }).length);
    const clicked =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[350]++, emails.filter(e => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[68]++;
      cov_1o2i3u45x7().s[351]++;
      return e.metadata?.clicked;
    }).length);
    const replied =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[352]++, emails.filter(e => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[69]++;
      cov_1o2i3u45x7().s[353]++;
      return e.metadata?.replied;
    }).length);
    const bounced =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[354]++, emails.filter(e => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[70]++;
      cov_1o2i3u45x7().s[355]++;
      return e.status === "failed";
    }).length);
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[356]++;
    return {
      sent,
      received: emails.length - sent,
      opened,
      clicked,
      replied,
      bounced,
      unsubscribed: 0,
      openRate: sent > 0 ?
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[108][0]++, opened / sent * 100) :
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[108][1]++, 0),
      clickRate: opened > 0 ?
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[109][0]++, clicked / opened * 100) :
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[109][1]++, 0),
      replyRate: sent > 0 ?
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[110][0]++, replied / sent * 100) :
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[110][1]++, 0),
      bounceRate: sent > 0 ?
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[111][0]++, bounced / sent * 100) :
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[111][1]++, 0)
    };
  }
  // Quota Management Methods
  async getQuotaStatus(userId) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[71]++;
    const quota =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[357]++, await this.getUserQuota(userId));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[358]++;
    return {
      daily: {
        used: quota.dailySent,
        limit: quota.dailyLimit,
        remaining: quota.dailyLimit - quota.dailySent
      },
      monthly: {
        used: quota.monthlySent,
        limit: quota.monthlyLimit,
        remaining: quota.monthlyLimit - quota.monthlySent
      },
      storage: {
        used: quota.storageUsed,
        limit: quota.storageLimit,
        remaining: quota.storageLimit - quota.storageUsed
      }
    };
  }
  // Cleanup
  destroy() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[72]++;
    cov_1o2i3u45x7().s[359]++;
    if (this.syncInterval) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[112][0]++;
      cov_1o2i3u45x7().s[360]++;
      clearInterval(this.syncInterval);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[112][1]++;
    }
  }
  constructor() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[73]++;
    cov_1o2i3u45x7().s[361]++;
    this.config = null;
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[362]++;
    this.isConnected = false;
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[363]++;
    this.syncInterval = null;
    // Email quotas - moderate limits
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[364]++;
    this.DEFAULT_QUOTAS = {
      dailyLimit: 100,
      monthlyLimit: 2000,
      attachmentSizeLimit: 10,
      storageLimit: 500
    };
    // Email encryption configuration
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[365]++;
    this.ENCRYPTION_CONFIG = {
      enabled: process.env.NODE_ENV === 'production',
      algorithm: 'aes-256-gcm',
      keySize: 32,
      encryptAttachments: true,
      encryptSubject: false,
      encryptMetadata: true
    };
    // Retention policies
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[366]++;
    this.DEFAULT_RETENTION = {
      sentEmailRetentionDays: 365,
      receivedEmailRetentionDays: 365,
      attachmentRetentionDays: 180,
      deletedEmailRetentionDays: 30,
      maxAttachmentSize: 10,
      compressAttachments: true,
      autoDeleteOldEmails: true
    };
  }
}
const emailService =
/* istanbul ignore next */
(cov_1o2i3u45x7().s[367]++, new EmailService());
const _default =
/* istanbul ignore next */
(cov_1o2i3u45x7().s[368]++, emailService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,