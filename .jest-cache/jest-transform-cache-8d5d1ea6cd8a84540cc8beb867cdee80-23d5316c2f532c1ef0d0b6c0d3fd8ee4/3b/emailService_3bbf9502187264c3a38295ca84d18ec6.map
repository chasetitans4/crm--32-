{"version":3,"names":["default","cov_1o2i3u45x7","f","s","_default","emailService","EmailService","generateEncryptionKey","_crypto","randomBytes","ENCRYPTION_CONFIG","keySize","encryptData","data","key","enabled","b","encrypted","iv","tag","cipher","createCipheriv","algorithm","setAAD","Buffer","from","update","final","getAuthTag","toString","decryptData","encryptedData","decipher","createDecipheriv","setAuthTag","decrypted","error","console","Error","encryptEmailMessage","message","userId","encryptionKey","keyId","randomUUID","storeEncryptionKey","encryptedMessage","encryptedFields","bodyEncryption","body","JSON","stringify","push","encryptSubject","subjectEncryption","subject","encryptMetadata","metadata","metadataEncryption","encryptAttachments","attachments","Promise","all","map","attachment","attachmentEncryption","isEncrypted","encryptionKeyId","originalSize","size","decryptEmailMessage","getEncryptionKey","decryptedMessage","includes","bodyData","parse","subjectData","metadataStr","attachmentData","masterKey","process","env","EMAIL_MASTER_KEY","NODE_ENV","keyEncryption","_supabase","supabase","insert","id","user_id","encrypted_key","key_iv","key_tag","created_at","Date","toISOString","expires_at","now","keyData","select","eq","single","decryptedKey","containsSensitiveData","content","sensitivePatterns","some","pattern","test","configure","config","testConnection","isConnected","upsert","provider","username","smtp_host","smtpHost","smtp_port","smtpPort","smtp_secure","smtpSecure","access_token","accessToken","refresh_token","refreshToken","client_id","clientId","updated_at","startSync","startCleanupJob","checkEmailQuota","quota","getUserQuota","today","toDateString","lastResetDate","dailySent","updateUserQuota","currentMonth","getMonth","lastResetMonth","monthlySent","dailyLimit","canSend","reason","monthlyLimit","defaultQuota","DEFAULT_QUOTAS","storageUsed","daily_limit","monthly_limit","daily_sent","monthly_sent","last_reset_date","attachment_size_limit","attachmentSizeLimit","storage_used","storage_limit","storageLimit","validateAttachments","length","valid","sizeInMB","filename","totalAttachmentSize","reduce","sum","att","totalSizeInMB","toFixed","compressAttachment","contentType","startsWith","Math","floor","replace","testMailjetConnection","testOutlookConnection","testSmtpConnection","response","fetch","headers","Authorization","btoa","clientSecret","ok","sendEmail","quotaCheck","attachmentValidation","DEFAULT_RETENTION","compressAttachments","emailMessage","to","cc","bcc","bodyType","priority","readReceipt","deliveryReceipt","scheduledAt","sentAt","status","threadId","inReplyTo","references","labels","folder","isRead","isStarred","isImportant","projectId","taskId","hasSensitiveData","finalEmailMessage","sendViaProvider","attachmentSize","from_email","to_email","cc_email","bcc_email","body_type","thread_id","is_read","is_starred","is_important","project_id","task_id","sent_at","is_encrypted","encryption_key_id","encrypted_fields","getEmails","query","order","ascending","emails","emailData","email","sendViaMailjet","sendViaOutlook","sendViaSmtp","formatEmailForMailjet","method","statusText","formatEmailForOutlook","Messages","From","Email","Name","To","Cc","Bcc","Subject","HTMLPart","undefined","TextPart","toRecipients","emailAddress","address","ccRecipients","bccRecipients","importance","tomorrow","setDate","getDate","setHours","msUntilTomorrow","getTime","setTimeout","runCleanup","setInterval","autoDeleteOldEmails","cleanupOldEmails","cleanupOldAttachments","cleanupDeletedEmails","sentCutoff","sentEmailRetentionDays","receivedCutoff","receivedEmailRetentionDays","delete","lt","cutoff","attachmentRetentionDays","oldEmails","not","max","deletedEmailRetentionDays","createTemplate","template","newTemplate","usage_count","name","category","variables","is_active","isActive","created_by","getTemplates","renderTemplate","templateId","getTemplate","Object","entries","forEach","value","placeholder","RegExp","syncInterval","clearInterval","syncEmails","syncOutlookEmails","getAnalytics","dateRange","gte","start","lte","end","sent","filter","e","opened","clicked","replied","bounced","received","unsubscribed","openRate","clickRate","replyRate","bounceRate","getQuotaStatus","daily","used","limit","remaining","monthly","storage","destroy","maxAttachmentSize"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\emailService.ts"],"sourcesContent":["import { supabase } from \"../lib/supabase\"\r\nimport type { Database } from \"../lib/supabase\"\r\nimport * as crypto from \"crypto\"\r\n\r\ntype Tables<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Row\"]\r\n\r\n// Email encryption configuration\r\ninterface EmailEncryptionConfig {\r\n  enabled: boolean\r\n  algorithm: string\r\n  keySize: number\r\n  encryptAttachments: boolean\r\n  encryptSubject: boolean\r\n  encryptMetadata: boolean\r\n}\r\n\r\nexport interface EmailConfig {\r\n  provider: \"mailjet\" | \"outlook\" | \"smtp\"\r\n  smtpHost?: string\r\n  smtpPort?: number\r\n  smtpSecure?: boolean\r\n  username: string\r\n  password?: string\r\n  accessToken?: string\r\n  refreshToken?: string\r\n  clientId?: string\r\n  clientSecret?: string\r\n}\r\n\r\nexport interface EmailMessage {\r\n  id: string\r\n  from: string\r\n  to: string[]\r\n  cc?: string[]\r\n  bcc?: string[]\r\n  subject: string\r\n  body: string\r\n  bodyType: \"text\" | \"html\"\r\n  attachments?: EmailAttachment[]\r\n  priority: \"low\" | \"normal\" | \"high\"\r\n  readReceipt?: boolean\r\n  deliveryReceipt?: boolean\r\n  scheduledAt?: string\r\n  sentAt?: string\r\n  status: \"draft\" | \"scheduled\" | \"sent\" | \"failed\" | \"delivered\" | \"read\"\r\n  threadId?: string\r\n  inReplyTo?: string\r\n  references?: string[]\r\n  labels?: string[]\r\n  folder: string\r\n  isRead: boolean\r\n  isStarred: boolean\r\n  isImportant: boolean\r\n  clientId?: string\r\n  projectId?: string\r\n  taskId?: string\r\n  metadata?: Record<string, any>\r\n  created_at: string\r\n  updated_at: string\r\n  // Encryption fields\r\n  isEncrypted?: boolean\r\n  encryptionKeyId?: string\r\n  encryptedFields?: string[]\r\n}\r\n\r\nexport interface EmailAttachment {\r\n  id: string\r\n  filename: string\r\n  contentType: string\r\n  size: number\r\n  data?: string // base64 encoded\r\n  url?: string\r\n  cid?: string // for inline attachments\r\n  // Encryption fields\r\n  isEncrypted?: boolean\r\n  encryptionKeyId?: string\r\n  originalSize?: number\r\n}\r\n\r\nexport interface EmailTemplate {\r\n  id: string\r\n  name: string\r\n  subject: string\r\n  body: string\r\n  bodyType: \"text\" | \"html\"\r\n  category: string\r\n  variables: string[]\r\n  isActive: boolean\r\n  usage_count: number\r\n  created_by: string\r\n  created_at: string\r\n  updated_at: string\r\n}\r\n\r\nexport interface EmailAutomation {\r\n  id: string\r\n  name: string\r\n  trigger: {\r\n    type: \"schedule\" | \"event\" | \"condition\"\r\n    schedule?: string // cron expression\r\n    event?: string\r\n    condition?: Record<string, any>\r\n  }\r\n  actions: EmailAutomationAction[]\r\n  isActive: boolean\r\n  lastRun?: string\r\n  nextRun?: string\r\n  runCount: number\r\n  created_at: string\r\n  updated_at: string\r\n}\r\n\r\nexport interface EmailAutomationAction {\r\n  type: \"send_email\" | \"add_label\" | \"move_folder\" | \"create_task\" | \"update_client\"\r\n  templateId?: string\r\n  recipients?: string[]\r\n  data?: Record<string, any>\r\n}\r\n\r\nexport interface EmailSignature {\r\n  id: string\r\n  name: string\r\n  content: string\r\n  isDefault: boolean\r\n  created_at: string\r\n}\r\n\r\nexport interface EmailAnalytics {\r\n  sent: number\r\n  received: number\r\n  opened: number\r\n  clicked: number\r\n  replied: number\r\n  bounced: number\r\n  unsubscribed: number\r\n  openRate: number\r\n  clickRate: number\r\n  replyRate: number\r\n  bounceRate: number\r\n}\r\n\r\nexport interface EmailQuota {\r\n  userId: string\r\n  dailyLimit: number\r\n  monthlyLimit: number\r\n  dailySent: number\r\n  monthlySent: number\r\n  lastResetDate: string\r\n  attachmentSizeLimit: number // in MB\r\n  storageUsed: number // in MB\r\n  storageLimit: number // in MB\r\n}\r\n\r\nexport interface EmailRetentionPolicy {\r\n  sentEmailRetentionDays: number\r\n  receivedEmailRetentionDays: number\r\n  attachmentRetentionDays: number\r\n  deletedEmailRetentionDays: number\r\n  maxAttachmentSize: number // in MB\r\n  compressAttachments: boolean\r\n  autoDeleteOldEmails: boolean\r\n}\r\n\r\nclass EmailService {\r\n  private config: EmailConfig | null = null\r\n  private isConnected = false\r\n  private syncInterval: NodeJS.Timeout | null = null\r\n\r\n  // Email quotas - moderate limits\r\n  private readonly DEFAULT_QUOTAS = {\r\n    dailyLimit: 100,\r\n    monthlyLimit: 2000,\r\n    attachmentSizeLimit: 10, // 10MB per attachment\r\n    storageLimit: 500, // 500MB total storage per user\r\n  }\r\n\r\n  // Email encryption configuration\r\n  private readonly ENCRYPTION_CONFIG: EmailEncryptionConfig = {\r\n    enabled: process.env.NODE_ENV === 'production',\r\n    algorithm: 'aes-256-gcm',\r\n    keySize: 32,\r\n    encryptAttachments: true,\r\n    encryptSubject: false, // Keep subject unencrypted for searchability\r\n    encryptMetadata: true,\r\n  }\r\n\r\n  // Retention policies\r\n  private readonly DEFAULT_RETENTION: EmailRetentionPolicy = {\r\n    sentEmailRetentionDays: 365, // 1 year\r\n    receivedEmailRetentionDays: 365, // 1 year\r\n    attachmentRetentionDays: 180, // 6 months\r\n    deletedEmailRetentionDays: 30, // 30 days in trash\r\n    maxAttachmentSize: 10, // 10MB\r\n    compressAttachments: true,\r\n    autoDeleteOldEmails: true,\r\n  }\r\n\r\n  /**\r\n   * Generate encryption key for email data\r\n   */\r\n  private generateEncryptionKey(): Buffer {\r\n    return crypto.randomBytes(this.ENCRYPTION_CONFIG.keySize)\r\n  }\r\n\r\n  /**\r\n   * Encrypt sensitive email data\r\n   */\r\n  private encryptData(data: string, key: Buffer): { encrypted: string; iv: string; tag: string } {\r\n    if (!this.ENCRYPTION_CONFIG.enabled) {\r\n      return { encrypted: data, iv: '', tag: '' }\r\n    }\r\n\r\n    const iv = crypto.randomBytes(16)\r\n    const cipher = crypto.createCipheriv(this.ENCRYPTION_CONFIG.algorithm, key, iv)\r\n    ;(cipher as any).setAAD(Buffer.from('email-encryption'))\r\n\r\n    let encrypted = cipher.update(data, 'utf8', 'hex')\r\n    encrypted += cipher.final('hex')\r\n\r\n    const tag = (cipher as any).getAuthTag()\r\n\r\n    return {\r\n      encrypted,\r\n      iv: iv.toString('hex'),\r\n      tag: tag.toString('hex')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Decrypt email data\r\n   */\r\n  private decryptData(encryptedData: string, key: Buffer, iv: string, tag: string): string {\r\n    if (!this.ENCRYPTION_CONFIG.enabled || !iv || !tag) {\r\n      return encryptedData\r\n    }\r\n\r\n    try {\r\n      const decipher = crypto.createDecipheriv(this.ENCRYPTION_CONFIG.algorithm, key, Buffer.from(iv, 'hex'))\r\n      ;(decipher as any).setAAD(Buffer.from('email-encryption'))\r\n      ;(decipher as any).setAuthTag(Buffer.from(tag, 'hex'))\r\n\r\n      let decrypted = decipher.update(encryptedData, 'hex', 'utf8')\r\n      decrypted += decipher.final('utf8')\r\n\r\n      return decrypted\r\n    } catch (error) {\r\n      console.error('Failed to decrypt email data:', error)\r\n      throw new Error('Email decryption failed')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Encrypt email message before storage\r\n   */\r\n  private async encryptEmailMessage(message: EmailMessage, userId: string): Promise<EmailMessage> {\r\n    if (!this.ENCRYPTION_CONFIG.enabled) {\r\n      return message\r\n    }\r\n\r\n    const encryptionKey = this.generateEncryptionKey()\r\n    const keyId = crypto.randomUUID()\r\n    \r\n    // Store encryption key securely (in production, use a proper key management service)\r\n    await this.storeEncryptionKey(keyId, encryptionKey, userId)\r\n\r\n    const encryptedMessage = { ...message }\r\n    const encryptedFields: string[] = []\r\n\r\n    // Encrypt email body\r\n    const bodyEncryption = this.encryptData(message.body, encryptionKey)\r\n    encryptedMessage.body = JSON.stringify({\r\n      encrypted: bodyEncryption.encrypted,\r\n      iv: bodyEncryption.iv,\r\n      tag: bodyEncryption.tag\r\n    })\r\n    encryptedFields.push('body')\r\n\r\n    // Encrypt subject if configured\r\n    if (this.ENCRYPTION_CONFIG.encryptSubject) {\r\n      const subjectEncryption = this.encryptData(message.subject, encryptionKey)\r\n      encryptedMessage.subject = JSON.stringify({\r\n        encrypted: subjectEncryption.encrypted,\r\n        iv: subjectEncryption.iv,\r\n        tag: subjectEncryption.tag\r\n      })\r\n      encryptedFields.push('subject')\r\n    }\r\n\r\n    // Encrypt metadata if configured\r\n    if (this.ENCRYPTION_CONFIG.encryptMetadata && message.metadata) {\r\n      const metadataEncryption = this.encryptData(JSON.stringify(message.metadata), encryptionKey)\r\n      encryptedMessage.metadata = {\r\n        encrypted: metadataEncryption.encrypted,\r\n        iv: metadataEncryption.iv,\r\n        tag: metadataEncryption.tag\r\n      }\r\n      encryptedFields.push('metadata')\r\n    }\r\n\r\n    // Encrypt attachments if configured\r\n    if (this.ENCRYPTION_CONFIG.encryptAttachments && message.attachments) {\r\n      encryptedMessage.attachments = await Promise.all(\r\n        message.attachments.map(async (attachment) => {\r\n          if (attachment.data) {\r\n            const attachmentEncryption = this.encryptData(attachment.data, encryptionKey)\r\n            return {\r\n              ...attachment,\r\n              data: JSON.stringify({\r\n                encrypted: attachmentEncryption.encrypted,\r\n                iv: attachmentEncryption.iv,\r\n                tag: attachmentEncryption.tag\r\n              }),\r\n              isEncrypted: true,\r\n              encryptionKeyId: keyId,\r\n              originalSize: attachment.size\r\n            }\r\n          }\r\n          return attachment\r\n        })\r\n      )\r\n      encryptedFields.push('attachments')\r\n    }\r\n\r\n    encryptedMessage.isEncrypted = true\r\n    encryptedMessage.encryptionKeyId = keyId\r\n    encryptedMessage.encryptedFields = encryptedFields\r\n\r\n    return encryptedMessage\r\n  }\r\n\r\n  /**\r\n   * Decrypt email message after retrieval\r\n   */\r\n  private async decryptEmailMessage(message: EmailMessage, userId: string): Promise<EmailMessage> {\r\n    if (!message.isEncrypted || !message.encryptionKeyId) {\r\n      return message\r\n    }\r\n\r\n    const encryptionKey = await this.getEncryptionKey(message.encryptionKeyId, userId)\r\n    if (!encryptionKey) {\r\n      throw new Error('Encryption key not found')\r\n    }\r\n\r\n    const decryptedMessage = { ...message }\r\n\r\n    // Decrypt body\r\n    if (message.encryptedFields?.includes('body')) {\r\n      try {\r\n        const bodyData = JSON.parse(message.body)\r\n        decryptedMessage.body = this.decryptData(bodyData.encrypted, encryptionKey, bodyData.iv, bodyData.tag)\r\n      } catch (error) {\r\n        console.error('Failed to decrypt email body:', error)\r\n      }\r\n    }\r\n\r\n    // Decrypt subject\r\n    if (message.encryptedFields?.includes('subject')) {\r\n      try {\r\n        const subjectData = JSON.parse(message.subject)\r\n        decryptedMessage.subject = this.decryptData(subjectData.encrypted, encryptionKey, subjectData.iv, subjectData.tag)\r\n      } catch (error) {\r\n        console.error('Failed to decrypt email subject:', error)\r\n      }\r\n    }\r\n\r\n    // Decrypt metadata\r\n    if (message.encryptedFields?.includes('metadata') && message.metadata) {\r\n      try {\r\n        const metadataStr = this.decryptData(\r\n          (message.metadata as any).encrypted,\r\n          encryptionKey,\r\n          (message.metadata as any).iv,\r\n          (message.metadata as any).tag\r\n        )\r\n        decryptedMessage.metadata = JSON.parse(metadataStr)\r\n      } catch (error) {\r\n        console.error('Failed to decrypt email metadata:', error)\r\n      }\r\n    }\r\n\r\n    // Decrypt attachments\r\n    if (message.encryptedFields?.includes('attachments') && message.attachments) {\r\n      decryptedMessage.attachments = await Promise.all(\r\n        message.attachments.map(async (attachment) => {\r\n          if (attachment.isEncrypted && attachment.data) {\r\n            try {\r\n              const attachmentData = JSON.parse(attachment.data)\r\n              return {\r\n                ...attachment,\r\n                data: this.decryptData(attachmentData.encrypted, encryptionKey, attachmentData.iv, attachmentData.tag),\r\n                isEncrypted: false,\r\n                size: attachment.originalSize || attachment.size\r\n              }\r\n            } catch (error) {\r\n              console.error('Failed to decrypt attachment:', error)\r\n              return attachment\r\n            }\r\n          }\r\n          return attachment\r\n        })\r\n      )\r\n    }\r\n\r\n    return decryptedMessage\r\n  }\r\n\r\n  /**\r\n   * Store encryption key securely\r\n   */\r\n  private async storeEncryptionKey(keyId: string, key: Buffer, userId: string): Promise<void> {\r\n    // In production, use a proper key management service like AWS KMS, Azure Key Vault, etc.\r\n    // For now, store in database with additional encryption\r\n    // Security: Require strong encryption key in production\r\n    const masterKey = process.env.EMAIL_MASTER_KEY || (() => {\r\n      if (process.env.NODE_ENV === 'production') {\r\n        throw new Error('EMAIL_MASTER_KEY must be set in production environment')\r\n      }\r\n      return 'dev-only-master-key-not-for-production'\r\n    })()\r\n    const keyEncryption = this.encryptData(key.toString('hex'), Buffer.from(masterKey))\r\n\r\n    await (supabase as any).from('email_encryption_keys').insert({\r\n      id: keyId,\r\n      user_id: userId,\r\n      encrypted_key: keyEncryption.encrypted,\r\n      key_iv: keyEncryption.iv,\r\n      key_tag: keyEncryption.tag,\r\n      created_at: new Date().toISOString(),\r\n      expires_at: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString() // 1 year\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Retrieve encryption key\r\n   */\r\n  private async getEncryptionKey(keyId: string, userId: string): Promise<Buffer | null> {\r\n    try {\r\n      const { data: keyData } = await (supabase as any)\r\n        .from('email_encryption_keys')\r\n        .select('*')\r\n        .eq('id', keyId)\r\n        .eq('user_id', userId)\r\n        .single()\r\n\r\n      if (!keyData) {\r\n        return null\r\n      }\r\n\r\n      // Security: Require strong encryption key in production\r\n    const masterKey = process.env.EMAIL_MASTER_KEY || (() => {\r\n      if (process.env.NODE_ENV === 'production') {\r\n        throw new Error('EMAIL_MASTER_KEY must be set in production environment')\r\n      }\r\n      return 'dev-only-master-key-not-for-production'\r\n    })()\r\n      const decryptedKey = this.decryptData(\r\n        keyData.encrypted_key,\r\n        Buffer.from(masterKey),\r\n        keyData.key_iv,\r\n        keyData.key_tag\r\n      )\r\n\r\n      return Buffer.from(decryptedKey, 'hex')\r\n    } catch (error) {\r\n      console.error('Failed to retrieve encryption key:', error)\r\n      return null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate email content for sensitive data\r\n   */\r\n  private containsSensitiveData(content: string): boolean {\r\n    const sensitivePatterns = [\r\n      /\\b\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}\\b/, // Credit card numbers\r\n      /\\b\\d{3}-\\d{2}-\\d{4}\\b/, // SSN\r\n      /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/, // Email addresses\r\n      /\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b/, // Phone numbers\r\n      /\\b(?:password|pwd|pass|secret|key|token)\\s*[:=]\\s*\\S+/i, // Passwords/secrets\r\n    ]\r\n\r\n    return sensitivePatterns.some(pattern => pattern.test(content))\r\n  }\r\n\r\n  // Configuration\r\n  async configure(config: EmailConfig): Promise<void> {\r\n    this.config = config\r\n\r\n    try {\r\n      await this.testConnection()\r\n      this.isConnected = true\r\n\r\n      // Save configuration\r\n      await (supabase as any).from(\"email_configs\").upsert({\r\n        provider: config.provider,\r\n        username: config.username,\r\n        smtp_host: config.smtpHost,\r\n        smtp_port: config.smtpPort,\r\n        smtp_secure: config.smtpSecure,\r\n        access_token: config.accessToken,\r\n        refresh_token: config.refreshToken,\r\n        client_id: config.clientId,\r\n        updated_at: new Date().toISOString(),\r\n      } as any)\r\n\r\n      // Start sync if not already running\r\n      this.startSync()\r\n\r\n      // Start cleanup job\r\n      this.startCleanupJob()\r\n    } catch (error: any) {\r\n      this.isConnected = false\r\n      throw new Error(`Failed to configure email: ${error.message}`)\r\n    }\r\n  }\r\n\r\n  // Quota Management\r\n  async checkEmailQuota(userId: string): Promise<{ canSend: boolean; reason?: string; quota: EmailQuota }> {\r\n    const quota = await this.getUserQuota(userId)\r\n\r\n    // Reset daily counter if needed\r\n    const today = new Date().toDateString()\r\n    if (quota.lastResetDate !== today) {\r\n      quota.dailySent = 0\r\n      quota.lastResetDate = today\r\n      await this.updateUserQuota(userId, quota)\r\n    }\r\n\r\n    // Reset monthly counter if needed\r\n    const currentMonth = new Date().getMonth()\r\n    const lastResetMonth = new Date(quota.lastResetDate).getMonth()\r\n    if (currentMonth !== lastResetMonth) {\r\n      quota.monthlySent = 0\r\n      await this.updateUserQuota(userId, quota)\r\n    }\r\n\r\n    // Check daily limit\r\n    if (quota.dailySent >= quota.dailyLimit) {\r\n      return {\r\n        canSend: false,\r\n        reason: `Daily email limit reached (${quota.dailyLimit}). Resets tomorrow.`,\r\n        quota,\r\n      }\r\n    }\r\n\r\n    // Check monthly limit\r\n    if (quota.monthlySent >= quota.monthlyLimit) {\r\n      return {\r\n        canSend: false,\r\n        reason: `Monthly email limit reached (${quota.monthlyLimit}). Resets next month.`,\r\n        quota,\r\n      }\r\n    }\r\n\r\n    return { canSend: true, quota }\r\n  }\r\n\r\n  async getUserQuota(userId: string): Promise<EmailQuota> {\r\n    const { data, error } = await (supabase as any).from(\"email_quotas\").select(\"*\").eq(\"user_id\", userId).single()\r\n\r\n    if (error || !data) {\r\n      // Create default quota for new user\r\n      const defaultQuota: EmailQuota = {\r\n        userId,\r\n        ...this.DEFAULT_QUOTAS,\r\n        dailySent: 0,\r\n        monthlySent: 0,\r\n        lastResetDate: new Date().toDateString(),\r\n        storageUsed: 0,\r\n      }\r\n\r\n      await (supabase as any).from(\"email_quotas\").insert({\r\n        user_id: userId,\r\n        daily_limit: defaultQuota.dailyLimit,\r\n        monthly_limit: defaultQuota.monthlyLimit,\r\n        daily_sent: defaultQuota.dailySent,\r\n        monthly_sent: defaultQuota.monthlySent,\r\n        last_reset_date: defaultQuota.lastResetDate,\r\n        attachment_size_limit: defaultQuota.attachmentSizeLimit,\r\n        storage_used: defaultQuota.storageUsed,\r\n        storage_limit: defaultQuota.storageLimit,\r\n      } as any)\r\n\r\n      return defaultQuota\r\n    }\r\n\r\n    return {\r\n      userId: data.user_id,\r\n      dailyLimit: data.daily_limit,\r\n      monthlyLimit: data.monthly_limit,\r\n      dailySent: data.daily_sent,\r\n      monthlySent: data.monthly_sent,\r\n      lastResetDate: data.last_reset_date,\r\n      attachmentSizeLimit: data.attachment_size_limit,\r\n      storageUsed: data.storage_used,\r\n      storageLimit: data.storage_limit,\r\n    }\r\n  }\r\n\r\n  async updateUserQuota(userId: string, quota: EmailQuota): Promise<void> {\r\n    await (supabase as any)\r\n      .from(\"email_quotas\")\r\n      .update({\r\n        daily_sent: quota.dailySent,\r\n        monthly_sent: quota.monthlySent,\r\n        last_reset_date: quota.lastResetDate,\r\n        storage_used: quota.storageUsed,\r\n      } as any)\r\n      .eq(\"user_id\", userId)\r\n  }\r\n\r\n  // Attachment Management with Size Limits\r\n  async validateAttachments(\r\n    attachments: EmailAttachment[],\r\n    userId: string,\r\n  ): Promise<{ valid: boolean; reason?: string }> {\r\n    if (!attachments || attachments.length === 0) {\r\n      return { valid: true }\r\n    }\r\n\r\n    const quota = await this.getUserQuota(userId)\r\n\r\n    // Check individual attachment size\r\n    for (const attachment of attachments) {\r\n      const sizeInMB = attachment.size / (1024 * 1024)\r\n      if (sizeInMB > quota.attachmentSizeLimit) {\r\n        return {\r\n          valid: false,\r\n          reason: `Attachment \"${attachment.filename}\" exceeds size limit of ${quota.attachmentSizeLimit}MB`,\r\n        }\r\n      }\r\n    }\r\n\r\n    // Check total storage usage\r\n    const totalAttachmentSize = attachments.reduce((sum, att) => sum + att.size, 0)\r\n    const totalSizeInMB = totalAttachmentSize / (1024 * 1024)\r\n\r\n    if (quota.storageUsed + totalSizeInMB > quota.storageLimit) {\r\n      return {\r\n        valid: false,\r\n        reason: `Storage limit exceeded. Available: ${(quota.storageLimit - quota.storageUsed).toFixed(1)}MB, Required: ${totalSizeInMB.toFixed(1)}MB`,\r\n      }\r\n    }\r\n\r\n    return { valid: true }\r\n  }\r\n\r\n  async compressAttachment(attachment: EmailAttachment): Promise<EmailAttachment> {\r\n    // Simple compression simulation - in real implementation, use image compression libraries\r\n    if (attachment.contentType.startsWith(\"image/\") && attachment.size > 1024 * 1024) {\r\n      return {\r\n        ...attachment,\r\n        size: Math.floor(attachment.size * 0.7), // Simulate 30% compression\r\n        filename: attachment.filename.replace(/(\\.[^.]+)$/, \"_compressed$1\"),\r\n      }\r\n    }\r\n    return attachment\r\n  }\r\n\r\n  async testConnection(): Promise<boolean> {\r\n    if (!this.config) {\r\n      throw new Error(\"Email not configured\")\r\n    }\r\n\r\n    try {\r\n      // Test connection based on provider\r\n      switch (this.config.provider) {\r\n        case \"mailjet\":\r\n          return await this.testMailjetConnection()\r\n        case \"outlook\":\r\n          return await this.testOutlookConnection()\r\n        case \"smtp\":\r\n          return await this.testSmtpConnection()\r\n        default:\r\n          throw new Error(\"Unsupported email provider\")\r\n      }\r\n    } catch (error) {\r\n      // Silent error handling - Email connection test failed\r\n      return false\r\n    }\r\n  }\r\n\r\n  private async testMailjetConnection(): Promise<boolean> {\r\n    // Test Mailjet API connection\r\n    const response = await fetch(\"https://api.mailjet.com/v3/REST/contact\", {\r\n      headers: {\r\n        Authorization: `Basic ${btoa(`${this.config?.clientId}:${this.config?.clientSecret}`)}`,\r\n      },\r\n    })\r\n    return response.ok\r\n  }\r\n\r\n  private async testOutlookConnection(): Promise<boolean> {\r\n    // Test Outlook API connection\r\n    const response = await fetch(\"https://graph.microsoft.com/v1.0/me\", {\r\n      headers: {\r\n        Authorization: `Bearer ${this.config?.accessToken}`,\r\n      },\r\n    })\r\n    return response.ok\r\n  }\r\n\r\n  private async testSmtpConnection(): Promise<boolean> {\r\n    // For SMTP, we'll simulate a connection test\r\n    // In a real implementation, you'd test the SMTP connection\r\n    return true\r\n  }\r\n\r\n  // Email Operations with Quota Checks\r\n  async sendEmail(message: Partial<EmailMessage>, userId: string): Promise<EmailMessage> {\r\n    if (!this.isConnected) {\r\n      throw new Error(\"Email service not connected\")\r\n    }\r\n\r\n    // Check quota\r\n    const quotaCheck = await this.checkEmailQuota(userId)\r\n    if (!quotaCheck.canSend) {\r\n      throw new Error(quotaCheck.reason)\r\n    }\r\n\r\n    // Validate attachments\r\n    if (message.attachments) {\r\n      const attachmentValidation = await this.validateAttachments(message.attachments, userId)\r\n      if (!attachmentValidation.valid) {\r\n        throw new Error(attachmentValidation.reason)\r\n      }\r\n\r\n      // Compress attachments if enabled\r\n      if (this.DEFAULT_RETENTION.compressAttachments) {\r\n        message.attachments = await Promise.all(message.attachments.map((att) => this.compressAttachment(att)))\r\n      }\r\n    }\r\n\r\n    const emailMessage: EmailMessage = {\r\n      id: crypto.randomUUID(),\r\n      from: this.config?.username || \"\",\r\n      to: message.to || [],\r\n      cc: message.cc,\r\n      bcc: message.bcc,\r\n      subject: message.subject || \"\",\r\n      body: message.body || \"\",\r\n      bodyType: message.bodyType || \"html\",\r\n      attachments: message.attachments,\r\n      priority: message.priority || \"normal\",\r\n      readReceipt: message.readReceipt,\r\n      deliveryReceipt: message.deliveryReceipt,\r\n      scheduledAt: message.scheduledAt,\r\n      sentAt: new Date().toISOString(),\r\n      status: \"sent\",\r\n      threadId: message.threadId,\r\n      inReplyTo: message.inReplyTo,\r\n      references: message.references,\r\n      labels: message.labels || [],\r\n      folder: \"sent\",\r\n      isRead: true,\r\n      isStarred: false,\r\n      isImportant: false,\r\n      clientId: message.clientId,\r\n      projectId: message.projectId,\r\n      taskId: message.taskId,\r\n      metadata: message.metadata,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString(),\r\n    }\r\n\r\n    try {\r\n      // Check if email contains sensitive data and encrypt if needed\r\n      const hasSensitiveData = this.containsSensitiveData(emailMessage.body) || \r\n                              this.containsSensitiveData(emailMessage.subject)\r\n\r\n      // Encrypt email if it contains sensitive data or encryption is enabled\r\n      let finalEmailMessage = emailMessage\r\n      if (this.ENCRYPTION_CONFIG.enabled || hasSensitiveData) {\r\n        finalEmailMessage = await this.encryptEmailMessage(emailMessage, userId)\r\n      }\r\n\r\n      // Send email based on provider (use original unencrypted message for sending)\r\n      await this.sendViaProvider(emailMessage)\r\n\r\n      // Update quota\r\n      quotaCheck.quota.dailySent += 1\r\n      quotaCheck.quota.monthlySent += 1\r\n\r\n      // Update storage usage\r\n      if (finalEmailMessage.attachments) {\r\n        const attachmentSize = finalEmailMessage.attachments.reduce((sum, att) => sum + att.size, 0)\r\n        quotaCheck.quota.storageUsed += attachmentSize / (1024 * 1024)\r\n      }\r\n\r\n      await this.updateUserQuota(userId, quotaCheck.quota)\r\n\r\n      // Save encrypted email to database\r\n      await (supabase as any).from(\"emails\").insert({\r\n        id: finalEmailMessage.id,\r\n        from_email: finalEmailMessage.from,\r\n        to_email: finalEmailMessage.to,\r\n        cc_email: finalEmailMessage.cc,\r\n        bcc_email: finalEmailMessage.bcc,\r\n        subject: finalEmailMessage.subject,\r\n        body: finalEmailMessage.body,\r\n        body_type: finalEmailMessage.bodyType,\r\n        attachments: finalEmailMessage.attachments,\r\n        priority: finalEmailMessage.priority,\r\n        status: finalEmailMessage.status,\r\n        thread_id: finalEmailMessage.threadId,\r\n        folder: finalEmailMessage.folder,\r\n        is_read: finalEmailMessage.isRead,\r\n        is_starred: finalEmailMessage.isStarred,\r\n        is_important: finalEmailMessage.isImportant,\r\n        client_id: finalEmailMessage.clientId,\r\n        project_id: finalEmailMessage.projectId,\r\n        task_id: finalEmailMessage.taskId,\r\n        metadata: finalEmailMessage.metadata,\r\n        sent_at: finalEmailMessage.sentAt,\r\n        created_at: finalEmailMessage.created_at,\r\n        updated_at: finalEmailMessage.updated_at,\r\n        user_id: userId,\r\n        is_encrypted: finalEmailMessage.isEncrypted,\r\n        encryption_key_id: finalEmailMessage.encryptionKeyId,\r\n        encrypted_fields: finalEmailMessage.encryptedFields,\r\n      } as any)\r\n\r\n      return finalEmailMessage\r\n    } catch (error: any) {\r\n      emailMessage.status = \"failed\"\r\n      throw new Error(`Failed to send email: ${error.message}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve and decrypt email messages\r\n   */\r\n  async getEmails(userId: string, folder?: string): Promise<EmailMessage[]> {\r\n    let query = (supabase as any).from(\"emails\").select(\"*\").eq(\"user_id\", userId)\r\n    \r\n    if (folder) {\r\n      query = query.eq(\"folder\", folder)\r\n    }\r\n\r\n    const { data, error } = await query.order(\"created_at\", { ascending: false })\r\n\r\n    if (error) {\r\n      throw new Error(`Failed to get emails: ${error.message}`)\r\n    }\r\n\r\n    // Decrypt emails if they are encrypted\r\n    const emails = await Promise.all(\r\n      (data || []).map(async (emailData: any) => {\r\n        const email: EmailMessage = {\r\n          id: emailData.id,\r\n          from: emailData.from_email,\r\n          to: emailData.to_email,\r\n          cc: emailData.cc_email,\r\n          bcc: emailData.bcc_email,\r\n          subject: emailData.subject,\r\n          body: emailData.body,\r\n          bodyType: emailData.body_type,\r\n          attachments: emailData.attachments,\r\n          priority: emailData.priority,\r\n          status: emailData.status,\r\n          threadId: emailData.thread_id,\r\n          folder: emailData.folder,\r\n          isRead: emailData.is_read,\r\n          isStarred: emailData.is_starred,\r\n          isImportant: emailData.is_important,\r\n          clientId: emailData.client_id,\r\n          projectId: emailData.project_id,\r\n          taskId: emailData.task_id,\r\n          metadata: emailData.metadata,\r\n          sentAt: emailData.sent_at,\r\n          created_at: emailData.created_at,\r\n          updated_at: emailData.updated_at,\r\n          isEncrypted: emailData.is_encrypted,\r\n          encryptionKeyId: emailData.encryption_key_id,\r\n          encryptedFields: emailData.encrypted_fields,\r\n        }\r\n\r\n        // Decrypt if encrypted\r\n        if (email.isEncrypted) {\r\n          return await this.decryptEmailMessage(email, userId)\r\n        }\r\n\r\n        return email\r\n      })\r\n    )\r\n\r\n    return emails\r\n  }\r\n\r\n  private async sendViaProvider(message: EmailMessage): Promise<void> {\r\n    switch (this.config?.provider) {\r\n      case \"mailjet\":\r\n        await this.sendViaMailjet(message)\r\n        break\r\n      case \"outlook\":\r\n        await this.sendViaOutlook(message)\r\n        break\r\n      case \"smtp\":\r\n        await this.sendViaSmtp(message)\r\n        break\r\n      default:\r\n        throw new Error(\"Unsupported email provider\")\r\n    }\r\n  }\r\n\r\n  private async sendViaMailjet(message: EmailMessage): Promise<void> {\r\n    const email = this.formatEmailForMailjet(message)\r\n\r\n    const response = await fetch(\"https://api.mailjet.com/v3.1/send\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Basic ${btoa(`${this.config?.clientId}:${this.config?.clientSecret}`)}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(email),\r\n    })\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Mailjet API error: ${response.statusText}`)\r\n    }\r\n  }\r\n\r\n  private async sendViaOutlook(message: EmailMessage): Promise<void> {\r\n    const email = this.formatEmailForOutlook(message)\r\n\r\n    const response = await fetch(\"https://graph.microsoft.com/v1.0/me/sendMail\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${this.config?.accessToken}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ message: email }),\r\n    })\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Outlook API error: ${response.statusText}`)\r\n    }\r\n  }\r\n\r\n  private async sendViaSmtp(message: EmailMessage): Promise<void> {\r\n    // SMTP implementation would go here\r\n    // For now, we'll simulate sending\r\n    // Silent logging - Sending via SMTP\r\n  }\r\n\r\n  private formatEmailForMailjet(message: EmailMessage): any {\r\n    return {\r\n      Messages: [\r\n        {\r\n          From: {\r\n            Email: this.config?.username || \"\",\r\n            Name: \"CRM System\",\r\n          },\r\n          To: message.to.map((email) => ({ Email: email })),\r\n          Cc: message.cc?.map((email) => ({ Email: email })) || [],\r\n          Bcc: message.bcc?.map((email) => ({ Email: email })) || [],\r\n          Subject: message.subject,\r\n          HTMLPart: message.bodyType === \"html\" ? message.body : undefined,\r\n          TextPart: message.bodyType === \"text\" ? message.body : undefined,\r\n        },\r\n      ],\r\n    }\r\n  }\r\n\r\n  private formatEmailForOutlook(message: EmailMessage): any {\r\n    return {\r\n      subject: message.subject,\r\n      body: {\r\n        contentType: message.bodyType === \"html\" ? \"HTML\" : \"Text\",\r\n        content: message.body,\r\n      },\r\n      toRecipients: message.to.map((email) => ({ emailAddress: { address: email } })),\r\n      ccRecipients: message.cc?.map((email) => ({ emailAddress: { address: email } })) || [],\r\n      bccRecipients: message.bcc?.map((email) => ({ emailAddress: { address: email } })) || [],\r\n      importance: message.priority === \"high\" ? \"high\" : message.priority === \"low\" ? \"low\" : \"normal\",\r\n    }\r\n  }\r\n\r\n  // Cleanup and Retention\r\n  private startCleanupJob(): void {\r\n    // Run cleanup daily at 2 AM\r\n    const now = new Date()\r\n    const tomorrow = new Date(now)\r\n    tomorrow.setDate(tomorrow.getDate() + 1)\r\n    tomorrow.setHours(2, 0, 0, 0)\r\n\r\n    const msUntilTomorrow = tomorrow.getTime() - now.getTime()\r\n\r\n    setTimeout(() => {\r\n      this.runCleanup()\r\n      // Then run every 24 hours\r\n      setInterval(() => this.runCleanup(), 24 * 60 * 60 * 1000)\r\n    }, msUntilTomorrow)\r\n  }\r\n\r\n  private async runCleanup(): Promise<void> {\r\n    try {\r\n      // Silent logging - Starting email cleanup job\r\n\r\n      if (this.DEFAULT_RETENTION.autoDeleteOldEmails) {\r\n        await this.cleanupOldEmails()\r\n        await this.cleanupOldAttachments()\r\n        await this.cleanupDeletedEmails()\r\n      }\r\n\r\n      // Silent logging - Email cleanup job completed\r\n    } catch (error) {\r\n      // Silent error handling - Email cleanup job failed\r\n    }\r\n  }\r\n\r\n  private async cleanupOldEmails(): Promise<void> {\r\n    const sentCutoff = new Date()\r\n    sentCutoff.setDate(sentCutoff.getDate() - this.DEFAULT_RETENTION.sentEmailRetentionDays)\r\n\r\n    const receivedCutoff = new Date()\r\n    receivedCutoff.setDate(receivedCutoff.getDate() - this.DEFAULT_RETENTION.receivedEmailRetentionDays)\r\n\r\n    // Delete old sent emails\r\n    await (supabase as any).from(\"emails\").delete().eq(\"folder\", \"sent\").lt(\"created_at\", sentCutoff.toISOString())\r\n\r\n    // Delete old received emails\r\n    await (supabase as any).from(\"emails\").delete().eq(\"folder\", \"inbox\").lt(\"created_at\", receivedCutoff.toISOString())\r\n  }\r\n\r\n  private async cleanupOldAttachments(): Promise<void> {\r\n    const cutoff = new Date()\r\n    cutoff.setDate(cutoff.getDate() - this.DEFAULT_RETENTION.attachmentRetentionDays)\r\n\r\n    // Get emails with attachments older than retention period\r\n    const { data: oldEmails } = await (supabase as any)\r\n      .from(\"emails\")\r\n      .select(\"id, attachments, user_id\")\r\n      .not(\"attachments\", \"is\", null)\r\n      .lt(\"created_at\", cutoff.toISOString())\r\n\r\n    if (oldEmails) {\r\n      for (const email of oldEmails as any[]) {\r\n        // Calculate storage to be freed\r\n        const attachmentSize = (email as any).attachments?.reduce((sum: number, att: any) => sum + att.size, 0) || 0\r\n        const sizeInMB = attachmentSize / (1024 * 1024)\r\n\r\n        // Remove attachments from email\r\n        await (supabase as any).from(\"emails\").update({ attachments: null } as any).eq(\"id\", (email as any).id)\r\n\r\n        // Update user storage quota\r\n        if ((email as any).user_id) {\r\n          const quota = await this.getUserQuota((email as any).user_id)\r\n          quota.storageUsed = Math.max(0, quota.storageUsed - sizeInMB)\r\n          await this.updateUserQuota((email as any).user_id, quota)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private async cleanupDeletedEmails(): Promise<void> {\r\n    if (!supabase) throw new Error('Database not initialized')\r\n    \r\n    const cutoff = new Date()\r\n    cutoff.setDate(cutoff.getDate() - this.DEFAULT_RETENTION.deletedEmailRetentionDays)\r\n\r\n    await supabase.from(\"emails\").delete().eq(\"folder\", \"trash\").lt(\"updated_at\", cutoff.toISOString())\r\n  }\r\n\r\n  // Email Templates\r\n  async createTemplate(\r\n    template: Omit<EmailTemplate, \"id\" | \"usage_count\" | \"created_at\" | \"updated_at\">,\r\n  ): Promise<EmailTemplate> {\r\n    const newTemplate: EmailTemplate = {\r\n      id: crypto.randomUUID(),\r\n      usage_count: 0,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString(),\r\n      ...template,\r\n    }\r\n\r\n    const { error } = await (supabase as any).from(\"email_templates\").insert({\r\n      id: newTemplate.id,\r\n      name: newTemplate.name,\r\n      subject: newTemplate.subject,\r\n      body: newTemplate.body,\r\n      body_type: newTemplate.bodyType,\r\n      category: newTemplate.category,\r\n      variables: newTemplate.variables,\r\n      is_active: newTemplate.isActive,\r\n      usage_count: newTemplate.usage_count,\r\n      created_by: newTemplate.created_by,\r\n      created_at: newTemplate.created_at,\r\n      updated_at: newTemplate.updated_at,\r\n    } as any)\r\n\r\n    if (error) {\r\n      throw new Error(`Failed to create template: ${error.message}`)\r\n    }\r\n\r\n    return newTemplate\r\n  }\r\n\r\n  async getTemplates(category?: string): Promise<EmailTemplate[]> {\r\n    let query = (supabase as any).from(\"email_templates\").select(\"*\").eq(\"is_active\", true).order(\"name\")\r\n\r\n    if (category) {\r\n      query = query.eq(\"category\", category)\r\n    }\r\n\r\n    const { data, error } = await query\r\n\r\n    if (error) {\r\n      throw new Error(`Failed to get templates: ${error.message}`)\r\n    }\r\n\r\n    return (data || []).map((template: any) => ({\r\n      id: template.id,\r\n      name: template.name,\r\n      subject: template.subject,\r\n      body: template.body,\r\n      bodyType: template.body_type,\r\n      category: template.category,\r\n      variables: template.variables || [],\r\n      isActive: template.is_active,\r\n      usage_count: template.usage_count,\r\n      created_by: template.created_by,\r\n      created_at: template.created_at,\r\n      updated_at: template.updated_at,\r\n    }))\r\n  }\r\n\r\n  async renderTemplate(\r\n    templateId: string,\r\n    variables: Record<string, string>,\r\n  ): Promise<{ subject: string; body: string }> {\r\n    const template = await this.getTemplate(templateId)\r\n    if (!template) {\r\n      throw new Error(\"Template not found\")\r\n    }\r\n\r\n    let subject = template.subject\r\n    let body = template.body\r\n\r\n    // Replace variables\r\n    Object.entries(variables).forEach(([key, value]) => {\r\n      const placeholder = `{{${key}}}`\r\n      subject = subject.replace(new RegExp(placeholder, \"g\"), value)\r\n      body = body.replace(new RegExp(placeholder, \"g\"), value)\r\n    })\r\n\r\n    // Increment usage count\r\n    await (supabase as any)\r\n      .from(\"email_templates\")\r\n      .update({ usage_count: template.usage_count + 1 } as any)\r\n      .eq(\"id\", templateId)\r\n\r\n    return { subject, body }\r\n  }\r\n\r\n  private async getTemplate(id: string): Promise<EmailTemplate | null> {\r\n    const { data, error } = await (supabase as any).from(\"email_templates\").select(\"*\").eq(\"id\", id).single()\r\n\r\n    if (error) return null\r\n\r\n    return {\r\n      id: (data as any).id,\r\n      name: (data as any).name,\r\n      subject: (data as any).subject,\r\n      body: (data as any).body,\r\n      bodyType: (data as any).body_type,\r\n      category: (data as any).category,\r\n      variables: (data as any).variables || [],\r\n      isActive: (data as any).is_active,\r\n      usage_count: (data as any).usage_count,\r\n      created_by: (data as any).created_by,\r\n      created_at: (data as any).created_at,\r\n      updated_at: (data as any).updated_at,\r\n    }\r\n  }\r\n\r\n  // Email Sync\r\n  private startSync(): void {\r\n    if (this.syncInterval) {\r\n      clearInterval(this.syncInterval)\r\n    }\r\n\r\n    this.syncInterval = setInterval(\r\n      () => {\r\n        this.syncEmails()\r\n      },\r\n      5 * 60 * 1000,\r\n    ) // Sync every 5 minutes\r\n  }\r\n\r\n  private async syncEmails(): Promise<void> {\r\n    if (!this.isConnected) return\r\n\r\n    try {\r\n      // Sync based on provider\r\n      switch (this.config?.provider) {\r\n                case \"outlook\":\r\n          await this.syncOutlookEmails()\r\n          break\r\n      }\r\n    } catch (error) {\r\n      // Silent error handling - Email sync failed\r\n    }\r\n  }\r\n\r\n  \r\n  private async syncOutlookEmails(): Promise<void> {\r\n    // Outlook sync implementation\r\n    // Silent logging - Syncing Outlook emails\r\n  }\r\n\r\n  // Analytics\r\n  async getAnalytics(dateRange?: { start: Date; end: Date }): Promise<EmailAnalytics> {\r\n    let query = (supabase as any).from(\"emails\").select(\"status, is_read, metadata\")\r\n\r\n    if (dateRange) {\r\n      query = query.gte(\"created_at\", dateRange.start.toISOString()).lte(\"created_at\", dateRange.end.toISOString())\r\n    }\r\n\r\n    const { data, error } = await query\r\n\r\n    if (error) {\r\n      throw new Error(`Failed to get analytics: ${error.message}`)\r\n    }\r\n\r\n    const emails = data || []\r\n    const sent = emails.filter((e: any) => e.status === \"sent\").length\r\n    const opened = emails.filter((e: any) => e.is_read).length\r\n    const clicked = emails.filter((e: any) => e.metadata?.clicked).length\r\n    const replied = emails.filter((e: any) => e.metadata?.replied).length\r\n    const bounced = emails.filter((e: any) => e.status === \"failed\").length\r\n\r\n    return {\r\n      sent,\r\n      received: emails.length - sent,\r\n      opened,\r\n      clicked,\r\n      replied,\r\n      bounced,\r\n      unsubscribed: 0, // Would need separate tracking\r\n      openRate: sent > 0 ? (opened / sent) * 100 : 0,\r\n      clickRate: opened > 0 ? (clicked / opened) * 100 : 0,\r\n      replyRate: sent > 0 ? (replied / sent) * 100 : 0,\r\n      bounceRate: sent > 0 ? (bounced / sent) * 100 : 0,\r\n    }\r\n  }\r\n\r\n  // Quota Management Methods\r\n  async getQuotaStatus(userId: string): Promise<{\r\n    daily: { used: number; limit: number; remaining: number }\r\n    monthly: { used: number; limit: number; remaining: number }\r\n    storage: { used: number; limit: number; remaining: number }\r\n  }> {\r\n    const quota = await this.getUserQuota(userId)\r\n\r\n    return {\r\n      daily: {\r\n        used: quota.dailySent,\r\n        limit: quota.dailyLimit,\r\n        remaining: quota.dailyLimit - quota.dailySent,\r\n      },\r\n      monthly: {\r\n        used: quota.monthlySent,\r\n        limit: quota.monthlyLimit,\r\n        remaining: quota.monthlyLimit - quota.monthlySent,\r\n      },\r\n      storage: {\r\n        used: quota.storageUsed,\r\n        limit: quota.storageLimit,\r\n        remaining: quota.storageLimit - quota.storageUsed,\r\n      },\r\n    }\r\n  }\r\n\r\n  // Cleanup\r\n  destroy(): void {\r\n    if (this.syncInterval) {\r\n      clearInterval(this.syncInterval)\r\n    }\r\n  }\r\n}\r\n\r\nexport const emailService = new EmailService()\r\nexport default emailService\r\n"],"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","ignoreList":[]}