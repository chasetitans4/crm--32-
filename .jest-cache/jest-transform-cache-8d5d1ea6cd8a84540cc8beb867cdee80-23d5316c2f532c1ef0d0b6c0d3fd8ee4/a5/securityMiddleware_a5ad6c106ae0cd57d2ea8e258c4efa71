3659e1e59b342ff90a3653309d1bb2ea
"use strict";

/* istanbul ignore next */
function cov_2oxqfgjyto() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\middleware\\securityMiddleware.ts";
  var hash = "c795353542a310f7fc972f0bf8eda7cf0ad0d6e1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\middleware\\securityMiddleware.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 34
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 34
        }
      },
      "6": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 19,
          column: 46
        }
      },
      "7": {
        start: {
          line: 20,
          column: 25
        },
        end: {
          line: 20,
          column: 63
        }
      },
      "8": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 39
        }
      },
      "9": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 33,
          column: 10
        }
      },
      "10": {
        start: {
          line: 36,
          column: 24
        },
        end: {
          line: 36,
          column: 26
        }
      },
      "11": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "12": {
        start: {
          line: 39,
          column: 36
        },
        end: {
          line: 39,
          column: 64
        }
      },
      "13": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 42,
          column: 13
        }
      },
      "14": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 41,
          column: 39
        }
      },
      "15": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 42
        }
      },
      "16": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "17": {
        start: {
          line: 47,
          column: 31
        },
        end: {
          line: 47,
          column: 74
        }
      },
      "18": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 50,
          column: 13
        }
      },
      "19": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 49,
          column: 34
        }
      },
      "20": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 37
        }
      },
      "21": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "22": {
        start: {
          line: 55,
          column: 34
        },
        end: {
          line: 55,
          column: 69
        }
      },
      "23": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 58,
          column: 13
        }
      },
      "24": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 37
        }
      },
      "25": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 40
        }
      },
      "26": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "27": {
        start: {
          line: 63,
          column: 39
        },
        end: {
          line: 63,
          column: 70
        }
      },
      "28": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 45
        }
      },
      "29": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "30": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 73,
          column: 15
        }
      },
      "31": {
        start: {
          line: 69,
          column: 42
        },
        end: {
          line: 72,
          column: 21
        }
      },
      "32": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 81,
          column: 10
        }
      },
      "33": {
        start: {
          line: 84,
          column: 20
        },
        end: {
          line: 84,
          column: 70
        }
      },
      "34": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 85,
          column: 30
        }
      },
      "35": {
        start: {
          line: 86,
          column: 28
        },
        end: {
          line: 86,
          column: 43
        }
      },
      "36": {
        start: {
          line: 88,
          column: 24
        },
        end: {
          line: 88,
          column: 51
        }
      },
      "37": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "38": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 93,
          column: 15
        }
      },
      "39": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 97,
          column: 14
        }
      },
      "40": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "41": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 108,
          column: 14
        }
      },
      "42": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 24
        }
      },
      "43": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 114,
          column: 10
        }
      },
      "44": {
        start: {
          line: 117,
          column: 24
        },
        end: {
          line: 117,
          column: 74
        }
      },
      "45": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "46": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 121,
          column: 15
        }
      },
      "47": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 126,
          column: 14
        }
      },
      "48": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 131,
          column: 10
        }
      },
      "49": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "50": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 139,
          column: 14
        }
      },
      "51": {
        start: {
          line: 141,
          column: 24
        },
        end: {
          line: 141,
          column: 84
        }
      },
      "52": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "53": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 145,
          column: 15
        }
      },
      "54": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 150,
          column: 14
        }
      },
      "55": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 155,
          column: 10
        }
      },
      "56": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "57": {
        start: {
          line: 159,
          column: 30
        },
        end: {
          line: 159,
          column: 91
        }
      },
      "58": {
        start: {
          line: 160,
          column: 31
        },
        end: {
          line: 160,
          column: 65
        }
      },
      "59": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 168,
          column: 14
        }
      },
      "60": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 177,
          column: 14
        }
      },
      "61": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "62": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 195,
          column: 15
        }
      },
      "63": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 66
        }
      },
      "64": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 210,
          column: 10
        }
      },
      "65": {
        start: {
          line: 214,
          column: 20
        },
        end: {
          line: 214,
          column: 30
        }
      },
      "66": {
        start: {
          line: 215,
          column: 29
        },
        end: {
          line: 215,
          column: 31
        }
      },
      "67": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 220,
          column: 11
        }
      },
      "68": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 219,
          column: 13
        }
      },
      "69": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 39
        }
      },
      "70": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 221,
          column: 68
        }
      },
      "71": {
        start: {
          line: 221,
          column: 36
        },
        end: {
          line: 221,
          column: 66
        }
      },
      "72": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 229,
          column: 10
        }
      },
      "73": {
        start: {
          line: 232,
          column: 27
        },
        end: {
          line: 232,
          column: 51
        }
      },
      "74": {
        start: {
          line: 234,
          column: 0
        },
        end: {
          line: 236,
          column: 18
        }
      },
      "75": {
        start: {
          line: 235,
          column: 4
        },
        end: {
          line: 235,
          column: 33
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 30
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 30
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 28
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 22
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 59
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 35
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 69,
            column: 36
          },
          end: {
            line: 69,
            column: 37
          }
        },
        loc: {
          start: {
            line: 69,
            column: 42
          },
          end: {
            line: 72,
            column: 21
          }
        },
        line: 69
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        loc: {
          start: {
            line: 83,
            column: 28
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 83
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        loc: {
          start: {
            line: 116,
            column: 39
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 116
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 133,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        },
        loc: {
          start: {
            line: 133,
            column: 35
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 133
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        },
        loc: {
          start: {
            line: 157,
            column: 24
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 157
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 180,
            column: 5
          }
        },
        loc: {
          start: {
            line: 180,
            column: 53
          },
          end: {
            line: 199,
            column: 5
          }
        },
        line: 180
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 201,
            column: 4
          },
          end: {
            line: 201,
            column: 5
          }
        },
        loc: {
          start: {
            line: 201,
            column: 25
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 201
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 14
          },
          end: {
            line: 222,
            column: 5
          }
        },
        line: 213
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 216,
            column: 35
          },
          end: {
            line: 216,
            column: 36
          }
        },
        loc: {
          start: {
            line: 216,
            column: 49
          },
          end: {
            line: 220,
            column: 9
          }
        },
        line: 216
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 221,
            column: 29
          },
          end: {
            line: 221,
            column: 30
          }
        },
        loc: {
          start: {
            line: 221,
            column: 36
          },
          end: {
            line: 221,
            column: 66
          }
        },
        line: 221
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 224,
            column: 4
          },
          end: {
            line: 224,
            column: 5
          }
        },
        loc: {
          start: {
            line: 224,
            column: 17
          },
          end: {
            line: 230,
            column: 5
          }
        },
        line: 224
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 234,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        },
        loc: {
          start: {
            line: 234,
            column: 16
          },
          end: {
            line: 236,
            column: 1
          }
        },
        line: 234
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 16
          },
          end: {
            line: 22,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 22,
            column: 25
          },
          end: {
            line: 22,
            column: 27
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "3": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 46,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 46,
            column: 34
          }
        }, {
          start: {
            line: 46,
            column: 38
          },
          end: {
            line: 46,
            column: 47
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 50,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 50,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "6": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "7": {
        loc: {
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 54,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 54,
            column: 47
          }
        }, {
          start: {
            line: 54,
            column: 51
          },
          end: {
            line: 54,
            column: 68
          }
        }],
        line: 54
      },
      "8": {
        loc: {
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 58,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "9": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "10": {
        loc: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 62,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 62,
            column: 47
          }
        }, {
          start: {
            line: 62,
            column: 51
          },
          end: {
            line: 62,
            column: 62
          }
        }],
        line: 62
      },
      "11": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "12": {
        loc: {
          start: {
            line: 84,
            column: 20
          },
          end: {
            line: 84,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 20
          },
          end: {
            line: 84,
            column: 37
          }
        }, {
          start: {
            line: 84,
            column: 41
          },
          end: {
            line: 84,
            column: 55
          }
        }, {
          start: {
            line: 84,
            column: 59
          },
          end: {
            line: 84,
            column: 70
          }
        }],
        line: 84
      },
      "13": {
        loc: {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 98,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "14": {
        loc: {
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 89,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 89,
            column: 20
          }
        }, {
          start: {
            line: 89,
            column: 24
          },
          end: {
            line: 89,
            column: 47
          }
        }],
        line: 89
      },
      "15": {
        loc: {
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "16": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "17": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "18": {
        loc: {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "19": {
        loc: {
          start: {
            line: 163,
            column: 24
          },
          end: {
            line: 163,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 163,
            column: 37
          },
          end: {
            line: 163,
            column: 43
          }
        }, {
          start: {
            line: 163,
            column: 46
          },
          end: {
            line: 163,
            column: 51
          }
        }],
        line: 163
      },
      "20": {
        loc: {
          start: {
            line: 164,
            column: 24
          },
          end: {
            line: 164,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 164,
            column: 37
          },
          end: {
            line: 164,
            column: 58
          }
        }, {
          start: {
            line: 164,
            column: 61
          },
          end: {
            line: 164,
            column: 70
          }
        }],
        line: 164
      },
      "21": {
        loc: {
          start: {
            line: 175,
            column: 27
          },
          end: {
            line: 175,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 175,
            column: 52
          },
          end: {
            line: 175,
            column: 65
          }
        }, {
          start: {
            line: 175,
            column: 68
          },
          end: {
            line: 175,
            column: 83
          }
        }],
        line: 175
      },
      "22": {
        loc: {
          start: {
            line: 183,
            column: 24
          },
          end: {
            line: 183,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 183,
            column: 24
          },
          end: {
            line: 183,
            column: 38
          }
        }, {
          start: {
            line: 183,
            column: 42
          },
          end: {
            line: 183,
            column: 53
          }
        }],
        line: 183
      },
      "23": {
        loc: {
          start: {
            line: 192,
            column: 26
          },
          end: {
            line: 192,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 26
          },
          end: {
            line: 192,
            column: 43
          }
        }, {
          start: {
            line: 192,
            column: 47
          },
          end: {
            line: 192,
            column: 52
          }
        }],
        line: 192
      },
      "24": {
        loc: {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 219,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 219,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\middleware\\securityMiddleware.ts"],
      sourcesContent: ["import { securityService } from \"../utils/security\"\nimport { auditLogService } from \"../services/auditLogService\"\n\nexport interface SecurityMiddlewareConfig {\n  enableCSRF: boolean\n  enableRateLimit: boolean\n  enableInputSanitization: boolean\n  enableSessionValidation: boolean\n  enableAuditLogging: boolean\n  maxRequestsPerMinute: number\n  sessionTimeoutMinutes: number\n}\n\nexport interface SecurityContext {\n  userId?: string\n  userRole?: string\n  sessionId?: string\n  ipAddress?: string\n  userAgent?: string\n  timestamp: Date\n}\n\nexport interface SecurityResult {\n  allowed: boolean\n  reason?: string\n  action?: \"block\" | \"warn\" | \"log\"\n  metadata?: Record<string, any>\n}\n\nexport class SecurityMiddleware {\n  private config: SecurityMiddlewareConfig\n  private requestCounts: Map<string, { count: number; resetTime: number }> = new Map()\n\n  constructor(config: Partial<SecurityMiddlewareConfig> = {}) {\n    this.config = {\n      enableCSRF: true,\n      enableRateLimit: true,\n      enableInputSanitization: true,\n      enableSessionValidation: true,\n      enableAuditLogging: true,\n      maxRequestsPerMinute: 60,\n      sessionTimeoutMinutes: 30,\n      ...config,\n    }\n  }\n\n  async validateRequest(context: SecurityContext, requestData?: Record<string, unknown>, csrfToken?: string): Promise<SecurityResult> {\n    const results: SecurityResult[] = []\n\n    // Rate limiting check\n    if (this.config.enableRateLimit) {\n      const rateLimitResult = this.checkRateLimit(context)\n      if (!rateLimitResult.allowed) {\n        return rateLimitResult\n      }\n      results.push(rateLimitResult)\n    }\n\n    // CSRF token validation\n    if (this.config.enableCSRF && csrfToken) {\n      const csrfResult = await this.validateCSRF(csrfToken, context)\n      if (!csrfResult.allowed) {\n        return csrfResult\n      }\n      results.push(csrfResult)\n    }\n\n    // Session validation\n    if (this.config.enableSessionValidation && context.sessionId) {\n      const sessionResult = await this.validateSession(context)\n      if (!sessionResult.allowed) {\n        return sessionResult\n      }\n      results.push(sessionResult)\n    }\n\n    // Input sanitization\n    if (this.config.enableInputSanitization && requestData) {\n      const sanitizationResult = this.sanitizeInput(requestData)\n      results.push(sanitizationResult)\n    }\n\n    // Audit logging\n    if (this.config.enableAuditLogging) {\n      await this.logSecurityEvent(context, \"request_validated\", {\n        checks: results.map((r) => ({ allowed: r.allowed, reason: r.reason })),\n      })\n    }\n\n    return {\n      allowed: true,\n      action: \"log\",\n      metadata: { checks: results },\n    }\n  }\n\n  private checkRateLimit(context: SecurityContext): SecurityResult {\n    const key = context.ipAddress || context.userId || \"anonymous\"\n    const now = Date.now()\n    const windowStart = now - 60 * 1000 // 1 minute window\n\n    const current = this.requestCounts.get(key)\n    if (!current || current.resetTime < now) {\n      this.requestCounts.set(key, { count: 1, resetTime: now + 60 * 1000 })\n      return { allowed: true, action: \"log\" }\n    }\n\n    if (current.count >= this.config.maxRequestsPerMinute) {\n      return {\n        allowed: false,\n        reason: \"Rate limit exceeded\",\n        action: \"block\",\n        metadata: { limit: this.config.maxRequestsPerMinute, current: current.count },\n      }\n    }\n\n    current.count++\n    return { allowed: true, action: \"log\" }\n  }\n\n  private async validateCSRF(token: string, context: SecurityContext): Promise<SecurityResult> {\n    const isValid = securityService.validateCSRFToken(token)\n\n    if (!isValid) {\n      await this.logSecurityEvent(context, \"csrf_validation_failed\", { token })\n      return {\n        allowed: false,\n        reason: \"Invalid CSRF token\",\n        action: \"block\",\n      }\n    }\n\n    return { allowed: true, action: \"log\" }\n  }\n\n  private async validateSession(context: SecurityContext): Promise<SecurityResult> {\n    if (!context.sessionId) {\n      return {\n        allowed: false,\n        reason: \"No session ID provided\",\n        action: \"block\",\n      }\n    }\n\n    const isValid = securityService.validateSession(context.sessionId)\n\n    if (!isValid) {\n      await this.logSecurityEvent(context, \"session_validation_failed\", {\n        sessionId: context.sessionId,\n      })\n      return {\n        allowed: false,\n        reason: \"Invalid or expired session\",\n        action: \"block\",\n      }\n    }\n\n    return { allowed: true, action: \"log\" }\n  }\n\n  private sanitizeInput(data: Record<string, unknown>): SecurityResult {\n    try {\n      const sanitized = securityService.sanitizeInput(JSON.stringify(data))\n      const hasChanges = sanitized !== JSON.stringify(data)\n\n      return {\n        allowed: true,\n        action: hasChanges ? \"warn\" : \"log\",\n        reason: hasChanges ? \"Input was sanitized\" : undefined,\n        metadata: { sanitized: hasChanges },\n      }\n    } catch (error) {\n      return {\n        allowed: false,\n        reason: \"Input sanitization failed\",\n        action: \"block\",\n        metadata: { error: error instanceof Error ? error.message : \"Unknown error\" },\n      }\n    }\n  }\n\n  private async logSecurityEvent(\n    context: SecurityContext,\n    event: string,\n    metadata: Record<string, unknown>,\n  ): Promise<void> {\n    try {\n      await auditLogService.log({\n        userId: context.userId || \"anonymous\",\n        action: `security.${event}`,\n        resource: \"security_middleware\",\n        details: {\n          ...metadata,\n          ipAddress: context.ipAddress,\n          userAgent: context.userAgent,\n          sessionId: context.sessionId,\n        },\n        severity: (metadata.severity as \"low\" | \"medium\" | \"high\" | \"critical\") || \"low\",\n        category: \"security\",\n        success: true,\n      })\n    } catch (error) {\n      console.error(\"Failed to log security event:\", error)\n    }\n  }\n\n  // Security headers for HTTP responses\n  getSecurityHeaders(): Record<string, string> {\n    return {\n      \"X-Content-Type-Options\": \"nosniff\",\n      \"X-Frame-Options\": \"DENY\",\n      \"X-XSS-Protection\": \"1; mode=block\",\n      \"Strict-Transport-Security\": \"max-age=31536000; includeSubDomains\",\n      \"Referrer-Policy\": \"strict-origin-when-cross-origin\",\n      \"Content-Security-Policy\": securityService.generateCSPHeader(),\n      \"Permissions-Policy\": \"camera=(), microphone=(), geolocation=()\",\n    }\n  }\n\n  // Clean up expired rate limit entries\n  cleanup(): void {\n    const now = Date.now()\n    const keysToDelete: string[] = []\n    this.requestCounts.forEach((value, key) => {\n      if (value.resetTime < now) {\n        keysToDelete.push(key)\n      }\n    })\n    keysToDelete.forEach(key => this.requestCounts.delete(key))\n  }\n\n  // Get security metrics\n  getMetrics(): Record<string, any> {\n    return {\n      activeRateLimits: this.requestCounts.size,\n      config: this.config,\n      timestamp: new Date().toISOString(),\n    }\n  }\n}\n\n// Export singleton instance\nexport const securityMiddleware = new SecurityMiddleware()\n\n// Auto-cleanup every 5 minutes\nsetInterval(\n  () => {\n    securityMiddleware.cleanup()\n  },\n  5 * 60 * 1000,\n)\n"],
      names: ["SecurityMiddleware", "securityMiddleware", "config", "requestCounts", "Map", "enableCSRF", "enableRateLimit", "enableInputSanitization", "enableSessionValidation", "enableAuditLogging", "maxRequestsPerMinute", "sessionTimeoutMinutes", "validateRequest", "context", "requestData", "csrfToken", "results", "rateLimitResult", "checkRateLimit", "allowed", "push", "csrfResult", "validateCSRF", "sessionId", "sessionResult", "validateSession", "sanitizationResult", "sanitizeInput", "logSecurityEvent", "checks", "map", "r", "reason", "action", "metadata", "key", "ipAddress", "userId", "now", "Date", "windowStart", "current", "get", "resetTime", "set", "count", "limit", "token", "isValid", "securityService", "validateCSRFToken", "data", "sanitized", "JSON", "stringify", "hasChanges", "undefined", "error", "Error", "message", "event", "auditLogService", "log", "resource", "details", "userAgent", "severity", "category", "success", "console", "getSecurityHeaders", "generateCSPHeader", "cleanup", "keysToDelete", "forEach", "value", "delete", "getMetrics", "activeRateLimits", "size", "timestamp", "toISOString", "setInterval"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c795353542a310f7fc972f0bf8eda7cf0ad0d6e1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2oxqfgjyto = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2oxqfgjyto();
cov_2oxqfgjyto().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_2oxqfgjyto().f[0]++;
  cov_2oxqfgjyto().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_2oxqfgjyto().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_2oxqfgjyto().s[3]++;
_export(exports, {
  get SecurityMiddleware() {
    /* istanbul ignore next */
    cov_2oxqfgjyto().f[1]++;
    cov_2oxqfgjyto().s[4]++;
    return SecurityMiddleware;
  },
  get securityMiddleware() {
    /* istanbul ignore next */
    cov_2oxqfgjyto().f[2]++;
    cov_2oxqfgjyto().s[5]++;
    return securityMiddleware;
  }
});
const _security =
/* istanbul ignore next */
(cov_2oxqfgjyto().s[6]++, require("../utils/security"));
const _auditLogService =
/* istanbul ignore next */
(cov_2oxqfgjyto().s[7]++, require("../services/auditLogService"));
class SecurityMiddleware {
  constructor(config =
  /* istanbul ignore next */
  (cov_2oxqfgjyto().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_2oxqfgjyto().f[3]++;
    cov_2oxqfgjyto().s[8]++;
    this.requestCounts = new Map();
    /* istanbul ignore next */
    cov_2oxqfgjyto().s[9]++;
    this.config = {
      enableCSRF: true,
      enableRateLimit: true,
      enableInputSanitization: true,
      enableSessionValidation: true,
      enableAuditLogging: true,
      maxRequestsPerMinute: 60,
      sessionTimeoutMinutes: 30,
      ...config
    };
  }
  async validateRequest(context, requestData, csrfToken) {
    /* istanbul ignore next */
    cov_2oxqfgjyto().f[4]++;
    const results =
    /* istanbul ignore next */
    (cov_2oxqfgjyto().s[10]++, []);
    // Rate limiting check
    /* istanbul ignore next */
    cov_2oxqfgjyto().s[11]++;
    if (this.config.enableRateLimit) {
      /* istanbul ignore next */
      cov_2oxqfgjyto().b[1][0]++;
      const rateLimitResult =
      /* istanbul ignore next */
      (cov_2oxqfgjyto().s[12]++, this.checkRateLimit(context));
      /* istanbul ignore next */
      cov_2oxqfgjyto().s[13]++;
      if (!rateLimitResult.allowed) {
        /* istanbul ignore next */
        cov_2oxqfgjyto().b[2][0]++;
        cov_2oxqfgjyto().s[14]++;
        return rateLimitResult;
      } else
      /* istanbul ignore next */
      {
        cov_2oxqfgjyto().b[2][1]++;
      }
      cov_2oxqfgjyto().s[15]++;
      results.push(rateLimitResult);
    } else
    /* istanbul ignore next */
    {
      cov_2oxqfgjyto().b[1][1]++;
    }
    // CSRF token validation
    cov_2oxqfgjyto().s[16]++;
    if (
    /* istanbul ignore next */
    (cov_2oxqfgjyto().b[4][0]++, this.config.enableCSRF) &&
    /* istanbul ignore next */
    (cov_2oxqfgjyto().b[4][1]++, csrfToken)) {
      /* istanbul ignore next */
      cov_2oxqfgjyto().b[3][0]++;
      const csrfResult =
      /* istanbul ignore next */
      (cov_2oxqfgjyto().s[17]++, await this.validateCSRF(csrfToken, context));
      /* istanbul ignore next */
      cov_2oxqfgjyto().s[18]++;
      if (!csrfResult.allowed) {
        /* istanbul ignore next */
        cov_2oxqfgjyto().b[5][0]++;
        cov_2oxqfgjyto().s[19]++;
        return csrfResult;
      } else
      /* istanbul ignore next */
      {
        cov_2oxqfgjyto().b[5][1]++;
      }
      cov_2oxqfgjyto().s[20]++;
      results.push(csrfResult);
    } else
    /* istanbul ignore next */
    {
      cov_2oxqfgjyto().b[3][1]++;
    }
    // Session validation
    cov_2oxqfgjyto().s[21]++;
    if (
    /* istanbul ignore next */
    (cov_2oxqfgjyto().b[7][0]++, this.config.enableSessionValidation) &&
    /* istanbul ignore next */
    (cov_2oxqfgjyto().b[7][1]++, context.sessionId)) {
      /* istanbul ignore next */
      cov_2oxqfgjyto().b[6][0]++;
      const sessionResult =
      /* istanbul ignore next */
      (cov_2oxqfgjyto().s[22]++, await this.validateSession(context));
      /* istanbul ignore next */
      cov_2oxqfgjyto().s[23]++;
      if (!sessionResult.allowed) {
        /* istanbul ignore next */
        cov_2oxqfgjyto().b[8][0]++;
        cov_2oxqfgjyto().s[24]++;
        return sessionResult;
      } else
      /* istanbul ignore next */
      {
        cov_2oxqfgjyto().b[8][1]++;
      }
      cov_2oxqfgjyto().s[25]++;
      results.push(sessionResult);
    } else
    /* istanbul ignore next */
    {
      cov_2oxqfgjyto().b[6][1]++;
    }
    // Input sanitization
    cov_2oxqfgjyto().s[26]++;
    if (
    /* istanbul ignore next */
    (cov_2oxqfgjyto().b[10][0]++, this.config.enableInputSanitization) &&
    /* istanbul ignore next */
    (cov_2oxqfgjyto().b[10][1]++, requestData)) {
      /* istanbul ignore next */
      cov_2oxqfgjyto().b[9][0]++;
      const sanitizationResult =
      /* istanbul ignore next */
      (cov_2oxqfgjyto().s[27]++, this.sanitizeInput(requestData));
      /* istanbul ignore next */
      cov_2oxqfgjyto().s[28]++;
      results.push(sanitizationResult);
    } else
    /* istanbul ignore next */
    {
      cov_2oxqfgjyto().b[9][1]++;
    }
    // Audit logging
    cov_2oxqfgjyto().s[29]++;
    if (this.config.enableAuditLogging) {
      /* istanbul ignore next */
      cov_2oxqfgjyto().b[11][0]++;
      cov_2oxqfgjyto().s[30]++;
      await this.logSecurityEvent(context, "request_validated", {
        checks: results.map(r => {
          /* istanbul ignore next */
          cov_2oxqfgjyto().f[5]++;
          cov_2oxqfgjyto().s[31]++;
          return {
            allowed: r.allowed,
            reason: r.reason
          };
        })
      });
    } else
    /* istanbul ignore next */
    {
      cov_2oxqfgjyto().b[11][1]++;
    }
    cov_2oxqfgjyto().s[32]++;
    return {
      allowed: true,
      action: "log",
      metadata: {
        checks: results
      }
    };
  }
  checkRateLimit(context) {
    /* istanbul ignore next */
    cov_2oxqfgjyto().f[6]++;
    const key =
    /* istanbul ignore next */
    (cov_2oxqfgjyto().s[33]++,
    /* istanbul ignore next */
    (cov_2oxqfgjyto().b[12][0]++, context.ipAddress) ||
    /* istanbul ignore next */
    (cov_2oxqfgjyto().b[12][1]++, context.userId) ||
    /* istanbul ignore next */
    (cov_2oxqfgjyto().b[12][2]++, "anonymous"));
    const now =
    /* istanbul ignore next */
    (cov_2oxqfgjyto().s[34]++, Date.now());
    const windowStart =
    /* istanbul ignore next */
    (cov_2oxqfgjyto().s[35]++, now - 60 * 1000) // 1 minute window
    ;
    const current =
    /* istanbul ignore next */
    (cov_2oxqfgjyto().s[36]++, this.requestCounts.get(key));
    /* istanbul ignore next */
    cov_2oxqfgjyto().s[37]++;
    if (
    /* istanbul ignore next */
    (cov_2oxqfgjyto().b[14][0]++, !current) ||
    /* istanbul ignore next */
    (cov_2oxqfgjyto().b[14][1]++, current.resetTime < now)) {
      /* istanbul ignore next */
      cov_2oxqfgjyto().b[13][0]++;
      cov_2oxqfgjyto().s[38]++;
      this.requestCounts.set(key, {
        count: 1,
        resetTime: now + 60 * 1000
      });
      /* istanbul ignore next */
      cov_2oxqfgjyto().s[39]++;
      return {
        allowed: true,
        action: "log"
      };
    } else
    /* istanbul ignore next */
    {
      cov_2oxqfgjyto().b[13][1]++;
    }
    cov_2oxqfgjyto().s[40]++;
    if (current.count >= this.config.maxRequestsPerMinute) {
      /* istanbul ignore next */
      cov_2oxqfgjyto().b[15][0]++;
      cov_2oxqfgjyto().s[41]++;
      return {
        allowed: false,
        reason: "Rate limit exceeded",
        action: "block",
        metadata: {
          limit: this.config.maxRequestsPerMinute,
          current: current.count
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_2oxqfgjyto().b[15][1]++;
    }
    cov_2oxqfgjyto().s[42]++;
    current.count++;
    /* istanbul ignore next */
    cov_2oxqfgjyto().s[43]++;
    return {
      allowed: true,
      action: "log"
    };
  }
  async validateCSRF(token, context) {
    /* istanbul ignore next */
    cov_2oxqfgjyto().f[7]++;
    const isValid =
    /* istanbul ignore next */
    (cov_2oxqfgjyto().s[44]++, _security.securityService.validateCSRFToken(token));
    /* istanbul ignore next */
    cov_2oxqfgjyto().s[45]++;
    if (!isValid) {
      /* istanbul ignore next */
      cov_2oxqfgjyto().b[16][0]++;
      cov_2oxqfgjyto().s[46]++;
      await this.logSecurityEvent(context, "csrf_validation_failed", {
        token
      });
      /* istanbul ignore next */
      cov_2oxqfgjyto().s[47]++;
      return {
        allowed: false,
        reason: "Invalid CSRF token",
        action: "block"
      };
    } else
    /* istanbul ignore next */
    {
      cov_2oxqfgjyto().b[16][1]++;
    }
    cov_2oxqfgjyto().s[48]++;
    return {
      allowed: true,
      action: "log"
    };
  }
  async validateSession(context) {
    /* istanbul ignore next */
    cov_2oxqfgjyto().f[8]++;
    cov_2oxqfgjyto().s[49]++;
    if (!context.sessionId) {
      /* istanbul ignore next */
      cov_2oxqfgjyto().b[17][0]++;
      cov_2oxqfgjyto().s[50]++;
      return {
        allowed: false,
        reason: "No session ID provided",
        action: "block"
      };
    } else
    /* istanbul ignore next */
    {
      cov_2oxqfgjyto().b[17][1]++;
    }
    const isValid =
    /* istanbul ignore next */
    (cov_2oxqfgjyto().s[51]++, _security.securityService.validateSession(context.sessionId));
    /* istanbul ignore next */
    cov_2oxqfgjyto().s[52]++;
    if (!isValid) {
      /* istanbul ignore next */
      cov_2oxqfgjyto().b[18][0]++;
      cov_2oxqfgjyto().s[53]++;
      await this.logSecurityEvent(context, "session_validation_failed", {
        sessionId: context.sessionId
      });
      /* istanbul ignore next */
      cov_2oxqfgjyto().s[54]++;
      return {
        allowed: false,
        reason: "Invalid or expired session",
        action: "block"
      };
    } else
    /* istanbul ignore next */
    {
      cov_2oxqfgjyto().b[18][1]++;
    }
    cov_2oxqfgjyto().s[55]++;
    return {
      allowed: true,
      action: "log"
    };
  }
  sanitizeInput(data) {
    /* istanbul ignore next */
    cov_2oxqfgjyto().f[9]++;
    cov_2oxqfgjyto().s[56]++;
    try {
      const sanitized =
      /* istanbul ignore next */
      (cov_2oxqfgjyto().s[57]++, _security.securityService.sanitizeInput(JSON.stringify(data)));
      const hasChanges =
      /* istanbul ignore next */
      (cov_2oxqfgjyto().s[58]++, sanitized !== JSON.stringify(data));
      /* istanbul ignore next */
      cov_2oxqfgjyto().s[59]++;
      return {
        allowed: true,
        action: hasChanges ?
        /* istanbul ignore next */
        (cov_2oxqfgjyto().b[19][0]++, "warn") :
        /* istanbul ignore next */
        (cov_2oxqfgjyto().b[19][1]++, "log"),
        reason: hasChanges ?
        /* istanbul ignore next */
        (cov_2oxqfgjyto().b[20][0]++, "Input was sanitized") :
        /* istanbul ignore next */
        (cov_2oxqfgjyto().b[20][1]++, undefined),
        metadata: {
          sanitized: hasChanges
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2oxqfgjyto().s[60]++;
      return {
        allowed: false,
        reason: "Input sanitization failed",
        action: "block",
        metadata: {
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_2oxqfgjyto().b[21][0]++, error.message) :
          /* istanbul ignore next */
          (cov_2oxqfgjyto().b[21][1]++, "Unknown error")
        }
      };
    }
  }
  async logSecurityEvent(context, event, metadata) {
    /* istanbul ignore next */
    cov_2oxqfgjyto().f[10]++;
    cov_2oxqfgjyto().s[61]++;
    try {
      /* istanbul ignore next */
      cov_2oxqfgjyto().s[62]++;
      await _auditLogService.auditLogService.log({
        userId:
        /* istanbul ignore next */
        (cov_2oxqfgjyto().b[22][0]++, context.userId) ||
        /* istanbul ignore next */
        (cov_2oxqfgjyto().b[22][1]++, "anonymous"),
        action: `security.${event}`,
        resource: "security_middleware",
        details: {
          ...metadata,
          ipAddress: context.ipAddress,
          userAgent: context.userAgent,
          sessionId: context.sessionId
        },
        severity:
        /* istanbul ignore next */
        (cov_2oxqfgjyto().b[23][0]++, metadata.severity) ||
        /* istanbul ignore next */
        (cov_2oxqfgjyto().b[23][1]++, "low"),
        category: "security",
        success: true
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2oxqfgjyto().s[63]++;
      console.error("Failed to log security event:", error);
    }
  }
  // Security headers for HTTP responses
  getSecurityHeaders() {
    /* istanbul ignore next */
    cov_2oxqfgjyto().f[11]++;
    cov_2oxqfgjyto().s[64]++;
    return {
      "X-Content-Type-Options": "nosniff",
      "X-Frame-Options": "DENY",
      "X-XSS-Protection": "1; mode=block",
      "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
      "Referrer-Policy": "strict-origin-when-cross-origin",
      "Content-Security-Policy": _security.securityService.generateCSPHeader(),
      "Permissions-Policy": "camera=(), microphone=(), geolocation=()"
    };
  }
  // Clean up expired rate limit entries
  cleanup() {
    /* istanbul ignore next */
    cov_2oxqfgjyto().f[12]++;
    const now =
    /* istanbul ignore next */
    (cov_2oxqfgjyto().s[65]++, Date.now());
    const keysToDelete =
    /* istanbul ignore next */
    (cov_2oxqfgjyto().s[66]++, []);
    /* istanbul ignore next */
    cov_2oxqfgjyto().s[67]++;
    this.requestCounts.forEach((value, key) => {
      /* istanbul ignore next */
      cov_2oxqfgjyto().f[13]++;
      cov_2oxqfgjyto().s[68]++;
      if (value.resetTime < now) {
        /* istanbul ignore next */
        cov_2oxqfgjyto().b[24][0]++;
        cov_2oxqfgjyto().s[69]++;
        keysToDelete.push(key);
      } else
      /* istanbul ignore next */
      {
        cov_2oxqfgjyto().b[24][1]++;
      }
    });
    /* istanbul ignore next */
    cov_2oxqfgjyto().s[70]++;
    keysToDelete.forEach(key => {
      /* istanbul ignore next */
      cov_2oxqfgjyto().f[14]++;
      cov_2oxqfgjyto().s[71]++;
      return this.requestCounts.delete(key);
    });
  }
  // Get security metrics
  getMetrics() {
    /* istanbul ignore next */
    cov_2oxqfgjyto().f[15]++;
    cov_2oxqfgjyto().s[72]++;
    return {
      activeRateLimits: this.requestCounts.size,
      config: this.config,
      timestamp: new Date().toISOString()
    };
  }
}
const securityMiddleware =
/* istanbul ignore next */
(cov_2oxqfgjyto().s[73]++, new SecurityMiddleware());
// Auto-cleanup every 5 minutes
/* istanbul ignore next */
cov_2oxqfgjyto().s[74]++;
setInterval(() => {
  /* istanbul ignore next */
  cov_2oxqfgjyto().f[16]++;
  cov_2oxqfgjyto().s[75]++;
  securityMiddleware.cleanup();
}, 5 * 60 * 1000);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,