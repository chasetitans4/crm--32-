{"version":3,"names":["default","cov_1ov1lgfgm0","f","s","_default","realTimeService","RealTimeService","initialize","user","currentUser","startHeartbeat","cleanup","channels","forEach","channel","unsubscribe","clear","presenceListeners","updateListeners","editListeners","heartbeatInterval","b","clearInterval","joinPresence","roomId","Error","_supabase","supabase","channelName","get","config","presence","key","id","on","event","presenceState","users","Object","values","flat","map","listener","newPresences","leftPresences","set","subscribe","status","track","user_id","user_name","name","avatar_url","current_page","window","location","pathname","last_seen","Date","toISOString","delete","updatePresence","updates","subscribeToPresence","callback","push","filter","l","startEditing","entityType","entityId","fieldName","edit","entity_type","entity_id","field_name","action","timestamp","broadcastEdit","editing_field","endEditing","undefined","payload","send","type","subscribeToEdits","subscribeToTableUpdates","table","schema","recordId","new","old","updateType","eventType","update","record_id","changes","subscribeToUpdates","setInterval","getCurrentUser","getActiveChannels","Array","from","keys","leaveRoom","channelsToRemove","includes","Map"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\realTimeService.ts"],"sourcesContent":["import { supabase } from \"../lib/supabase\"\r\nimport type { RealtimeChannel } from \"@supabase/supabase-js\"\r\n\r\nexport interface UserPresence {\r\n  user_id: string\r\n  user_name: string\r\n  avatar_url?: string\r\n  status: \"online\" | \"away\" | \"busy\" | \"offline\"\r\n  current_page?: string\r\n  last_seen: string\r\n  cursor_position?: { x: number; y: number }\r\n  editing_field?: string\r\n}\r\n\r\nexport interface CollaborativeEdit {\r\n  id: string\r\n  user_id: string\r\n  user_name: string\r\n  entity_type: \"client\" | \"task\" | \"event\" | \"project\"\r\n  entity_id: string\r\n  field_name: string\r\n  action: \"start_edit\" | \"end_edit\" | \"typing\"\r\n  timestamp: string\r\n}\r\n\r\nexport interface RealTimeUpdate {\r\n  id: string\r\n  type: \"create\" | \"update\" | \"delete\"\r\n  table: string\r\n  record_id: string\r\n  user_id: string\r\n  user_name: string\r\n  changes?: Record<string, any>\r\n  timestamp: string\r\n}\r\n\r\nclass RealTimeService {\r\n  private channels: Map<string, RealtimeChannel> = new Map()\r\n  private presenceListeners: Array<(presence: UserPresence[]) => void> = []\r\n  private updateListeners: Array<(update: RealTimeUpdate) => void> = []\r\n  private editListeners: Array<(edit: CollaborativeEdit) => void> = []\r\n  private currentUser: { id: string; name: string; avatar_url?: string } | null = null\r\n  private heartbeatInterval: NodeJS.Timeout | null = null\r\n\r\n  // Initialize the service with current user\r\n  initialize(user: { id: string; name: string; avatar_url?: string }) {\r\n    this.currentUser = user\r\n    this.startHeartbeat()\r\n  }\r\n\r\n  // Cleanup when user logs out\r\n  cleanup() {\r\n    this.channels.forEach((channel) => channel.unsubscribe())\r\n    this.channels.clear()\r\n    this.presenceListeners = []\r\n    this.updateListeners = []\r\n    this.editListeners = []\r\n    if (this.heartbeatInterval) {\r\n      clearInterval(this.heartbeatInterval)\r\n      this.heartbeatInterval = null\r\n    }\r\n    this.currentUser = null\r\n  }\r\n\r\n  // Presence management\r\n  async joinPresence(roomId = \"global\"): Promise<() => void> {\r\n    if (!this.currentUser) {\r\n      throw new Error(\"User not initialized. Call initialize() first.\")\r\n    }\r\n\r\n    if (!supabase) {\r\n      throw new Error('Supabase client is not initialized');\r\n    }\r\n\r\n    const channelName = `presence:${roomId}`\r\n    let channel = this.channels.get(channelName)\r\n\r\n    if (!channel) {\r\n      channel = supabase.channel(channelName, {\r\n        config: {\r\n          presence: {\r\n            key: this.currentUser.id,\r\n          },\r\n        },\r\n      })\r\n\r\n      // Track presence changes\r\n      if (channel) {\r\n        channel\r\n          .on(\"presence\", { event: \"sync\" }, () => {\r\n            if (!channel) return;\r\n            const presenceState = channel.presenceState()\r\n            const users: UserPresence[] = Object.values(presenceState)\r\n              .flat()\r\n              .map((presence: any) => presence as UserPresence)\r\n\r\n            this.presenceListeners.forEach((listener) => listener(users))\r\n          })\r\n          .on(\"presence\", { event: \"join\" }, ({ key, newPresences }) => {\r\n            // Silent logging: User joined\r\n          })\r\n          .on(\"presence\", { event: \"leave\" }, ({ key, leftPresences }) => {\r\n            // Silent logging: User left\r\n          })\r\n      }\r\n\r\n      this.channels.set(channelName, channel)\r\n    }\r\n\r\n    // Join with current user presence\r\n    if (channel) {\r\n      await channel.subscribe(async (status) => {\r\n        if (status === \"SUBSCRIBED\") {\r\n          await channel.track({\r\n            user_id: this.currentUser!.id,\r\n            user_name: this.currentUser!.name,\r\n            avatar_url: this.currentUser!.avatar_url,\r\n            status: \"online\",\r\n            current_page: window.location.pathname,\r\n            last_seen: new Date().toISOString(),\r\n          })\r\n        }\r\n      })\r\n    }\r\n\r\n    return () => {\r\n      if (channel) {\r\n        channel.unsubscribe()\r\n        this.channels.delete(channelName)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Update user presence\r\n  async updatePresence(\r\n    roomId = \"global\",\r\n    updates: Partial<Pick<UserPresence, \"status\" | \"current_page\" | \"cursor_position\" | \"editing_field\" | \"last_seen\">>,\r\n  ) {\r\n    if (!this.currentUser) return\r\n\r\n    const channelName = `presence:${roomId}`\r\n    const channel = this.channels.get(channelName)\r\n\r\n    if (channel) {\r\n      await channel.track({\r\n        user_id: this.currentUser.id,\r\n        user_name: this.currentUser.name,\r\n        avatar_url: this.currentUser.avatar_url,\r\n        status: \"online\",\r\n        last_seen: new Date().toISOString(),\r\n        ...updates,\r\n      })\r\n    }\r\n  }\r\n\r\n  // Subscribe to presence changes\r\n  subscribeToPresence(callback: (presence: UserPresence[]) => void): () => void {\r\n    this.presenceListeners.push(callback)\r\n    return () => {\r\n      this.presenceListeners = this.presenceListeners.filter((l) => l !== callback)\r\n    }\r\n  }\r\n\r\n  // Collaborative editing\r\n  async startEditing(\r\n    entityType: CollaborativeEdit[\"entity_type\"],\r\n    entityId: string,\r\n    fieldName: string,\r\n    roomId = \"global\",\r\n  ) {\r\n    if (!this.currentUser) return\r\n\r\n    const edit: CollaborativeEdit = {\r\n      id: `${this.currentUser.id}-${entityId}-${fieldName}`,\r\n      user_id: this.currentUser.id,\r\n      user_name: this.currentUser.name,\r\n      entity_type: entityType,\r\n      entity_id: entityId,\r\n      field_name: fieldName,\r\n      action: \"start_edit\",\r\n      timestamp: new Date().toISOString(),\r\n    }\r\n\r\n    await this.broadcastEdit(edit, roomId)\r\n    await this.updatePresence(roomId, { editing_field: `${entityType}:${entityId}:${fieldName}` })\r\n  }\r\n\r\n  async endEditing(\r\n    entityType: CollaborativeEdit[\"entity_type\"],\r\n    entityId: string,\r\n    fieldName: string,\r\n    roomId = \"global\",\r\n  ) {\r\n    if (!this.currentUser) return\r\n\r\n    const edit: CollaborativeEdit = {\r\n      id: `${this.currentUser.id}-${entityId}-${fieldName}`,\r\n      user_id: this.currentUser.id,\r\n      user_name: this.currentUser.name,\r\n      entity_type: entityType,\r\n      entity_id: entityId,\r\n      field_name: fieldName,\r\n      action: \"end_edit\",\r\n      timestamp: new Date().toISOString(),\r\n    }\r\n\r\n    await this.broadcastEdit(edit, roomId)\r\n    await this.updatePresence(roomId, { editing_field: undefined })\r\n  }\r\n\r\n  private async broadcastEdit(edit: CollaborativeEdit, roomId: string) {\r\n    if (!supabase) {\r\n      throw new Error('Supabase client is not initialized');\r\n    }\r\n\r\n    const channelName = `edits:${roomId}`\r\n    let channel = this.channels.get(channelName)\r\n\r\n    if (!channel) {\r\n      channel = supabase.channel(channelName)\r\n\r\n      channel.on(\"broadcast\", { event: \"edit\" }, (payload) => {\r\n        this.editListeners.forEach((listener) => listener(payload.payload as CollaborativeEdit))\r\n      })\r\n\r\n      await channel.subscribe()\r\n      this.channels.set(channelName, channel)\r\n    }\r\n\r\n    if (channel) {\r\n      await channel.send({\r\n        type: \"broadcast\",\r\n        event: \"edit\",\r\n        payload: edit,\r\n      })\r\n    }\r\n  }\r\n\r\n  // Subscribe to collaborative edits\r\n  subscribeToEdits(callback: (edit: CollaborativeEdit) => void): () => void {\r\n    this.editListeners.push(callback)\r\n    return () => {\r\n      this.editListeners = this.editListeners.filter((l) => l !== callback)\r\n    }\r\n  }\r\n\r\n  // Real-time data updates\r\n  subscribeToTableUpdates(table: string, callback: (update: RealTimeUpdate) => void, filter?: string): () => void {\r\n    if (!supabase) {\r\n      throw new Error('Supabase client is not initialized');\r\n    }\r\n\r\n    const channelName = `updates:${table}`\r\n    let channel = this.channels.get(channelName)\r\n\r\n    if (!channel) {\r\n      channel = supabase.channel(channelName)\r\n  \r\n      const config: any = {\r\n        event: \"*\",\r\n        schema: \"public\",\r\n        table: table,\r\n      }\r\n  \r\n      if (filter) {\r\n        config.filter = filter\r\n      }\r\n  \r\n      channel!.on(\"postgres_changes\", config, (payload) => {\r\n        if (!this.currentUser) return\r\n  \r\n        const recordId = (payload.new as any)?.id || (payload.old as any)?.id || 'unknown'\r\n        let updateType: \"create\" | \"update\" | \"delete\";\r\n        switch (payload.eventType) {\r\n          case \"INSERT\":\r\n            updateType = \"create\";\r\n            break;\r\n          case \"UPDATE\":\r\n            updateType = \"update\";\r\n            break;\r\n          case \"DELETE\":\r\n            updateType = \"delete\";\r\n            break;\r\n          default:\r\n            return;\r\n        }\r\n        const update: RealTimeUpdate = {\r\n          id: `${payload.eventType}-${payload.table}-${recordId}`,\r\n          type: updateType,\r\n          table: payload.table,\r\n          record_id: recordId,\r\n          user_id: this.currentUser.id,\r\n          user_name: this.currentUser.name,\r\n          changes: payload.eventType !== \"DELETE\" ? payload.new : payload.old,\r\n          timestamp: new Date().toISOString(),\r\n        }\r\n  \r\n        this.updateListeners.forEach((listener) => listener(update))\r\n        callback(update)\r\n      })\r\n  \r\n      channel!.subscribe()\r\n      this.channels.set(channelName, channel!)\r\n    }\r\n  \r\n    return () => {\r\n      channel?.unsubscribe()\r\n      this.channels.delete(channelName)\r\n    }\r\n  }\r\n\r\n  // Subscribe to all updates\r\n  subscribeToUpdates(callback: (update: RealTimeUpdate) => void): () => void {\r\n    this.updateListeners.push(callback)\r\n    return () => {\r\n      this.updateListeners = this.updateListeners.filter((l) => l !== callback)\r\n    }\r\n  }\r\n\r\n  // Heartbeat to maintain connection\r\n  private startHeartbeat() {\r\n    this.heartbeatInterval = setInterval(async () => {\r\n      if (this.currentUser) {\r\n        await this.updatePresence(\"global\", {\r\n          last_seen: new Date().toISOString(),\r\n        })\r\n      }\r\n    }, 30000) // Every 30 seconds\r\n  }\r\n\r\n  // Utility methods\r\n  getCurrentUser() {\r\n    return this.currentUser\r\n  }\r\n\r\n  getActiveChannels() {\r\n    return Array.from(this.channels.keys())\r\n  }\r\n\r\n  async leaveRoom(roomId: string) {\r\n    const channelsToRemove = Array.from(this.channels.keys()).filter((name) => name.includes(roomId))\r\n\r\n    for (const channelName of channelsToRemove) {\r\n      const channel = this.channels.get(channelName)\r\n      if (channel) {\r\n        await channel.unsubscribe()\r\n        this.channels.delete(channelName)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const realTimeService = new RealTimeService()\r\nexport default realTimeService\r\n"],"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","ignoreList":[]}