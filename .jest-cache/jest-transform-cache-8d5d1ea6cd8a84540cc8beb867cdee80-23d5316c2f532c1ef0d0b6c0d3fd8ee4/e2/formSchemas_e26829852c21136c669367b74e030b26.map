{"version":3,"names":["clientSchema","cov_27zvhxtd9","f","s","emailTemplateSchema","eventSchema","noteSchema","projectSchema","taskSchema","_zod","z","object","name","string","min","contact","email","phone","stage","value","status","enum","source","optional","title","assignee","dueDate","priority","relatedTo","type","id","number","clientId","projectId","nullable","date","time","content","subject","body","description","startDate","endDate","client"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\schemas\\formSchemas.ts"],"sourcesContent":["import { z } from \"zod\"\n\n// Client schema\nexport const clientSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  contact: z.string().min(2, \"Contact name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().min(7, \"Phone number is required\"),\n  stage: z.string().min(1, \"Stage is required\"),\n  value: z.string().min(1, \"Value is required\"),\n  status: z.enum([\"active\", \"potential\", \"inactive\"]),\n  source: z.string().optional(),\n})\n\nexport type ClientFormValues = z.infer<typeof clientSchema>\n\n// Task schema\nexport const taskSchema = z.object({\n  title: z.string().min(3, \"Title must be at least 3 characters\"),\n  assignee: z.string().min(1, \"Assignee is required\"),\n  dueDate: z.string().min(1, \"Due date is required\"),\n  status: z.enum([\"pending\", \"in-progress\", \"completed\"]),\n  priority: z.enum([\"low\", \"medium\", \"high\"]),\n  relatedTo: z\n    .object({\n      type: z.enum([\"client\", \"project\", \"internal\"]),\n      id: z.number().optional(),\n      clientId: z.string().optional(),\n      projectId: z.number().optional(),\n    })\n    .nullable()\n    .optional(),\n})\n\nexport type TaskFormValues = z.infer<typeof taskSchema>\n\n// Event schema\nexport const eventSchema = z.object({\n  title: z.string().min(3, \"Title must be at least 3 characters\"),\n  date: z.string().min(1, \"Date is required\"),\n  time: z.string().min(1, \"Time is required\"),\n  type: z.enum([\"meeting\", \"call\", \"deadline\", \"internal\"]),\n  relatedTo: z\n    .object({\n      type: z.enum([\"client\", \"internal\"]),\n      id: z.number().optional(),\n    })\n    .nullable()\n    .optional(),\n})\n\nexport type EventFormValues = z.infer<typeof eventSchema>\n\n// Note schema\nexport const noteSchema = z.object({\n  type: z.enum([\"call\", \"email\", \"meeting\"]),\n  content: z.string().min(3, \"Content must be at least 3 characters\"),\n})\n\nexport type NoteFormValues = z.infer<typeof noteSchema>\n\n// Email template schema\nexport const emailTemplateSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  subject: z.string().min(2, \"Subject is required\"),\n  body: z.string().min(10, \"Body must be at least 10 characters\"),\n})\n\nexport type EmailTemplateFormValues = z.infer<typeof emailTemplateSchema>\n\n// Additional schema for Project\nexport const projectSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  description: z.string().optional(),\n  startDate: z.string().min(1, \"Start date is required\"),\n  endDate: z.string().min(1, \"End date is required\"),\n  status: z.enum([\"planned\", \"ongoing\", \"completed\"]),\n  client: z.number().optional(),\n})\n\nexport type ProjectFormValues = z.infer<typeof projectSchema>\n"],"mappings":"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","ignoreList":[]}