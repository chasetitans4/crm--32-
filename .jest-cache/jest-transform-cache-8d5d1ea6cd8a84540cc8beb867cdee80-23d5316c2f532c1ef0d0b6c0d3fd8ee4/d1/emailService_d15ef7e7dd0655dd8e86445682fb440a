e1a86dd31d79c12f8645d8edb7d2a485
"use strict";

/* istanbul ignore next */
function cov_1o2i3u45x7() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\emailService.ts";
  var hash = "1bd4f8f503df33a6adac5f42a6cc51e4e0e3f91d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\emailService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 24
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 28
        }
      },
      "6": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 19,
          column: 44
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 29
        }
      },
      "8": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "9": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 40
        }
      },
      "10": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 36
        }
      },
      "11": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 38,
          column: 15
        }
      },
      "12": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 29
        }
      },
      "13": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 35
        }
      },
      "14": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 37
        }
      },
      "15": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 75
        }
      },
      "16": {
        start: {
          line: 50,
          column: 22
        },
        end: {
          line: 50,
          column: 53
        }
      },
      "17": {
        start: {
          line: 52,
          column: 22
        },
        end: {
          line: 52,
          column: 47
        }
      },
      "18": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "19": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 32
        }
      },
      "20": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 40
        }
      },
      "21": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 54
        }
      },
      "22": {
        start: {
          line: 59,
          column: 29
        },
        end: {
          line: 59,
          column: 50
        }
      },
      "23": {
        start: {
          line: 60,
          column: 31
        },
        end: {
          line: 60,
          column: 71
        }
      },
      "24": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "25": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 34
        }
      },
      "26": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 54
        }
      },
      "27": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "28": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 71,
          column: 14
        }
      },
      "29": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "30": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 79,
          column: 14
        }
      },
      "31": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 84,
          column: 10
        }
      },
      "32": {
        start: {
          line: 87,
          column: 32
        },
        end: {
          line: 87,
          column: 120
        }
      },
      "33": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 110,
          column: 9
        }
      },
      "34": {
        start: {
          line: 90,
          column: 33
        },
        end: {
          line: 97,
          column: 13
        }
      },
      "35": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 108,
          column: 15
        }
      },
      "36": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 32
        }
      },
      "37": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 121,
          column: 10
        }
      },
      "38": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 129,
          column: 33
        }
      },
      "39": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "40": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 136,
          column: 14
        }
      },
      "41": {
        start: {
          line: 138,
          column: 22
        },
        end: {
          line: 138,
          column: 53
        }
      },
      "42": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "43": {
        start: {
          line: 141,
          column: 29
        },
        end: {
          line: 141,
          column: 60
        }
      },
      "44": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 147,
          column: 13
        }
      },
      "45": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 146,
          column: 18
        }
      },
      "46": {
        start: {
          line: 150,
          column: 36
        },
        end: {
          line: 150,
          column: 85
        }
      },
      "47": {
        start: {
          line: 150,
          column: 67
        },
        end: {
          line: 150,
          column: 81
        }
      },
      "48": {
        start: {
          line: 151,
          column: 30
        },
        end: {
          line: 151,
          column: 65
        }
      },
      "49": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 157,
          column: 9
        }
      },
      "50": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 156,
          column: 14
        }
      },
      "51": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 160,
          column: 10
        }
      },
      "52": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "53": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 169,
          column: 14
        }
      },
      "54": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 26
        }
      },
      "55": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 176,
          column: 9
        }
      },
      "56": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 52
        }
      },
      "57": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "58": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 188,
          column: 13
        }
      },
      "59": {
        start: {
          line: 181,
          column: 20
        },
        end: {
          line: 181,
          column: 62
        }
      },
      "60": {
        start: {
          line: 183,
          column: 20
        },
        end: {
          line: 183,
          column: 62
        }
      },
      "61": {
        start: {
          line: 185,
          column: 20
        },
        end: {
          line: 185,
          column: 59
        }
      },
      "62": {
        start: {
          line: 187,
          column: 20
        },
        end: {
          line: 187,
          column: 66
        }
      },
      "63": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 25
        }
      },
      "64": {
        start: {
          line: 196,
          column: 25
        },
        end: {
          line: 200,
          column: 10
        }
      },
      "65": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 27
        }
      },
      "66": {
        start: {
          line: 205,
          column: 25
        },
        end: {
          line: 209,
          column: 10
        }
      },
      "67": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 27
        }
      },
      "68": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 20
        }
      },
      "69": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 221,
          column: 9
        }
      },
      "70": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 59
        }
      },
      "71": {
        start: {
          line: 223,
          column: 27
        },
        end: {
          line: 223,
          column: 61
        }
      },
      "72": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "73": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 47
        }
      },
      "74": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "75": {
        start: {
          line: 229,
          column: 41
        },
        end: {
          line: 229,
          column: 100
        }
      },
      "76": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 232,
          column: 13
        }
      },
      "77": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 61
        }
      },
      "78": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 236,
          column: 13
        }
      },
      "79": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 235,
          column: 118
        }
      },
      "80": {
        start: {
          line: 235,
          column: 87
        },
        end: {
          line: 235,
          column: 115
        }
      },
      "81": {
        start: {
          line: 238,
          column: 29
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "82": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 312,
          column: 9
        }
      },
      "83": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 53
        }
      },
      "84": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 44
        }
      },
      "85": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 46
        }
      },
      "86": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 279,
          column: 13
        }
      },
      "87": {
        start: {
          line: 277,
          column: 39
        },
        end: {
          line: 277,
          column: 101
        }
      },
      "88": {
        start: {
          line: 277,
          column: 83
        },
        end: {
          line: 277,
          column: 97
        }
      },
      "89": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 278,
          column: 79
        }
      },
      "90": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 65
        }
      },
      "91": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 307,
          column: 15
        }
      },
      "92": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 308,
          column: 32
        }
      },
      "93": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 43
        }
      },
      "94": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 311,
          column: 70
        }
      },
      "95": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 327,
          column: 9
        }
      },
      "96": {
        start: {
          line: 317,
          column: 16
        },
        end: {
          line: 317,
          column: 51
        }
      },
      "97": {
        start: {
          line: 318,
          column: 16
        },
        end: {
          line: 318,
          column: 22
        }
      },
      "98": {
        start: {
          line: 320,
          column: 16
        },
        end: {
          line: 320,
          column: 51
        }
      },
      "99": {
        start: {
          line: 321,
          column: 16
        },
        end: {
          line: 321,
          column: 22
        }
      },
      "100": {
        start: {
          line: 323,
          column: 16
        },
        end: {
          line: 323,
          column: 48
        }
      },
      "101": {
        start: {
          line: 324,
          column: 16
        },
        end: {
          line: 324,
          column: 22
        }
      },
      "102": {
        start: {
          line: 326,
          column: 16
        },
        end: {
          line: 326,
          column: 62
        }
      },
      "103": {
        start: {
          line: 330,
          column: 22
        },
        end: {
          line: 330,
          column: 57
        }
      },
      "104": {
        start: {
          line: 331,
          column: 25
        },
        end: {
          line: 338,
          column: 10
        }
      },
      "105": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 341,
          column: 9
        }
      },
      "106": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 340,
          column: 73
        }
      },
      "107": {
        start: {
          line: 344,
          column: 22
        },
        end: {
          line: 344,
          column: 57
        }
      },
      "108": {
        start: {
          line: 345,
          column: 25
        },
        end: {
          line: 354,
          column: 10
        }
      },
      "109": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 357,
          column: 9
        }
      },
      "110": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 356,
          column: 73
        }
      },
      "111": {
        start: {
          line: 365,
          column: 8
        },
        end: {
          line: 386,
          column: 10
        }
      },
      "112": {
        start: {
          line: 372,
          column: 49
        },
        end: {
          line: 374,
          column: 25
        }
      },
      "113": {
        start: {
          line: 375,
          column: 50
        },
        end: {
          line: 377,
          column: 25
        }
      },
      "114": {
        start: {
          line: 378,
          column: 52
        },
        end: {
          line: 380,
          column: 25
        }
      },
      "115": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 411,
          column: 10
        }
      },
      "116": {
        start: {
          line: 395,
          column: 51
        },
        end: {
          line: 399,
          column: 17
        }
      },
      "117": {
        start: {
          line: 400,
          column: 52
        },
        end: {
          line: 404,
          column: 17
        }
      },
      "118": {
        start: {
          line: 405,
          column: 54
        },
        end: {
          line: 409,
          column: 17
        }
      },
      "119": {
        start: {
          line: 416,
          column: 20
        },
        end: {
          line: 416,
          column: 30
        }
      },
      "120": {
        start: {
          line: 417,
          column: 25
        },
        end: {
          line: 417,
          column: 38
        }
      },
      "121": {
        start: {
          line: 418,
          column: 8
        },
        end: {
          line: 418,
          column: 49
        }
      },
      "122": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 419,
          column: 38
        }
      },
      "123": {
        start: {
          line: 420,
          column: 32
        },
        end: {
          line: 420,
          column: 66
        }
      },
      "124": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 425,
          column: 28
        }
      },
      "125": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 422,
          column: 30
        }
      },
      "126": {
        start: {
          line: 424,
          column: 12
        },
        end: {
          line: 424,
          column: 68
        }
      },
      "127": {
        start: {
          line: 424,
          column: 28
        },
        end: {
          line: 424,
          column: 45
        }
      },
      "128": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 438,
          column: 9
        }
      },
      "129": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 434,
          column: 13
        }
      },
      "130": {
        start: {
          line: 431,
          column: 16
        },
        end: {
          line: 431,
          column: 46
        }
      },
      "131": {
        start: {
          line: 432,
          column: 16
        },
        end: {
          line: 432,
          column: 51
        }
      },
      "132": {
        start: {
          line: 433,
          column: 16
        },
        end: {
          line: 433,
          column: 50
        }
      },
      "133": {
        start: {
          line: 441,
          column: 27
        },
        end: {
          line: 441,
          column: 37
        }
      },
      "134": {
        start: {
          line: 442,
          column: 8
        },
        end: {
          line: 442,
          column: 97
        }
      },
      "135": {
        start: {
          line: 443,
          column: 31
        },
        end: {
          line: 443,
          column: 41
        }
      },
      "136": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 444,
          column: 109
        }
      },
      "137": {
        start: {
          line: 446,
          column: 8
        },
        end: {
          line: 446,
          column: 121
        }
      },
      "138": {
        start: {
          line: 448,
          column: 8
        },
        end: {
          line: 448,
          column: 126
        }
      },
      "139": {
        start: {
          line: 451,
          column: 23
        },
        end: {
          line: 451,
          column: 33
        }
      },
      "140": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 452,
          column: 90
        }
      },
      "141": {
        start: {
          line: 454,
          column: 36
        },
        end: {
          line: 454,
          column: 180
        }
      },
      "142": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 471,
          column: 9
        }
      },
      "143": {
        start: {
          line: 456,
          column: 12
        },
        end: {
          line: 470,
          column: 13
        }
      },
      "144": {
        start: {
          line: 458,
          column: 39
        },
        end: {
          line: 458,
          column: 100
        }
      },
      "145": {
        start: {
          line: 458,
          column: 77
        },
        end: {
          line: 458,
          column: 91
        }
      },
      "146": {
        start: {
          line: 459,
          column: 33
        },
        end: {
          line: 459,
          column: 63
        }
      },
      "147": {
        start: {
          line: 461,
          column: 16
        },
        end: {
          line: 463,
          column: 38
        }
      },
      "148": {
        start: {
          line: 465,
          column: 16
        },
        end: {
          line: 469,
          column: 17
        }
      },
      "149": {
        start: {
          line: 466,
          column: 34
        },
        end: {
          line: 466,
          column: 72
        }
      },
      "150": {
        start: {
          line: 467,
          column: 20
        },
        end: {
          line: 467,
          column: 82
        }
      },
      "151": {
        start: {
          line: 468,
          column: 20
        },
        end: {
          line: 468,
          column: 69
        }
      },
      "152": {
        start: {
          line: 474,
          column: 8
        },
        end: {
          line: 474,
          column: 77
        }
      },
      "153": {
        start: {
          line: 474,
          column: 33
        },
        end: {
          line: 474,
          column: 77
        }
      },
      "154": {
        start: {
          line: 475,
          column: 23
        },
        end: {
          line: 475,
          column: 33
        }
      },
      "155": {
        start: {
          line: 476,
          column: 8
        },
        end: {
          line: 476,
          column: 92
        }
      },
      "156": {
        start: {
          line: 477,
          column: 8
        },
        end: {
          line: 477,
          column: 118
        }
      },
      "157": {
        start: {
          line: 481,
          column: 28
        },
        end: {
          line: 487,
          column: 9
        }
      },
      "158": {
        start: {
          line: 488,
          column: 26
        },
        end: {
          line: 501,
          column: 10
        }
      },
      "159": {
        start: {
          line: 502,
          column: 8
        },
        end: {
          line: 504,
          column: 9
        }
      },
      "160": {
        start: {
          line: 503,
          column: 12
        },
        end: {
          line: 503,
          column: 75
        }
      },
      "161": {
        start: {
          line: 505,
          column: 8
        },
        end: {
          line: 505,
          column: 27
        }
      },
      "162": {
        start: {
          line: 508,
          column: 20
        },
        end: {
          line: 508,
          column: 110
        }
      },
      "163": {
        start: {
          line: 509,
          column: 8
        },
        end: {
          line: 511,
          column: 9
        }
      },
      "164": {
        start: {
          line: 510,
          column: 12
        },
        end: {
          line: 510,
          column: 51
        }
      },
      "165": {
        start: {
          line: 512,
          column: 32
        },
        end: {
          line: 512,
          column: 43
        }
      },
      "166": {
        start: {
          line: 513,
          column: 8
        },
        end: {
          line: 515,
          column: 9
        }
      },
      "167": {
        start: {
          line: 514,
          column: 12
        },
        end: {
          line: 514,
          column: 73
        }
      },
      "168": {
        start: {
          line: 516,
          column: 8
        },
        end: {
          line: 529,
          column: 16
        }
      },
      "169": {
        start: {
          line: 516,
          column: 45
        },
        end: {
          line: 529,
          column: 13
        }
      },
      "170": {
        start: {
          line: 532,
          column: 25
        },
        end: {
          line: 532,
          column: 59
        }
      },
      "171": {
        start: {
          line: 533,
          column: 8
        },
        end: {
          line: 535,
          column: 9
        }
      },
      "172": {
        start: {
          line: 534,
          column: 12
        },
        end: {
          line: 534,
          column: 50
        }
      },
      "173": {
        start: {
          line: 536,
          column: 22
        },
        end: {
          line: 536,
          column: 38
        }
      },
      "174": {
        start: {
          line: 537,
          column: 19
        },
        end: {
          line: 537,
          column: 32
        }
      },
      "175": {
        start: {
          line: 539,
          column: 8
        },
        end: {
          line: 543,
          column: 11
        }
      },
      "176": {
        start: {
          line: 540,
          column: 32
        },
        end: {
          line: 540,
          column: 44
        }
      },
      "177": {
        start: {
          line: 541,
          column: 12
        },
        end: {
          line: 541,
          column: 75
        }
      },
      "178": {
        start: {
          line: 542,
          column: 12
        },
        end: {
          line: 542,
          column: 69
        }
      },
      "179": {
        start: {
          line: 545,
          column: 8
        },
        end: {
          line: 547,
          column: 32
        }
      },
      "180": {
        start: {
          line: 548,
          column: 8
        },
        end: {
          line: 551,
          column: 10
        }
      },
      "181": {
        start: {
          line: 554,
          column: 32
        },
        end: {
          line: 554,
          column: 114
        }
      },
      "182": {
        start: {
          line: 555,
          column: 8
        },
        end: {
          line: 555,
          column: 31
        }
      },
      "183": {
        start: {
          line: 555,
          column: 19
        },
        end: {
          line: 555,
          column: 31
        }
      },
      "184": {
        start: {
          line: 556,
          column: 8
        },
        end: {
          line: 569,
          column: 10
        }
      },
      "185": {
        start: {
          line: 573,
          column: 8
        },
        end: {
          line: 575,
          column: 9
        }
      },
      "186": {
        start: {
          line: 574,
          column: 12
        },
        end: {
          line: 574,
          column: 45
        }
      },
      "187": {
        start: {
          line: 576,
          column: 8
        },
        end: {
          line: 578,
          column: 26
        }
      },
      "188": {
        start: {
          line: 577,
          column: 12
        },
        end: {
          line: 577,
          column: 30
        }
      },
      "189": {
        start: {
          line: 581,
          column: 8
        },
        end: {
          line: 581,
          column: 38
        }
      },
      "190": {
        start: {
          line: 581,
          column: 31
        },
        end: {
          line: 581,
          column: 38
        }
      },
      "191": {
        start: {
          line: 582,
          column: 8
        },
        end: {
          line: 591,
          column: 9
        }
      },
      "192": {
        start: {
          line: 584,
          column: 12
        },
        end: {
          line: 588,
          column: 13
        }
      },
      "193": {
        start: {
          line: 586,
          column: 20
        },
        end: {
          line: 586,
          column: 51
        }
      },
      "194": {
        start: {
          line: 587,
          column: 20
        },
        end: {
          line: 587,
          column: 26
        }
      },
      "195": {
        start: {
          line: 599,
          column: 20
        },
        end: {
          line: 599,
          column: 89
        }
      },
      "196": {
        start: {
          line: 600,
          column: 8
        },
        end: {
          line: 602,
          column: 9
        }
      },
      "197": {
        start: {
          line: 601,
          column: 12
        },
        end: {
          line: 601,
          column: 122
        }
      },
      "198": {
        start: {
          line: 603,
          column: 32
        },
        end: {
          line: 603,
          column: 43
        }
      },
      "199": {
        start: {
          line: 604,
          column: 8
        },
        end: {
          line: 606,
          column: 9
        }
      },
      "200": {
        start: {
          line: 605,
          column: 12
        },
        end: {
          line: 605,
          column: 73
        }
      },
      "201": {
        start: {
          line: 607,
          column: 23
        },
        end: {
          line: 607,
          column: 33
        }
      },
      "202": {
        start: {
          line: 608,
          column: 21
        },
        end: {
          line: 608,
          column: 67
        }
      },
      "203": {
        start: {
          line: 608,
          column: 40
        },
        end: {
          line: 608,
          column: 59
        }
      },
      "204": {
        start: {
          line: 609,
          column: 23
        },
        end: {
          line: 609,
          column: 59
        }
      },
      "205": {
        start: {
          line: 609,
          column: 42
        },
        end: {
          line: 609,
          column: 51
        }
      },
      "206": {
        start: {
          line: 610,
          column: 24
        },
        end: {
          line: 610,
          column: 70
        }
      },
      "207": {
        start: {
          line: 610,
          column: 43
        },
        end: {
          line: 610,
          column: 62
        }
      },
      "208": {
        start: {
          line: 611,
          column: 24
        },
        end: {
          line: 611,
          column: 70
        }
      },
      "209": {
        start: {
          line: 611,
          column: 43
        },
        end: {
          line: 611,
          column: 62
        }
      },
      "210": {
        start: {
          line: 612,
          column: 24
        },
        end: {
          line: 612,
          column: 72
        }
      },
      "211": {
        start: {
          line: 612,
          column: 43
        },
        end: {
          line: 612,
          column: 64
        }
      },
      "212": {
        start: {
          line: 613,
          column: 8
        },
        end: {
          line: 625,
          column: 10
        }
      },
      "213": {
        start: {
          line: 629,
          column: 22
        },
        end: {
          line: 629,
          column: 53
        }
      },
      "214": {
        start: {
          line: 630,
          column: 8
        },
        end: {
          line: 646,
          column: 10
        }
      },
      "215": {
        start: {
          line: 650,
          column: 8
        },
        end: {
          line: 652,
          column: 9
        }
      },
      "216": {
        start: {
          line: 651,
          column: 12
        },
        end: {
          line: 651,
          column: 45
        }
      },
      "217": {
        start: {
          line: 655,
          column: 8
        },
        end: {
          line: 655,
          column: 27
        }
      },
      "218": {
        start: {
          line: 656,
          column: 8
        },
        end: {
          line: 656,
          column: 33
        }
      },
      "219": {
        start: {
          line: 657,
          column: 8
        },
        end: {
          line: 657,
          column: 33
        }
      },
      "220": {
        start: {
          line: 659,
          column: 8
        },
        end: {
          line: 664,
          column: 10
        }
      },
      "221": {
        start: {
          line: 666,
          column: 8
        },
        end: {
          line: 674,
          column: 10
        }
      },
      "222": {
        start: {
          line: 677,
          column: 21
        },
        end: {
          line: 677,
          column: 39
        }
      },
      "223": {
        start: {
          line: 678,
          column: 17
        },
        end: {
          line: 678,
          column: 29
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 19
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 24
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 28
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 22
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 34
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 49
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 86,
            column: 5
          }
        },
        loc: {
          start: {
            line: 86,
            column: 31
          },
          end: {
            line: 122,
            column: 5
          }
        },
        line: 86
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        loc: {
          start: {
            line: 123,
            column: 41
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 123
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        },
        loc: {
          start: {
            line: 132,
            column: 51
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 132
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 150,
            column: 55
          },
          end: {
            line: 150,
            column: 56
          }
        },
        loc: {
          start: {
            line: 150,
            column: 67
          },
          end: {
            line: 150,
            column: 81
          }
        },
        line: 150
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 162,
            column: 4
          },
          end: {
            line: 162,
            column: 5
          }
        },
        loc: {
          start: {
            line: 162,
            column: 41
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 162
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 173,
            column: 4
          },
          end: {
            line: 173,
            column: 5
          }
        },
        loc: {
          start: {
            line: 173,
            column: 27
          },
          end: {
            line: 193,
            column: 5
          }
        },
        line: 173
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 194,
            column: 5
          }
        },
        loc: {
          start: {
            line: 194,
            column: 34
          },
          end: {
            line: 202,
            column: 5
          }
        },
        line: 194
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 203,
            column: 4
          },
          end: {
            line: 203,
            column: 5
          }
        },
        loc: {
          start: {
            line: 203,
            column: 34
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 203
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 212,
            column: 5
          }
        },
        loc: {
          start: {
            line: 212,
            column: 31
          },
          end: {
            line: 216,
            column: 5
          }
        },
        line: 212
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        },
        loc: {
          start: {
            line: 218,
            column: 37
          },
          end: {
            line: 313,
            column: 5
          }
        },
        line: 218
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 235,
            column: 80
          },
          end: {
            line: 235,
            column: 81
          }
        },
        loc: {
          start: {
            line: 235,
            column: 87
          },
          end: {
            line: 235,
            column: 115
          }
        },
        line: 235
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 277,
            column: 71
          },
          end: {
            line: 277,
            column: 72
          }
        },
        loc: {
          start: {
            line: 277,
            column: 83
          },
          end: {
            line: 277,
            column: 97
          }
        },
        line: 277
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 314,
            column: 4
          },
          end: {
            line: 314,
            column: 5
          }
        },
        loc: {
          start: {
            line: 314,
            column: 35
          },
          end: {
            line: 328,
            column: 5
          }
        },
        line: 314
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 329,
            column: 4
          },
          end: {
            line: 329,
            column: 5
          }
        },
        loc: {
          start: {
            line: 329,
            column: 34
          },
          end: {
            line: 342,
            column: 5
          }
        },
        line: 329
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 343,
            column: 4
          },
          end: {
            line: 343,
            column: 5
          }
        },
        loc: {
          start: {
            line: 343,
            column: 34
          },
          end: {
            line: 358,
            column: 5
          }
        },
        line: 343
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 359,
            column: 4
          },
          end: {
            line: 359,
            column: 5
          }
        },
        loc: {
          start: {
            line: 359,
            column: 31
          },
          end: {
            line: 363,
            column: 5
          }
        },
        line: 359
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 364,
            column: 4
          },
          end: {
            line: 364,
            column: 5
          }
        },
        loc: {
          start: {
            line: 364,
            column: 35
          },
          end: {
            line: 387,
            column: 5
          }
        },
        line: 364
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 372,
            column: 39
          },
          end: {
            line: 372,
            column: 40
          }
        },
        loc: {
          start: {
            line: 372,
            column: 49
          },
          end: {
            line: 374,
            column: 25
          }
        },
        line: 372
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 375,
            column: 40
          },
          end: {
            line: 375,
            column: 41
          }
        },
        loc: {
          start: {
            line: 375,
            column: 50
          },
          end: {
            line: 377,
            column: 25
          }
        },
        line: 375
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 378,
            column: 42
          },
          end: {
            line: 378,
            column: 43
          }
        },
        loc: {
          start: {
            line: 378,
            column: 52
          },
          end: {
            line: 380,
            column: 25
          }
        },
        line: 378
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 388,
            column: 4
          },
          end: {
            line: 388,
            column: 5
          }
        },
        loc: {
          start: {
            line: 388,
            column: 35
          },
          end: {
            line: 412,
            column: 5
          }
        },
        line: 388
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 395,
            column: 41
          },
          end: {
            line: 395,
            column: 42
          }
        },
        loc: {
          start: {
            line: 395,
            column: 51
          },
          end: {
            line: 399,
            column: 17
          }
        },
        line: 395
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 400,
            column: 42
          },
          end: {
            line: 400,
            column: 43
          }
        },
        loc: {
          start: {
            line: 400,
            column: 52
          },
          end: {
            line: 404,
            column: 17
          }
        },
        line: 400
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 405,
            column: 44
          },
          end: {
            line: 405,
            column: 45
          }
        },
        loc: {
          start: {
            line: 405,
            column: 54
          },
          end: {
            line: 409,
            column: 17
          }
        },
        line: 405
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 414,
            column: 4
          },
          end: {
            line: 414,
            column: 5
          }
        },
        loc: {
          start: {
            line: 414,
            column: 22
          },
          end: {
            line: 426,
            column: 5
          }
        },
        line: 414
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 421,
            column: 19
          },
          end: {
            line: 421,
            column: 20
          }
        },
        loc: {
          start: {
            line: 421,
            column: 23
          },
          end: {
            line: 425,
            column: 9
          }
        },
        line: 421
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 424,
            column: 24
          },
          end: {
            line: 424,
            column: 25
          }
        },
        loc: {
          start: {
            line: 424,
            column: 28
          },
          end: {
            line: 424,
            column: 45
          }
        },
        line: 424
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 427,
            column: 4
          },
          end: {
            line: 427,
            column: 5
          }
        },
        loc: {
          start: {
            line: 427,
            column: 23
          },
          end: {
            line: 439,
            column: 5
          }
        },
        line: 427
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 440,
            column: 4
          },
          end: {
            line: 440,
            column: 5
          }
        },
        loc: {
          start: {
            line: 440,
            column: 29
          },
          end: {
            line: 449,
            column: 5
          }
        },
        line: 440
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 450,
            column: 4
          },
          end: {
            line: 450,
            column: 5
          }
        },
        loc: {
          start: {
            line: 450,
            column: 34
          },
          end: {
            line: 472,
            column: 5
          }
        },
        line: 450
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 458,
            column: 65
          },
          end: {
            line: 458,
            column: 66
          }
        },
        loc: {
          start: {
            line: 458,
            column: 77
          },
          end: {
            line: 458,
            column: 91
          }
        },
        line: 458
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 473,
            column: 4
          },
          end: {
            line: 473,
            column: 5
          }
        },
        loc: {
          start: {
            line: 473,
            column: 33
          },
          end: {
            line: 478,
            column: 5
          }
        },
        line: 473
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 480,
            column: 4
          },
          end: {
            line: 480,
            column: 5
          }
        },
        loc: {
          start: {
            line: 480,
            column: 35
          },
          end: {
            line: 506,
            column: 5
          }
        },
        line: 480
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 507,
            column: 4
          },
          end: {
            line: 507,
            column: 5
          }
        },
        loc: {
          start: {
            line: 507,
            column: 33
          },
          end: {
            line: 530,
            column: 5
          }
        },
        line: 507
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 516,
            column: 32
          },
          end: {
            line: 516,
            column: 33
          }
        },
        loc: {
          start: {
            line: 516,
            column: 45
          },
          end: {
            line: 529,
            column: 13
          }
        },
        line: 516
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 531,
            column: 4
          },
          end: {
            line: 531,
            column: 5
          }
        },
        loc: {
          start: {
            line: 531,
            column: 48
          },
          end: {
            line: 552,
            column: 5
          }
        },
        line: 531
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 539,
            column: 42
          },
          end: {
            line: 539,
            column: 43
          }
        },
        loc: {
          start: {
            line: 539,
            column: 58
          },
          end: {
            line: 543,
            column: 9
          }
        },
        line: 539
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 553,
            column: 4
          },
          end: {
            line: 553,
            column: 5
          }
        },
        loc: {
          start: {
            line: 553,
            column: 26
          },
          end: {
            line: 570,
            column: 5
          }
        },
        line: 553
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 572,
            column: 4
          },
          end: {
            line: 572,
            column: 5
          }
        },
        loc: {
          start: {
            line: 572,
            column: 16
          },
          end: {
            line: 579,
            column: 5
          }
        },
        line: 572
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 576,
            column: 40
          },
          end: {
            line: 576,
            column: 41
          }
        },
        loc: {
          start: {
            line: 576,
            column: 44
          },
          end: {
            line: 578,
            column: 9
          }
        },
        line: 576
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 580,
            column: 4
          },
          end: {
            line: 580,
            column: 5
          }
        },
        loc: {
          start: {
            line: 580,
            column: 23
          },
          end: {
            line: 592,
            column: 5
          }
        },
        line: 580
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 593,
            column: 4
          },
          end: {
            line: 593,
            column: 5
          }
        },
        loc: {
          start: {
            line: 593,
            column: 30
          },
          end: {
            line: 596,
            column: 5
          }
        },
        line: 593
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 598,
            column: 4
          },
          end: {
            line: 598,
            column: 5
          }
        },
        loc: {
          start: {
            line: 598,
            column: 34
          },
          end: {
            line: 626,
            column: 5
          }
        },
        line: 598
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 608,
            column: 35
          },
          end: {
            line: 608,
            column: 36
          }
        },
        loc: {
          start: {
            line: 608,
            column: 40
          },
          end: {
            line: 608,
            column: 59
          }
        },
        line: 608
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 609,
            column: 37
          },
          end: {
            line: 609,
            column: 38
          }
        },
        loc: {
          start: {
            line: 609,
            column: 42
          },
          end: {
            line: 609,
            column: 51
          }
        },
        line: 609
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 610,
            column: 38
          },
          end: {
            line: 610,
            column: 39
          }
        },
        loc: {
          start: {
            line: 610,
            column: 43
          },
          end: {
            line: 610,
            column: 62
          }
        },
        line: 610
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 611,
            column: 38
          },
          end: {
            line: 611,
            column: 39
          }
        },
        loc: {
          start: {
            line: 611,
            column: 43
          },
          end: {
            line: 611,
            column: 62
          }
        },
        line: 611
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 612,
            column: 38
          },
          end: {
            line: 612,
            column: 39
          }
        },
        loc: {
          start: {
            line: 612,
            column: 43
          },
          end: {
            line: 612,
            column: 64
          }
        },
        line: 612
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 628,
            column: 4
          },
          end: {
            line: 628,
            column: 5
          }
        },
        loc: {
          start: {
            line: 628,
            column: 33
          },
          end: {
            line: 647,
            column: 5
          }
        },
        line: 628
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 649,
            column: 4
          },
          end: {
            line: 649,
            column: 5
          }
        },
        loc: {
          start: {
            line: 649,
            column: 14
          },
          end: {
            line: 653,
            column: 5
          }
        },
        line: 649
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 654,
            column: 4
          },
          end: {
            line: 654,
            column: 5
          }
        },
        loc: {
          start: {
            line: 654,
            column: 17
          },
          end: {
            line: 675,
            column: 5
          }
        },
        line: 654
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "1": {
        loc: {
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 64,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 64,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "2": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "3": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "4": {
        loc: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "5": {
        loc: {
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 88,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 88,
            column: 17
          }
        }, {
          start: {
            line: 88,
            column: 21
          },
          end: {
            line: 88,
            column: 26
          }
        }],
        line: 88
      },
      "6": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "7": {
        loc: {
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 133,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 133,
            column: 24
          }
        }, {
          start: {
            line: 133,
            column: 28
          },
          end: {
            line: 133,
            column: 52
          }
        }],
        line: 133
      },
      "8": {
        loc: {
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "9": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "10": {
        loc: {
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "11": {
        loc: {
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 164,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 164,
            column: 55
          }
        }, {
          start: {
            line: 164,
            column: 59
          },
          end: {
            line: 164,
            column: 88
          }
        }],
        line: 164
      },
      "12": {
        loc: {
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "13": {
        loc: {
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 188,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 180,
            column: 16
          },
          end: {
            line: 181,
            column: 62
          }
        }, {
          start: {
            line: 182,
            column: 16
          },
          end: {
            line: 183,
            column: 62
          }
        }, {
          start: {
            line: 184,
            column: 16
          },
          end: {
            line: 185,
            column: 59
          }
        }, {
          start: {
            line: 186,
            column: 16
          },
          end: {
            line: 187,
            column: 66
          }
        }],
        line: 179
      },
      "14": {
        loc: {
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 221,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 221,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "15": {
        loc: {
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "16": {
        loc: {
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 237,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 237,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "17": {
        loc: {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 232,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 232,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "18": {
        loc: {
          start: {
            line: 234,
            column: 12
          },
          end: {
            line: 236,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 12
          },
          end: {
            line: 236,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 234
      },
      "19": {
        loc: {
          start: {
            line: 240,
            column: 18
          },
          end: {
            line: 240,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 240,
            column: 18
          },
          end: {
            line: 240,
            column: 39
          }
        }, {
          start: {
            line: 240,
            column: 43
          },
          end: {
            line: 240,
            column: 45
          }
        }],
        line: 240
      },
      "20": {
        loc: {
          start: {
            line: 241,
            column: 16
          },
          end: {
            line: 241,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 241,
            column: 16
          },
          end: {
            line: 241,
            column: 26
          }
        }, {
          start: {
            line: 241,
            column: 30
          },
          end: {
            line: 241,
            column: 32
          }
        }],
        line: 241
      },
      "21": {
        loc: {
          start: {
            line: 244,
            column: 21
          },
          end: {
            line: 244,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 244,
            column: 21
          },
          end: {
            line: 244,
            column: 36
          }
        }, {
          start: {
            line: 244,
            column: 40
          },
          end: {
            line: 244,
            column: 42
          }
        }],
        line: 244
      },
      "22": {
        loc: {
          start: {
            line: 245,
            column: 18
          },
          end: {
            line: 245,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 245,
            column: 18
          },
          end: {
            line: 245,
            column: 30
          }
        }, {
          start: {
            line: 245,
            column: 34
          },
          end: {
            line: 245,
            column: 36
          }
        }],
        line: 245
      },
      "23": {
        loc: {
          start: {
            line: 246,
            column: 22
          },
          end: {
            line: 246,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 246,
            column: 22
          },
          end: {
            line: 246,
            column: 38
          }
        }, {
          start: {
            line: 246,
            column: 42
          },
          end: {
            line: 246,
            column: 48
          }
        }],
        line: 246
      },
      "24": {
        loc: {
          start: {
            line: 248,
            column: 22
          },
          end: {
            line: 248,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 248,
            column: 22
          },
          end: {
            line: 248,
            column: 38
          }
        }, {
          start: {
            line: 248,
            column: 42
          },
          end: {
            line: 248,
            column: 50
          }
        }],
        line: 248
      },
      "25": {
        loc: {
          start: {
            line: 257,
            column: 20
          },
          end: {
            line: 257,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 257,
            column: 20
          },
          end: {
            line: 257,
            column: 34
          }
        }, {
          start: {
            line: 257,
            column: 38
          },
          end: {
            line: 257,
            column: 40
          }
        }],
        line: 257
      },
      "26": {
        loc: {
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 279,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 279,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      },
      "27": {
        loc: {
          start: {
            line: 315,
            column: 8
          },
          end: {
            line: 327,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 316,
            column: 12
          },
          end: {
            line: 318,
            column: 22
          }
        }, {
          start: {
            line: 319,
            column: 12
          },
          end: {
            line: 321,
            column: 22
          }
        }, {
          start: {
            line: 322,
            column: 12
          },
          end: {
            line: 324,
            column: 22
          }
        }, {
          start: {
            line: 325,
            column: 12
          },
          end: {
            line: 326,
            column: 62
          }
        }],
        line: 315
      },
      "28": {
        loc: {
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 341,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 341,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 339
      },
      "29": {
        loc: {
          start: {
            line: 355,
            column: 8
          },
          end: {
            line: 357,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 355,
            column: 8
          },
          end: {
            line: 357,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 355
      },
      "30": {
        loc: {
          start: {
            line: 369,
            column: 31
          },
          end: {
            line: 369,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 369,
            column: 31
          },
          end: {
            line: 369,
            column: 52
          }
        }, {
          start: {
            line: 369,
            column: 56
          },
          end: {
            line: 369,
            column: 58
          }
        }],
        line: 369
      },
      "31": {
        loc: {
          start: {
            line: 375,
            column: 24
          },
          end: {
            line: 377,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 375,
            column: 24
          },
          end: {
            line: 377,
            column: 27
          }
        }, {
          start: {
            line: 377,
            column: 31
          },
          end: {
            line: 377,
            column: 33
          }
        }],
        line: 375
      },
      "32": {
        loc: {
          start: {
            line: 378,
            column: 25
          },
          end: {
            line: 380,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 378,
            column: 25
          },
          end: {
            line: 380,
            column: 27
          }
        }, {
          start: {
            line: 380,
            column: 31
          },
          end: {
            line: 380,
            column: 33
          }
        }],
        line: 378
      },
      "33": {
        loc: {
          start: {
            line: 382,
            column: 30
          },
          end: {
            line: 382,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 382,
            column: 60
          },
          end: {
            line: 382,
            column: 72
          }
        }, {
          start: {
            line: 382,
            column: 75
          },
          end: {
            line: 382,
            column: 84
          }
        }],
        line: 382
      },
      "34": {
        loc: {
          start: {
            line: 383,
            column: 30
          },
          end: {
            line: 383,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 383,
            column: 60
          },
          end: {
            line: 383,
            column: 72
          }
        }, {
          start: {
            line: 383,
            column: 75
          },
          end: {
            line: 383,
            column: 84
          }
        }],
        line: 383
      },
      "35": {
        loc: {
          start: {
            line: 392,
            column: 29
          },
          end: {
            line: 392,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 392,
            column: 59
          },
          end: {
            line: 392,
            column: 65
          }
        }, {
          start: {
            line: 392,
            column: 68
          },
          end: {
            line: 392,
            column: 74
          }
        }],
        line: 392
      },
      "36": {
        loc: {
          start: {
            line: 400,
            column: 26
          },
          end: {
            line: 404,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 400,
            column: 26
          },
          end: {
            line: 404,
            column: 19
          }
        }, {
          start: {
            line: 404,
            column: 23
          },
          end: {
            line: 404,
            column: 25
          }
        }],
        line: 400
      },
      "37": {
        loc: {
          start: {
            line: 405,
            column: 27
          },
          end: {
            line: 409,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 405,
            column: 27
          },
          end: {
            line: 409,
            column: 19
          }
        }, {
          start: {
            line: 409,
            column: 23
          },
          end: {
            line: 409,
            column: 25
          }
        }],
        line: 405
      },
      "38": {
        loc: {
          start: {
            line: 410,
            column: 24
          },
          end: {
            line: 410,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 410,
            column: 54
          },
          end: {
            line: 410,
            column: 60
          }
        }, {
          start: {
            line: 410,
            column: 63
          },
          end: {
            line: 410,
            column: 108
          }
        }],
        line: 410
      },
      "39": {
        loc: {
          start: {
            line: 410,
            column: 63
          },
          end: {
            line: 410,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 410,
            column: 92
          },
          end: {
            line: 410,
            column: 97
          }
        }, {
          start: {
            line: 410,
            column: 100
          },
          end: {
            line: 410,
            column: 108
          }
        }],
        line: 410
      },
      "40": {
        loc: {
          start: {
            line: 430,
            column: 12
          },
          end: {
            line: 434,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 430,
            column: 12
          },
          end: {
            line: 434,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 430
      },
      "41": {
        loc: {
          start: {
            line: 455,
            column: 8
          },
          end: {
            line: 471,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 455,
            column: 8
          },
          end: {
            line: 471,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 455
      },
      "42": {
        loc: {
          start: {
            line: 458,
            column: 39
          },
          end: {
            line: 458,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 458,
            column: 39
          },
          end: {
            line: 458,
            column: 95
          }
        }, {
          start: {
            line: 458,
            column: 99
          },
          end: {
            line: 458,
            column: 100
          }
        }],
        line: 458
      },
      "43": {
        loc: {
          start: {
            line: 465,
            column: 16
          },
          end: {
            line: 469,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 465,
            column: 16
          },
          end: {
            line: 469,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 465
      },
      "44": {
        loc: {
          start: {
            line: 474,
            column: 8
          },
          end: {
            line: 474,
            column: 77
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 474,
            column: 8
          },
          end: {
            line: 474,
            column: 77
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 474
      },
      "45": {
        loc: {
          start: {
            line: 502,
            column: 8
          },
          end: {
            line: 504,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 502,
            column: 8
          },
          end: {
            line: 504,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 502
      },
      "46": {
        loc: {
          start: {
            line: 509,
            column: 8
          },
          end: {
            line: 511,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 509,
            column: 8
          },
          end: {
            line: 511,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 509
      },
      "47": {
        loc: {
          start: {
            line: 513,
            column: 8
          },
          end: {
            line: 515,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 513,
            column: 8
          },
          end: {
            line: 515,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 513
      },
      "48": {
        loc: {
          start: {
            line: 516,
            column: 16
          },
          end: {
            line: 516,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 516,
            column: 16
          },
          end: {
            line: 516,
            column: 20
          }
        }, {
          start: {
            line: 516,
            column: 24
          },
          end: {
            line: 516,
            column: 26
          }
        }],
        line: 516
      },
      "49": {
        loc: {
          start: {
            line: 523,
            column: 27
          },
          end: {
            line: 523,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 523,
            column: 27
          },
          end: {
            line: 523,
            column: 45
          }
        }, {
          start: {
            line: 523,
            column: 49
          },
          end: {
            line: 523,
            column: 51
          }
        }],
        line: 523
      },
      "50": {
        loc: {
          start: {
            line: 533,
            column: 8
          },
          end: {
            line: 535,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 533,
            column: 8
          },
          end: {
            line: 535,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 533
      },
      "51": {
        loc: {
          start: {
            line: 555,
            column: 8
          },
          end: {
            line: 555,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 555,
            column: 8
          },
          end: {
            line: 555,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 555
      },
      "52": {
        loc: {
          start: {
            line: 563,
            column: 23
          },
          end: {
            line: 563,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 563,
            column: 23
          },
          end: {
            line: 563,
            column: 37
          }
        }, {
          start: {
            line: 563,
            column: 41
          },
          end: {
            line: 563,
            column: 43
          }
        }],
        line: 563
      },
      "53": {
        loc: {
          start: {
            line: 573,
            column: 8
          },
          end: {
            line: 575,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 573,
            column: 8
          },
          end: {
            line: 575,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 573
      },
      "54": {
        loc: {
          start: {
            line: 581,
            column: 8
          },
          end: {
            line: 581,
            column: 38
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 581,
            column: 8
          },
          end: {
            line: 581,
            column: 38
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 581
      },
      "55": {
        loc: {
          start: {
            line: 584,
            column: 12
          },
          end: {
            line: 588,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 585,
            column: 16
          },
          end: {
            line: 587,
            column: 26
          }
        }],
        line: 584
      },
      "56": {
        loc: {
          start: {
            line: 600,
            column: 8
          },
          end: {
            line: 602,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 600,
            column: 8
          },
          end: {
            line: 602,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 600
      },
      "57": {
        loc: {
          start: {
            line: 604,
            column: 8
          },
          end: {
            line: 606,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 604,
            column: 8
          },
          end: {
            line: 606,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 604
      },
      "58": {
        loc: {
          start: {
            line: 607,
            column: 23
          },
          end: {
            line: 607,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 607,
            column: 23
          },
          end: {
            line: 607,
            column: 27
          }
        }, {
          start: {
            line: 607,
            column: 31
          },
          end: {
            line: 607,
            column: 33
          }
        }],
        line: 607
      },
      "59": {
        loc: {
          start: {
            line: 621,
            column: 22
          },
          end: {
            line: 621,
            column: 56
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 621,
            column: 33
          },
          end: {
            line: 621,
            column: 52
          }
        }, {
          start: {
            line: 621,
            column: 55
          },
          end: {
            line: 621,
            column: 56
          }
        }],
        line: 621
      },
      "60": {
        loc: {
          start: {
            line: 622,
            column: 23
          },
          end: {
            line: 622,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 622,
            column: 36
          },
          end: {
            line: 622,
            column: 58
          }
        }, {
          start: {
            line: 622,
            column: 61
          },
          end: {
            line: 622,
            column: 62
          }
        }],
        line: 622
      },
      "61": {
        loc: {
          start: {
            line: 623,
            column: 23
          },
          end: {
            line: 623,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 623,
            column: 34
          },
          end: {
            line: 623,
            column: 54
          }
        }, {
          start: {
            line: 623,
            column: 57
          },
          end: {
            line: 623,
            column: 58
          }
        }],
        line: 623
      },
      "62": {
        loc: {
          start: {
            line: 624,
            column: 24
          },
          end: {
            line: 624,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 624,
            column: 35
          },
          end: {
            line: 624,
            column: 55
          }
        }, {
          start: {
            line: 624,
            column: 58
          },
          end: {
            line: 624,
            column: 59
          }
        }],
        line: 624
      },
      "63": {
        loc: {
          start: {
            line: 650,
            column: 8
          },
          end: {
            line: 652,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 650,
            column: 8
          },
          end: {
            line: 652,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 650
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0, 0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\emailService.ts"],
      sourcesContent: ["import { supabase } from \"../lib/supabase\"\nimport type { Database } from \"../lib/supabase\"\n\ntype Tables<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Row\"]\n\nexport interface EmailConfig {\n  provider: \"mailjet\" | \"outlook\" | \"smtp\"\n  smtpHost?: string\n  smtpPort?: number\n  smtpSecure?: boolean\n  username: string\n  password?: string\n  accessToken?: string\n  refreshToken?: string\n  clientId?: string\n  clientSecret?: string\n}\n\nexport interface EmailMessage {\n  id: string\n  from: string\n  to: string[]\n  cc?: string[]\n  bcc?: string[]\n  subject: string\n  body: string\n  bodyType: \"text\" | \"html\"\n  attachments?: EmailAttachment[]\n  priority: \"low\" | \"normal\" | \"high\"\n  readReceipt?: boolean\n  deliveryReceipt?: boolean\n  scheduledAt?: string\n  sentAt?: string\n  status: \"draft\" | \"scheduled\" | \"sent\" | \"failed\" | \"delivered\" | \"read\"\n  threadId?: string\n  inReplyTo?: string\n  references?: string[]\n  labels?: string[]\n  folder: string\n  isRead: boolean\n  isStarred: boolean\n  isImportant: boolean\n  clientId?: string\n  projectId?: string\n  taskId?: string\n  metadata?: Record<string, any>\n  created_at: string\n  updated_at: string\n}\n\nexport interface EmailAttachment {\n  id: string\n  filename: string\n  contentType: string\n  size: number\n  data?: string // base64 encoded\n  url?: string\n  cid?: string // for inline attachments\n}\n\nexport interface EmailTemplate {\n  id: string\n  name: string\n  subject: string\n  body: string\n  bodyType: \"text\" | \"html\"\n  category: string\n  variables: string[]\n  isActive: boolean\n  usage_count: number\n  created_by: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface EmailAutomation {\n  id: string\n  name: string\n  trigger: {\n    type: \"schedule\" | \"event\" | \"condition\"\n    schedule?: string // cron expression\n    event?: string\n    condition?: Record<string, any>\n  }\n  actions: EmailAutomationAction[]\n  isActive: boolean\n  lastRun?: string\n  nextRun?: string\n  runCount: number\n  created_at: string\n  updated_at: string\n}\n\nexport interface EmailAutomationAction {\n  type: \"send_email\" | \"add_label\" | \"move_folder\" | \"create_task\" | \"update_client\"\n  templateId?: string\n  recipients?: string[]\n  data?: Record<string, any>\n}\n\nexport interface EmailSignature {\n  id: string\n  name: string\n  content: string\n  isDefault: boolean\n  created_at: string\n}\n\nexport interface EmailAnalytics {\n  sent: number\n  received: number\n  opened: number\n  clicked: number\n  replied: number\n  bounced: number\n  unsubscribed: number\n  openRate: number\n  clickRate: number\n  replyRate: number\n  bounceRate: number\n}\n\nexport interface EmailQuota {\n  userId: string\n  dailyLimit: number\n  monthlyLimit: number\n  dailySent: number\n  monthlySent: number\n  lastResetDate: string\n  attachmentSizeLimit: number // in MB\n  storageUsed: number // in MB\n  storageLimit: number // in MB\n}\n\nexport interface EmailRetentionPolicy {\n  sentEmailRetentionDays: number\n  receivedEmailRetentionDays: number\n  attachmentRetentionDays: number\n  deletedEmailRetentionDays: number\n  maxAttachmentSize: number // in MB\n  compressAttachments: boolean\n  autoDeleteOldEmails: boolean\n}\n\nclass EmailService {\n  private config: EmailConfig | null = null\n  private isConnected = false\n  private syncInterval: NodeJS.Timeout | null = null\n\n  // Email quotas - moderate limits\n  private readonly DEFAULT_QUOTAS = {\n    dailyLimit: 100,\n    monthlyLimit: 2000,\n    attachmentSizeLimit: 10, // 10MB per attachment\n    storageLimit: 500, // 500MB total storage per user\n  }\n\n  // Retention policies\n  private readonly DEFAULT_RETENTION: EmailRetentionPolicy = {\n    sentEmailRetentionDays: 365, // 1 year\n    receivedEmailRetentionDays: 365, // 1 year\n    attachmentRetentionDays: 180, // 6 months\n    deletedEmailRetentionDays: 30, // 30 days in trash\n    maxAttachmentSize: 10, // 10MB\n    compressAttachments: true,\n    autoDeleteOldEmails: true,\n  }\n\n  // Configuration\n  async configure(config: EmailConfig): Promise<void> {\n    this.config = config\n\n    try {\n      await this.testConnection()\n      this.isConnected = true\n\n      // Save configuration\n      await (supabase as any).from(\"email_configs\").upsert({\n        provider: config.provider,\n        username: config.username,\n        smtp_host: config.smtpHost,\n        smtp_port: config.smtpPort,\n        smtp_secure: config.smtpSecure,\n        access_token: config.accessToken,\n        refresh_token: config.refreshToken,\n        client_id: config.clientId,\n        updated_at: new Date().toISOString(),\n      } as any)\n\n      // Start sync if not already running\n      this.startSync()\n\n      // Start cleanup job\n      this.startCleanupJob()\n    } catch (error: any) {\n      this.isConnected = false\n      throw new Error(`Failed to configure email: ${error.message}`)\n    }\n  }\n\n  // Quota Management\n  async checkEmailQuota(userId: string): Promise<{ canSend: boolean; reason?: string; quota: EmailQuota }> {\n    const quota = await this.getUserQuota(userId)\n\n    // Reset daily counter if needed\n    const today = new Date().toDateString()\n    if (quota.lastResetDate !== today) {\n      quota.dailySent = 0\n      quota.lastResetDate = today\n      await this.updateUserQuota(userId, quota)\n    }\n\n    // Reset monthly counter if needed\n    const currentMonth = new Date().getMonth()\n    const lastResetMonth = new Date(quota.lastResetDate).getMonth()\n    if (currentMonth !== lastResetMonth) {\n      quota.monthlySent = 0\n      await this.updateUserQuota(userId, quota)\n    }\n\n    // Check daily limit\n    if (quota.dailySent >= quota.dailyLimit) {\n      return {\n        canSend: false,\n        reason: `Daily email limit reached (${quota.dailyLimit}). Resets tomorrow.`,\n        quota,\n      }\n    }\n\n    // Check monthly limit\n    if (quota.monthlySent >= quota.monthlyLimit) {\n      return {\n        canSend: false,\n        reason: `Monthly email limit reached (${quota.monthlyLimit}). Resets next month.`,\n        quota,\n      }\n    }\n\n    return { canSend: true, quota }\n  }\n\n  async getUserQuota(userId: string): Promise<EmailQuota> {\n    const { data, error } = await (supabase as any).from(\"email_quotas\").select(\"*\").eq(\"user_id\", userId).single()\n\n    if (error || !data) {\n      // Create default quota for new user\n      const defaultQuota: EmailQuota = {\n        userId,\n        ...this.DEFAULT_QUOTAS,\n        dailySent: 0,\n        monthlySent: 0,\n        lastResetDate: new Date().toDateString(),\n        storageUsed: 0,\n      }\n\n      await (supabase as any).from(\"email_quotas\").insert({\n        user_id: userId,\n        daily_limit: defaultQuota.dailyLimit,\n        monthly_limit: defaultQuota.monthlyLimit,\n        daily_sent: defaultQuota.dailySent,\n        monthly_sent: defaultQuota.monthlySent,\n        last_reset_date: defaultQuota.lastResetDate,\n        attachment_size_limit: defaultQuota.attachmentSizeLimit,\n        storage_used: defaultQuota.storageUsed,\n        storage_limit: defaultQuota.storageLimit,\n      } as any)\n\n      return defaultQuota\n    }\n\n    return {\n      userId: data.user_id,\n      dailyLimit: data.daily_limit,\n      monthlyLimit: data.monthly_limit,\n      dailySent: data.daily_sent,\n      monthlySent: data.monthly_sent,\n      lastResetDate: data.last_reset_date,\n      attachmentSizeLimit: data.attachment_size_limit,\n      storageUsed: data.storage_used,\n      storageLimit: data.storage_limit,\n    }\n  }\n\n  async updateUserQuota(userId: string, quota: EmailQuota): Promise<void> {\n    await (supabase as any)\n      .from(\"email_quotas\")\n      .update({\n        daily_sent: quota.dailySent,\n        monthly_sent: quota.monthlySent,\n        last_reset_date: quota.lastResetDate,\n        storage_used: quota.storageUsed,\n      } as any)\n      .eq(\"user_id\", userId)\n  }\n\n  // Attachment Management with Size Limits\n  async validateAttachments(\n    attachments: EmailAttachment[],\n    userId: string,\n  ): Promise<{ valid: boolean; reason?: string }> {\n    if (!attachments || attachments.length === 0) {\n      return { valid: true }\n    }\n\n    const quota = await this.getUserQuota(userId)\n\n    // Check individual attachment size\n    for (const attachment of attachments) {\n      const sizeInMB = attachment.size / (1024 * 1024)\n      if (sizeInMB > quota.attachmentSizeLimit) {\n        return {\n          valid: false,\n          reason: `Attachment \"${attachment.filename}\" exceeds size limit of ${quota.attachmentSizeLimit}MB`,\n        }\n      }\n    }\n\n    // Check total storage usage\n    const totalAttachmentSize = attachments.reduce((sum, att) => sum + att.size, 0)\n    const totalSizeInMB = totalAttachmentSize / (1024 * 1024)\n\n    if (quota.storageUsed + totalSizeInMB > quota.storageLimit) {\n      return {\n        valid: false,\n        reason: `Storage limit exceeded. Available: ${(quota.storageLimit - quota.storageUsed).toFixed(1)}MB, Required: ${totalSizeInMB.toFixed(1)}MB`,\n      }\n    }\n\n    return { valid: true }\n  }\n\n  async compressAttachment(attachment: EmailAttachment): Promise<EmailAttachment> {\n    // Simple compression simulation - in real implementation, use image compression libraries\n    if (attachment.contentType.startsWith(\"image/\") && attachment.size > 1024 * 1024) {\n      return {\n        ...attachment,\n        size: Math.floor(attachment.size * 0.7), // Simulate 30% compression\n        filename: attachment.filename.replace(/(\\.[^.]+)$/, \"_compressed$1\"),\n      }\n    }\n    return attachment\n  }\n\n  async testConnection(): Promise<boolean> {\n    if (!this.config) {\n      throw new Error(\"Email not configured\")\n    }\n\n    try {\n      // Test connection based on provider\n      switch (this.config.provider) {\n        case \"mailjet\":\n          return await this.testMailjetConnection()\n        case \"outlook\":\n          return await this.testOutlookConnection()\n        case \"smtp\":\n          return await this.testSmtpConnection()\n        default:\n          throw new Error(\"Unsupported email provider\")\n      }\n    } catch (error) {\n      // Silent error handling - Email connection test failed\n      return false\n    }\n  }\n\n  private async testMailjetConnection(): Promise<boolean> {\n    // Test Mailjet API connection\n    const response = await fetch(\"https://api.mailjet.com/v3/REST/contact\", {\n      headers: {\n        Authorization: `Basic ${btoa(`${this.config?.clientId}:${this.config?.clientSecret}`)}`,\n      },\n    })\n    return response.ok\n  }\n\n  private async testOutlookConnection(): Promise<boolean> {\n    // Test Outlook API connection\n    const response = await fetch(\"https://graph.microsoft.com/v1.0/me\", {\n      headers: {\n        Authorization: `Bearer ${this.config?.accessToken}`,\n      },\n    })\n    return response.ok\n  }\n\n  private async testSmtpConnection(): Promise<boolean> {\n    // For SMTP, we'll simulate a connection test\n    // In a real implementation, you'd test the SMTP connection\n    return true\n  }\n\n  // Email Operations with Quota Checks\n  async sendEmail(message: Partial<EmailMessage>, userId: string): Promise<EmailMessage> {\n    if (!this.isConnected) {\n      throw new Error(\"Email service not connected\")\n    }\n\n    // Check quota\n    const quotaCheck = await this.checkEmailQuota(userId)\n    if (!quotaCheck.canSend) {\n      throw new Error(quotaCheck.reason)\n    }\n\n    // Validate attachments\n    if (message.attachments) {\n      const attachmentValidation = await this.validateAttachments(message.attachments, userId)\n      if (!attachmentValidation.valid) {\n        throw new Error(attachmentValidation.reason)\n      }\n\n      // Compress attachments if enabled\n      if (this.DEFAULT_RETENTION.compressAttachments) {\n        message.attachments = await Promise.all(message.attachments.map((att) => this.compressAttachment(att)))\n      }\n    }\n\n    const emailMessage: EmailMessage = {\n      id: crypto.randomUUID(),\n      from: this.config?.username || \"\",\n      to: message.to || [],\n      cc: message.cc,\n      bcc: message.bcc,\n      subject: message.subject || \"\",\n      body: message.body || \"\",\n      bodyType: message.bodyType || \"html\",\n      attachments: message.attachments,\n      priority: message.priority || \"normal\",\n      readReceipt: message.readReceipt,\n      deliveryReceipt: message.deliveryReceipt,\n      scheduledAt: message.scheduledAt,\n      sentAt: new Date().toISOString(),\n      status: \"sent\",\n      threadId: message.threadId,\n      inReplyTo: message.inReplyTo,\n      references: message.references,\n      labels: message.labels || [],\n      folder: \"sent\",\n      isRead: true,\n      isStarred: false,\n      isImportant: false,\n      clientId: message.clientId,\n      projectId: message.projectId,\n      taskId: message.taskId,\n      metadata: message.metadata,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n    }\n\n    try {\n      // Send email based on provider\n      await this.sendViaProvider(emailMessage)\n\n      // Update quota\n      quotaCheck.quota.dailySent += 1\n      quotaCheck.quota.monthlySent += 1\n\n      // Update storage usage\n      if (emailMessage.attachments) {\n        const attachmentSize = emailMessage.attachments.reduce((sum, att) => sum + att.size, 0)\n        quotaCheck.quota.storageUsed += attachmentSize / (1024 * 1024)\n      }\n\n      await this.updateUserQuota(userId, quotaCheck.quota)\n\n      // Save to database\n      await (supabase as any).from(\"emails\").insert({\n        id: emailMessage.id,\n        from_email: emailMessage.from,\n        to_email: emailMessage.to,\n        cc_email: emailMessage.cc,\n        bcc_email: emailMessage.bcc,\n        subject: emailMessage.subject,\n        body: emailMessage.body,\n        body_type: emailMessage.bodyType,\n        attachments: emailMessage.attachments,\n        priority: emailMessage.priority,\n        status: emailMessage.status,\n        thread_id: emailMessage.threadId,\n        folder: emailMessage.folder,\n        is_read: emailMessage.isRead,\n        is_starred: emailMessage.isStarred,\n        is_important: emailMessage.isImportant,\n        client_id: emailMessage.clientId,\n        project_id: emailMessage.projectId,\n        task_id: emailMessage.taskId,\n        metadata: emailMessage.metadata,\n        sent_at: emailMessage.sentAt,\n        created_at: emailMessage.created_at,\n        updated_at: emailMessage.updated_at,\n        user_id: userId,\n      } as any)\n\n      return emailMessage\n    } catch (error: any) {\n      emailMessage.status = \"failed\"\n      throw new Error(`Failed to send email: ${error.message}`)\n    }\n  }\n\n  private async sendViaProvider(message: EmailMessage): Promise<void> {\n    switch (this.config?.provider) {\n      case \"mailjet\":\n        await this.sendViaMailjet(message)\n        break\n      case \"outlook\":\n        await this.sendViaOutlook(message)\n        break\n      case \"smtp\":\n        await this.sendViaSmtp(message)\n        break\n      default:\n        throw new Error(\"Unsupported email provider\")\n    }\n  }\n\n  private async sendViaMailjet(message: EmailMessage): Promise<void> {\n    const email = this.formatEmailForMailjet(message)\n\n    const response = await fetch(\"https://api.mailjet.com/v3.1/send\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Basic ${btoa(`${this.config?.clientId}:${this.config?.clientSecret}`)}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(email),\n    })\n\n    if (!response.ok) {\n      throw new Error(`Mailjet API error: ${response.statusText}`)\n    }\n  }\n\n  private async sendViaOutlook(message: EmailMessage): Promise<void> {\n    const email = this.formatEmailForOutlook(message)\n\n    const response = await fetch(\"https://graph.microsoft.com/v1.0/me/sendMail\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${this.config?.accessToken}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ message: email }),\n    })\n\n    if (!response.ok) {\n      throw new Error(`Outlook API error: ${response.statusText}`)\n    }\n  }\n\n  private async sendViaSmtp(message: EmailMessage): Promise<void> {\n    // SMTP implementation would go here\n    // For now, we'll simulate sending\n    // Silent logging - Sending via SMTP\n  }\n\n  private formatEmailForMailjet(message: EmailMessage): any {\n    return {\n      Messages: [\n        {\n          From: {\n            Email: this.config?.username || \"\",\n            Name: \"CRM System\",\n          },\n          To: message.to.map((email) => ({ Email: email })),\n          Cc: message.cc?.map((email) => ({ Email: email })) || [],\n          Bcc: message.bcc?.map((email) => ({ Email: email })) || [],\n          Subject: message.subject,\n          HTMLPart: message.bodyType === \"html\" ? message.body : undefined,\n          TextPart: message.bodyType === \"text\" ? message.body : undefined,\n        },\n      ],\n    }\n  }\n\n  private formatEmailForOutlook(message: EmailMessage): any {\n    return {\n      subject: message.subject,\n      body: {\n        contentType: message.bodyType === \"html\" ? \"HTML\" : \"Text\",\n        content: message.body,\n      },\n      toRecipients: message.to.map((email) => ({ emailAddress: { address: email } })),\n      ccRecipients: message.cc?.map((email) => ({ emailAddress: { address: email } })) || [],\n      bccRecipients: message.bcc?.map((email) => ({ emailAddress: { address: email } })) || [],\n      importance: message.priority === \"high\" ? \"high\" : message.priority === \"low\" ? \"low\" : \"normal\",\n    }\n  }\n\n  // Cleanup and Retention\n  private startCleanupJob(): void {\n    // Run cleanup daily at 2 AM\n    const now = new Date()\n    const tomorrow = new Date(now)\n    tomorrow.setDate(tomorrow.getDate() + 1)\n    tomorrow.setHours(2, 0, 0, 0)\n\n    const msUntilTomorrow = tomorrow.getTime() - now.getTime()\n\n    setTimeout(() => {\n      this.runCleanup()\n      // Then run every 24 hours\n      setInterval(() => this.runCleanup(), 24 * 60 * 60 * 1000)\n    }, msUntilTomorrow)\n  }\n\n  private async runCleanup(): Promise<void> {\n    try {\n      // Silent logging - Starting email cleanup job\n\n      if (this.DEFAULT_RETENTION.autoDeleteOldEmails) {\n        await this.cleanupOldEmails()\n        await this.cleanupOldAttachments()\n        await this.cleanupDeletedEmails()\n      }\n\n      // Silent logging - Email cleanup job completed\n    } catch (error) {\n      // Silent error handling - Email cleanup job failed\n    }\n  }\n\n  private async cleanupOldEmails(): Promise<void> {\n    const sentCutoff = new Date()\n    sentCutoff.setDate(sentCutoff.getDate() - this.DEFAULT_RETENTION.sentEmailRetentionDays)\n\n    const receivedCutoff = new Date()\n    receivedCutoff.setDate(receivedCutoff.getDate() - this.DEFAULT_RETENTION.receivedEmailRetentionDays)\n\n    // Delete old sent emails\n    await (supabase as any).from(\"emails\").delete().eq(\"folder\", \"sent\").lt(\"created_at\", sentCutoff.toISOString())\n\n    // Delete old received emails\n    await (supabase as any).from(\"emails\").delete().eq(\"folder\", \"inbox\").lt(\"created_at\", receivedCutoff.toISOString())\n  }\n\n  private async cleanupOldAttachments(): Promise<void> {\n    const cutoff = new Date()\n    cutoff.setDate(cutoff.getDate() - this.DEFAULT_RETENTION.attachmentRetentionDays)\n\n    // Get emails with attachments older than retention period\n    const { data: oldEmails } = await (supabase as any)\n      .from(\"emails\")\n      .select(\"id, attachments, user_id\")\n      .not(\"attachments\", \"is\", null)\n      .lt(\"created_at\", cutoff.toISOString())\n\n    if (oldEmails) {\n      for (const email of oldEmails as any[]) {\n        // Calculate storage to be freed\n        const attachmentSize = (email as any).attachments?.reduce((sum: number, att: any) => sum + att.size, 0) || 0\n        const sizeInMB = attachmentSize / (1024 * 1024)\n\n        // Remove attachments from email\n        await (supabase as any).from(\"emails\").update({ attachments: null } as any).eq(\"id\", (email as any).id)\n\n        // Update user storage quota\n        if ((email as any).user_id) {\n          const quota = await this.getUserQuota((email as any).user_id)\n          quota.storageUsed = Math.max(0, quota.storageUsed - sizeInMB)\n          await this.updateUserQuota((email as any).user_id, quota)\n        }\n      }\n    }\n  }\n\n  private async cleanupDeletedEmails(): Promise<void> {\n    if (!supabase) throw new Error('Database not initialized')\n    \n    const cutoff = new Date()\n    cutoff.setDate(cutoff.getDate() - this.DEFAULT_RETENTION.deletedEmailRetentionDays)\n\n    await supabase.from(\"emails\").delete().eq(\"folder\", \"trash\").lt(\"updated_at\", cutoff.toISOString())\n  }\n\n  // Email Templates\n  async createTemplate(\n    template: Omit<EmailTemplate, \"id\" | \"usage_count\" | \"created_at\" | \"updated_at\">,\n  ): Promise<EmailTemplate> {\n    const newTemplate: EmailTemplate = {\n      id: crypto.randomUUID(),\n      usage_count: 0,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      ...template,\n    }\n\n    const { error } = await (supabase as any).from(\"email_templates\").insert({\n      id: newTemplate.id,\n      name: newTemplate.name,\n      subject: newTemplate.subject,\n      body: newTemplate.body,\n      body_type: newTemplate.bodyType,\n      category: newTemplate.category,\n      variables: newTemplate.variables,\n      is_active: newTemplate.isActive,\n      usage_count: newTemplate.usage_count,\n      created_by: newTemplate.created_by,\n      created_at: newTemplate.created_at,\n      updated_at: newTemplate.updated_at,\n    } as any)\n\n    if (error) {\n      throw new Error(`Failed to create template: ${error.message}`)\n    }\n\n    return newTemplate\n  }\n\n  async getTemplates(category?: string): Promise<EmailTemplate[]> {\n    let query = (supabase as any).from(\"email_templates\").select(\"*\").eq(\"is_active\", true).order(\"name\")\n\n    if (category) {\n      query = query.eq(\"category\", category)\n    }\n\n    const { data, error } = await query\n\n    if (error) {\n      throw new Error(`Failed to get templates: ${error.message}`)\n    }\n\n    return (data || []).map((template: any) => ({\n      id: template.id,\n      name: template.name,\n      subject: template.subject,\n      body: template.body,\n      bodyType: template.body_type,\n      category: template.category,\n      variables: template.variables || [],\n      isActive: template.is_active,\n      usage_count: template.usage_count,\n      created_by: template.created_by,\n      created_at: template.created_at,\n      updated_at: template.updated_at,\n    }))\n  }\n\n  async renderTemplate(\n    templateId: string,\n    variables: Record<string, string>,\n  ): Promise<{ subject: string; body: string }> {\n    const template = await this.getTemplate(templateId)\n    if (!template) {\n      throw new Error(\"Template not found\")\n    }\n\n    let subject = template.subject\n    let body = template.body\n\n    // Replace variables\n    Object.entries(variables).forEach(([key, value]) => {\n      const placeholder = `{{${key}}}`\n      subject = subject.replace(new RegExp(placeholder, \"g\"), value)\n      body = body.replace(new RegExp(placeholder, \"g\"), value)\n    })\n\n    // Increment usage count\n    await (supabase as any)\n      .from(\"email_templates\")\n      .update({ usage_count: template.usage_count + 1 } as any)\n      .eq(\"id\", templateId)\n\n    return { subject, body }\n  }\n\n  private async getTemplate(id: string): Promise<EmailTemplate | null> {\n    const { data, error } = await (supabase as any).from(\"email_templates\").select(\"*\").eq(\"id\", id).single()\n\n    if (error) return null\n\n    return {\n      id: (data as any).id,\n      name: (data as any).name,\n      subject: (data as any).subject,\n      body: (data as any).body,\n      bodyType: (data as any).body_type,\n      category: (data as any).category,\n      variables: (data as any).variables || [],\n      isActive: (data as any).is_active,\n      usage_count: (data as any).usage_count,\n      created_by: (data as any).created_by,\n      created_at: (data as any).created_at,\n      updated_at: (data as any).updated_at,\n    }\n  }\n\n  // Email Sync\n  private startSync(): void {\n    if (this.syncInterval) {\n      clearInterval(this.syncInterval)\n    }\n\n    this.syncInterval = setInterval(\n      () => {\n        this.syncEmails()\n      },\n      5 * 60 * 1000,\n    ) // Sync every 5 minutes\n  }\n\n  private async syncEmails(): Promise<void> {\n    if (!this.isConnected) return\n\n    try {\n      // Sync based on provider\n      switch (this.config?.provider) {\n                case \"outlook\":\n          await this.syncOutlookEmails()\n          break\n      }\n    } catch (error) {\n      // Silent error handling - Email sync failed\n    }\n  }\n\n  \n  private async syncOutlookEmails(): Promise<void> {\n    // Outlook sync implementation\n    // Silent logging - Syncing Outlook emails\n  }\n\n  // Analytics\n  async getAnalytics(dateRange?: { start: Date; end: Date }): Promise<EmailAnalytics> {\n    let query = (supabase as any).from(\"emails\").select(\"status, is_read, metadata\")\n\n    if (dateRange) {\n      query = query.gte(\"created_at\", dateRange.start.toISOString()).lte(\"created_at\", dateRange.end.toISOString())\n    }\n\n    const { data, error } = await query\n\n    if (error) {\n      throw new Error(`Failed to get analytics: ${error.message}`)\n    }\n\n    const emails = data || []\n    const sent = emails.filter((e: any) => e.status === \"sent\").length\n    const opened = emails.filter((e: any) => e.is_read).length\n    const clicked = emails.filter((e: any) => e.metadata?.clicked).length\n    const replied = emails.filter((e: any) => e.metadata?.replied).length\n    const bounced = emails.filter((e: any) => e.status === \"failed\").length\n\n    return {\n      sent,\n      received: emails.length - sent,\n      opened,\n      clicked,\n      replied,\n      bounced,\n      unsubscribed: 0, // Would need separate tracking\n      openRate: sent > 0 ? (opened / sent) * 100 : 0,\n      clickRate: opened > 0 ? (clicked / opened) * 100 : 0,\n      replyRate: sent > 0 ? (replied / sent) * 100 : 0,\n      bounceRate: sent > 0 ? (bounced / sent) * 100 : 0,\n    }\n  }\n\n  // Quota Management Methods\n  async getQuotaStatus(userId: string): Promise<{\n    daily: { used: number; limit: number; remaining: number }\n    monthly: { used: number; limit: number; remaining: number }\n    storage: { used: number; limit: number; remaining: number }\n  }> {\n    const quota = await this.getUserQuota(userId)\n\n    return {\n      daily: {\n        used: quota.dailySent,\n        limit: quota.dailyLimit,\n        remaining: quota.dailyLimit - quota.dailySent,\n      },\n      monthly: {\n        used: quota.monthlySent,\n        limit: quota.monthlyLimit,\n        remaining: quota.monthlyLimit - quota.monthlySent,\n      },\n      storage: {\n        used: quota.storageUsed,\n        limit: quota.storageLimit,\n        remaining: quota.storageLimit - quota.storageUsed,\n      },\n    }\n  }\n\n  // Cleanup\n  destroy(): void {\n    if (this.syncInterval) {\n      clearInterval(this.syncInterval)\n    }\n  }\n}\n\nexport const emailService = new EmailService()\nexport default emailService\n"],
      names: ["emailService", "EmailService", "configure", "config", "testConnection", "isConnected", "supabase", "from", "upsert", "provider", "username", "smtp_host", "smtpHost", "smtp_port", "smtpPort", "smtp_secure", "smtpSecure", "access_token", "accessToken", "refresh_token", "refreshToken", "client_id", "clientId", "updated_at", "Date", "toISOString", "startSync", "startCleanupJob", "error", "Error", "message", "checkEmailQuota", "userId", "quota", "getUserQuota", "today", "toDateString", "lastResetDate", "dailySent", "updateUserQuota", "currentMonth", "getMonth", "lastResetMonth", "monthlySent", "dailyLimit", "canSend", "reason", "monthlyLimit", "data", "select", "eq", "single", "defaultQuota", "DEFAULT_QUOTAS", "storageUsed", "insert", "user_id", "daily_limit", "monthly_limit", "daily_sent", "monthly_sent", "last_reset_date", "attachment_size_limit", "attachmentSizeLimit", "storage_used", "storage_limit", "storageLimit", "update", "validateAttachments", "attachments", "length", "valid", "attachment", "sizeInMB", "size", "filename", "totalAttachmentSize", "reduce", "sum", "att", "totalSizeInMB", "toFixed", "compressAttachment", "contentType", "startsWith", "Math", "floor", "replace", "testMailjetConnection", "testOutlookConnection", "testSmtpConnection", "response", "fetch", "headers", "Authorization", "btoa", "clientSecret", "ok", "sendEmail", "quotaCheck", "attachmentValidation", "DEFAULT_RETENTION", "compressAttachments", "Promise", "all", "map", "emailMessage", "id", "crypto", "randomUUID", "to", "cc", "bcc", "subject", "body", "bodyType", "priority", "readReceipt", "deliveryReceipt", "scheduledAt", "sentAt", "status", "threadId", "inReplyTo", "references", "labels", "folder", "isRead", "isStarred", "isImportant", "projectId", "taskId", "metadata", "created_at", "sendViaProvider", "attachmentSize", "from_email", "to_email", "cc_email", "bcc_email", "body_type", "thread_id", "is_read", "is_starred", "is_important", "project_id", "task_id", "sent_at", "sendViaMailjet", "sendViaOutlook", "sendViaSmtp", "email", "formatEmailForMailjet", "method", "JSON", "stringify", "statusText", "formatEmailForOutlook", "Messages", "From", "Email", "Name", "To", "Cc", "Bcc", "Subject", "HTMLPart", "undefined", "TextPart", "content", "toRecipients", "emailAddress", "address", "ccRecipients", "bccRecipients", "importance", "now", "tomorrow", "setDate", "getDate", "setHours", "msUntilTomorrow", "getTime", "setTimeout", "runCleanup", "setInterval", "autoDeleteOldEmails", "cleanupOldEmails", "cleanupOldAttachments", "cleanupDeletedEmails", "sentCutoff", "sentEmailRetentionDays", "receivedCutoff", "receivedEmailRetentionDays", "delete", "lt", "cutoff", "attachmentRetentionDays", "oldEmails", "not", "max", "deletedEmailRetentionDays", "createTemplate", "template", "newTemplate", "usage_count", "name", "category", "variables", "is_active", "isActive", "created_by", "getTemplates", "query", "order", "renderTemplate", "templateId", "getTemplate", "Object", "entries", "forEach", "key", "value", "placeholder", "RegExp", "syncInterval", "clearInterval", "syncEmails", "syncOutlookEmails", "getAnalytics", "dateRange", "gte", "start", "lte", "end", "emails", "sent", "filter", "e", "opened", "clicked", "replied", "bounced", "received", "unsubscribed", "openRate", "clickRate", "replyRate", "bounceRate", "getQuotaStatus", "daily", "used", "limit", "remaining", "monthly", "storage", "destroy", "maxAttachmentSize"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1bd4f8f503df33a6adac5f42a6cc51e4e0e3f91d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1o2i3u45x7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1o2i3u45x7();
cov_1o2i3u45x7().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1o2i3u45x7().f[0]++;
  cov_1o2i3u45x7().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1o2i3u45x7().s[3]++;
_export(exports, {
  get default() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[1]++;
    cov_1o2i3u45x7().s[4]++;
    return _default;
  },
  get emailService() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[2]++;
    cov_1o2i3u45x7().s[5]++;
    return emailService;
  }
});
const _supabase =
/* istanbul ignore next */
(cov_1o2i3u45x7().s[6]++, require("../lib/supabase"));
class EmailService {
  // Configuration
  async configure(config) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[3]++;
    cov_1o2i3u45x7().s[7]++;
    this.config = config;
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[8]++;
    try {
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[9]++;
      await this.testConnection();
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[10]++;
      this.isConnected = true;
      // Save configuration
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[11]++;
      await _supabase.supabase.from("email_configs").upsert({
        provider: config.provider,
        username: config.username,
        smtp_host: config.smtpHost,
        smtp_port: config.smtpPort,
        smtp_secure: config.smtpSecure,
        access_token: config.accessToken,
        refresh_token: config.refreshToken,
        client_id: config.clientId,
        updated_at: new Date().toISOString()
      });
      // Start sync if not already running
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[12]++;
      this.startSync();
      // Start cleanup job
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[13]++;
      this.startCleanupJob();
    } catch (error) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[14]++;
      this.isConnected = false;
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[15]++;
      throw new Error(`Failed to configure email: ${error.message}`);
    }
  }
  // Quota Management
  async checkEmailQuota(userId) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[4]++;
    const quota =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[16]++, await this.getUserQuota(userId));
    // Reset daily counter if needed
    const today =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[17]++, new Date().toDateString());
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[18]++;
    if (quota.lastResetDate !== today) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[0][0]++;
      cov_1o2i3u45x7().s[19]++;
      quota.dailySent = 0;
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[20]++;
      quota.lastResetDate = today;
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[21]++;
      await this.updateUserQuota(userId, quota);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[0][1]++;
    }
    // Reset monthly counter if needed
    const currentMonth =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[22]++, new Date().getMonth());
    const lastResetMonth =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[23]++, new Date(quota.lastResetDate).getMonth());
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[24]++;
    if (currentMonth !== lastResetMonth) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[1][0]++;
      cov_1o2i3u45x7().s[25]++;
      quota.monthlySent = 0;
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[26]++;
      await this.updateUserQuota(userId, quota);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[1][1]++;
    }
    // Check daily limit
    cov_1o2i3u45x7().s[27]++;
    if (quota.dailySent >= quota.dailyLimit) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[2][0]++;
      cov_1o2i3u45x7().s[28]++;
      return {
        canSend: false,
        reason: `Daily email limit reached (${quota.dailyLimit}). Resets tomorrow.`,
        quota
      };
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[2][1]++;
    }
    // Check monthly limit
    cov_1o2i3u45x7().s[29]++;
    if (quota.monthlySent >= quota.monthlyLimit) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[3][0]++;
      cov_1o2i3u45x7().s[30]++;
      return {
        canSend: false,
        reason: `Monthly email limit reached (${quota.monthlyLimit}). Resets next month.`,
        quota
      };
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[3][1]++;
    }
    cov_1o2i3u45x7().s[31]++;
    return {
      canSend: true,
      quota
    };
  }
  async getUserQuota(userId) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[5]++;
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[32]++, await _supabase.supabase.from("email_quotas").select("*").eq("user_id", userId).single());
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[33]++;
    if (
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[5][0]++, error) ||
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[5][1]++, !data)) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[4][0]++;
      // Create default quota for new user
      const defaultQuota =
      /* istanbul ignore next */
      (cov_1o2i3u45x7().s[34]++, {
        userId,
        ...this.DEFAULT_QUOTAS,
        dailySent: 0,
        monthlySent: 0,
        lastResetDate: new Date().toDateString(),
        storageUsed: 0
      });
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[35]++;
      await _supabase.supabase.from("email_quotas").insert({
        user_id: userId,
        daily_limit: defaultQuota.dailyLimit,
        monthly_limit: defaultQuota.monthlyLimit,
        daily_sent: defaultQuota.dailySent,
        monthly_sent: defaultQuota.monthlySent,
        last_reset_date: defaultQuota.lastResetDate,
        attachment_size_limit: defaultQuota.attachmentSizeLimit,
        storage_used: defaultQuota.storageUsed,
        storage_limit: defaultQuota.storageLimit
      });
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[36]++;
      return defaultQuota;
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[4][1]++;
    }
    cov_1o2i3u45x7().s[37]++;
    return {
      userId: data.user_id,
      dailyLimit: data.daily_limit,
      monthlyLimit: data.monthly_limit,
      dailySent: data.daily_sent,
      monthlySent: data.monthly_sent,
      lastResetDate: data.last_reset_date,
      attachmentSizeLimit: data.attachment_size_limit,
      storageUsed: data.storage_used,
      storageLimit: data.storage_limit
    };
  }
  async updateUserQuota(userId, quota) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[6]++;
    cov_1o2i3u45x7().s[38]++;
    await _supabase.supabase.from("email_quotas").update({
      daily_sent: quota.dailySent,
      monthly_sent: quota.monthlySent,
      last_reset_date: quota.lastResetDate,
      storage_used: quota.storageUsed
    }).eq("user_id", userId);
  }
  // Attachment Management with Size Limits
  async validateAttachments(attachments, userId) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[7]++;
    cov_1o2i3u45x7().s[39]++;
    if (
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[7][0]++, !attachments) ||
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[7][1]++, attachments.length === 0)) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[6][0]++;
      cov_1o2i3u45x7().s[40]++;
      return {
        valid: true
      };
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[6][1]++;
    }
    const quota =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[41]++, await this.getUserQuota(userId));
    // Check individual attachment size
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[42]++;
    for (const attachment of attachments) {
      const sizeInMB =
      /* istanbul ignore next */
      (cov_1o2i3u45x7().s[43]++, attachment.size / (1024 * 1024));
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[44]++;
      if (sizeInMB > quota.attachmentSizeLimit) {
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[8][0]++;
        cov_1o2i3u45x7().s[45]++;
        return {
          valid: false,
          reason: `Attachment "${attachment.filename}" exceeds size limit of ${quota.attachmentSizeLimit}MB`
        };
      } else
      /* istanbul ignore next */
      {
        cov_1o2i3u45x7().b[8][1]++;
      }
    }
    // Check total storage usage
    const totalAttachmentSize =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[46]++, attachments.reduce((sum, att) => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[8]++;
      cov_1o2i3u45x7().s[47]++;
      return sum + att.size;
    }, 0));
    const totalSizeInMB =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[48]++, totalAttachmentSize / (1024 * 1024));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[49]++;
    if (quota.storageUsed + totalSizeInMB > quota.storageLimit) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[9][0]++;
      cov_1o2i3u45x7().s[50]++;
      return {
        valid: false,
        reason: `Storage limit exceeded. Available: ${(quota.storageLimit - quota.storageUsed).toFixed(1)}MB, Required: ${totalSizeInMB.toFixed(1)}MB`
      };
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[9][1]++;
    }
    cov_1o2i3u45x7().s[51]++;
    return {
      valid: true
    };
  }
  async compressAttachment(attachment) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[9]++;
    cov_1o2i3u45x7().s[52]++;
    // Simple compression simulation - in real implementation, use image compression libraries
    if (
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[11][0]++, attachment.contentType.startsWith("image/")) &&
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[11][1]++, attachment.size > 1024 * 1024)) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[10][0]++;
      cov_1o2i3u45x7().s[53]++;
      return {
        ...attachment,
        size: Math.floor(attachment.size * 0.7),
        filename: attachment.filename.replace(/(\.[^.]+)$/, "_compressed$1")
      };
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[10][1]++;
    }
    cov_1o2i3u45x7().s[54]++;
    return attachment;
  }
  async testConnection() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[10]++;
    cov_1o2i3u45x7().s[55]++;
    if (!this.config) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[12][0]++;
      cov_1o2i3u45x7().s[56]++;
      throw new Error("Email not configured");
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[12][1]++;
    }
    cov_1o2i3u45x7().s[57]++;
    try {
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[58]++;
      // Test connection based on provider
      switch (this.config.provider) {
        case "mailjet":
          /* istanbul ignore next */
          cov_1o2i3u45x7().b[13][0]++;
          cov_1o2i3u45x7().s[59]++;
          return await this.testMailjetConnection();
        case "outlook":
          /* istanbul ignore next */
          cov_1o2i3u45x7().b[13][1]++;
          cov_1o2i3u45x7().s[60]++;
          return await this.testOutlookConnection();
        case "smtp":
          /* istanbul ignore next */
          cov_1o2i3u45x7().b[13][2]++;
          cov_1o2i3u45x7().s[61]++;
          return await this.testSmtpConnection();
        default:
          /* istanbul ignore next */
          cov_1o2i3u45x7().b[13][3]++;
          cov_1o2i3u45x7().s[62]++;
          throw new Error("Unsupported email provider");
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[63]++;
      // Silent error handling - Email connection test failed
      return false;
    }
  }
  async testMailjetConnection() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[11]++;
    // Test Mailjet API connection
    const response =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[64]++, await fetch("https://api.mailjet.com/v3/REST/contact", {
      headers: {
        Authorization: `Basic ${btoa(`${this.config?.clientId}:${this.config?.clientSecret}`)}`
      }
    }));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[65]++;
    return response.ok;
  }
  async testOutlookConnection() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[12]++;
    // Test Outlook API connection
    const response =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[66]++, await fetch("https://graph.microsoft.com/v1.0/me", {
      headers: {
        Authorization: `Bearer ${this.config?.accessToken}`
      }
    }));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[67]++;
    return response.ok;
  }
  async testSmtpConnection() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[13]++;
    cov_1o2i3u45x7().s[68]++;
    // For SMTP, we'll simulate a connection test
    // In a real implementation, you'd test the SMTP connection
    return true;
  }
  // Email Operations with Quota Checks
  async sendEmail(message, userId) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[14]++;
    cov_1o2i3u45x7().s[69]++;
    if (!this.isConnected) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[14][0]++;
      cov_1o2i3u45x7().s[70]++;
      throw new Error("Email service not connected");
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[14][1]++;
    }
    // Check quota
    const quotaCheck =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[71]++, await this.checkEmailQuota(userId));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[72]++;
    if (!quotaCheck.canSend) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[15][0]++;
      cov_1o2i3u45x7().s[73]++;
      throw new Error(quotaCheck.reason);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[15][1]++;
    }
    // Validate attachments
    cov_1o2i3u45x7().s[74]++;
    if (message.attachments) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[16][0]++;
      const attachmentValidation =
      /* istanbul ignore next */
      (cov_1o2i3u45x7().s[75]++, await this.validateAttachments(message.attachments, userId));
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[76]++;
      if (!attachmentValidation.valid) {
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[17][0]++;
        cov_1o2i3u45x7().s[77]++;
        throw new Error(attachmentValidation.reason);
      } else
      /* istanbul ignore next */
      {
        cov_1o2i3u45x7().b[17][1]++;
      }
      // Compress attachments if enabled
      cov_1o2i3u45x7().s[78]++;
      if (this.DEFAULT_RETENTION.compressAttachments) {
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[18][0]++;
        cov_1o2i3u45x7().s[79]++;
        message.attachments = await Promise.all(message.attachments.map(att => {
          /* istanbul ignore next */
          cov_1o2i3u45x7().f[15]++;
          cov_1o2i3u45x7().s[80]++;
          return this.compressAttachment(att);
        }));
      } else
      /* istanbul ignore next */
      {
        cov_1o2i3u45x7().b[18][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[16][1]++;
    }
    const emailMessage =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[81]++, {
      id: crypto.randomUUID(),
      from:
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[19][0]++, this.config?.username) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[19][1]++, ""),
      to:
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[20][0]++, message.to) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[20][1]++, []),
      cc: message.cc,
      bcc: message.bcc,
      subject:
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[21][0]++, message.subject) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[21][1]++, ""),
      body:
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[22][0]++, message.body) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[22][1]++, ""),
      bodyType:
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[23][0]++, message.bodyType) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[23][1]++, "html"),
      attachments: message.attachments,
      priority:
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[24][0]++, message.priority) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[24][1]++, "normal"),
      readReceipt: message.readReceipt,
      deliveryReceipt: message.deliveryReceipt,
      scheduledAt: message.scheduledAt,
      sentAt: new Date().toISOString(),
      status: "sent",
      threadId: message.threadId,
      inReplyTo: message.inReplyTo,
      references: message.references,
      labels:
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[25][0]++, message.labels) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[25][1]++, []),
      folder: "sent",
      isRead: true,
      isStarred: false,
      isImportant: false,
      clientId: message.clientId,
      projectId: message.projectId,
      taskId: message.taskId,
      metadata: message.metadata,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[82]++;
    try {
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[83]++;
      // Send email based on provider
      await this.sendViaProvider(emailMessage);
      // Update quota
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[84]++;
      quotaCheck.quota.dailySent += 1;
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[85]++;
      quotaCheck.quota.monthlySent += 1;
      // Update storage usage
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[86]++;
      if (emailMessage.attachments) {
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[26][0]++;
        const attachmentSize =
        /* istanbul ignore next */
        (cov_1o2i3u45x7().s[87]++, emailMessage.attachments.reduce((sum, att) => {
          /* istanbul ignore next */
          cov_1o2i3u45x7().f[16]++;
          cov_1o2i3u45x7().s[88]++;
          return sum + att.size;
        }, 0));
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[89]++;
        quotaCheck.quota.storageUsed += attachmentSize / (1024 * 1024);
      } else
      /* istanbul ignore next */
      {
        cov_1o2i3u45x7().b[26][1]++;
      }
      cov_1o2i3u45x7().s[90]++;
      await this.updateUserQuota(userId, quotaCheck.quota);
      // Save to database
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[91]++;
      await _supabase.supabase.from("emails").insert({
        id: emailMessage.id,
        from_email: emailMessage.from,
        to_email: emailMessage.to,
        cc_email: emailMessage.cc,
        bcc_email: emailMessage.bcc,
        subject: emailMessage.subject,
        body: emailMessage.body,
        body_type: emailMessage.bodyType,
        attachments: emailMessage.attachments,
        priority: emailMessage.priority,
        status: emailMessage.status,
        thread_id: emailMessage.threadId,
        folder: emailMessage.folder,
        is_read: emailMessage.isRead,
        is_starred: emailMessage.isStarred,
        is_important: emailMessage.isImportant,
        client_id: emailMessage.clientId,
        project_id: emailMessage.projectId,
        task_id: emailMessage.taskId,
        metadata: emailMessage.metadata,
        sent_at: emailMessage.sentAt,
        created_at: emailMessage.created_at,
        updated_at: emailMessage.updated_at,
        user_id: userId
      });
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[92]++;
      return emailMessage;
    } catch (error) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[93]++;
      emailMessage.status = "failed";
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[94]++;
      throw new Error(`Failed to send email: ${error.message}`);
    }
  }
  async sendViaProvider(message) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[17]++;
    cov_1o2i3u45x7().s[95]++;
    switch (this.config?.provider) {
      case "mailjet":
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[27][0]++;
        cov_1o2i3u45x7().s[96]++;
        await this.sendViaMailjet(message);
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[97]++;
        break;
      case "outlook":
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[27][1]++;
        cov_1o2i3u45x7().s[98]++;
        await this.sendViaOutlook(message);
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[99]++;
        break;
      case "smtp":
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[27][2]++;
        cov_1o2i3u45x7().s[100]++;
        await this.sendViaSmtp(message);
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[101]++;
        break;
      default:
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[27][3]++;
        cov_1o2i3u45x7().s[102]++;
        throw new Error("Unsupported email provider");
    }
  }
  async sendViaMailjet(message) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[18]++;
    const email =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[103]++, this.formatEmailForMailjet(message));
    const response =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[104]++, await fetch("https://api.mailjet.com/v3.1/send", {
      method: "POST",
      headers: {
        Authorization: `Basic ${btoa(`${this.config?.clientId}:${this.config?.clientSecret}`)}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify(email)
    }));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[105]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[28][0]++;
      cov_1o2i3u45x7().s[106]++;
      throw new Error(`Mailjet API error: ${response.statusText}`);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[28][1]++;
    }
  }
  async sendViaOutlook(message) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[19]++;
    const email =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[107]++, this.formatEmailForOutlook(message));
    const response =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[108]++, await fetch("https://graph.microsoft.com/v1.0/me/sendMail", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${this.config?.accessToken}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        message: email
      })
    }));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[109]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[29][0]++;
      cov_1o2i3u45x7().s[110]++;
      throw new Error(`Outlook API error: ${response.statusText}`);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[29][1]++;
    }
  }
  async sendViaSmtp(message) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[20]++;
  } // SMTP implementation would go here
  // For now, we'll simulate sending
  // Silent logging - Sending via SMTP
  formatEmailForMailjet(message) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[21]++;
    cov_1o2i3u45x7().s[111]++;
    return {
      Messages: [{
        From: {
          Email:
          /* istanbul ignore next */
          (cov_1o2i3u45x7().b[30][0]++, this.config?.username) ||
          /* istanbul ignore next */
          (cov_1o2i3u45x7().b[30][1]++, ""),
          Name: "CRM System"
        },
        To: message.to.map(email => {
          /* istanbul ignore next */
          cov_1o2i3u45x7().f[22]++;
          cov_1o2i3u45x7().s[112]++;
          return {
            Email: email
          };
        }),
        Cc:
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[31][0]++, message.cc?.map(email => {
          /* istanbul ignore next */
          cov_1o2i3u45x7().f[23]++;
          cov_1o2i3u45x7().s[113]++;
          return {
            Email: email
          };
        })) ||
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[31][1]++, []),
        Bcc:
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[32][0]++, message.bcc?.map(email => {
          /* istanbul ignore next */
          cov_1o2i3u45x7().f[24]++;
          cov_1o2i3u45x7().s[114]++;
          return {
            Email: email
          };
        })) ||
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[32][1]++, []),
        Subject: message.subject,
        HTMLPart: message.bodyType === "html" ?
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[33][0]++, message.body) :
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[33][1]++, undefined),
        TextPart: message.bodyType === "text" ?
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[34][0]++, message.body) :
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[34][1]++, undefined)
      }]
    };
  }
  formatEmailForOutlook(message) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[25]++;
    cov_1o2i3u45x7().s[115]++;
    return {
      subject: message.subject,
      body: {
        contentType: message.bodyType === "html" ?
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[35][0]++, "HTML") :
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[35][1]++, "Text"),
        content: message.body
      },
      toRecipients: message.to.map(email => {
        /* istanbul ignore next */
        cov_1o2i3u45x7().f[26]++;
        cov_1o2i3u45x7().s[116]++;
        return {
          emailAddress: {
            address: email
          }
        };
      }),
      ccRecipients:
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[36][0]++, message.cc?.map(email => {
        /* istanbul ignore next */
        cov_1o2i3u45x7().f[27]++;
        cov_1o2i3u45x7().s[117]++;
        return {
          emailAddress: {
            address: email
          }
        };
      })) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[36][1]++, []),
      bccRecipients:
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[37][0]++, message.bcc?.map(email => {
        /* istanbul ignore next */
        cov_1o2i3u45x7().f[28]++;
        cov_1o2i3u45x7().s[118]++;
        return {
          emailAddress: {
            address: email
          }
        };
      })) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[37][1]++, []),
      importance: message.priority === "high" ?
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[38][0]++, "high") :
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[38][1]++, message.priority === "low" ?
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[39][0]++, "low") :
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[39][1]++, "normal"))
    };
  }
  // Cleanup and Retention
  startCleanupJob() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[29]++;
    // Run cleanup daily at 2 AM
    const now =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[119]++, new Date());
    const tomorrow =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[120]++, new Date(now));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[121]++;
    tomorrow.setDate(tomorrow.getDate() + 1);
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[122]++;
    tomorrow.setHours(2, 0, 0, 0);
    const msUntilTomorrow =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[123]++, tomorrow.getTime() - now.getTime());
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[124]++;
    setTimeout(() => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[30]++;
      cov_1o2i3u45x7().s[125]++;
      this.runCleanup();
      // Then run every 24 hours
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[126]++;
      setInterval(() => {
        /* istanbul ignore next */
        cov_1o2i3u45x7().f[31]++;
        cov_1o2i3u45x7().s[127]++;
        return this.runCleanup();
      }, 24 * 60 * 60 * 1000);
    }, msUntilTomorrow);
  }
  async runCleanup() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[32]++;
    cov_1o2i3u45x7().s[128]++;
    try {
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[129]++;
      // Silent logging - Starting email cleanup job
      if (this.DEFAULT_RETENTION.autoDeleteOldEmails) {
        /* istanbul ignore next */
        cov_1o2i3u45x7().b[40][0]++;
        cov_1o2i3u45x7().s[130]++;
        await this.cleanupOldEmails();
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[131]++;
        await this.cleanupOldAttachments();
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[132]++;
        await this.cleanupDeletedEmails();
      } else
      /* istanbul ignore next */
      {
        cov_1o2i3u45x7().b[40][1]++;
      }
      // Silent logging - Email cleanup job completed
    } catch (error) {
      // Silent error handling - Email cleanup job failed
    }
  }
  async cleanupOldEmails() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[33]++;
    const sentCutoff =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[133]++, new Date());
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[134]++;
    sentCutoff.setDate(sentCutoff.getDate() - this.DEFAULT_RETENTION.sentEmailRetentionDays);
    const receivedCutoff =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[135]++, new Date());
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[136]++;
    receivedCutoff.setDate(receivedCutoff.getDate() - this.DEFAULT_RETENTION.receivedEmailRetentionDays);
    // Delete old sent emails
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[137]++;
    await _supabase.supabase.from("emails").delete().eq("folder", "sent").lt("created_at", sentCutoff.toISOString());
    // Delete old received emails
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[138]++;
    await _supabase.supabase.from("emails").delete().eq("folder", "inbox").lt("created_at", receivedCutoff.toISOString());
  }
  async cleanupOldAttachments() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[34]++;
    const cutoff =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[139]++, new Date());
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[140]++;
    cutoff.setDate(cutoff.getDate() - this.DEFAULT_RETENTION.attachmentRetentionDays);
    // Get emails with attachments older than retention period
    const {
      data: oldEmails
    } =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[141]++, await _supabase.supabase.from("emails").select("id, attachments, user_id").not("attachments", "is", null).lt("created_at", cutoff.toISOString()));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[142]++;
    if (oldEmails) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[41][0]++;
      cov_1o2i3u45x7().s[143]++;
      for (const email of oldEmails) {
        // Calculate storage to be freed
        const attachmentSize =
        /* istanbul ignore next */
        (cov_1o2i3u45x7().s[144]++,
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[42][0]++, email.attachments?.reduce((sum, att) => {
          /* istanbul ignore next */
          cov_1o2i3u45x7().f[35]++;
          cov_1o2i3u45x7().s[145]++;
          return sum + att.size;
        }, 0)) ||
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[42][1]++, 0));
        const sizeInMB =
        /* istanbul ignore next */
        (cov_1o2i3u45x7().s[146]++, attachmentSize / (1024 * 1024));
        // Remove attachments from email
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[147]++;
        await _supabase.supabase.from("emails").update({
          attachments: null
        }).eq("id", email.id);
        // Update user storage quota
        /* istanbul ignore next */
        cov_1o2i3u45x7().s[148]++;
        if (email.user_id) {
          /* istanbul ignore next */
          cov_1o2i3u45x7().b[43][0]++;
          const quota =
          /* istanbul ignore next */
          (cov_1o2i3u45x7().s[149]++, await this.getUserQuota(email.user_id));
          /* istanbul ignore next */
          cov_1o2i3u45x7().s[150]++;
          quota.storageUsed = Math.max(0, quota.storageUsed - sizeInMB);
          /* istanbul ignore next */
          cov_1o2i3u45x7().s[151]++;
          await this.updateUserQuota(email.user_id, quota);
        } else
        /* istanbul ignore next */
        {
          cov_1o2i3u45x7().b[43][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[41][1]++;
    }
  }
  async cleanupDeletedEmails() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[36]++;
    cov_1o2i3u45x7().s[152]++;
    if (!_supabase.supabase) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[44][0]++;
      cov_1o2i3u45x7().s[153]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[44][1]++;
    }
    const cutoff =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[154]++, new Date());
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[155]++;
    cutoff.setDate(cutoff.getDate() - this.DEFAULT_RETENTION.deletedEmailRetentionDays);
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[156]++;
    await _supabase.supabase.from("emails").delete().eq("folder", "trash").lt("updated_at", cutoff.toISOString());
  }
  // Email Templates
  async createTemplate(template) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[37]++;
    const newTemplate =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[157]++, {
      id: crypto.randomUUID(),
      usage_count: 0,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      ...template
    });
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[158]++, await _supabase.supabase.from("email_templates").insert({
      id: newTemplate.id,
      name: newTemplate.name,
      subject: newTemplate.subject,
      body: newTemplate.body,
      body_type: newTemplate.bodyType,
      category: newTemplate.category,
      variables: newTemplate.variables,
      is_active: newTemplate.isActive,
      usage_count: newTemplate.usage_count,
      created_by: newTemplate.created_by,
      created_at: newTemplate.created_at,
      updated_at: newTemplate.updated_at
    }));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[159]++;
    if (error) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[45][0]++;
      cov_1o2i3u45x7().s[160]++;
      throw new Error(`Failed to create template: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[45][1]++;
    }
    cov_1o2i3u45x7().s[161]++;
    return newTemplate;
  }
  async getTemplates(category) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[38]++;
    let query =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[162]++, _supabase.supabase.from("email_templates").select("*").eq("is_active", true).order("name"));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[163]++;
    if (category) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[46][0]++;
      cov_1o2i3u45x7().s[164]++;
      query = query.eq("category", category);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[46][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[165]++, await query);
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[166]++;
    if (error) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[47][0]++;
      cov_1o2i3u45x7().s[167]++;
      throw new Error(`Failed to get templates: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[47][1]++;
    }
    cov_1o2i3u45x7().s[168]++;
    return (
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[48][0]++, data) ||
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[48][1]++, [])).map(template => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[39]++;
      cov_1o2i3u45x7().s[169]++;
      return {
        id: template.id,
        name: template.name,
        subject: template.subject,
        body: template.body,
        bodyType: template.body_type,
        category: template.category,
        variables:
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[49][0]++, template.variables) ||
        /* istanbul ignore next */
        (cov_1o2i3u45x7().b[49][1]++, []),
        isActive: template.is_active,
        usage_count: template.usage_count,
        created_by: template.created_by,
        created_at: template.created_at,
        updated_at: template.updated_at
      };
    });
  }
  async renderTemplate(templateId, variables) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[40]++;
    const template =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[170]++, await this.getTemplate(templateId));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[171]++;
    if (!template) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[50][0]++;
      cov_1o2i3u45x7().s[172]++;
      throw new Error("Template not found");
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[50][1]++;
    }
    let subject =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[173]++, template.subject);
    let body =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[174]++, template.body);
    // Replace variables
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[175]++;
    Object.entries(variables).forEach(([key, value]) => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[41]++;
      const placeholder =
      /* istanbul ignore next */
      (cov_1o2i3u45x7().s[176]++, `{{${key}}}`);
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[177]++;
      subject = subject.replace(new RegExp(placeholder, "g"), value);
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[178]++;
      body = body.replace(new RegExp(placeholder, "g"), value);
    });
    // Increment usage count
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[179]++;
    await _supabase.supabase.from("email_templates").update({
      usage_count: template.usage_count + 1
    }).eq("id", templateId);
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[180]++;
    return {
      subject,
      body
    };
  }
  async getTemplate(id) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[42]++;
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[181]++, await _supabase.supabase.from("email_templates").select("*").eq("id", id).single());
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[182]++;
    if (error) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[51][0]++;
      cov_1o2i3u45x7().s[183]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[51][1]++;
    }
    cov_1o2i3u45x7().s[184]++;
    return {
      id: data.id,
      name: data.name,
      subject: data.subject,
      body: data.body,
      bodyType: data.body_type,
      category: data.category,
      variables:
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[52][0]++, data.variables) ||
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[52][1]++, []),
      isActive: data.is_active,
      usage_count: data.usage_count,
      created_by: data.created_by,
      created_at: data.created_at,
      updated_at: data.updated_at
    };
  }
  // Email Sync
  startSync() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[43]++;
    cov_1o2i3u45x7().s[185]++;
    if (this.syncInterval) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[53][0]++;
      cov_1o2i3u45x7().s[186]++;
      clearInterval(this.syncInterval);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[53][1]++;
    }
    cov_1o2i3u45x7().s[187]++;
    this.syncInterval = setInterval(() => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[44]++;
      cov_1o2i3u45x7().s[188]++;
      this.syncEmails();
    }, 5 * 60 * 1000); // Sync every 5 minutes
  }
  async syncEmails() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[45]++;
    cov_1o2i3u45x7().s[189]++;
    if (!this.isConnected) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[54][0]++;
      cov_1o2i3u45x7().s[190]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[54][1]++;
    }
    cov_1o2i3u45x7().s[191]++;
    try {
      /* istanbul ignore next */
      cov_1o2i3u45x7().s[192]++;
      // Sync based on provider
      switch (this.config?.provider) {
        case "outlook":
          /* istanbul ignore next */
          cov_1o2i3u45x7().b[55][0]++;
          cov_1o2i3u45x7().s[193]++;
          await this.syncOutlookEmails();
          /* istanbul ignore next */
          cov_1o2i3u45x7().s[194]++;
          break;
      }
    } catch (error) {
      // Silent error handling - Email sync failed
    }
  }
  async syncOutlookEmails() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[46]++;
  } // Outlook sync implementation
  // Silent logging - Syncing Outlook emails
  // Analytics
  async getAnalytics(dateRange) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[47]++;
    let query =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[195]++, _supabase.supabase.from("emails").select("status, is_read, metadata"));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[196]++;
    if (dateRange) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[56][0]++;
      cov_1o2i3u45x7().s[197]++;
      query = query.gte("created_at", dateRange.start.toISOString()).lte("created_at", dateRange.end.toISOString());
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[56][1]++;
    }
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[198]++, await query);
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[199]++;
    if (error) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[57][0]++;
      cov_1o2i3u45x7().s[200]++;
      throw new Error(`Failed to get analytics: ${error.message}`);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[57][1]++;
    }
    const emails =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[201]++,
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[58][0]++, data) ||
    /* istanbul ignore next */
    (cov_1o2i3u45x7().b[58][1]++, []));
    const sent =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[202]++, emails.filter(e => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[48]++;
      cov_1o2i3u45x7().s[203]++;
      return e.status === "sent";
    }).length);
    const opened =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[204]++, emails.filter(e => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[49]++;
      cov_1o2i3u45x7().s[205]++;
      return e.is_read;
    }).length);
    const clicked =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[206]++, emails.filter(e => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[50]++;
      cov_1o2i3u45x7().s[207]++;
      return e.metadata?.clicked;
    }).length);
    const replied =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[208]++, emails.filter(e => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[51]++;
      cov_1o2i3u45x7().s[209]++;
      return e.metadata?.replied;
    }).length);
    const bounced =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[210]++, emails.filter(e => {
      /* istanbul ignore next */
      cov_1o2i3u45x7().f[52]++;
      cov_1o2i3u45x7().s[211]++;
      return e.status === "failed";
    }).length);
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[212]++;
    return {
      sent,
      received: emails.length - sent,
      opened,
      clicked,
      replied,
      bounced,
      unsubscribed: 0,
      openRate: sent > 0 ?
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[59][0]++, opened / sent * 100) :
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[59][1]++, 0),
      clickRate: opened > 0 ?
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[60][0]++, clicked / opened * 100) :
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[60][1]++, 0),
      replyRate: sent > 0 ?
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[61][0]++, replied / sent * 100) :
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[61][1]++, 0),
      bounceRate: sent > 0 ?
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[62][0]++, bounced / sent * 100) :
      /* istanbul ignore next */
      (cov_1o2i3u45x7().b[62][1]++, 0)
    };
  }
  // Quota Management Methods
  async getQuotaStatus(userId) {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[53]++;
    const quota =
    /* istanbul ignore next */
    (cov_1o2i3u45x7().s[213]++, await this.getUserQuota(userId));
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[214]++;
    return {
      daily: {
        used: quota.dailySent,
        limit: quota.dailyLimit,
        remaining: quota.dailyLimit - quota.dailySent
      },
      monthly: {
        used: quota.monthlySent,
        limit: quota.monthlyLimit,
        remaining: quota.monthlyLimit - quota.monthlySent
      },
      storage: {
        used: quota.storageUsed,
        limit: quota.storageLimit,
        remaining: quota.storageLimit - quota.storageUsed
      }
    };
  }
  // Cleanup
  destroy() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[54]++;
    cov_1o2i3u45x7().s[215]++;
    if (this.syncInterval) {
      /* istanbul ignore next */
      cov_1o2i3u45x7().b[63][0]++;
      cov_1o2i3u45x7().s[216]++;
      clearInterval(this.syncInterval);
    } else
    /* istanbul ignore next */
    {
      cov_1o2i3u45x7().b[63][1]++;
    }
  }
  constructor() {
    /* istanbul ignore next */
    cov_1o2i3u45x7().f[55]++;
    cov_1o2i3u45x7().s[217]++;
    this.config = null;
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[218]++;
    this.isConnected = false;
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[219]++;
    this.syncInterval = null;
    // Email quotas - moderate limits
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[220]++;
    this.DEFAULT_QUOTAS = {
      dailyLimit: 100,
      monthlyLimit: 2000,
      attachmentSizeLimit: 10,
      storageLimit: 500
    };
    // Retention policies
    /* istanbul ignore next */
    cov_1o2i3u45x7().s[221]++;
    this.DEFAULT_RETENTION = {
      sentEmailRetentionDays: 365,
      receivedEmailRetentionDays: 365,
      attachmentRetentionDays: 180,
      deletedEmailRetentionDays: 30,
      maxAttachmentSize: 10,
      compressAttachments: true,
      autoDeleteOldEmails: true
    };
  }
}
const emailService =
/* istanbul ignore next */
(cov_1o2i3u45x7().s[222]++, new EmailService());
const _default =
/* istanbul ignore next */
(cov_1o2i3u45x7().s[223]++, emailService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,