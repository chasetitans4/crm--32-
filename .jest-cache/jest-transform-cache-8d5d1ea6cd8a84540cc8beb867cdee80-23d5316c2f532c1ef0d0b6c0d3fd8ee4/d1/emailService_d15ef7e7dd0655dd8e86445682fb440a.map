{"version":3,"names":["default","cov_1o2i3u45x7","f","s","_default","emailService","EmailService","configure","config","testConnection","isConnected","_supabase","supabase","from","upsert","provider","username","smtp_host","smtpHost","smtp_port","smtpPort","smtp_secure","smtpSecure","access_token","accessToken","refresh_token","refreshToken","client_id","clientId","updated_at","Date","toISOString","startSync","startCleanupJob","error","Error","message","checkEmailQuota","userId","quota","getUserQuota","today","toDateString","lastResetDate","b","dailySent","updateUserQuota","currentMonth","getMonth","lastResetMonth","monthlySent","dailyLimit","canSend","reason","monthlyLimit","data","select","eq","single","defaultQuota","DEFAULT_QUOTAS","storageUsed","insert","user_id","daily_limit","monthly_limit","daily_sent","monthly_sent","last_reset_date","attachment_size_limit","attachmentSizeLimit","storage_used","storage_limit","storageLimit","update","validateAttachments","attachments","length","valid","attachment","sizeInMB","size","filename","totalAttachmentSize","reduce","sum","att","totalSizeInMB","toFixed","compressAttachment","contentType","startsWith","Math","floor","replace","testMailjetConnection","testOutlookConnection","testSmtpConnection","response","fetch","headers","Authorization","btoa","clientSecret","ok","sendEmail","quotaCheck","attachmentValidation","DEFAULT_RETENTION","compressAttachments","Promise","all","map","emailMessage","id","crypto","randomUUID","to","cc","bcc","subject","body","bodyType","priority","readReceipt","deliveryReceipt","scheduledAt","sentAt","status","threadId","inReplyTo","references","labels","folder","isRead","isStarred","isImportant","projectId","taskId","metadata","created_at","sendViaProvider","attachmentSize","from_email","to_email","cc_email","bcc_email","body_type","thread_id","is_read","is_starred","is_important","project_id","task_id","sent_at","sendViaMailjet","sendViaOutlook","sendViaSmtp","email","formatEmailForMailjet","method","JSON","stringify","statusText","formatEmailForOutlook","Messages","From","Email","Name","To","Cc","Bcc","Subject","HTMLPart","undefined","TextPart","content","toRecipients","emailAddress","address","ccRecipients","bccRecipients","importance","now","tomorrow","setDate","getDate","setHours","msUntilTomorrow","getTime","setTimeout","runCleanup","setInterval","autoDeleteOldEmails","cleanupOldEmails","cleanupOldAttachments","cleanupDeletedEmails","sentCutoff","sentEmailRetentionDays","receivedCutoff","receivedEmailRetentionDays","delete","lt","cutoff","attachmentRetentionDays","oldEmails","not","max","deletedEmailRetentionDays","createTemplate","template","newTemplate","usage_count","name","category","variables","is_active","isActive","created_by","getTemplates","query","order","renderTemplate","templateId","getTemplate","Object","entries","forEach","key","value","placeholder","RegExp","syncInterval","clearInterval","syncEmails","syncOutlookEmails","getAnalytics","dateRange","gte","start","lte","end","emails","sent","filter","e","opened","clicked","replied","bounced","received","unsubscribed","openRate","clickRate","replyRate","bounceRate","getQuotaStatus","daily","used","limit","remaining","monthly","storage","destroy","maxAttachmentSize"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\emailService.ts"],"sourcesContent":["import { supabase } from \"../lib/supabase\"\nimport type { Database } from \"../lib/supabase\"\n\ntype Tables<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Row\"]\n\nexport interface EmailConfig {\n  provider: \"mailjet\" | \"outlook\" | \"smtp\"\n  smtpHost?: string\n  smtpPort?: number\n  smtpSecure?: boolean\n  username: string\n  password?: string\n  accessToken?: string\n  refreshToken?: string\n  clientId?: string\n  clientSecret?: string\n}\n\nexport interface EmailMessage {\n  id: string\n  from: string\n  to: string[]\n  cc?: string[]\n  bcc?: string[]\n  subject: string\n  body: string\n  bodyType: \"text\" | \"html\"\n  attachments?: EmailAttachment[]\n  priority: \"low\" | \"normal\" | \"high\"\n  readReceipt?: boolean\n  deliveryReceipt?: boolean\n  scheduledAt?: string\n  sentAt?: string\n  status: \"draft\" | \"scheduled\" | \"sent\" | \"failed\" | \"delivered\" | \"read\"\n  threadId?: string\n  inReplyTo?: string\n  references?: string[]\n  labels?: string[]\n  folder: string\n  isRead: boolean\n  isStarred: boolean\n  isImportant: boolean\n  clientId?: string\n  projectId?: string\n  taskId?: string\n  metadata?: Record<string, any>\n  created_at: string\n  updated_at: string\n}\n\nexport interface EmailAttachment {\n  id: string\n  filename: string\n  contentType: string\n  size: number\n  data?: string // base64 encoded\n  url?: string\n  cid?: string // for inline attachments\n}\n\nexport interface EmailTemplate {\n  id: string\n  name: string\n  subject: string\n  body: string\n  bodyType: \"text\" | \"html\"\n  category: string\n  variables: string[]\n  isActive: boolean\n  usage_count: number\n  created_by: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface EmailAutomation {\n  id: string\n  name: string\n  trigger: {\n    type: \"schedule\" | \"event\" | \"condition\"\n    schedule?: string // cron expression\n    event?: string\n    condition?: Record<string, any>\n  }\n  actions: EmailAutomationAction[]\n  isActive: boolean\n  lastRun?: string\n  nextRun?: string\n  runCount: number\n  created_at: string\n  updated_at: string\n}\n\nexport interface EmailAutomationAction {\n  type: \"send_email\" | \"add_label\" | \"move_folder\" | \"create_task\" | \"update_client\"\n  templateId?: string\n  recipients?: string[]\n  data?: Record<string, any>\n}\n\nexport interface EmailSignature {\n  id: string\n  name: string\n  content: string\n  isDefault: boolean\n  created_at: string\n}\n\nexport interface EmailAnalytics {\n  sent: number\n  received: number\n  opened: number\n  clicked: number\n  replied: number\n  bounced: number\n  unsubscribed: number\n  openRate: number\n  clickRate: number\n  replyRate: number\n  bounceRate: number\n}\n\nexport interface EmailQuota {\n  userId: string\n  dailyLimit: number\n  monthlyLimit: number\n  dailySent: number\n  monthlySent: number\n  lastResetDate: string\n  attachmentSizeLimit: number // in MB\n  storageUsed: number // in MB\n  storageLimit: number // in MB\n}\n\nexport interface EmailRetentionPolicy {\n  sentEmailRetentionDays: number\n  receivedEmailRetentionDays: number\n  attachmentRetentionDays: number\n  deletedEmailRetentionDays: number\n  maxAttachmentSize: number // in MB\n  compressAttachments: boolean\n  autoDeleteOldEmails: boolean\n}\n\nclass EmailService {\n  private config: EmailConfig | null = null\n  private isConnected = false\n  private syncInterval: NodeJS.Timeout | null = null\n\n  // Email quotas - moderate limits\n  private readonly DEFAULT_QUOTAS = {\n    dailyLimit: 100,\n    monthlyLimit: 2000,\n    attachmentSizeLimit: 10, // 10MB per attachment\n    storageLimit: 500, // 500MB total storage per user\n  }\n\n  // Retention policies\n  private readonly DEFAULT_RETENTION: EmailRetentionPolicy = {\n    sentEmailRetentionDays: 365, // 1 year\n    receivedEmailRetentionDays: 365, // 1 year\n    attachmentRetentionDays: 180, // 6 months\n    deletedEmailRetentionDays: 30, // 30 days in trash\n    maxAttachmentSize: 10, // 10MB\n    compressAttachments: true,\n    autoDeleteOldEmails: true,\n  }\n\n  // Configuration\n  async configure(config: EmailConfig): Promise<void> {\n    this.config = config\n\n    try {\n      await this.testConnection()\n      this.isConnected = true\n\n      // Save configuration\n      await (supabase as any).from(\"email_configs\").upsert({\n        provider: config.provider,\n        username: config.username,\n        smtp_host: config.smtpHost,\n        smtp_port: config.smtpPort,\n        smtp_secure: config.smtpSecure,\n        access_token: config.accessToken,\n        refresh_token: config.refreshToken,\n        client_id: config.clientId,\n        updated_at: new Date().toISOString(),\n      } as any)\n\n      // Start sync if not already running\n      this.startSync()\n\n      // Start cleanup job\n      this.startCleanupJob()\n    } catch (error: any) {\n      this.isConnected = false\n      throw new Error(`Failed to configure email: ${error.message}`)\n    }\n  }\n\n  // Quota Management\n  async checkEmailQuota(userId: string): Promise<{ canSend: boolean; reason?: string; quota: EmailQuota }> {\n    const quota = await this.getUserQuota(userId)\n\n    // Reset daily counter if needed\n    const today = new Date().toDateString()\n    if (quota.lastResetDate !== today) {\n      quota.dailySent = 0\n      quota.lastResetDate = today\n      await this.updateUserQuota(userId, quota)\n    }\n\n    // Reset monthly counter if needed\n    const currentMonth = new Date().getMonth()\n    const lastResetMonth = new Date(quota.lastResetDate).getMonth()\n    if (currentMonth !== lastResetMonth) {\n      quota.monthlySent = 0\n      await this.updateUserQuota(userId, quota)\n    }\n\n    // Check daily limit\n    if (quota.dailySent >= quota.dailyLimit) {\n      return {\n        canSend: false,\n        reason: `Daily email limit reached (${quota.dailyLimit}). Resets tomorrow.`,\n        quota,\n      }\n    }\n\n    // Check monthly limit\n    if (quota.monthlySent >= quota.monthlyLimit) {\n      return {\n        canSend: false,\n        reason: `Monthly email limit reached (${quota.monthlyLimit}). Resets next month.`,\n        quota,\n      }\n    }\n\n    return { canSend: true, quota }\n  }\n\n  async getUserQuota(userId: string): Promise<EmailQuota> {\n    const { data, error } = await (supabase as any).from(\"email_quotas\").select(\"*\").eq(\"user_id\", userId).single()\n\n    if (error || !data) {\n      // Create default quota for new user\n      const defaultQuota: EmailQuota = {\n        userId,\n        ...this.DEFAULT_QUOTAS,\n        dailySent: 0,\n        monthlySent: 0,\n        lastResetDate: new Date().toDateString(),\n        storageUsed: 0,\n      }\n\n      await (supabase as any).from(\"email_quotas\").insert({\n        user_id: userId,\n        daily_limit: defaultQuota.dailyLimit,\n        monthly_limit: defaultQuota.monthlyLimit,\n        daily_sent: defaultQuota.dailySent,\n        monthly_sent: defaultQuota.monthlySent,\n        last_reset_date: defaultQuota.lastResetDate,\n        attachment_size_limit: defaultQuota.attachmentSizeLimit,\n        storage_used: defaultQuota.storageUsed,\n        storage_limit: defaultQuota.storageLimit,\n      } as any)\n\n      return defaultQuota\n    }\n\n    return {\n      userId: data.user_id,\n      dailyLimit: data.daily_limit,\n      monthlyLimit: data.monthly_limit,\n      dailySent: data.daily_sent,\n      monthlySent: data.monthly_sent,\n      lastResetDate: data.last_reset_date,\n      attachmentSizeLimit: data.attachment_size_limit,\n      storageUsed: data.storage_used,\n      storageLimit: data.storage_limit,\n    }\n  }\n\n  async updateUserQuota(userId: string, quota: EmailQuota): Promise<void> {\n    await (supabase as any)\n      .from(\"email_quotas\")\n      .update({\n        daily_sent: quota.dailySent,\n        monthly_sent: quota.monthlySent,\n        last_reset_date: quota.lastResetDate,\n        storage_used: quota.storageUsed,\n      } as any)\n      .eq(\"user_id\", userId)\n  }\n\n  // Attachment Management with Size Limits\n  async validateAttachments(\n    attachments: EmailAttachment[],\n    userId: string,\n  ): Promise<{ valid: boolean; reason?: string }> {\n    if (!attachments || attachments.length === 0) {\n      return { valid: true }\n    }\n\n    const quota = await this.getUserQuota(userId)\n\n    // Check individual attachment size\n    for (const attachment of attachments) {\n      const sizeInMB = attachment.size / (1024 * 1024)\n      if (sizeInMB > quota.attachmentSizeLimit) {\n        return {\n          valid: false,\n          reason: `Attachment \"${attachment.filename}\" exceeds size limit of ${quota.attachmentSizeLimit}MB`,\n        }\n      }\n    }\n\n    // Check total storage usage\n    const totalAttachmentSize = attachments.reduce((sum, att) => sum + att.size, 0)\n    const totalSizeInMB = totalAttachmentSize / (1024 * 1024)\n\n    if (quota.storageUsed + totalSizeInMB > quota.storageLimit) {\n      return {\n        valid: false,\n        reason: `Storage limit exceeded. Available: ${(quota.storageLimit - quota.storageUsed).toFixed(1)}MB, Required: ${totalSizeInMB.toFixed(1)}MB`,\n      }\n    }\n\n    return { valid: true }\n  }\n\n  async compressAttachment(attachment: EmailAttachment): Promise<EmailAttachment> {\n    // Simple compression simulation - in real implementation, use image compression libraries\n    if (attachment.contentType.startsWith(\"image/\") && attachment.size > 1024 * 1024) {\n      return {\n        ...attachment,\n        size: Math.floor(attachment.size * 0.7), // Simulate 30% compression\n        filename: attachment.filename.replace(/(\\.[^.]+)$/, \"_compressed$1\"),\n      }\n    }\n    return attachment\n  }\n\n  async testConnection(): Promise<boolean> {\n    if (!this.config) {\n      throw new Error(\"Email not configured\")\n    }\n\n    try {\n      // Test connection based on provider\n      switch (this.config.provider) {\n        case \"mailjet\":\n          return await this.testMailjetConnection()\n        case \"outlook\":\n          return await this.testOutlookConnection()\n        case \"smtp\":\n          return await this.testSmtpConnection()\n        default:\n          throw new Error(\"Unsupported email provider\")\n      }\n    } catch (error) {\n      // Silent error handling - Email connection test failed\n      return false\n    }\n  }\n\n  private async testMailjetConnection(): Promise<boolean> {\n    // Test Mailjet API connection\n    const response = await fetch(\"https://api.mailjet.com/v3/REST/contact\", {\n      headers: {\n        Authorization: `Basic ${btoa(`${this.config?.clientId}:${this.config?.clientSecret}`)}`,\n      },\n    })\n    return response.ok\n  }\n\n  private async testOutlookConnection(): Promise<boolean> {\n    // Test Outlook API connection\n    const response = await fetch(\"https://graph.microsoft.com/v1.0/me\", {\n      headers: {\n        Authorization: `Bearer ${this.config?.accessToken}`,\n      },\n    })\n    return response.ok\n  }\n\n  private async testSmtpConnection(): Promise<boolean> {\n    // For SMTP, we'll simulate a connection test\n    // In a real implementation, you'd test the SMTP connection\n    return true\n  }\n\n  // Email Operations with Quota Checks\n  async sendEmail(message: Partial<EmailMessage>, userId: string): Promise<EmailMessage> {\n    if (!this.isConnected) {\n      throw new Error(\"Email service not connected\")\n    }\n\n    // Check quota\n    const quotaCheck = await this.checkEmailQuota(userId)\n    if (!quotaCheck.canSend) {\n      throw new Error(quotaCheck.reason)\n    }\n\n    // Validate attachments\n    if (message.attachments) {\n      const attachmentValidation = await this.validateAttachments(message.attachments, userId)\n      if (!attachmentValidation.valid) {\n        throw new Error(attachmentValidation.reason)\n      }\n\n      // Compress attachments if enabled\n      if (this.DEFAULT_RETENTION.compressAttachments) {\n        message.attachments = await Promise.all(message.attachments.map((att) => this.compressAttachment(att)))\n      }\n    }\n\n    const emailMessage: EmailMessage = {\n      id: crypto.randomUUID(),\n      from: this.config?.username || \"\",\n      to: message.to || [],\n      cc: message.cc,\n      bcc: message.bcc,\n      subject: message.subject || \"\",\n      body: message.body || \"\",\n      bodyType: message.bodyType || \"html\",\n      attachments: message.attachments,\n      priority: message.priority || \"normal\",\n      readReceipt: message.readReceipt,\n      deliveryReceipt: message.deliveryReceipt,\n      scheduledAt: message.scheduledAt,\n      sentAt: new Date().toISOString(),\n      status: \"sent\",\n      threadId: message.threadId,\n      inReplyTo: message.inReplyTo,\n      references: message.references,\n      labels: message.labels || [],\n      folder: \"sent\",\n      isRead: true,\n      isStarred: false,\n      isImportant: false,\n      clientId: message.clientId,\n      projectId: message.projectId,\n      taskId: message.taskId,\n      metadata: message.metadata,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n    }\n\n    try {\n      // Send email based on provider\n      await this.sendViaProvider(emailMessage)\n\n      // Update quota\n      quotaCheck.quota.dailySent += 1\n      quotaCheck.quota.monthlySent += 1\n\n      // Update storage usage\n      if (emailMessage.attachments) {\n        const attachmentSize = emailMessage.attachments.reduce((sum, att) => sum + att.size, 0)\n        quotaCheck.quota.storageUsed += attachmentSize / (1024 * 1024)\n      }\n\n      await this.updateUserQuota(userId, quotaCheck.quota)\n\n      // Save to database\n      await (supabase as any).from(\"emails\").insert({\n        id: emailMessage.id,\n        from_email: emailMessage.from,\n        to_email: emailMessage.to,\n        cc_email: emailMessage.cc,\n        bcc_email: emailMessage.bcc,\n        subject: emailMessage.subject,\n        body: emailMessage.body,\n        body_type: emailMessage.bodyType,\n        attachments: emailMessage.attachments,\n        priority: emailMessage.priority,\n        status: emailMessage.status,\n        thread_id: emailMessage.threadId,\n        folder: emailMessage.folder,\n        is_read: emailMessage.isRead,\n        is_starred: emailMessage.isStarred,\n        is_important: emailMessage.isImportant,\n        client_id: emailMessage.clientId,\n        project_id: emailMessage.projectId,\n        task_id: emailMessage.taskId,\n        metadata: emailMessage.metadata,\n        sent_at: emailMessage.sentAt,\n        created_at: emailMessage.created_at,\n        updated_at: emailMessage.updated_at,\n        user_id: userId,\n      } as any)\n\n      return emailMessage\n    } catch (error: any) {\n      emailMessage.status = \"failed\"\n      throw new Error(`Failed to send email: ${error.message}`)\n    }\n  }\n\n  private async sendViaProvider(message: EmailMessage): Promise<void> {\n    switch (this.config?.provider) {\n      case \"mailjet\":\n        await this.sendViaMailjet(message)\n        break\n      case \"outlook\":\n        await this.sendViaOutlook(message)\n        break\n      case \"smtp\":\n        await this.sendViaSmtp(message)\n        break\n      default:\n        throw new Error(\"Unsupported email provider\")\n    }\n  }\n\n  private async sendViaMailjet(message: EmailMessage): Promise<void> {\n    const email = this.formatEmailForMailjet(message)\n\n    const response = await fetch(\"https://api.mailjet.com/v3.1/send\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Basic ${btoa(`${this.config?.clientId}:${this.config?.clientSecret}`)}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(email),\n    })\n\n    if (!response.ok) {\n      throw new Error(`Mailjet API error: ${response.statusText}`)\n    }\n  }\n\n  private async sendViaOutlook(message: EmailMessage): Promise<void> {\n    const email = this.formatEmailForOutlook(message)\n\n    const response = await fetch(\"https://graph.microsoft.com/v1.0/me/sendMail\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${this.config?.accessToken}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ message: email }),\n    })\n\n    if (!response.ok) {\n      throw new Error(`Outlook API error: ${response.statusText}`)\n    }\n  }\n\n  private async sendViaSmtp(message: EmailMessage): Promise<void> {\n    // SMTP implementation would go here\n    // For now, we'll simulate sending\n    // Silent logging - Sending via SMTP\n  }\n\n  private formatEmailForMailjet(message: EmailMessage): any {\n    return {\n      Messages: [\n        {\n          From: {\n            Email: this.config?.username || \"\",\n            Name: \"CRM System\",\n          },\n          To: message.to.map((email) => ({ Email: email })),\n          Cc: message.cc?.map((email) => ({ Email: email })) || [],\n          Bcc: message.bcc?.map((email) => ({ Email: email })) || [],\n          Subject: message.subject,\n          HTMLPart: message.bodyType === \"html\" ? message.body : undefined,\n          TextPart: message.bodyType === \"text\" ? message.body : undefined,\n        },\n      ],\n    }\n  }\n\n  private formatEmailForOutlook(message: EmailMessage): any {\n    return {\n      subject: message.subject,\n      body: {\n        contentType: message.bodyType === \"html\" ? \"HTML\" : \"Text\",\n        content: message.body,\n      },\n      toRecipients: message.to.map((email) => ({ emailAddress: { address: email } })),\n      ccRecipients: message.cc?.map((email) => ({ emailAddress: { address: email } })) || [],\n      bccRecipients: message.bcc?.map((email) => ({ emailAddress: { address: email } })) || [],\n      importance: message.priority === \"high\" ? \"high\" : message.priority === \"low\" ? \"low\" : \"normal\",\n    }\n  }\n\n  // Cleanup and Retention\n  private startCleanupJob(): void {\n    // Run cleanup daily at 2 AM\n    const now = new Date()\n    const tomorrow = new Date(now)\n    tomorrow.setDate(tomorrow.getDate() + 1)\n    tomorrow.setHours(2, 0, 0, 0)\n\n    const msUntilTomorrow = tomorrow.getTime() - now.getTime()\n\n    setTimeout(() => {\n      this.runCleanup()\n      // Then run every 24 hours\n      setInterval(() => this.runCleanup(), 24 * 60 * 60 * 1000)\n    }, msUntilTomorrow)\n  }\n\n  private async runCleanup(): Promise<void> {\n    try {\n      // Silent logging - Starting email cleanup job\n\n      if (this.DEFAULT_RETENTION.autoDeleteOldEmails) {\n        await this.cleanupOldEmails()\n        await this.cleanupOldAttachments()\n        await this.cleanupDeletedEmails()\n      }\n\n      // Silent logging - Email cleanup job completed\n    } catch (error) {\n      // Silent error handling - Email cleanup job failed\n    }\n  }\n\n  private async cleanupOldEmails(): Promise<void> {\n    const sentCutoff = new Date()\n    sentCutoff.setDate(sentCutoff.getDate() - this.DEFAULT_RETENTION.sentEmailRetentionDays)\n\n    const receivedCutoff = new Date()\n    receivedCutoff.setDate(receivedCutoff.getDate() - this.DEFAULT_RETENTION.receivedEmailRetentionDays)\n\n    // Delete old sent emails\n    await (supabase as any).from(\"emails\").delete().eq(\"folder\", \"sent\").lt(\"created_at\", sentCutoff.toISOString())\n\n    // Delete old received emails\n    await (supabase as any).from(\"emails\").delete().eq(\"folder\", \"inbox\").lt(\"created_at\", receivedCutoff.toISOString())\n  }\n\n  private async cleanupOldAttachments(): Promise<void> {\n    const cutoff = new Date()\n    cutoff.setDate(cutoff.getDate() - this.DEFAULT_RETENTION.attachmentRetentionDays)\n\n    // Get emails with attachments older than retention period\n    const { data: oldEmails } = await (supabase as any)\n      .from(\"emails\")\n      .select(\"id, attachments, user_id\")\n      .not(\"attachments\", \"is\", null)\n      .lt(\"created_at\", cutoff.toISOString())\n\n    if (oldEmails) {\n      for (const email of oldEmails as any[]) {\n        // Calculate storage to be freed\n        const attachmentSize = (email as any).attachments?.reduce((sum: number, att: any) => sum + att.size, 0) || 0\n        const sizeInMB = attachmentSize / (1024 * 1024)\n\n        // Remove attachments from email\n        await (supabase as any).from(\"emails\").update({ attachments: null } as any).eq(\"id\", (email as any).id)\n\n        // Update user storage quota\n        if ((email as any).user_id) {\n          const quota = await this.getUserQuota((email as any).user_id)\n          quota.storageUsed = Math.max(0, quota.storageUsed - sizeInMB)\n          await this.updateUserQuota((email as any).user_id, quota)\n        }\n      }\n    }\n  }\n\n  private async cleanupDeletedEmails(): Promise<void> {\n    if (!supabase) throw new Error('Database not initialized')\n    \n    const cutoff = new Date()\n    cutoff.setDate(cutoff.getDate() - this.DEFAULT_RETENTION.deletedEmailRetentionDays)\n\n    await supabase.from(\"emails\").delete().eq(\"folder\", \"trash\").lt(\"updated_at\", cutoff.toISOString())\n  }\n\n  // Email Templates\n  async createTemplate(\n    template: Omit<EmailTemplate, \"id\" | \"usage_count\" | \"created_at\" | \"updated_at\">,\n  ): Promise<EmailTemplate> {\n    const newTemplate: EmailTemplate = {\n      id: crypto.randomUUID(),\n      usage_count: 0,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      ...template,\n    }\n\n    const { error } = await (supabase as any).from(\"email_templates\").insert({\n      id: newTemplate.id,\n      name: newTemplate.name,\n      subject: newTemplate.subject,\n      body: newTemplate.body,\n      body_type: newTemplate.bodyType,\n      category: newTemplate.category,\n      variables: newTemplate.variables,\n      is_active: newTemplate.isActive,\n      usage_count: newTemplate.usage_count,\n      created_by: newTemplate.created_by,\n      created_at: newTemplate.created_at,\n      updated_at: newTemplate.updated_at,\n    } as any)\n\n    if (error) {\n      throw new Error(`Failed to create template: ${error.message}`)\n    }\n\n    return newTemplate\n  }\n\n  async getTemplates(category?: string): Promise<EmailTemplate[]> {\n    let query = (supabase as any).from(\"email_templates\").select(\"*\").eq(\"is_active\", true).order(\"name\")\n\n    if (category) {\n      query = query.eq(\"category\", category)\n    }\n\n    const { data, error } = await query\n\n    if (error) {\n      throw new Error(`Failed to get templates: ${error.message}`)\n    }\n\n    return (data || []).map((template: any) => ({\n      id: template.id,\n      name: template.name,\n      subject: template.subject,\n      body: template.body,\n      bodyType: template.body_type,\n      category: template.category,\n      variables: template.variables || [],\n      isActive: template.is_active,\n      usage_count: template.usage_count,\n      created_by: template.created_by,\n      created_at: template.created_at,\n      updated_at: template.updated_at,\n    }))\n  }\n\n  async renderTemplate(\n    templateId: string,\n    variables: Record<string, string>,\n  ): Promise<{ subject: string; body: string }> {\n    const template = await this.getTemplate(templateId)\n    if (!template) {\n      throw new Error(\"Template not found\")\n    }\n\n    let subject = template.subject\n    let body = template.body\n\n    // Replace variables\n    Object.entries(variables).forEach(([key, value]) => {\n      const placeholder = `{{${key}}}`\n      subject = subject.replace(new RegExp(placeholder, \"g\"), value)\n      body = body.replace(new RegExp(placeholder, \"g\"), value)\n    })\n\n    // Increment usage count\n    await (supabase as any)\n      .from(\"email_templates\")\n      .update({ usage_count: template.usage_count + 1 } as any)\n      .eq(\"id\", templateId)\n\n    return { subject, body }\n  }\n\n  private async getTemplate(id: string): Promise<EmailTemplate | null> {\n    const { data, error } = await (supabase as any).from(\"email_templates\").select(\"*\").eq(\"id\", id).single()\n\n    if (error) return null\n\n    return {\n      id: (data as any).id,\n      name: (data as any).name,\n      subject: (data as any).subject,\n      body: (data as any).body,\n      bodyType: (data as any).body_type,\n      category: (data as any).category,\n      variables: (data as any).variables || [],\n      isActive: (data as any).is_active,\n      usage_count: (data as any).usage_count,\n      created_by: (data as any).created_by,\n      created_at: (data as any).created_at,\n      updated_at: (data as any).updated_at,\n    }\n  }\n\n  // Email Sync\n  private startSync(): void {\n    if (this.syncInterval) {\n      clearInterval(this.syncInterval)\n    }\n\n    this.syncInterval = setInterval(\n      () => {\n        this.syncEmails()\n      },\n      5 * 60 * 1000,\n    ) // Sync every 5 minutes\n  }\n\n  private async syncEmails(): Promise<void> {\n    if (!this.isConnected) return\n\n    try {\n      // Sync based on provider\n      switch (this.config?.provider) {\n                case \"outlook\":\n          await this.syncOutlookEmails()\n          break\n      }\n    } catch (error) {\n      // Silent error handling - Email sync failed\n    }\n  }\n\n  \n  private async syncOutlookEmails(): Promise<void> {\n    // Outlook sync implementation\n    // Silent logging - Syncing Outlook emails\n  }\n\n  // Analytics\n  async getAnalytics(dateRange?: { start: Date; end: Date }): Promise<EmailAnalytics> {\n    let query = (supabase as any).from(\"emails\").select(\"status, is_read, metadata\")\n\n    if (dateRange) {\n      query = query.gte(\"created_at\", dateRange.start.toISOString()).lte(\"created_at\", dateRange.end.toISOString())\n    }\n\n    const { data, error } = await query\n\n    if (error) {\n      throw new Error(`Failed to get analytics: ${error.message}`)\n    }\n\n    const emails = data || []\n    const sent = emails.filter((e: any) => e.status === \"sent\").length\n    const opened = emails.filter((e: any) => e.is_read).length\n    const clicked = emails.filter((e: any) => e.metadata?.clicked).length\n    const replied = emails.filter((e: any) => e.metadata?.replied).length\n    const bounced = emails.filter((e: any) => e.status === \"failed\").length\n\n    return {\n      sent,\n      received: emails.length - sent,\n      opened,\n      clicked,\n      replied,\n      bounced,\n      unsubscribed: 0, // Would need separate tracking\n      openRate: sent > 0 ? (opened / sent) * 100 : 0,\n      clickRate: opened > 0 ? (clicked / opened) * 100 : 0,\n      replyRate: sent > 0 ? (replied / sent) * 100 : 0,\n      bounceRate: sent > 0 ? (bounced / sent) * 100 : 0,\n    }\n  }\n\n  // Quota Management Methods\n  async getQuotaStatus(userId: string): Promise<{\n    daily: { used: number; limit: number; remaining: number }\n    monthly: { used: number; limit: number; remaining: number }\n    storage: { used: number; limit: number; remaining: number }\n  }> {\n    const quota = await this.getUserQuota(userId)\n\n    return {\n      daily: {\n        used: quota.dailySent,\n        limit: quota.dailyLimit,\n        remaining: quota.dailyLimit - quota.dailySent,\n      },\n      monthly: {\n        used: quota.monthlySent,\n        limit: quota.monthlyLimit,\n        remaining: quota.monthlyLimit - quota.monthlySent,\n      },\n      storage: {\n        used: quota.storageUsed,\n        limit: quota.storageLimit,\n        remaining: quota.storageLimit - quota.storageUsed,\n      },\n    }\n  }\n\n  // Cleanup\n  destroy(): void {\n    if (this.syncInterval) {\n      clearInterval(this.syncInterval)\n    }\n  }\n}\n\nexport const emailService = new EmailService()\nexport default emailService\n"],"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","ignoreList":[]}