{"version":3,"names":["default","cov_13uwxwng13","f","s","_default","enhancedAuditLogService","EnhancedAuditLogService","logEvent","event","enhancedEvent","id","generateEventId","timestamp","b","Date","riskScore","calculateRiskScore","tags","generateTags","events","unshift","length","maxEvents","slice","_auditLogService","auditLogService","log","userId","userEmail","action","resource","details","severity","category","mapEventTypeToCategory","eventType","success","error","console","riskThresholds","high","triggerSecurityAlert","searchEvents","filters","limit","offset","filteredEvents","filter","e","includes","toLowerCase","ipAddress","dateFrom","dateTo","undefined","riskScoreMin","riskScoreMax","some","tag","searchText","searchLower","JSON","stringify","total","paginatedEvents","hasMore","getMetrics","timeRange","from","to","eventsByType","eventsBySeverity","userCounts","ipCounts","failedLogins","successfulLogins","highRiskEvents","forEach","key","count","Math","max","topUsers","Object","values","sort","a","map","user","eventCount","topIPs","entries","ip","data","recentActivity","totalEvents","uniqueUsers","keys","uniqueIPs","score","typeScores","severityMultipliers","hour","getHours","min","push","day","getDay","medium","now","random","toString","substr","warn","exportAuditData","format","headers","csvRows","toISOString","join","row","cell","replace","getUserActivity","getSuspiciousActivity","last24Hours","getTime","recentEvents","lastAttempt","multipleFailedLogins","_","offHoursActivity","unusualLocations","low"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\enhancedAuditLog.ts"],"sourcesContent":["import { auditLogService, type AuditLogEntry } from './auditLogService';\n\nexport interface EnhancedAuditEvent {\n  id?: string;\n  timestamp?: Date;\n  eventType: 'auth' | 'data_access' | 'data_modification' | 'security_violation' | 'system_event' | 'user_action';\n  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';\n  userId?: string;\n  userEmail?: string;\n  ipAddress?: string;\n  userAgent?: string;\n  action: string;\n  resource: string;\n  details: Record<string, any>;\n  success: boolean;\n  sessionId?: string;\n  location?: {\n    country?: string;\n    city?: string;\n    coordinates?: [number, number];\n  };\n  riskScore?: number;\n  tags?: string[];\n}\n\nexport interface AuditSearchFilters {\n  eventType?: string[];\n  severity?: string[];\n  userId?: string;\n  userEmail?: string;\n  ipAddress?: string;\n  dateFrom?: Date;\n  dateTo?: Date;\n  success?: boolean;\n  riskScoreMin?: number;\n  riskScoreMax?: number;\n  tags?: string[];\n  searchText?: string;\n}\n\nexport interface AuditMetrics {\n  totalEvents: number;\n  eventsByType: Record<string, number>;\n  eventsBySeverity: Record<string, number>;\n  uniqueUsers: number;\n  uniqueIPs: number;\n  failedLogins: number;\n  successfulLogins: number;\n  highRiskEvents: number;\n  recentActivity: EnhancedAuditEvent[];\n  topUsers: { userId: string; userEmail: string; eventCount: number }[];\n  topIPs: { ipAddress: string; eventCount: number; riskScore: number }[];\n}\n\nclass EnhancedAuditLogService {\n  private events: EnhancedAuditEvent[] = [];\n  private maxEvents = 10000; // Keep last 10k events in memory\n  private riskThresholds = {\n    low: 0.3,\n    medium: 0.6,\n    high: 0.8\n  };\n\n  /**\n   * Log an enhanced audit event\n   */\n  async logEvent(event: EnhancedAuditEvent): Promise<void> {\n    const enhancedEvent: EnhancedAuditEvent = {\n      ...event,\n      id: this.generateEventId(),\n      timestamp: event.timestamp || new Date(),\n      riskScore: event.riskScore || this.calculateRiskScore(event),\n      tags: event.tags || this.generateTags(event)\n    };\n\n    // Add to in-memory storage\n    this.events.unshift(enhancedEvent);\n    \n    // Maintain max events limit\n    if (this.events.length > this.maxEvents) {\n      this.events = this.events.slice(0, this.maxEvents);\n    }\n\n    // Also log to the existing audit service\n    try {\n      await auditLogService.log({\n        userId: event.userId,\n        userEmail: event.userEmail,\n        action: event.action,\n        resource: event.resource,\n        details: event.details,\n        severity: event.severity === 'info' ? 'low' : event.severity,\n        category: this.mapEventTypeToCategory(event.eventType),\n        success: event.success\n      });\n    } catch (error) {\n      console.error('Failed to log to audit service:', error);\n    }\n\n    // Trigger real-time alerts for high-risk events\n    if (enhancedEvent.riskScore && enhancedEvent.riskScore > this.riskThresholds.high) {\n      this.triggerSecurityAlert(enhancedEvent);\n    }\n  }\n\n  /**\n   * Search and filter audit events\n   */\n  searchEvents(filters: AuditSearchFilters, limit = 100, offset = 0): {\n    events: EnhancedAuditEvent[];\n    total: number;\n    hasMore: boolean;\n  } {\n    let filteredEvents = [...this.events];\n\n    // Apply filters\n    if (filters.eventType?.length) {\n      filteredEvents = filteredEvents.filter(e => filters.eventType!.includes(e.eventType));\n    }\n\n    if (filters.severity?.length) {\n      filteredEvents = filteredEvents.filter(e => filters.severity!.includes(e.severity));\n    }\n\n    if (filters.userId) {\n      filteredEvents = filteredEvents.filter(e => e.userId === filters.userId);\n    }\n\n    if (filters.userEmail) {\n      filteredEvents = filteredEvents.filter(e => \n        e.userEmail?.toLowerCase().includes(filters.userEmail!.toLowerCase())\n      );\n    }\n\n    if (filters.ipAddress) {\n      filteredEvents = filteredEvents.filter(e => e.ipAddress === filters.ipAddress);\n    }\n\n    if (filters.dateFrom) {\n      filteredEvents = filteredEvents.filter(e => \n        e.timestamp && e.timestamp >= filters.dateFrom!\n      );\n    }\n\n    if (filters.dateTo) {\n      filteredEvents = filteredEvents.filter(e => \n        e.timestamp && e.timestamp <= filters.dateTo!\n      );\n    }\n\n    if (filters.success !== undefined) {\n      filteredEvents = filteredEvents.filter(e => e.success === filters.success);\n    }\n\n    if (filters.riskScoreMin !== undefined) {\n      filteredEvents = filteredEvents.filter(e => \n        e.riskScore && e.riskScore >= filters.riskScoreMin!\n      );\n    }\n\n    if (filters.riskScoreMax !== undefined) {\n      filteredEvents = filteredEvents.filter(e => \n        e.riskScore && e.riskScore <= filters.riskScoreMax!\n      );\n    }\n\n    if (filters.tags?.length) {\n      filteredEvents = filteredEvents.filter(e => \n        e.tags?.some(tag => filters.tags!.includes(tag))\n      );\n    }\n\n    if (filters.searchText) {\n      const searchLower = filters.searchText.toLowerCase();\n      filteredEvents = filteredEvents.filter(e => \n        e.action.toLowerCase().includes(searchLower) ||\n        e.resource.toLowerCase().includes(searchLower) ||\n        JSON.stringify(e.details).toLowerCase().includes(searchLower)\n      );\n    }\n\n    const total = filteredEvents.length;\n    const paginatedEvents = filteredEvents.slice(offset, offset + limit);\n    const hasMore = offset + limit < total;\n\n    return {\n      events: paginatedEvents,\n      total,\n      hasMore\n    };\n  }\n\n  /**\n   * Get audit metrics and analytics\n   */\n  getMetrics(timeRange?: { from: Date; to: Date }): AuditMetrics {\n    let events = this.events;\n\n    if (timeRange) {\n      events = events.filter(e => \n        e.timestamp && \n        e.timestamp >= timeRange.from && \n        e.timestamp <= timeRange.to\n      );\n    }\n\n    const eventsByType: Record<string, number> = {};\n    const eventsBySeverity: Record<string, number> = {};\n    const userCounts: Record<string, { userId: string; userEmail: string; count: number }> = {};\n    const ipCounts: Record<string, { count: number; riskScore: number }> = {};\n    \n    let failedLogins = 0;\n    let successfulLogins = 0;\n    let highRiskEvents = 0;\n\n    events.forEach(event => {\n      // Count by type\n      eventsByType[event.eventType] = (eventsByType[event.eventType] || 0) + 1;\n      \n      // Count by severity\n      eventsBySeverity[event.severity] = (eventsBySeverity[event.severity] || 0) + 1;\n      \n      // Count users\n      if (event.userId && event.userEmail) {\n        const key = event.userId;\n        if (!userCounts[key]) {\n          userCounts[key] = { userId: event.userId, userEmail: event.userEmail, count: 0 };\n        }\n        userCounts[key].count++;\n      }\n      \n      // Count IPs\n      if (event.ipAddress) {\n        if (!ipCounts[event.ipAddress]) {\n          ipCounts[event.ipAddress] = { count: 0, riskScore: 0 };\n        }\n        ipCounts[event.ipAddress].count++;\n        ipCounts[event.ipAddress].riskScore = Math.max(\n          ipCounts[event.ipAddress].riskScore,\n          event.riskScore || 0\n        );\n      }\n      \n      // Count login events\n      if (event.eventType === 'auth') {\n        if (event.success) {\n          successfulLogins++;\n        } else {\n          failedLogins++;\n        }\n      }\n      \n      // Count high-risk events\n      if (event.riskScore && event.riskScore > this.riskThresholds.high) {\n        highRiskEvents++;\n      }\n    });\n\n    const topUsers = Object.values(userCounts)\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10)\n      .map(user => ({ userId: user.userId, userEmail: user.userEmail, eventCount: user.count }));\n\n    const topIPs = Object.entries(ipCounts)\n      .map(([ip, data]) => ({ ipAddress: ip, eventCount: data.count, riskScore: data.riskScore }))\n      .sort((a, b) => b.eventCount - a.eventCount)\n      .slice(0, 10);\n\n    const recentActivity = events.slice(0, 20);\n\n    return {\n      totalEvents: events.length,\n      eventsByType,\n      eventsBySeverity,\n      uniqueUsers: Object.keys(userCounts).length,\n      uniqueIPs: Object.keys(ipCounts).length,\n      failedLogins,\n      successfulLogins,\n      highRiskEvents,\n      recentActivity,\n      topUsers,\n      topIPs\n    };\n  }\n\n  /**\n   * Calculate risk score for an event\n   */\n  private calculateRiskScore(event: EnhancedAuditEvent): number {\n    let score = 0;\n\n    // Base score by event type\n    const typeScores = {\n      'security_violation': 0.8,\n      'auth': event.success ? 0.1 : 0.6,\n      'data_modification': 0.4,\n      'data_access': 0.2,\n      'user_action': 0.1,\n      'system_event': 0.1\n    };\n    \n    score += typeScores[event.eventType] || 0.1;\n\n    // Severity multiplier\n    const severityMultipliers = {\n      'critical': 1.0,\n      'high': 0.8,\n      'medium': 0.6,\n      'low': 0.4,\n      'info': 0.2\n    };\n    \n    score *= severityMultipliers[event.severity] || 0.5;\n\n    // Failed action penalty\n    if (!event.success) {\n      score += 0.3;\n    }\n\n    // Time-based factors (higher risk for off-hours)\n    if (event.timestamp) {\n      const hour = event.timestamp.getHours();\n      if (hour < 6 || hour > 22) {\n        score += 0.2; // Off-hours activity\n      }\n    }\n\n    // Ensure score is between 0 and 1\n    return Math.min(Math.max(score, 0), 1);\n  }\n\n  /**\n   * Generate tags for an event\n   */\n  private generateTags(event: EnhancedAuditEvent): string[] {\n    const tags: string[] = [];\n\n    // Add severity tag\n    tags.push(`severity:${event.severity}`);\n    \n    // Add success/failure tag\n    tags.push(event.success ? 'success' : 'failure');\n    \n    // Add time-based tags\n    if (event.timestamp) {\n      const hour = event.timestamp.getHours();\n      if (hour < 6 || hour > 22) {\n        tags.push('off-hours');\n      }\n      \n      const day = event.timestamp.getDay();\n      if (day === 0 || day === 6) {\n        tags.push('weekend');\n      }\n    }\n    \n    // Add event-specific tags\n    if (event.eventType === 'auth') {\n      if (event.action.includes('login')) {\n        tags.push('login');\n      }\n      if (event.action.includes('2fa')) {\n        tags.push('2fa');\n      }\n    }\n    \n    if (event.eventType === 'security_violation') {\n      tags.push('security-alert');\n    }\n    \n    // Add risk level tags\n    const riskScore = event.riskScore || this.calculateRiskScore(event);\n    if (riskScore > this.riskThresholds.high) {\n      tags.push('high-risk');\n    } else if (riskScore > this.riskThresholds.medium) {\n      tags.push('medium-risk');\n    } else {\n      tags.push('low-risk');\n    }\n\n    return tags;\n  }\n\n  /**\n   * Generate unique event ID\n   */\n  private generateEventId(): string {\n    return `audit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private mapEventTypeToCategory(eventType: EnhancedAuditEvent['eventType']): AuditLogEntry['category'] {\n    switch (eventType) {\n      case 'data_access':\n      case 'data_modification':\n        return 'data';\n      case 'security_violation':\n        return 'security';\n      case 'system_event':\n        return 'system';\n      case 'user_action':\n        return 'user';\n      case 'auth':\n        return 'auth';\n      default:\n        return 'system';\n    }\n  }\n\n  /**\n   * Trigger security alert for high-risk events\n   */\n  private triggerSecurityAlert(event: EnhancedAuditEvent): void {\n    // In a real implementation, this would send notifications\n    // to security team, trigger automated responses, etc.\n    console.warn('🚨 High-risk security event detected:', {\n      id: event.id,\n      action: event.action,\n      userId: event.userId,\n      ipAddress: event.ipAddress,\n      riskScore: event.riskScore,\n      timestamp: event.timestamp\n    });\n  }\n\n  /**\n   * Export audit data for compliance\n   */\n  exportAuditData(filters?: AuditSearchFilters, format: 'json' | 'csv' = 'json'): string {\n    const { events } = this.searchEvents(filters || {}, 10000, 0);\n    \n    if (format === 'csv') {\n      const headers = [\n        'ID', 'Timestamp', 'Event Type', 'Severity', 'User ID', 'User Email',\n        'IP Address', 'Action', 'Resource', 'Success', 'Risk Score', 'Tags'\n      ];\n      \n      const csvRows = events.map(event => [\n        event.id || '',\n        event.timestamp?.toISOString() || '',\n        event.eventType,\n        event.severity,\n        event.userId || '',\n        event.userEmail || '',\n        event.ipAddress || '',\n        event.action,\n        event.resource,\n        event.success.toString(),\n        event.riskScore?.toString() || '',\n        event.tags?.join(';') || ''\n      ]);\n      \n      return [headers, ...csvRows].map(row => \n        row.map(cell => `\"${cell.replace(/\"/g, '\"\"')}\"`).join(',')\n      ).join('\\n');\n    }\n    \n    return JSON.stringify(events, null, 2);\n  }\n\n  /**\n   * Get events for a specific user\n   */\n  getUserActivity(userId: string, limit = 50): EnhancedAuditEvent[] {\n    return this.events\n      .filter(event => event.userId === userId)\n      .slice(0, limit);\n  }\n\n  /**\n   * Get suspicious activity patterns\n   */\n  getSuspiciousActivity(): {\n    multipleFailedLogins: { userId: string; count: number; lastAttempt: Date }[];\n    unusualLocations: { userId: string; ipAddress: string; location?: string }[];\n    offHoursActivity: EnhancedAuditEvent[];\n    highRiskEvents: EnhancedAuditEvent[];\n  } {\n    const now = new Date();\n    const last24Hours = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n    \n    const recentEvents = this.events.filter(e => \n      e.timestamp && e.timestamp >= last24Hours\n    );\n    \n    // Multiple failed logins\n    const failedLogins: Record<string, { count: number; lastAttempt: Date }> = {};\n    recentEvents\n      .filter(e => e.eventType === 'auth' && !e.success && e.userId)\n      .forEach(event => {\n        const userId = event.userId!;\n        if (!failedLogins[userId]) {\n          failedLogins[userId] = { count: 0, lastAttempt: event.timestamp! };\n        }\n        failedLogins[userId].count++;\n        if (event.timestamp! > failedLogins[userId].lastAttempt) {\n          failedLogins[userId].lastAttempt = event.timestamp!;\n        }\n      });\n    \n    const multipleFailedLogins = Object.entries(failedLogins)\n      .filter(([_, data]) => data.count >= 3)\n      .map(([userId, data]) => ({ userId, ...data }));\n    \n    // Off-hours activity\n    const offHoursActivity = recentEvents.filter(event => {\n      if (!event.timestamp) return false;\n      const hour = event.timestamp.getHours();\n      return hour < 6 || hour > 22;\n    });\n    \n    // High-risk events\n    const highRiskEvents = recentEvents.filter(event => \n      event.riskScore && event.riskScore > this.riskThresholds.high\n    );\n    \n    return {\n      multipleFailedLogins,\n      unusualLocations: [], // Would need geolocation service\n      offHoursActivity,\n      highRiskEvents\n    };\n  }\n}\n\nexport const enhancedAuditLogService = new EnhancedAuditLogService();\nexport default enhancedAuditLogService;"],"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","ignoreList":[]}