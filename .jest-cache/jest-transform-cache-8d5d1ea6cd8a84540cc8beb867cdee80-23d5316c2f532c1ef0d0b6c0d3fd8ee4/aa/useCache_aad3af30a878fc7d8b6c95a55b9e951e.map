{"version":3,"names":["cov_13d1ng2y1v","actualCoverage","s","useApiCache","f","useCacheInvalidation","useCacheStats","useMemoryCache","useOptimisticCache","usePreloader","key","fetcher","options","b","ttl","enabled","staleWhileRevalidate","onError","onSuccess","state","setState","_react","useState","data","isLoading","error","isStale","lastUpdated","abortControllerRef","useRef","cacheKey","fetchData","useCallback","forceRefresh","current","abort","AbortController","prev","_cache","apiCache","invalidate","get","Date","now","Error","name","refresh","useEffect","checkStale","interval","setInterval","clearInterval","refetch","initialValue","setData","cached","memoryCache","setValue","value","set","getValue","clearValue","clear","stats","setStats","cacheUtils","getAllStats","refreshStats","clearAllCaches","invalidateAll","preloadedKeys","setPreloadedKeys","Set","preload","has","console","warn","preloadMultiple","items","promises","filter","item","map","Promise","allSettled","Array","from","invalidatePattern","pattern","invalidateMultiple","patterns","forEach","invalidateByTags","tags","tag","join","mutator","isOptimistic","setIsOptimistic","optimisticUpdate","optimisticData","originalData","optimisticResult","result"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\useCache.ts"],"sourcesContent":["// React hooks for advanced caching integration\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { apiCache, memoryCache, cacheUtils } from '@/utils/cache';\n\ninterface UseCacheOptions {\n  ttl?: number;\n  enabled?: boolean;\n  staleWhileRevalidate?: boolean;\n  onError?: (error: Error) => void;\n  onSuccess?: (data: any) => void;\n}\n\ninterface CacheState<T> {\n  data: T | null;\n  isLoading: boolean;\n  error: Error | null;\n  isStale: boolean;\n  lastUpdated: number | null;\n}\n\n// Hook for API data caching\nexport function useApiCache<T>(\n  key: string,\n  fetcher: () => Promise<T>,\n  options: UseCacheOptions = {}\n) {\n  const {\n    ttl = 5 * 60 * 1000, // 5 minutes\n    enabled = true,\n    staleWhileRevalidate = true,\n    onError,\n    onSuccess\n  } = options;\n\n  const [state, setState] = useState<CacheState<T>>({\n    data: null,\n    isLoading: false,\n    error: null,\n    isStale: false,\n    lastUpdated: null\n  });\n\n  const abortControllerRef = useRef<AbortController | null>(null);\n  const cacheKey = `api:${key}`;\n\n  const fetchData = useCallback(async (forceRefresh = false) => {\n    if (!enabled) return;\n\n    // Cancel previous request\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n\n    abortControllerRef.current = new AbortController();\n\n    try {\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\n\n      let data: T;\n      \n      if (forceRefresh) {\n        // Force refresh - bypass cache\n        data = await fetcher();\n        apiCache.invalidate(key);\n      } else {\n        // Use cache with fallback to fetcher\n        data = await apiCache.get(cacheKey, fetcher);\n      }\n\n      setState({\n        data,\n        isLoading: false,\n        error: null,\n        isStale: false,\n        lastUpdated: Date.now()\n      });\n\n      onSuccess?.(data);\n    } catch (error) {\n      if (error instanceof Error && error.name !== 'AbortError') {\n        setState(prev => ({\n          ...prev,\n          isLoading: false,\n          error: error as Error\n        }));\n        onError?.(error as Error);\n      }\n    }\n  }, [key, fetcher, enabled, onError, onSuccess, cacheKey]);\n\n  const invalidate = useCallback(() => {\n    apiCache.invalidate(key);\n    fetchData(true);\n  }, [key, fetchData]);\n\n  const refresh = useCallback(() => {\n    fetchData(true);\n  }, [fetchData]);\n\n  // Initial fetch\n  useEffect(() => {\n    if (enabled) {\n      fetchData();\n    }\n\n    return () => {\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, [fetchData, enabled]);\n\n  // Stale-while-revalidate logic\n  useEffect(() => {\n    if (!staleWhileRevalidate || !state.lastUpdated) return;\n\n    const checkStale = () => {\n      const isStale = Date.now() - state.lastUpdated! > ttl;\n      if (isStale && !state.isLoading) {\n        setState(prev => ({ ...prev, isStale: true }));\n        fetchData(); // Revalidate in background\n      }\n    };\n\n    const interval = setInterval(checkStale, ttl / 4); // Check every quarter of TTL\n    return () => clearInterval(interval);\n  }, [state.lastUpdated, state.isLoading, ttl, staleWhileRevalidate, fetchData]);\n\n  return {\n    ...state,\n    refetch: fetchData,\n    invalidate,\n    refresh\n  };\n}\n\n// Hook for memory caching (for frequently accessed small data)\nexport function useMemoryCache<T>(key: string, initialValue?: T) {\n  const [data, setData] = useState<T | null>(() => {\n    const cached = memoryCache.get(key);\n    return cached || initialValue || null;\n  });\n\n  const setValue = useCallback((value: T, ttl?: number) => {\n    memoryCache.set(key, value, ttl);\n    setData(value);\n  }, [key]);\n\n  const getValue = useCallback(() => {\n    const cached = memoryCache.get(key);\n    if (cached !== null) {\n      setData(cached);\n      return cached;\n    }\n    return data;\n  }, [key, data]);\n\n  const clearValue = useCallback(() => {\n    memoryCache.clear();\n    setData(null);\n  }, []);\n\n  return {\n    data,\n    setValue,\n    getValue,\n    clearValue\n  };\n}\n\n// Hook for cache statistics and monitoring\nexport function useCacheStats() {\n  const [stats, setStats] = useState(() => cacheUtils.getAllStats());\n\n  const refreshStats = useCallback(() => {\n    setStats(cacheUtils.getAllStats());\n  }, []);\n\n  useEffect(() => {\n    const interval = setInterval(refreshStats, 30000); // Update every 30 seconds\n    return () => clearInterval(interval);\n  }, [refreshStats]);\n\n  return {\n    stats,\n    refreshStats,\n    clearAllCaches: cacheUtils.invalidateAll\n  };\n}\n\n// Hook for preloading data\nexport function usePreloader() {\n  const [preloadedKeys, setPreloadedKeys] = useState<Set<string>>(new Set());\n\n  const preload = useCallback(async (key: string, fetcher: () => Promise<any>) => {\n    if (preloadedKeys.has(key)) return;\n\n    try {\n      await apiCache.get(`preload:${key}`, fetcher);\n      setPreloadedKeys(prev => new Set([...prev, key]));\n    } catch (error) {\n      console.warn(`Failed to preload ${key}:`, error);\n    }\n  }, [preloadedKeys]);\n\n  const preloadMultiple = useCallback(async (items: Array<{ key: string; fetcher: () => Promise<any> }>) => {\n    const promises = items\n      .filter(item => !preloadedKeys.has(item.key))\n      .map(item => preload(item.key, item.fetcher));\n    \n    await Promise.allSettled(promises);\n  }, [preload, preloadedKeys]);\n\n  return {\n    preload,\n    preloadMultiple,\n    preloadedKeys: Array.from(preloadedKeys)\n  };\n}\n\n// Hook for cache invalidation patterns\nexport function useCacheInvalidation() {\n  const invalidatePattern = useCallback((pattern: string) => {\n    apiCache.invalidate(pattern);\n  }, []);\n\n  const invalidateMultiple = useCallback((patterns: string[]) => {\n    patterns.forEach(pattern => apiCache.invalidate(pattern));\n  }, []);\n\n  const invalidateByTags = useCallback((tags: string[]) => {\n    // Invalidate cache entries that match any of the provided tags\n    const pattern = tags.map(tag => `.*${tag}.*`).join('|');\n    apiCache.invalidate(`(${pattern})`);\n  }, []);\n\n  return {\n    invalidatePattern,\n    invalidateMultiple,\n    invalidateByTags\n  };\n}\n\n// Hook for optimistic updates with cache\nexport function useOptimisticCache<T>(\n  key: string,\n  fetcher: () => Promise<T>,\n  mutator: (data: T, optimisticData: Partial<T>) => Promise<T>\n) {\n  const { data, isLoading, error, refetch } = useApiCache(key, fetcher);\n  const [isOptimistic, setIsOptimistic] = useState(false);\n\n  const optimisticUpdate = useCallback(async (optimisticData: Partial<T>) => {\n    if (!data) return;\n\n    const originalData = data;\n    setIsOptimistic(true);\n\n    try {\n      // Apply optimistic update immediately\n      const optimisticResult = { ...data, ...optimisticData };\n      \n      // Update cache with optimistic data\n      apiCache['cache'].set(`api:${key}`, optimisticResult);\n      \n      // Perform actual mutation\n      const result = await mutator(data, optimisticData);\n      \n      // Update cache with real result\n      apiCache['cache'].set(`api:${key}`, result);\n      \n      setIsOptimistic(false);\n      return result;\n    } catch (error) {\n      // Rollback on error\n      apiCache['cache'].set(`api:${key}`, originalData);\n      setIsOptimistic(false);\n      throw error;\n    }\n  }, [data, key, mutator]);\n\n  return {\n    data,\n    isLoading,\n    error,\n    isOptimistic,\n    optimisticUpdate,\n    refetch\n  };\n}"],"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","ignoreList":[]}