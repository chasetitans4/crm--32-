{"version":3,"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\components\\__tests__\\Clients.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport '@testing-library/jest-dom'\nimport Clients from '../Clients'\nimport { AppProvider } from '../../context/AppContext'\nimport type { Client } from '../../types'\n\n// Mock the hooks\njest.mock('../../hooks/useClientActions', () => ({\n  useClientActions: () => ({\n    addClient: jest.fn(),\n    updateClient: jest.fn(),\n    deleteClient: jest.fn(),\n    addNote: jest.fn(),\n    addProject: jest.fn(),\n  })\n}))\n\n// Mock framer-motion\njest.mock('framer-motion', () => ({\n  motion: {\n    div: ({ children, ...props }: any) => <div {...props}>{children}</div>,\n    button: ({ children, ...props }: any) => <button {...props}>{children}</button>,\n  },\n  AnimatePresence: ({ children }: any) => children,\n}))\n\nconst mockClients: Client[] = [\n  {\n    id: '1',\n    name: 'John Doe',\n    email: 'john@example.com',\n    phone: '+1 (555) 123-4567',\n    company: 'Acme Corp',\n    stage: 'lead',\n    value: 50000,\n    lastContact: '2024-01-15',\n    notes: [],\n    projects: [],\n    status: 'active',\n    source: 'website',\n    created_at: '2024-01-01',\n    updated_at: '2024-01-15',\n    custom_fields: {}\n  },\n  {\n    id: '2',\n    name: 'Jane Smith',\n    email: 'jane@example.com',\n    phone: '+1 (555) 987-6543',\n    company: 'Tech Solutions',\n    stage: 'qualified',\n    value: 75000,\n    lastContact: '2024-01-10',\n    notes: [],\n    projects: [],\n    status: 'active',\n    source: 'referral',\n    created_at: '2024-01-01',\n    updated_at: '2024-01-10',\n    custom_fields: {}\n  }\n]\n\nconst mockSalesStages = [\n  { id: 'lead', name: 'Lead', color: '#3B82F6' },\n  { id: 'qualified', name: 'Qualified', color: '#10B981' },\n  { id: 'proposal', name: 'Proposal', color: '#F59E0B' },\n  { id: 'closed', name: 'Closed', color: '#EF4444' }\n]\n\nconst mockInitialState = {\n  clients: mockClients,\n  salesStages: mockSalesStages,\n  contracts: [],\n  invoices: [],\n  tasks: [],\n  events: [],\n  quotes: [],\n  savedProposals: [],\n  adminSettings: {\n    id: \"admin-1\",\n    companyName: \"Test Company\",\n    companyEmail: \"test@company.com\",\n    companyPhone: \"555-0123\",\n    companyAddress: \"123 Test St\",\n    defaultCurrency: \"USD\",\n    taxRate: 0.08,\n    invoicePrefix: \"INV\",\n    quotePrefix: \"QUO\",\n    contractPrefix: \"CON\",\n    emailSignature: \"Best regards,\\nTest Company\",\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n  },\n  pendingQuoteForConversion: null,\n  loading: {\n    tasks: false,\n    clients: false,\n    events: false,\n    salesStages: false,\n    quotes: false,\n    savedQuotes: false,\n    contracts: false,\n    invoices: false,\n    proposals: false,\n  },\n  error: null,\n  isOnline: true,\n}\n\nconst renderWithProvider = (component: React.ReactElement) => {\n  return render(\n    <AppProvider initialState={mockInitialState}>\n      {component}\n    </AppProvider>\n  )\n}\n\ndescribe('Clients Component', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  test('renders clients list correctly', () => {\n    renderWithProvider(<Clients />)\n    \n    expect(screen.getByText('John Doe')).toBeInTheDocument()\n    expect(screen.getByText('Jane Smith')).toBeInTheDocument()\n    expect(screen.getByText('Acme Corp')).toBeInTheDocument()\n    expect(screen.getByText('Tech Solutions')).toBeInTheDocument()\n  })\n\n  test('displays client contact information', () => {\n    renderWithProvider(<Clients />)\n    \n    expect(screen.getByText('john@example.com')).toBeInTheDocument()\n    expect(screen.getByText('+1 (555) 123-4567')).toBeInTheDocument()\n    expect(screen.getByText('jane@example.com')).toBeInTheDocument()\n    expect(screen.getByText('+1 (555) 987-6543')).toBeInTheDocument()\n  })\n\n  test('shows client values formatted correctly', () => {\n    renderWithProvider(<Clients />)\n    \n    expect(screen.getByText('$50,000')).toBeInTheDocument()\n    expect(screen.getByText('$75,000')).toBeInTheDocument()\n  })\n\n  test('displays sales stages correctly', () => {\n    renderWithProvider(<Clients />)\n    \n    expect(screen.getByText('Lead')).toBeInTheDocument()\n    expect(screen.getByText('Qualified')).toBeInTheDocument()\n  })\n\n  test('search functionality works', async () => {\n    const user = userEvent.setup()\n    renderWithProvider(<Clients />)\n    \n    const searchInput = screen.getByPlaceholderText(/search clients/i)\n    await user.type(searchInput, 'John')\n    \n    expect(screen.getByText('John Doe')).toBeInTheDocument()\n    expect(screen.queryByText('Jane Smith')).not.toBeInTheDocument()\n  })\n\n  test('filter by stage works', async () => {\n    const user = userEvent.setup()\n    renderWithProvider(<Clients />)\n    \n    // Find and click stage filter\n    const stageFilter = screen.getByText('All Stages')\n    await user.click(stageFilter)\n    \n    const leadOption = screen.getByText('Lead')\n    await user.click(leadOption)\n    \n    expect(screen.getByText('John Doe')).toBeInTheDocument()\n    expect(screen.queryByText('Jane Smith')).not.toBeInTheDocument()\n  })\n\n  test('opens add client modal', async () => {\n    const user = userEvent.setup()\n    renderWithProvider(<Clients />)\n    \n    const addButton = screen.getByText('Add Client')\n    await user.click(addButton)\n    \n    expect(screen.getByText('Add New Client')).toBeInTheDocument()\n  })\n\n  test('client card click opens details', async () => {\n    const user = userEvent.setup()\n    renderWithProvider(<Clients />)\n    \n    const clientCard = screen.getByText('John Doe').closest('div')\n    if (clientCard) {\n      await user.click(clientCard)\n      expect(screen.getByText('Client Details')).toBeInTheDocument()\n    }\n  })\n\n  test('handles empty clients list', () => {\n    const emptyState = {\n      ...mockInitialState,\n      clients: []\n    }\n    \n    render(\n      <AppProvider initialState={emptyState}>\n        <Clients />\n      </AppProvider>\n    )\n    \n    expect(screen.getByText(/no clients found/i)).toBeInTheDocument()\n  })\n\n  test('shows client stages', () => {\n    renderWithProvider(<Clients />)\n    \n    expect(screen.getByText('Lead')).toBeInTheDocument()\n    expect(screen.getByText('Qualified')).toBeInTheDocument()\n  })\n\n  it('shows client companies', () => {\n    const { container } = renderWithProvider(<Clients />)\n    \n    // Debug: Check if \"No clients found\" message is showing\n    const noClientsMessage = screen.queryByText(/no clients found/i)\n    if (noClientsMessage) {\n      // If \"No clients found\" is showing, the filtering is removing all clients\n      fail('\"No clients found\" message is displayed - filtering is removing all clients')\n    }\n    \n    // Check if our mock clients are rendered\n    expect(screen.getByText('John Doe')).toBeInTheDocument()\n    expect(screen.getByText('Jane Smith')).toBeInTheDocument()\n    expect(screen.getByText('Acme Corp')).toBeInTheDocument()\n    expect(screen.getByText('Tech Solutions')).toBeInTheDocument()\n  })\n\n  test('displays last contact dates', async () => {\n    render(\n      <AppProvider initialState={mockInitialState}>\n        <Clients />\n      </AppProvider>\n    )\n    \n    // Debug: Check what's actually rendered\n    const table = screen.getByRole('table')\n    console.log('Table content:', table.textContent)\n    \n    // First check if our mock clients are rendered\n    expect(screen.getByText('John Doe')).toBeInTheDocument()\n    expect(screen.getByText('Jane Smith')).toBeInTheDocument()\n    \n    // Then check for the dates\n    expect(table.textContent).toContain('2024-01-15')\n    expect(table.textContent).toContain('2024-01-10')\n  })\n})"],"names":["jest","mock","useClientActions","addClient","fn","updateClient","deleteClient","addNote","addProject","motion","div","children","props","button","AnimatePresence","mockClients","id","name","email","phone","company","stage","value","lastContact","notes","projects","status","source","created_at","updated_at","custom_fields","mockSalesStages","color","mockInitialState","clients","salesStages","contracts","invoices","tasks","events","quotes","savedProposals","adminSettings","companyName","companyEmail","companyPhone","companyAddress","defaultCurrency","taxRate","invoicePrefix","quotePrefix","contractPrefix","emailSignature","Date","toISOString","pendingQuoteForConversion","loading","savedQuotes","proposals","error","isOnline","renderWithProvider","component","render","AppProvider","initialState","describe","beforeEach","clearAllMocks","test","Clients","expect","screen","getByText","toBeInTheDocument","user","userEvent","setup","searchInput","getByPlaceholderText","type","queryByText","not","stageFilter","click","leadOption","addButton","clientCard","closest","emptyState","it","container","noClientsMessage","fail","table","getByRole","console","log","textContent","toContain"],"mappings":"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"}