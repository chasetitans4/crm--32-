b3b6a966a09fd4039a5a70b52d42cdb6
"use strict";
// Mock the hooks
jest.mock('../../hooks/useClientActions', ()=>({
        useClientActions: ()=>({
                addClient: jest.fn(),
                updateClient: jest.fn(),
                deleteClient: jest.fn(),
                addNote: jest.fn(),
                addProject: jest.fn()
            })
    }));
// Mock framer-motion
jest.mock('framer-motion', ()=>({
        motion: {
            div: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    ...props,
                    children: children
                }),
            button: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    ...props,
                    children: children
                })
        },
        AnimatePresence: ({ children })=>children
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
const _Clients = /*#__PURE__*/ _interop_require_default(require("../Clients"));
const _AppContext = require("../../context/AppContext");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockClients = [
    {
        id: '1',
        name: 'John Doe',
        email: 'john@example.com',
        phone: '+1 (555) 123-4567',
        company: 'Acme Corp',
        stage: 'lead',
        value: 50000,
        lastContact: '2024-01-15',
        notes: [],
        projects: [],
        status: 'active',
        source: 'website',
        created_at: '2024-01-01',
        updated_at: '2024-01-15',
        custom_fields: {}
    },
    {
        id: '2',
        name: 'Jane Smith',
        email: 'jane@example.com',
        phone: '+1 (555) 987-6543',
        company: 'Tech Solutions',
        stage: 'qualified',
        value: 75000,
        lastContact: '2024-01-10',
        notes: [],
        projects: [],
        status: 'active',
        source: 'referral',
        created_at: '2024-01-01',
        updated_at: '2024-01-10',
        custom_fields: {}
    }
];
const mockSalesStages = [
    {
        id: 'lead',
        name: 'Lead',
        color: '#3B82F6'
    },
    {
        id: 'qualified',
        name: 'Qualified',
        color: '#10B981'
    },
    {
        id: 'proposal',
        name: 'Proposal',
        color: '#F59E0B'
    },
    {
        id: 'closed',
        name: 'Closed',
        color: '#EF4444'
    }
];
const mockInitialState = {
    clients: mockClients,
    salesStages: mockSalesStages,
    contracts: [],
    invoices: [],
    tasks: [],
    events: [],
    quotes: [],
    savedProposals: [],
    adminSettings: {
        id: "admin-1",
        companyName: "Test Company",
        companyEmail: "test@company.com",
        companyPhone: "555-0123",
        companyAddress: "123 Test St",
        defaultCurrency: "USD",
        taxRate: 0.08,
        invoicePrefix: "INV",
        quotePrefix: "QUO",
        contractPrefix: "CON",
        emailSignature: "Best regards,\nTest Company",
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
    },
    pendingQuoteForConversion: null,
    loading: {
        tasks: false,
        clients: false,
        events: false,
        salesStages: false,
        quotes: false,
        savedQuotes: false,
        contracts: false,
        invoices: false,
        proposals: false
    },
    error: null,
    isOnline: true
};
const renderWithProvider = (component)=>{
    return (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppContext.AppProvider, {
        initialState: mockInitialState,
        children: component
    }));
};
describe('Clients Component', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    test('renders clients list correctly', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Clients.default, {}));
        expect(_react1.screen.getByText('John Doe')).toBeInTheDocument();
        expect(_react1.screen.getByText('Jane Smith')).toBeInTheDocument();
        expect(_react1.screen.getByText('Acme Corp')).toBeInTheDocument();
        expect(_react1.screen.getByText('Tech Solutions')).toBeInTheDocument();
    });
    test('displays client contact information', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Clients.default, {}));
        expect(_react1.screen.getByText('john@example.com')).toBeInTheDocument();
        expect(_react1.screen.getByText('+1 (555) 123-4567')).toBeInTheDocument();
        expect(_react1.screen.getByText('jane@example.com')).toBeInTheDocument();
        expect(_react1.screen.getByText('+1 (555) 987-6543')).toBeInTheDocument();
    });
    test('shows client values formatted correctly', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Clients.default, {}));
        expect(_react1.screen.getByText('$50,000')).toBeInTheDocument();
        expect(_react1.screen.getByText('$75,000')).toBeInTheDocument();
    });
    test('displays sales stages correctly', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Clients.default, {}));
        expect(_react1.screen.getByText('Lead')).toBeInTheDocument();
        expect(_react1.screen.getByText('Qualified')).toBeInTheDocument();
    });
    test('search functionality works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Clients.default, {}));
        const searchInput = _react1.screen.getByPlaceholderText(/search clients/i);
        await user.type(searchInput, 'John');
        expect(_react1.screen.getByText('John Doe')).toBeInTheDocument();
        expect(_react1.screen.queryByText('Jane Smith')).not.toBeInTheDocument();
    });
    test('filter by stage works', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Clients.default, {}));
        // Find and click stage filter
        const stageFilter = _react1.screen.getByText('All Stages');
        await user.click(stageFilter);
        const leadOption = _react1.screen.getByText('Lead');
        await user.click(leadOption);
        expect(_react1.screen.getByText('John Doe')).toBeInTheDocument();
        expect(_react1.screen.queryByText('Jane Smith')).not.toBeInTheDocument();
    });
    test('opens add client modal', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Clients.default, {}));
        const addButton = _react1.screen.getByText('Add Client');
        await user.click(addButton);
        expect(_react1.screen.getByText('Add New Client')).toBeInTheDocument();
    });
    test('client card click opens details', async ()=>{
        const user = _userevent.default.setup();
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Clients.default, {}));
        const clientCard = _react1.screen.getByText('John Doe').closest('div');
        if (clientCard) {
            await user.click(clientCard);
            expect(_react1.screen.getByText('Client Details')).toBeInTheDocument();
        }
    });
    test('handles empty clients list', ()=>{
        const emptyState = {
            ...mockInitialState,
            clients: []
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppContext.AppProvider, {
            initialState: emptyState,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Clients.default, {})
        }));
        expect(_react1.screen.getByText(/no clients found/i)).toBeInTheDocument();
    });
    test('shows client stages', ()=>{
        renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Clients.default, {}));
        expect(_react1.screen.getByText('Lead')).toBeInTheDocument();
        expect(_react1.screen.getByText('Qualified')).toBeInTheDocument();
    });
    it('shows client companies', ()=>{
        const { container } = renderWithProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Clients.default, {}));
        // Debug: Check if "No clients found" message is showing
        const noClientsMessage = _react1.screen.queryByText(/no clients found/i);
        if (noClientsMessage) {
            // If "No clients found" is showing, the filtering is removing all clients
            fail('"No clients found" message is displayed - filtering is removing all clients');
        }
        // Check if our mock clients are rendered
        expect(_react1.screen.getByText('John Doe')).toBeInTheDocument();
        expect(_react1.screen.getByText('Jane Smith')).toBeInTheDocument();
        expect(_react1.screen.getByText('Acme Corp')).toBeInTheDocument();
        expect(_react1.screen.getByText('Tech Solutions')).toBeInTheDocument();
    });
    test('displays last contact dates', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AppContext.AppProvider, {
            initialState: mockInitialState,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Clients.default, {})
        }));
        // Debug: Check what's actually rendered
        const table = _react1.screen.getByRole('table');
        console.log('Table content:', table.textContent);
        // First check if our mock clients are rendered
        expect(_react1.screen.getByText('John Doe')).toBeInTheDocument();
        expect(_react1.screen.getByText('Jane Smith')).toBeInTheDocument();
        // Then check for the dates
        expect(table.textContent).toContain('2024-01-15');
        expect(table.textContent).toContain('2024-01-10');
    });
});

//# sourceMappingURL=data:application/json;base64,