{"version":3,"names":["cov_29r9yo3aeh","actualCoverage","s","AdaptiveRateLimiter","f","CircuitBreaker","RateLimiter","RequestThrottler","createRateLimitMiddleware","rateLimitConfigs","constructor","config","store","Map","skipSuccessfulRequests","skipFailedRequests","keyGenerator","req","b","ip","message","statusCode","cleanupInterval","setInterval","cleanup","now","Date","key","entry","Array","from","entries","resetTime","delete","getKey","check","windowStart","windowMs","get","count","firstRequest","set","allowed","maxRequests","remaining","Math","max","onLimitReached","reset","getStats","totalRequests","values","totalKeys","size","destroy","clearInterval","clear","queue","activeRequests","Set","lastRequestTime","requestCounter","maxConcurrent","priority","generateRequestId","processQueue","length","timeSinceLastRequest","delay","setTimeout","sortQueue","requestInfo","shift","add","id","result","request","resolve","error","reject","reverse","sort","a","throttle","Promise","timestamp","push","queueLength","totalProcessed","forEach","Error","systemLoad","baseConfig","loadCheckInterval","updateSystemLoad","stats","min","adjustRateLimit","console","warn","loadFactor","floor","getSystemLoad","failureThreshold","recoveryTimeout","successThreshold","failures","lastFailureTime","state","successCount","execute","operation","onSuccess","onFailure","getState","rateLimiter","res","next","setHeader","toISOString","status","json","retryAfter","ceil","strict","moderate","lenient","api","auth"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\rateLimiting.ts"],"sourcesContent":["'use client';\n\ninterface RateLimitConfig {\n  windowMs: number; // Time window in milliseconds\n  maxRequests: number; // Maximum requests per window\n  skipSuccessfulRequests?: boolean;\n  skipFailedRequests?: boolean;\n  keyGenerator?: (req: any) => string;\n  onLimitReached?: (req: any) => void;\n  message?: string;\n  statusCode?: number;\n}\n\ninterface RateLimitEntry {\n  count: number;\n  resetTime: number;\n  firstRequest: number;\n}\n\ninterface ThrottleConfig {\n  delay: number; // Delay between requests in milliseconds\n  maxConcurrent?: number; // Maximum concurrent requests\n  priority?: 'fifo' | 'lifo' | 'priority';\n}\n\ninterface RequestInfo {\n  id: string;\n  timestamp: number;\n  priority?: number;\n  resolve: (value: any) => void;\n  reject: (error: any) => void;\n  request: () => Promise<any>;\n}\n\nclass RateLimiter {\n  private store: Map<string, RateLimitEntry> = new Map();\n  protected config: RateLimitConfig;\n  private cleanupInterval: NodeJS.Timeout;\n\n  constructor(config: RateLimitConfig) {\n    this.config = {\n      skipSuccessfulRequests: false,\n      skipFailedRequests: false,\n      keyGenerator: (req) => req.ip || 'default',\n      message: 'Too many requests',\n      statusCode: 429,\n      ...config\n    };\n\n    // Cleanup expired entries every minute\n    this.cleanupInterval = setInterval(() => {\n      this.cleanup();\n    }, 60000);\n  }\n\n  private cleanup(): void {\n    const now = Date.now();\n    for (const [key, entry] of Array.from(this.store.entries())) {\n      if (entry.resetTime <= now) {\n        this.store.delete(key);\n      }\n    }\n  }\n\n  private getKey(req: any): string {\n    return this.config.keyGenerator!(req);\n  }\n\n  public check(req: any): { allowed: boolean; remaining: number; resetTime: number } {\n    const key = this.getKey(req);\n    const now = Date.now();\n    const windowStart = now - this.config.windowMs;\n\n    let entry = this.store.get(key);\n\n    if (!entry || entry.resetTime <= now) {\n      // Create new entry or reset expired entry\n      entry = {\n        count: 0,\n        resetTime: now + this.config.windowMs,\n        firstRequest: now\n      };\n      this.store.set(key, entry);\n    }\n\n    // Check if within rate limit\n    const allowed = entry.count < this.config.maxRequests;\n    const remaining = Math.max(0, this.config.maxRequests - entry.count - 1);\n\n    if (allowed) {\n      entry.count++;\n    } else if (this.config.onLimitReached) {\n      this.config.onLimitReached(req);\n    }\n\n    return {\n      allowed,\n      remaining,\n      resetTime: entry.resetTime\n    };\n  }\n\n  public reset(req: any): void {\n    const key = this.getKey(req);\n    this.store.delete(key);\n  }\n\n  public getStats(): { totalKeys: number; totalRequests: number } {\n    let totalRequests = 0;\n    for (const entry of Array.from(this.store.values())) {\n      totalRequests += entry.count;\n    }\n    return {\n      totalKeys: this.store.size,\n      totalRequests\n    };\n  }\n\n  public destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n    this.store.clear();\n  }\n}\n\nclass RequestThrottler {\n  private queue: RequestInfo[] = [];\n  private activeRequests: Set<string> = new Set();\n  private config: ThrottleConfig;\n  private lastRequestTime: number = 0;\n  private requestCounter: number = 0;\n\n  constructor(config: ThrottleConfig) {\n    this.config = {\n      maxConcurrent: 5,\n      priority: 'fifo',\n      ...config\n    };\n  }\n\n  private generateRequestId(): string {\n    return `req_${Date.now()}_${++this.requestCounter}`;\n  }\n\n  private async processQueue(): Promise<void> {\n    if (this.queue.length === 0) return;\n    if (this.activeRequests.size >= this.config.maxConcurrent!) return;\n\n    const now = Date.now();\n    const timeSinceLastRequest = now - this.lastRequestTime;\n\n    if (timeSinceLastRequest < this.config.delay) {\n      setTimeout(() => this.processQueue(), this.config.delay - timeSinceLastRequest);\n      return;\n    }\n\n    // Sort queue based on priority strategy\n    this.sortQueue();\n\n    const requestInfo = this.queue.shift();\n    if (!requestInfo) return;\n\n    this.activeRequests.add(requestInfo.id);\n    this.lastRequestTime = now;\n\n    try {\n      const result = await requestInfo.request();\n      requestInfo.resolve(result);\n    } catch (error) {\n      requestInfo.reject(error);\n    } finally {\n      this.activeRequests.delete(requestInfo.id);\n      // Process next request after a delay\n      setTimeout(() => this.processQueue(), this.config.delay);\n    }\n  }\n\n  private sortQueue(): void {\n    switch (this.config.priority) {\n      case 'lifo':\n        // Last in, first out - reverse order\n        this.queue.reverse();\n        break;\n      case 'priority':\n        // Sort by priority (higher number = higher priority)\n        this.queue.sort((a, b) => (b.priority || 0) - (a.priority || 0));\n        break;\n      case 'fifo':\n      default:\n        // First in, first out - maintain order\n        break;\n    }\n  }\n\n  public async throttle<T>(\n    request: () => Promise<T>,\n    priority: number = 0\n  ): Promise<T> {\n    return new Promise((resolve, reject) => {\n      const requestInfo: RequestInfo = {\n        id: this.generateRequestId(),\n        timestamp: Date.now(),\n        priority,\n        resolve,\n        reject,\n        request\n      };\n\n      this.queue.push(requestInfo);\n      this.processQueue();\n    });\n  }\n\n  public getStats(): {\n    queueLength: number;\n    activeRequests: number;\n    totalProcessed: number;\n  } {\n    return {\n      queueLength: this.queue.length,\n      activeRequests: this.activeRequests.size,\n      totalProcessed: this.requestCounter\n    };\n  }\n\n  public clear(): void {\n    // Reject all pending requests\n    this.queue.forEach(req => {\n      req.reject(new Error('Request queue cleared'));\n    });\n    this.queue = [];\n  }\n}\n\n// Adaptive rate limiter that adjusts based on system load\nclass AdaptiveRateLimiter extends RateLimiter {\n  private systemLoad: number = 0;\n  private loadCheckInterval: NodeJS.Timeout;\n  private baseConfig: RateLimitConfig;\n\n  constructor(config: RateLimitConfig) {\n    super(config);\n    this.baseConfig = { ...config };\n    \n    // Monitor system load every 30 seconds\n    this.loadCheckInterval = setInterval(() => {\n      this.updateSystemLoad();\n    }, 30000);\n  }\n\n  private async updateSystemLoad(): Promise<void> {\n    try {\n      // Simulate system load calculation\n      // In a real implementation, this would check CPU, memory, etc.\n      const stats = this.getStats();\n      this.systemLoad = Math.min(stats.totalRequests / 1000, 1); // Normalize to 0-1\n      \n      // Adjust rate limit based on load\n      this.adjustRateLimit();\n    } catch (error) {\n      console.warn('Failed to update system load:', error);\n    }\n  }\n\n  private adjustRateLimit(): void {\n    // Reduce rate limit when system load is high\n    const loadFactor = 1 - (this.systemLoad * 0.5); // Reduce by up to 50%\n    this.config.maxRequests = Math.floor(this.baseConfig.maxRequests * loadFactor);\n    this.config.windowMs = Math.floor(this.baseConfig.windowMs * (1 + this.systemLoad * 0.5));\n  }\n\n  public getSystemLoad(): number {\n    return this.systemLoad;\n  }\n\n  public destroy(): void {\n    super.destroy();\n    if (this.loadCheckInterval) {\n      clearInterval(this.loadCheckInterval);\n    }\n  }\n}\n\n// Circuit breaker for API protection\nclass CircuitBreaker {\n  private failures: number = 0;\n  private lastFailureTime: number = 0;\n  private state: 'closed' | 'open' | 'half-open' = 'closed';\n  private successCount: number = 0;\n\n  constructor(\n    private failureThreshold: number = 5,\n    private recoveryTimeout: number = 60000, // 1 minute\n    private successThreshold: number = 3\n  ) {}\n\n  public async execute<T>(operation: () => Promise<T>): Promise<T> {\n    if (this.state === 'open') {\n      if (Date.now() - this.lastFailureTime > this.recoveryTimeout) {\n        this.state = 'half-open';\n        this.successCount = 0;\n      } else {\n        throw new Error('Circuit breaker is open');\n      }\n    }\n\n    try {\n      const result = await operation();\n      this.onSuccess();\n      return result;\n    } catch (error) {\n      this.onFailure();\n      throw error;\n    }\n  }\n\n  private onSuccess(): void {\n    this.failures = 0;\n    \n    if (this.state === 'half-open') {\n      this.successCount++;\n      if (this.successCount >= this.successThreshold) {\n        this.state = 'closed';\n      }\n    }\n  }\n\n  private onFailure(): void {\n    this.failures++;\n    this.lastFailureTime = Date.now();\n    \n    if (this.failures >= this.failureThreshold) {\n      this.state = 'open';\n    }\n  }\n\n  public getState(): { state: string; failures: number; lastFailureTime: number } {\n    return {\n      state: this.state,\n      failures: this.failures,\n      lastFailureTime: this.lastFailureTime\n    };\n  }\n\n  public reset(): void {\n    this.failures = 0;\n    this.lastFailureTime = 0;\n    this.state = 'closed';\n    this.successCount = 0;\n  }\n}\n\n// Rate limiting middleware factory\nexport function createRateLimitMiddleware(config: RateLimitConfig) {\n  const rateLimiter = new RateLimiter(config);\n\n  return (req: any, res: any, next: any) => {\n    const result = rateLimiter.check(req);\n\n    // Add rate limit headers\n    res.setHeader('X-RateLimit-Limit', config.maxRequests);\n    res.setHeader('X-RateLimit-Remaining', result.remaining);\n    res.setHeader('X-RateLimit-Reset', new Date(result.resetTime).toISOString());\n\n    if (!result.allowed) {\n      res.status(config.statusCode || 429).json({\n        error: config.message || 'Too many requests',\n        retryAfter: Math.ceil((result.resetTime - Date.now()) / 1000)\n      });\n      return;\n    }\n\n    next();\n  };\n}\n\n// Predefined rate limit configurations\nexport const rateLimitConfigs = {\n  strict: {\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    maxRequests: 100\n  },\n  moderate: {\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    maxRequests: 500\n  },\n  lenient: {\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    maxRequests: 1000\n  },\n  api: {\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 60\n  },\n  auth: {\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    maxRequests: 5\n  }\n};\n\n// Export classes and types\nexport {\n  RateLimiter,\n  RequestThrottler,\n  AdaptiveRateLimiter,\n  CircuitBreaker\n};\n\nexport type {\n  RateLimitConfig,\n  RateLimitEntry,\n  ThrottleConfig,\n  RequestInfo\n};"],"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","ignoreList":[]}