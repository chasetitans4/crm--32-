{"version":3,"names":["cov_21r7hreruj","actualCoverage","s","setGlobalToastInstance","f","toast","useToast","toasts","setToasts","_react","useState","useCallback","options","id","Math","random","toString","substring","newToast","type","b","title","description","variant","action","prev","setTimeout","filter","t","showSuccess","showError","showWarning","showInfo","removeToast","globalToastInstance","instance","console","warn"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\components\\ui\\use-toast.ts"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\n\nimport { useState, useCallback } from \"react\"\n\ninterface Toast {\n  id: string\n  type: \"success\" | \"error\" | \"warning\" | \"info\"\n  title: string\n  description: string\n  variant?: \"default\" | \"destructive\"\n  action?: React.ReactElement\n}\n\n// Allow callers to omit `type` (defaults to \"info\")\ninterface ToastOptions {\n  type?: Toast[\"type\"]\n  title: Toast[\"title\"]\n  description: Toast[\"description\"]\n  variant?: Toast[\"variant\"]\n  action?: Toast[\"action\"]\n}\n\nexport function useToast() {\n  const [toasts, setToasts] = useState<Toast[]>([])\n\n  const toast = useCallback((options: ToastOptions) => {\n    const id = Math.random().toString(36).substring(2, 11)\n    const newToast: Toast = { id, type: options.type ?? \"info\", title: options.title, description: options.description, variant: options.variant, action: options.action }\n\n    setToasts((prev) => [...prev, newToast])\n\n    // Auto remove after 5 seconds\n    setTimeout(() => {\n      setToasts((prev) => prev.filter((t) => t.id !== id))\n    }, 5000)\n\n    return id\n  }, [])\n\n  const showSuccess = useCallback(\n    (title: string, description: string) => {\n      return toast({ type: \"success\", title, description })\n    },\n    [toast],\n  )\n\n  const showError = useCallback(\n    (title: string, description: string) => {\n      return toast({ type: \"error\", title, description, variant: \"destructive\" })\n    },\n    [toast],\n  )\n\n  const showWarning = useCallback(\n    (title: string, description: string) => {\n      return toast({ type: \"warning\", title, description })\n    },\n    [toast],\n  )\n\n  const showInfo = useCallback(\n    (title: string, description: string) => {\n      return toast({ type: \"info\", title, description })\n    },\n    [toast],\n  )\n\n  const removeToast = useCallback((id: string) => {\n    setToasts((prev) => prev.filter((t) => t.id !== id))\n  }, [])\n\n  return {\n    toast,\n    showSuccess,\n    showError,\n    showWarning,\n    showInfo,\n    removeToast,\n    toasts,\n  }\n}\n\n// Create a global toast instance for use outside React components\nlet globalToastInstance: ReturnType<typeof useToast> | null = null\n\nexport const setGlobalToastInstance = (instance: ReturnType<typeof useToast>) => {\n  globalToastInstance = instance\n}\n\nexport const toast = (options: ToastOptions) => {\n  if (globalToastInstance) {\n    return globalToastInstance.toast(options)\n  }\n  console.warn('Toast instance not initialized. Call setGlobalToastInstance first.')\n  return ''\n}\n"],"mappingsa;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;;;;;;;;;;;;;;MAJAC,uBAAA;IAAA;IAAAH,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAC,sBAAA;;MAIAE,MAAA;IAAA;IAAAL,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAG,KAAA;;MAnEGC,SAAA;IAAA;IAAAN,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;WAAAI,QAAA;;;;;kCApBsB;AAoB/B,SAASA,SAAA;EAAA;EAAAN,cAAA,GAAAI,CAAA;EACd,MAAM,CAACG,MAAA,EAAQC,SAAA,CAAU;EAAA;EAAA,CAAAR,cAAA,GAAAE,CAAA,OAAG,IAAAO,MAAA,CAAAC,QAAQ,EAAU,EAAE;EAEhD,MAAML,KAAA;EAAA;EAAA,CAAAL,cAAA,GAAAE,CAAA,OAAQ,IAAAO,MAAA,CAAAE,WAAW,EAAEC,OAAA;IAAA;IAAAZ,cAAA,GAAAI,CAAA;IACzB,MAAMS,EAAA;IAAA;IAAA,CAAAb,cAAA,GAAAE,CAAA,QAAKY,IAAA,CAAKC,MAAM,GAAGC,QAAQ,CAAC,IAAIC,SAAS,CAAC,GAAG;IACnD,MAAMC,QAAA;IAAA;IAAA,CAAAlB,cAAA,GAAAE,CAAA,QAAkB;MAAEW,EAAA;MAAIM,IAAA;MAAM;MAAA,CAAAnB,cAAA,GAAAoB,CAAA,UAAAR,OAAA,CAAQO,IAAI;MAAA;MAAA,CAAAnB,cAAA,GAAAoB,CAAA,UAAI;MAAQC,KAAA,EAAOT,OAAA,CAAQS,KAAK;MAAEC,WAAA,EAAaV,OAAA,CAAQU,WAAW;MAAEC,OAAA,EAASX,OAAA,CAAQW,OAAO;MAAEC,MAAA,EAAQZ,OAAA,CAAQY;IAAO;IAAA;IAAAxB,cAAA,GAAAE,CAAA;IAErKM,SAAA,CAAWiB,IAAA,IAAS;MAAA;MAAAzB,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MAAA,Q,GAAIuB,IAAA,EAAMP,QAAA,CAAS;KAAA;IAEvC;IAAA;IAAAlB,cAAA,GAAAE,CAAA;IACAwB,UAAA,CAAW;MAAA;MAAA1B,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MACTM,SAAA,CAAWiB,IAAA,IAAS;QAAA;QAAAzB,cAAA,GAAAI,CAAA;QAAAJ,cAAA,GAAAE,CAAA;QAAA,OAAAuB,IAAA,CAAKE,MAAM,CAAEC,CAAA,IAAM;UAAA;UAAA5B,cAAA,GAAAI,CAAA;UAAAJ,cAAA,GAAAE,CAAA;UAAA,OAAA0B,CAAA,CAAEf,EAAE,KAAKA,EAAA;QAAA;MAAA;IAClD,GAAG;IAAA;IAAAb,cAAA,GAAAE,CAAA;IAEH,OAAOW,EAAA;EACT,GAAG,EAAE;EAEL,MAAMgB,WAAA;EAAA;EAAA,CAAA7B,cAAA,GAAAE,CAAA,QAAc,IAAAO,MAAA,CAAAE,WAAW,EAC7B,CAACU,KAAA,EAAeC,WAAA;IAAA;IAAAtB,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACd,OAAOG,KAAA,CAAM;MAAEc,IAAA,EAAM;MAAWE,KAAA;MAAOC;IAAY;EACrD,GACA,CAACjB,KAAA,CAAM;EAGT,MAAMyB,SAAA;EAAA;EAAA,CAAA9B,cAAA,GAAAE,CAAA,QAAY,IAAAO,MAAA,CAAAE,WAAW,EAC3B,CAACU,KAAA,EAAeC,WAAA;IAAA;IAAAtB,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACd,OAAOG,KAAA,CAAM;MAAEc,IAAA,EAAM;MAASE,KAAA;MAAOC,WAAA;MAAaC,OAAA,EAAS;IAAc;EAC3E,GACA,CAAClB,KAAA,CAAM;EAGT,MAAM0B,WAAA;EAAA;EAAA,CAAA/B,cAAA,GAAAE,CAAA,QAAc,IAAAO,MAAA,CAAAE,WAAW,EAC7B,CAACU,KAAA,EAAeC,WAAA;IAAA;IAAAtB,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACd,OAAOG,KAAA,CAAM;MAAEc,IAAA,EAAM;MAAWE,KAAA;MAAOC;IAAY;EACrD,GACA,CAACjB,KAAA,CAAM;EAGT,MAAM2B,QAAA;EAAA;EAAA,CAAAhC,cAAA,GAAAE,CAAA,QAAW,IAAAO,MAAA,CAAAE,WAAW,EAC1B,CAACU,KAAA,EAAeC,WAAA;IAAA;IAAAtB,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACd,OAAOG,KAAA,CAAM;MAAEc,IAAA,EAAM;MAAQE,KAAA;MAAOC;IAAY;EAClD,GACA,CAACjB,KAAA,CAAM;EAGT,MAAM4B,WAAA;EAAA;EAAA,CAAAjC,cAAA,GAAAE,CAAA,QAAc,IAAAO,MAAA,CAAAE,WAAW,EAAEE,EAAA;IAAA;IAAAb,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IAC/BM,SAAA,CAAWiB,IAAA,IAAS;MAAA;MAAAzB,cAAA,GAAAI,CAAA;MAAAJ,cAAA,GAAAE,CAAA;MAAA,OAAAuB,IAAA,CAAKE,MAAM,CAAEC,CAAA,IAAM;QAAA;QAAA5B,cAAA,GAAAI,CAAA;QAAAJ,cAAA,GAAAE,CAAA;QAAA,OAAA0B,CAAA,CAAEf,EAAE,KAAKA,EAAA;MAAA;IAAA;EAClD,GAAG,EAAE;EAAA;EAAAb,cAAA,GAAAE,CAAA;EAEL,OAAO;IACLG,KAAA;IACAwB,WAAA;IACAC,SAAA;IACAC,WAAA;IACAC,QAAA;IACAC,WAAA;IACA1B;EACF;AACF;AAEA;AACA,IAAI2B,mBAAA;AAAA;AAAA,CAAAlC,cAAA,GAAAE,CAAA,QAA0D;AAAA;AAAAF,cAAA,GAAAE,CAAA;AAEvD,MAAMC,sBAAA,GAA0BgC,QAAA;EAAA;EAAAnC,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EACrCgC,mBAAA,GAAsBC,QAAA;AACxB;AAAA;AAAAnC,cAAA,GAAAE,CAAA;AAEO,MAAMG,KAAA,GAASO,OAAA;EAAA;EAAAZ,cAAA,GAAAI,CAAA;EAAAJ,cAAA,GAAAE,CAAA;EACpB,IAAIgC,mBAAA,EAAqB;IAAA;IAAAlC,cAAA,GAAAoB,CAAA;IAAApB,cAAA,GAAAE,CAAA;IACvB,OAAOgC,mBAAA,CAAoB7B,KAAK,CAACO,OAAA;EACnC;EAAA;EAAA;IAAAZ,cAAA,GAAAoB,CAAA;EAAA;EAAApB,cAAA,GAAAE,CAAA;EACAkC,OAAA,CAAQC,IAAI,CAAC;EAAA;EAAArC,cAAA,GAAAE,CAAA;EACb,OAAO;AACT","ignoreList":[]}