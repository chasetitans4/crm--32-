f19d472a4665725c52dd051ec645e7da
"use strict";

/* istanbul ignore next */
function cov_27zvhxtd9() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\schemas\\formSchemas.ts";
  var hash = "2ac125f27c88fae51011bd5008b90d567578b05e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\schemas\\formSchemas.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 30,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 28
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 35
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 27
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 26
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 29
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 26
        }
      },
      "10": {
        start: {
          line: 31,
          column: 13
        },
        end: {
          line: 31,
          column: 27
        }
      },
      "11": {
        start: {
          line: 32,
          column: 21
        },
        end: {
          line: 45,
          column: 2
        }
      },
      "12": {
        start: {
          line: 46,
          column: 19
        },
        end: {
          line: 70,
          column: 2
        }
      },
      "13": {
        start: {
          line: 71,
          column: 20
        },
        end: {
          line: 88,
          column: 2
        }
      },
      "14": {
        start: {
          line: 89,
          column: 19
        },
        end: {
          line: 96,
          column: 2
        }
      },
      "15": {
        start: {
          line: 97,
          column: 28
        },
        end: {
          line: 101,
          column: 2
        }
      },
      "16": {
        start: {
          line: 102,
          column: 22
        },
        end: {
          line: 113,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 31
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 23
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 22
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 25
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 22
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {},
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\schemas\\formSchemas.ts"],
      sourcesContent: ["import { z } from \"zod\"\n\n// Client schema\nexport const clientSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  contact: z.string().min(2, \"Contact name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().min(7, \"Phone number is required\"),\n  stage: z.string().min(1, \"Stage is required\"),\n  value: z.string().min(1, \"Value is required\"),\n  status: z.enum([\"active\", \"potential\", \"inactive\"]),\n  source: z.string().optional(),\n})\n\nexport type ClientFormValues = z.infer<typeof clientSchema>\n\n// Task schema\nexport const taskSchema = z.object({\n  title: z.string().min(3, \"Title must be at least 3 characters\"),\n  assignee: z.string().min(1, \"Assignee is required\"),\n  dueDate: z.string().min(1, \"Due date is required\"),\n  status: z.enum([\"pending\", \"in-progress\", \"completed\"]),\n  priority: z.enum([\"low\", \"medium\", \"high\"]),\n  relatedTo: z\n    .object({\n      type: z.enum([\"client\", \"project\", \"internal\"]),\n      id: z.number().optional(),\n      clientId: z.string().optional(),\n      projectId: z.number().optional(),\n    })\n    .nullable()\n    .optional(),\n})\n\nexport type TaskFormValues = z.infer<typeof taskSchema>\n\n// Event schema\nexport const eventSchema = z.object({\n  title: z.string().min(3, \"Title must be at least 3 characters\"),\n  date: z.string().min(1, \"Date is required\"),\n  time: z.string().min(1, \"Time is required\"),\n  type: z.enum([\"meeting\", \"call\", \"deadline\", \"internal\"]),\n  relatedTo: z\n    .object({\n      type: z.enum([\"client\", \"internal\"]),\n      id: z.number().optional(),\n    })\n    .nullable()\n    .optional(),\n})\n\nexport type EventFormValues = z.infer<typeof eventSchema>\n\n// Note schema\nexport const noteSchema = z.object({\n  type: z.enum([\"call\", \"email\", \"meeting\"]),\n  content: z.string().min(3, \"Content must be at least 3 characters\"),\n})\n\nexport type NoteFormValues = z.infer<typeof noteSchema>\n\n// Email template schema\nexport const emailTemplateSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  subject: z.string().min(2, \"Subject is required\"),\n  body: z.string().min(10, \"Body must be at least 10 characters\"),\n})\n\nexport type EmailTemplateFormValues = z.infer<typeof emailTemplateSchema>\n\n// Additional schema for Project\nexport const projectSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  description: z.string().optional(),\n  startDate: z.string().min(1, \"Start date is required\"),\n  endDate: z.string().min(1, \"End date is required\"),\n  status: z.enum([\"planned\", \"ongoing\", \"completed\"]),\n  client: z.number().optional(),\n})\n\nexport type ProjectFormValues = z.infer<typeof projectSchema>\n"],
      names: ["clientSchema", "emailTemplateSchema", "eventSchema", "noteSchema", "projectSchema", "taskSchema", "z", "object", "name", "string", "min", "contact", "email", "phone", "stage", "value", "status", "enum", "source", "optional", "title", "assignee", "dueDate", "priority", "relatedTo", "type", "id", "number", "clientId", "projectId", "nullable", "date", "time", "content", "subject", "body", "description", "startDate", "endDate", "client"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2ac125f27c88fae51011bd5008b90d567578b05e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_27zvhxtd9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_27zvhxtd9();
cov_27zvhxtd9().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_27zvhxtd9().f[0]++;
  cov_27zvhxtd9().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_27zvhxtd9().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_27zvhxtd9().s[3]++;
_export(exports, {
  get clientSchema() {
    /* istanbul ignore next */
    cov_27zvhxtd9().f[1]++;
    cov_27zvhxtd9().s[4]++;
    return clientSchema;
  },
  get emailTemplateSchema() {
    /* istanbul ignore next */
    cov_27zvhxtd9().f[2]++;
    cov_27zvhxtd9().s[5]++;
    return emailTemplateSchema;
  },
  get eventSchema() {
    /* istanbul ignore next */
    cov_27zvhxtd9().f[3]++;
    cov_27zvhxtd9().s[6]++;
    return eventSchema;
  },
  get noteSchema() {
    /* istanbul ignore next */
    cov_27zvhxtd9().f[4]++;
    cov_27zvhxtd9().s[7]++;
    return noteSchema;
  },
  get projectSchema() {
    /* istanbul ignore next */
    cov_27zvhxtd9().f[5]++;
    cov_27zvhxtd9().s[8]++;
    return projectSchema;
  },
  get taskSchema() {
    /* istanbul ignore next */
    cov_27zvhxtd9().f[6]++;
    cov_27zvhxtd9().s[9]++;
    return taskSchema;
  }
});
const _zod =
/* istanbul ignore next */
(cov_27zvhxtd9().s[10]++, require("zod"));
const clientSchema =
/* istanbul ignore next */
(cov_27zvhxtd9().s[11]++, _zod.z.object({
  name: _zod.z.string().min(2, "Name must be at least 2 characters"),
  contact: _zod.z.string().min(2, "Contact name is required"),
  email: _zod.z.string().email("Invalid email address"),
  phone: _zod.z.string().min(7, "Phone number is required"),
  stage: _zod.z.string().min(1, "Stage is required"),
  value: _zod.z.string().min(1, "Value is required"),
  status: _zod.z.enum(["active", "potential", "inactive"]),
  source: _zod.z.string().optional()
}));
const taskSchema =
/* istanbul ignore next */
(cov_27zvhxtd9().s[12]++, _zod.z.object({
  title: _zod.z.string().min(3, "Title must be at least 3 characters"),
  assignee: _zod.z.string().min(1, "Assignee is required"),
  dueDate: _zod.z.string().min(1, "Due date is required"),
  status: _zod.z.enum(["pending", "in-progress", "completed"]),
  priority: _zod.z.enum(["low", "medium", "high"]),
  relatedTo: _zod.z.object({
    type: _zod.z.enum(["client", "project", "internal"]),
    id: _zod.z.number().optional(),
    clientId: _zod.z.string().optional(),
    projectId: _zod.z.number().optional()
  }).nullable().optional()
}));
const eventSchema =
/* istanbul ignore next */
(cov_27zvhxtd9().s[13]++, _zod.z.object({
  title: _zod.z.string().min(3, "Title must be at least 3 characters"),
  date: _zod.z.string().min(1, "Date is required"),
  time: _zod.z.string().min(1, "Time is required"),
  type: _zod.z.enum(["meeting", "call", "deadline", "internal"]),
  relatedTo: _zod.z.object({
    type: _zod.z.enum(["client", "internal"]),
    id: _zod.z.number().optional()
  }).nullable().optional()
}));
const noteSchema =
/* istanbul ignore next */
(cov_27zvhxtd9().s[14]++, _zod.z.object({
  type: _zod.z.enum(["call", "email", "meeting"]),
  content: _zod.z.string().min(3, "Content must be at least 3 characters")
}));
const emailTemplateSchema =
/* istanbul ignore next */
(cov_27zvhxtd9().s[15]++, _zod.z.object({
  name: _zod.z.string().min(2, "Name must be at least 2 characters"),
  subject: _zod.z.string().min(2, "Subject is required"),
  body: _zod.z.string().min(10, "Body must be at least 10 characters")
}));
const projectSchema =
/* istanbul ignore next */
(cov_27zvhxtd9().s[16]++, _zod.z.object({
  name: _zod.z.string().min(2, "Name must be at least 2 characters"),
  description: _zod.z.string().optional(),
  startDate: _zod.z.string().min(1, "Start date is required"),
  endDate: _zod.z.string().min(1, "End date is required"),
  status: _zod.z.enum(["planned", "ongoing", "completed"]),
  client: _zod.z.number().optional()
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,