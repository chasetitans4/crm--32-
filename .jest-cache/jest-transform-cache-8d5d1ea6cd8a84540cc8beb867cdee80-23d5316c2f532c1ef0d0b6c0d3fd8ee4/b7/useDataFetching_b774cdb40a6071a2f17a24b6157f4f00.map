{"version":3,"names":["cov_v1d9so03r","actualCoverage","s","default","f","_default","useApiCall","useDataFetching","useLocalStorageData","usePaginatedData","cache","Map","getCachedData","key","cached","get","b","isExpired","Date","now","timestamp","duration","delete","data","setCachedData","set","fetchFunction","options","initialData","fetchOnMount","retryAttempts","retryDelay","cacheKey","cacheDuration","onSuccess","onError","dependencies","setData","_react","useState","loading","setLoading","error","setError","isRetrying","setIsRetrying","retryCount","setRetryCount","fetchFunctionRef","useRef","mountedRef","useEffect","current","executeWithRetry","useCallback","operation","attempts","lastError","attempt","Promise","resolve","setTimeout","result","err","Error","String","fetchData","refetch","mutate","newData","updatedData","reset","retry","url","hookOptions","response","fetch","headers","ok","status","statusText","json","JSON","stringify","defaultValue","item","localStorage","getItem","parse","console","warn","originalMutate","setItem","pageSize","initialPageSize","initialPage","currentPage","setCurrentPage","setPageSize","totalItems","setTotalItems","paginatedFetchFunction","total","dataResult","totalPages","Math","ceil","hasNextPage","hasPreviousPage","nextPage","prev","previousPage","goToPage","page","handleSetPageSize","size"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\useDataFetching.ts"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect, useCallback, useRef } from \"react\"\n\nexport interface UseDataFetchingOptions<T> {\n  initialData?: T\n  fetchOnMount?: boolean\n  retryAttempts?: number\n  retryDelay?: number\n  cacheKey?: string\n  cacheDuration?: number\n  onSuccess?: (data: T) => void\n  onError?: (error: Error) => void\n  dependencies?: any[]\n}\n\nexport interface UseDataFetchingReturn<T> {\n  data: T | null\n  loading: boolean\n  error: Error | null\n  refetch: () => Promise<void>\n  mutate: (newData: T | ((prevData: T | null) => T)) => void\n  reset: () => void\n  retry: () => Promise<void>\n  isRetrying: boolean\n  retryCount: number\n}\n\n// Simple in-memory cache\nconst cache = new Map<string, { data: any; timestamp: number; duration: number }>()\n\nfunction getCachedData<T>(key: string): T | null {\n  const cached = cache.get(key)\n  if (!cached) return null\n  \n  const isExpired = Date.now() - cached.timestamp > cached.duration\n  if (isExpired) {\n    cache.delete(key)\n    return null\n  }\n  \n  return cached.data\n}\n\nfunction setCachedData<T>(key: string, data: T, duration: number): void {\n  cache.set(key, {\n    data,\n    timestamp: Date.now(),\n    duration\n  })\n}\n\nexport function useDataFetching<T>(\n  fetchFunction: () => Promise<T>,\n  options: UseDataFetchingOptions<T> = {}\n): UseDataFetchingReturn<T> {\n  const {\n    initialData = null,\n    fetchOnMount = true,\n    retryAttempts = 3,\n    retryDelay = 1000,\n    cacheKey,\n    cacheDuration = 5 * 60 * 1000, // 5 minutes default\n    onSuccess,\n    onError,\n    dependencies = []\n  } = options\n\n  const [data, setData] = useState<T | null>(() => {\n    if (cacheKey) {\n      const cached = getCachedData<T>(cacheKey)\n      if (cached) return cached\n    }\n    return initialData\n  })\n  \n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<Error | null>(null)\n  const [isRetrying, setIsRetrying] = useState(false)\n  const [retryCount, setRetryCount] = useState(0)\n  \n  const fetchFunctionRef = useRef(fetchFunction)\n  const mountedRef = useRef(true)\n  \n  // Update function ref when it changes\n  useEffect(() => {\n    fetchFunctionRef.current = fetchFunction\n  }, [fetchFunction])\n  \n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      mountedRef.current = false\n    }\n  }, [])\n\n  const executeWithRetry = useCallback(async (\n    operation: () => Promise<T>,\n    attempts: number = retryAttempts\n  ): Promise<T> => {\n    let lastError: Error\n    \n    for (let attempt = 0; attempt <= attempts; attempt++) {\n      try {\n        if (attempt > 0) {\n          setIsRetrying(true)\n          setRetryCount(attempt)\n          await new Promise(resolve => setTimeout(resolve, retryDelay * attempt))\n        }\n        \n        const result = await operation()\n        \n        if (mountedRef.current) {\n          setIsRetrying(false)\n          setRetryCount(0)\n        }\n        \n        return result\n      } catch (err) {\n        lastError = err instanceof Error ? err : new Error(String(err))\n        \n        if (attempt === attempts) {\n          if (mountedRef.current) {\n            setIsRetrying(false)\n            setRetryCount(0)\n          }\n          throw lastError\n        }\n      }\n    }\n    \n    throw lastError!\n  }, [retryAttempts, retryDelay])\n\n  const fetchData = useCallback(async () => {\n    if (!mountedRef.current) return\n    \n    try {\n      setLoading(true)\n      setError(null)\n      \n      const result = await executeWithRetry(fetchFunctionRef.current)\n      \n      if (!mountedRef.current) return\n      \n      setData(result)\n      \n      // Cache the result if cacheKey is provided\n      if (cacheKey) {\n        setCachedData(cacheKey, result, cacheDuration)\n      }\n      \n      onSuccess?.(result)\n    } catch (err) {\n      if (!mountedRef.current) return\n      \n      const error = err instanceof Error ? err : new Error(String(err))\n      setError(error)\n      onError?.(error)\n    } finally {\n      if (mountedRef.current) {\n        setLoading(false)\n      }\n    }\n  }, [cacheKey, cacheDuration, onSuccess, onError, executeWithRetry])\n\n  const refetch = useCallback(async () => {\n    // Clear cache before refetching\n    if (cacheKey) {\n      cache.delete(cacheKey)\n    }\n    await fetchData()\n  }, [fetchData, cacheKey])\n\n  const mutate = useCallback((newData: T | ((prevData: T | null) => T)) => {\n    const updatedData = typeof newData === 'function' \n      ? (newData as (prevData: T | null) => T)(data)\n      : newData\n    \n    setData(updatedData)\n    \n    // Update cache\n    if (cacheKey) {\n      setCachedData(cacheKey, updatedData, cacheDuration)\n    }\n  }, [data, cacheKey, cacheDuration])\n\n  const reset = useCallback(() => {\n    setData(initialData)\n    setError(null)\n    setLoading(false)\n    setIsRetrying(false)\n    setRetryCount(0)\n    \n    // Clear cache\n    if (cacheKey) {\n      cache.delete(cacheKey)\n    }\n  }, [initialData, cacheKey])\n\n  const retry = useCallback(async () => {\n    if (error) {\n      await fetchData()\n    }\n  }, [error, fetchData])\n\n  // Fetch data on mount or when dependencies change\n  useEffect(() => {\n    if (fetchOnMount) {\n      fetchData()\n    }\n  }, [fetchOnMount, ...dependencies])\n\n  return {\n    data,\n    loading,\n    error,\n    refetch,\n    mutate,\n    reset,\n    retry,\n    isRetrying,\n    retryCount\n  }\n}\n\n// Specialized hooks for common patterns\nexport function useApiCall<T>(\n  url: string,\n  options: RequestInit = {},\n  hookOptions: UseDataFetchingOptions<T> = {}\n) {\n  const fetchFunction = useCallback(async (): Promise<T> => {\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    })\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n    }\n    \n    return response.json()\n  }, [url, options])\n\n  return useDataFetching(fetchFunction, {\n    cacheKey: `api-${url}-${JSON.stringify(options)}`,\n    ...hookOptions\n  })\n}\n\nexport function useLocalStorageData<T>(\n  key: string,\n  defaultValue: T,\n  hookOptions: Omit<UseDataFetchingOptions<T>, 'fetchOnMount'> = {}\n) {\n  const fetchFunction = useCallback(async (): Promise<T> => {\n    try {\n      const item = localStorage.getItem(key)\n      return item ? JSON.parse(item) : defaultValue\n    } catch (error) {\n      console.warn(`Failed to parse localStorage item '${key}':`, error)\n      return defaultValue\n    }\n  }, [key, defaultValue])\n\n  const result = useDataFetching(fetchFunction, {\n    fetchOnMount: true,\n    ...hookOptions\n  })\n\n  // Override mutate to also update localStorage\n  const originalMutate = result.mutate\n  const mutate = useCallback((newData: T | ((prevData: T | null) => T)) => {\n    const updatedData = typeof newData === 'function' \n      ? (newData as (prevData: T | null) => T)(result.data)\n      : newData\n    \n    try {\n      localStorage.setItem(key, JSON.stringify(updatedData))\n    } catch (error) {\n      console.warn(`Failed to save to localStorage '${key}':`, error)\n    }\n    \n    originalMutate(newData)\n  }, [key, result.data, originalMutate])\n\n  return {\n    ...result,\n    mutate\n  }\n}\n\n// Hook for paginated data\nexport interface UsePaginatedDataOptions<T> extends UseDataFetchingOptions<T[]> {\n  pageSize?: number\n  initialPage?: number\n}\n\nexport interface UsePaginatedDataReturn<T> extends Omit<UseDataFetchingReturn<T[]>, 'data'> {\n  data: T[]\n  currentPage: number\n  totalPages: number\n  hasNextPage: boolean\n  hasPreviousPage: boolean\n  nextPage: () => void\n  previousPage: () => void\n  goToPage: (page: number) => void\n  pageSize: number\n  setPageSize: (size: number) => void\n}\n\nexport function usePaginatedData<T>(\n  fetchFunction: (page: number, pageSize: number) => Promise<{ data: T[]; total: number }>,\n  options: UsePaginatedDataOptions<T> = {}\n): UsePaginatedDataReturn<T> {\n  const {\n    pageSize: initialPageSize = 10,\n    initialPage = 1,\n    ...hookOptions\n  } = options\n\n  const [currentPage, setCurrentPage] = useState(initialPage)\n  const [pageSize, setPageSize] = useState(initialPageSize)\n  const [totalItems, setTotalItems] = useState(0)\n\n  const paginatedFetchFunction = useCallback(async (): Promise<T[]> => {\n    const result = await fetchFunction(currentPage, pageSize)\n    setTotalItems(result.total)\n    return result.data\n  }, [fetchFunction, currentPage, pageSize])\n\n  const dataResult = useDataFetching(paginatedFetchFunction, {\n    ...hookOptions,\n    dependencies: [currentPage, pageSize, ...(hookOptions.dependencies || [])]\n  })\n\n  const totalPages = Math.ceil(totalItems / pageSize)\n  const hasNextPage = currentPage < totalPages\n  const hasPreviousPage = currentPage > 1\n\n  const nextPage = useCallback(() => {\n    if (hasNextPage) {\n      setCurrentPage(prev => prev + 1)\n    }\n  }, [hasNextPage])\n\n  const previousPage = useCallback(() => {\n    if (hasPreviousPage) {\n      setCurrentPage(prev => prev - 1)\n    }\n  }, [hasPreviousPage])\n\n  const goToPage = useCallback((page: number) => {\n    if (page >= 1 && page <= totalPages) {\n      setCurrentPage(page)\n    }\n  }, [totalPages])\n\n  const handleSetPageSize = useCallback((size: number) => {\n    setPageSize(size)\n    setCurrentPage(1) // Reset to first page when changing page size\n  }, [])\n\n  return {\n    ...dataResult,\n    data: dataResult.data || [],\n    currentPage,\n    totalPages,\n    hasNextPage,\n    hasPreviousPage,\n    nextPage,\n    previousPage,\n    goToPage,\n    pageSize,\n    setPageSize: handleSetPageSize\n  }\n}\n\nexport default useDataFetching"],"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","ignoreList":[]}