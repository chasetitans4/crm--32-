4b12a0299077ef7b386ed7af27e53bdc
"use strict";

/* istanbul ignore next */
function cov_244aboelxv() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\crmEmailService.ts";
  var hash = "b9b4675dd2b305b7c616ae0a2d06542d0f23c2a1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\crmEmailService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 31
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 24
        }
      },
      "6": {
        start: {
          line: 19,
          column: 17
        },
        end: {
          line: 19,
          column: 37
        }
      },
      "7": {
        start: {
          line: 20,
          column: 18
        },
        end: {
          line: 20,
          column: 39
        }
      },
      "8": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "9": {
        start: {
          line: 25,
          column: 27
        },
        end: {
          line: 25,
          column: 82
        }
      },
      "10": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 61
        }
      },
      "11": {
        start: {
          line: 26,
          column: 25
        },
        end: {
          line: 26,
          column: 61
        }
      },
      "12": {
        start: {
          line: 27,
          column: 30
        },
        end: {
          line: 32,
          column: 13
        }
      },
      "13": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 50,
          column: 15
        }
      },
      "14": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 24
        }
      },
      "15": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "16": {
        start: {
          line: 59,
          column: 27
        },
        end: {
          line: 59,
          column: 82
        }
      },
      "17": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 61
        }
      },
      "18": {
        start: {
          line: 60,
          column: 25
        },
        end: {
          line: 60,
          column: 61
        }
      },
      "19": {
        start: {
          line: 61,
          column: 30
        },
        end: {
          line: 70,
          column: 13
        }
      },
      "20": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 89,
          column: 15
        }
      },
      "21": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 24
        }
      },
      "22": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "23": {
        start: {
          line: 98,
          column: 27
        },
        end: {
          line: 98,
          column: 82
        }
      },
      "24": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 61
        }
      },
      "25": {
        start: {
          line: 99,
          column: 25
        },
        end: {
          line: 99,
          column: 61
        }
      },
      "26": {
        start: {
          line: 100,
          column: 30
        },
        end: {
          line: 107,
          column: 13
        }
      },
      "27": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 126,
          column: 15
        }
      },
      "28": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 24
        }
      },
      "29": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "30": {
        start: {
          line: 135,
          column: 27
        },
        end: {
          line: 135,
          column: 82
        }
      },
      "31": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 61
        }
      },
      "32": {
        start: {
          line: 136,
          column: 25
        },
        end: {
          line: 136,
          column: 61
        }
      },
      "33": {
        start: {
          line: 137,
          column: 30
        },
        end: {
          line: 145,
          column: 13
        }
      },
      "34": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 163,
          column: 15
        }
      },
      "35": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 24
        }
      },
      "36": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "37": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 181,
          column: 15
        }
      },
      "38": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 24
        }
      },
      "39": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 213,
          column: 9
        }
      },
      "40": {
        start: {
          line: 190,
          column: 28
        },
        end: {
          line: 190,
          column: 111
        }
      },
      "41": {
        start: {
          line: 190,
          column: 66
        },
        end: {
          line: 190,
          column: 109
        }
      },
      "42": {
        start: {
          line: 191,
          column: 33
        },
        end: {
          line: 191,
          column: 81
        }
      },
      "43": {
        start: {
          line: 191,
          column: 58
        },
        end: {
          line: 191,
          column: 80
        }
      },
      "44": {
        start: {
          line: 192,
          column: 27
        },
        end: {
          line: 208,
          column: 19
        }
      },
      "45": {
        start: {
          line: 192,
          column: 55
        },
        end: {
          line: 208,
          column: 17
        }
      },
      "46": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 71
        }
      },
      "47": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 24
        }
      },
      "48": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 227,
          column: 9
        }
      },
      "49": {
        start: {
          line: 218,
          column: 26
        },
        end: {
          line: 218,
          column: 71
        }
      },
      "50": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 222,
          column: 13
        }
      },
      "51": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 221,
          column: 118
        }
      },
      "52": {
        start: {
          line: 221,
          column: 44
        },
        end: {
          line: 221,
          column: 116
        }
      },
      "53": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 25
        }
      },
      "54": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 24
        }
      },
      "55": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "56": {
        start: {
          line: 232,
          column: 26
        },
        end: {
          line: 232,
          column: 71
        }
      },
      "57": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 114
        }
      },
      "58": {
        start: {
          line: 233,
          column: 40
        },
        end: {
          line: 233,
          column: 112
        }
      },
      "59": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 22
        }
      },
      "60": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "61": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 67
        }
      },
      "62": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "63": {
        start: {
          line: 250,
          column: 30
        },
        end: {
          line: 250,
          column: 74
        }
      },
      "64": {
        start: {
          line: 251,
          column: 29
        },
        end: {
          line: 251,
          column: 73
        }
      },
      "65": {
        start: {
          line: 251,
          column: 49
        },
        end: {
          line: 251,
          column: 72
        }
      },
      "66": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 32
        }
      },
      "67": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 29
        }
      },
      "68": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 266,
          column: 10
        }
      },
      "69": {
        start: {
          line: 269,
          column: 24
        },
        end: {
          line: 269,
          column: 45
        }
      },
      "70": {
        start: {
          line: 270,
          column: 17
        },
        end: {
          line: 270,
          column: 32
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 27
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 19
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 54
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 23
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 81
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 57
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        },
        loc: {
          start: {
            line: 96,
            column: 82
          },
          end: {
            line: 131,
            column: 5
          }
        },
        line: 96
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 133,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        },
        loc: {
          start: {
            line: 133,
            column: 105
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 133
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 170,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        },
        loc: {
          start: {
            line: 170,
            column: 95
          },
          end: {
            line: 186,
            column: 5
          }
        },
        line: 170
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 79
          },
          end: {
            line: 214,
            column: 5
          }
        },
        line: 188
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 190,
            column: 60
          },
          end: {
            line: 190,
            column: 61
          }
        },
        loc: {
          start: {
            line: 190,
            column: 66
          },
          end: {
            line: 190,
            column: 109
          }
        },
        line: 190
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 191,
            column: 48
          },
          end: {
            line: 191,
            column: 49
          }
        },
        loc: {
          start: {
            line: 191,
            column: 58
          },
          end: {
            line: 191,
            column: 80
          }
        },
        line: 191
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 192,
            column: 44
          },
          end: {
            line: 192,
            column: 45
          }
        },
        loc: {
          start: {
            line: 192,
            column: 55
          },
          end: {
            line: 208,
            column: 17
          }
        },
        line: 192
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        loc: {
          start: {
            line: 216,
            column: 34
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 216
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 221,
            column: 36
          },
          end: {
            line: 221,
            column: 37
          }
        },
        loc: {
          start: {
            line: 221,
            column: 44
          },
          end: {
            line: 221,
            column: 116
          }
        },
        line: 221
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 230,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        },
        loc: {
          start: {
            line: 230,
            column: 42
          },
          end: {
            line: 238,
            column: 5
          }
        },
        line: 230
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 233,
            column: 32
          },
          end: {
            line: 233,
            column: 33
          }
        },
        loc: {
          start: {
            line: 233,
            column: 40
          },
          end: {
            line: 233,
            column: 112
          }
        },
        line: 233
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        loc: {
          start: {
            line: 240,
            column: 32
          },
          end: {
            line: 246,
            column: 5
          }
        },
        line: 240
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 248,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        },
        loc: {
          start: {
            line: 248,
            column: 38
          },
          end: {
            line: 257,
            column: 5
          }
        },
        line: 248
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 251,
            column: 44
          },
          end: {
            line: 251,
            column: 45
          }
        },
        loc: {
          start: {
            line: 251,
            column: 49
          },
          end: {
            line: 251,
            column: 72
          }
        },
        line: 251
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 259,
            column: 4
          },
          end: {
            line: 259,
            column: 5
          }
        },
        loc: {
          start: {
            line: 259,
            column: 33
          },
          end: {
            line: 261,
            column: 5
          }
        },
        line: 259
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 262,
            column: 4
          },
          end: {
            line: 262,
            column: 5
          }
        },
        loc: {
          start: {
            line: 262,
            column: 17
          },
          end: {
            line: 267,
            column: 5
          }
        },
        line: 262
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 12
          },
          end: {
            line: 26,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 12
          },
          end: {
            line: 26,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 60,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 60,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "2": {
        loc: {
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 99,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 99,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "3": {
        loc: {
          start: {
            line: 106,
            column: 30
          },
          end: {
            line: 106,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 30
          },
          end: {
            line: 106,
            column: 41
          }
        }, {
          start: {
            line: 106,
            column: 45
          },
          end: {
            line: 106,
            column: 48
          }
        }],
        line: 106
      },
      "4": {
        loc: {
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 136,
            column: 61
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 136,
            column: 61
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "5": {
        loc: {
          start: {
            line: 143,
            column: 32
          },
          end: {
            line: 143,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 32
          },
          end: {
            line: 143,
            column: 38
          }
        }, {
          start: {
            line: 143,
            column: 42
          },
          end: {
            line: 143,
            column: 97
          }
        }],
        line: 143
      },
      "6": {
        loc: {
          start: {
            line: 179,
            column: 26
          },
          end: {
            line: 179,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 179,
            column: 46
          },
          end: {
            line: 179,
            column: 88
          }
        }, {
          start: {
            line: 179,
            column: 91
          },
          end: {
            line: 179,
            column: 100
          }
        }],
        line: 179
      },
      "7": {
        loc: {
          start: {
            line: 180,
            column: 30
          },
          end: {
            line: 180,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 180,
            column: 40
          },
          end: {
            line: 180,
            column: 63
          }
        }, {
          start: {
            line: 180,
            column: 66
          },
          end: {
            line: 180,
            column: 75
          }
        }],
        line: 180
      },
      "8": {
        loc: {
          start: {
            line: 191,
            column: 58
          },
          end: {
            line: 191,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 58
          },
          end: {
            line: 191,
            column: 64
          }
        }, {
          start: {
            line: 191,
            column: 68
          },
          end: {
            line: 191,
            column: 80
          }
        }],
        line: 191
      },
      "9": {
        loc: {
          start: {
            line: 220,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "10": {
        loc: {
          start: {
            line: 221,
            column: 44
          },
          end: {
            line: 221,
            column: 116
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 221,
            column: 44
          },
          end: {
            line: 221,
            column: 61
          }
        }, {
          start: {
            line: 221,
            column: 65
          },
          end: {
            line: 221,
            column: 116
          }
        }],
        line: 221
      },
      "11": {
        loc: {
          start: {
            line: 233,
            column: 40
          },
          end: {
            line: 233,
            column: 112
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 233,
            column: 40
          },
          end: {
            line: 233,
            column: 57
          }
        }, {
          start: {
            line: 233,
            column: 61
          },
          end: {
            line: 233,
            column: 112
          }
        }],
        line: 233
      },
      "12": {
        loc: {
          start: {
            line: 264,
            column: 19
          },
          end: {
            line: 264,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 264,
            column: 19
          },
          end: {
            line: 264,
            column: 55
          }
        }, {
          start: {
            line: 264,
            column: 59
          },
          end: {
            line: 264,
            column: 80
          }
        }],
        line: 264
      },
      "13": {
        loc: {
          start: {
            line: 265,
            column: 18
          },
          end: {
            line: 265,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 265,
            column: 18
          },
          end: {
            line: 265,
            column: 53
          }
        }, {
          start: {
            line: 265,
            column: 57
          },
          end: {
            line: 265,
            column: 69
          }
        }],
        line: 265
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\crmEmailService.ts"],
      sourcesContent: ["import { mailjetService, type EmailOptions, type EmailRecipient } from \"./mailjet\"\nimport { databaseService } from \"./database\"\n\nexport interface CRMEmailOptions {\n  clientId?: string\n  projectId?: string\n  taskId?: string\n  invoiceId?: string\n  templateName?: string\n  customVariables?: Record<string, unknown>\n}\n\nexport interface EmailTemplate {\n  id: string\n  name: string\n  subject: string\n  htmlContent: string\n  textContent?: string\n  variables: string[]\n  category: \"client\" | \"project\" | \"invoice\" | \"marketing\" | \"system\"\n}\n\nclass CRMEmailService {\n  private defaultSender = {\n    email: process.env.NEXT_PUBLIC_SENDER_EMAIL || \"noreply@yourcrm.com\",\n    name: process.env.NEXT_PUBLIC_SENDER_NAME || \"CRM System\",\n  }\n\n  // Send welcome email to new client\n  async sendWelcomeEmail(clientId: string, customVariables?: Record<string, unknown>): Promise<unknown> {\n    try {\n      const client = await databaseService.getClientById(clientId)\n      if (!client) throw new Error(\"Client not found\")\n\n      const variables = {\n        client_name: client.name,\n        company_name: this.defaultSender.name,\n        account_manager: \"Your Account Manager\",\n        ...customVariables,\n      }\n\n      return await mailjetService.sendEmail({\n        from: this.defaultSender,\n        to: [{ email: client.email, name: client.name, variables }],\n        subject: `Welcome to ${this.defaultSender.name}!`,\n        templateId: await this.getTemplateId(\"Welcome Client\"),\n        variables,\n        customId: `welcome_${clientId}`,\n        eventPayload: JSON.stringify({ type: \"welcome\", clientId }),\n      })\n    } catch (error) {\n      // Silent error handling: Failed to send welcome email\n      throw error\n    }\n  }\n\n  // Send project update email\n  async sendProjectUpdate(\n    clientId: string,\n    projectId: string,\n    updateMessage: string,\n    customVariables?: Record<string, any>,\n  ): Promise<any> {\n    try {\n      const client = await databaseService.getClientById(clientId)\n      if (!client) throw new Error(\"Client not found\")\n\n      const variables = {\n        client_name: client.name,\n        project_name: `Project #${projectId}`,\n        project_status: \"In Progress\",\n        progress_percentage: \"75\",\n        update_message: updateMessage,\n        next_milestone: \"Design Review\",\n        account_manager: \"Your Account Manager\",\n        ...customVariables,\n      }\n\n      return await mailjetService.sendEmail({\n        from: this.defaultSender,\n        to: [{ email: client.email, name: client.name, variables }],\n        subject: `Project Update: ${variables.project_name}`,\n        templateId: await this.getTemplateId(\"Project Update\"),\n        variables,\n        customId: `project_update_${projectId}`,\n        eventPayload: JSON.stringify({ type: \"project_update\", clientId, projectId }),\n      })\n    } catch (error) {\n      // Silent error handling: Failed to send project update\n      throw error\n    }\n  }\n\n  // Send invoice email\n  async sendInvoiceEmail(\n    clientId: string,\n    invoiceNumber: string,\n    amount: string,\n    dueDate: string,\n    paymentLink?: string,\n  ): Promise<any> {\n    try {\n      const client = await databaseService.getClientById(clientId)\n      if (!client) throw new Error(\"Client not found\")\n\n      const variables = {\n        client_name: client.name,\n        company_name: this.defaultSender.name,\n        invoice_number: invoiceNumber,\n        invoice_amount: amount,\n        due_date: dueDate,\n        payment_link: paymentLink || \"#\",\n      }\n\n      return await mailjetService.sendEmail({\n        from: this.defaultSender,\n        to: [{ email: client.email, name: client.name, variables }],\n        subject: `Invoice ${invoiceNumber} from ${this.defaultSender.name}`,\n        templateId: await this.getTemplateId(\"Invoice Notification\"),\n        variables,\n        customId: `invoice_${invoiceNumber}`,\n        eventPayload: JSON.stringify({ type: \"invoice\", clientId, invoiceNumber }),\n      })\n    } catch (error) {\n      // Silent error handling: Failed to send invoice email\n      throw error\n    }\n  }\n\n  // Send meeting reminder\n  async sendMeetingReminder(\n    clientId: string,\n    meetingTitle: string,\n    meetingDate: string,\n    meetingTime: string,\n    meetingLocation: string,\n    agenda?: string,\n  ): Promise<any> {\n    try {\n      const client = await databaseService.getClientById(clientId)\n      if (!client) throw new Error(\"Client not found\")\n\n      const variables = {\n        client_name: client.name,\n        meeting_title: meetingTitle,\n        meeting_date: meetingDate,\n        meeting_time: meetingTime,\n        meeting_location: meetingLocation,\n        meeting_agenda: agenda || \"We will discuss your project progress and next steps.\",\n        account_manager: \"Your Account Manager\",\n      }\n\n      return await mailjetService.sendEmail({\n        from: this.defaultSender,\n        to: [{ email: client.email, name: client.name, variables }],\n        subject: `Meeting Reminder: ${meetingTitle}`,\n        templateId: await this.getTemplateId(\"Meeting Reminder\"),\n        variables,\n        customId: `meeting_${clientId}_${Date.now()}`,\n        eventPayload: JSON.stringify({ type: \"meeting_reminder\", clientId }),\n      })\n    } catch (error) {\n      // Silent error handling: Failed to send meeting reminder\n      throw error\n    }\n  }\n\n  // Send custom email\n  async sendCustomEmail(\n    recipients: EmailRecipient[],\n    subject: string,\n    htmlContent: string,\n    textContent?: string,\n    attachments?: any[],\n    options?: CRMEmailOptions,\n  ): Promise<any> {\n    try {\n      return await mailjetService.sendEmail({\n        from: this.defaultSender,\n        to: recipients,\n        subject,\n        htmlPart: htmlContent,\n        textPart: textContent,\n        attachments,\n        customId: options?.clientId ? `custom_${options.clientId}_${Date.now()}` : undefined,\n        eventPayload: options ? JSON.stringify(options) : undefined,\n      })\n    } catch (error) {\n      // Silent error handling: Failed to send custom email\n      throw error\n    }\n  }\n\n  // Send bulk marketing email\n  async sendMarketingCampaign(\n    clientIds: string[],\n    subject: string,\n    htmlContent: string,\n    campaignName: string,\n  ): Promise<any> {\n    try {\n      const clients = await Promise.all(clientIds.map((id) => databaseService.getClientById(id)))\n\n      const validClients = clients.filter((client) => client && client.email)\n\n      const emails: EmailOptions[] = validClients.map((client) => ({\n        from: this.defaultSender,\n        to: [{ email: client!.email, name: client!.name }],\n        subject,\n        htmlPart: htmlContent,\n        customId: `campaign_${campaignName}_${client!.id}`,\n        eventPayload: JSON.stringify({\n          type: \"marketing_campaign\",\n          campaignName,\n          clientId: client!.id,\n        }),\n      }))\n\n      return await mailjetService.sendBulkEmail(emails)\n    } catch (error) {\n      // Silent error handling: Failed to send marketing campaign\n      throw error\n    }\n  }\n\n  // Get email statistics\n  async getEmailStats(customId?: string): Promise<any> {\n    try {\n      const stats = await mailjetService.getEmailStats()\n      // Filter by customId if provided\n      if (customId) {\n        return stats.filter(stat => stat.eventPayload && JSON.parse(stat.eventPayload).customId === customId)\n      }\n      return stats\n    } catch (error) {\n      // Silent error handling: Failed to get email stats\n      throw error\n    }\n  }\n\n  // Get client email history\n  async getClientEmailHistory(clientId: string): Promise<any[]> {\n    try {\n      const stats = await mailjetService.getEmailStats()\n      return stats.filter((stat) => stat.eventPayload && JSON.parse(stat.eventPayload).clientId === clientId)\n    } catch (error) {\n      // Silent error handling: Failed to get client email history\n      return []\n    }\n  }\n\n  // Initialize CRM email templates\n  async initializeTemplates(): Promise<void> {\n    try {\n      await mailjetService.initializeCRMTemplates()\n    } catch (error) {\n      // Silent error handling: Failed to initialize templates\n    }\n  }\n\n  // Helper method to get template ID by name\n  private async getTemplateId(templateName: string): Promise<number | undefined> {\n    try {\n      const templates = await mailjetService.getTemplates()\n      const template = templates.find((t) => t.name === templateName)\n      return template?.id\n    } catch (error) {\n      // Silent error handling: Failed to get template ID\n      return undefined\n    }\n  }\n\n  // Email automation workflows\n  async setupEmailAutomation(): Promise<void> {\n    // Silent logging: Email automation workflows would be set up here\n  }\n}\n\nexport const crmEmailService = new CRMEmailService()\nexport default crmEmailService\n"],
      names: ["crmEmailService", "CRMEmailService", "sendWelcomeEmail", "clientId", "customVariables", "client", "databaseService", "getClientById", "Error", "variables", "client_name", "name", "company_name", "defaultSender", "account_manager", "mailjetService", "sendEmail", "from", "to", "email", "subject", "templateId", "getTemplateId", "customId", "eventPayload", "JSON", "stringify", "type", "error", "sendProjectUpdate", "projectId", "updateMessage", "project_name", "project_status", "progress_percentage", "update_message", "next_milestone", "sendInvoiceEmail", "invoiceNumber", "amount", "dueDate", "paymentLink", "invoice_number", "invoice_amount", "due_date", "payment_link", "sendMeetingReminder", "meetingTitle", "meetingDate", "meetingTime", "meetingLocation", "agenda", "meeting_title", "meeting_date", "meeting_time", "meeting_location", "meeting_agenda", "Date", "now", "sendCustomEmail", "recipients", "htmlContent", "textContent", "attachments", "options", "htmlPart", "textPart", "undefined", "sendMarketingCampaign", "clientIds", "campaignName", "clients", "Promise", "all", "map", "id", "validClients", "filter", "emails", "sendBulkEmail", "getEmailStats", "stats", "stat", "parse", "getClientEmailHistory", "initializeTemplates", "initializeCRMTemplates", "templateName", "templates", "getTemplates", "template", "find", "t", "setupEmailAutomation", "process", "env", "NEXT_PUBLIC_SENDER_EMAIL", "NEXT_PUBLIC_SENDER_NAME"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b9b4675dd2b305b7c616ae0a2d06542d0f23c2a1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_244aboelxv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_244aboelxv();
cov_244aboelxv().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_244aboelxv().f[0]++;
  cov_244aboelxv().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_244aboelxv().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_244aboelxv().s[3]++;
_export(exports, {
  get crmEmailService() {
    /* istanbul ignore next */
    cov_244aboelxv().f[1]++;
    cov_244aboelxv().s[4]++;
    return crmEmailService;
  },
  get default() {
    /* istanbul ignore next */
    cov_244aboelxv().f[2]++;
    cov_244aboelxv().s[5]++;
    return _default;
  }
});
const _mailjet =
/* istanbul ignore next */
(cov_244aboelxv().s[6]++, require("./mailjet"));
const _database =
/* istanbul ignore next */
(cov_244aboelxv().s[7]++, require("./database"));
class CRMEmailService {
  // Send welcome email to new client
  async sendWelcomeEmail(clientId, customVariables) {
    /* istanbul ignore next */
    cov_244aboelxv().f[3]++;
    cov_244aboelxv().s[8]++;
    try {
      const client =
      /* istanbul ignore next */
      (cov_244aboelxv().s[9]++, await _database.databaseService.getClientById(clientId));
      /* istanbul ignore next */
      cov_244aboelxv().s[10]++;
      if (!client) {
        /* istanbul ignore next */
        cov_244aboelxv().b[0][0]++;
        cov_244aboelxv().s[11]++;
        throw new Error("Client not found");
      } else
      /* istanbul ignore next */
      {
        cov_244aboelxv().b[0][1]++;
      }
      const variables =
      /* istanbul ignore next */
      (cov_244aboelxv().s[12]++, {
        client_name: client.name,
        company_name: this.defaultSender.name,
        account_manager: "Your Account Manager",
        ...customVariables
      });
      /* istanbul ignore next */
      cov_244aboelxv().s[13]++;
      return await _mailjet.mailjetService.sendEmail({
        from: this.defaultSender,
        to: [{
          email: client.email,
          name: client.name,
          variables
        }],
        subject: `Welcome to ${this.defaultSender.name}!`,
        templateId: await this.getTemplateId("Welcome Client"),
        variables,
        customId: `welcome_${clientId}`,
        eventPayload: JSON.stringify({
          type: "welcome",
          clientId
        })
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_244aboelxv().s[14]++;
      // Silent error handling: Failed to send welcome email
      throw error;
    }
  }
  // Send project update email
  async sendProjectUpdate(clientId, projectId, updateMessage, customVariables) {
    /* istanbul ignore next */
    cov_244aboelxv().f[4]++;
    cov_244aboelxv().s[15]++;
    try {
      const client =
      /* istanbul ignore next */
      (cov_244aboelxv().s[16]++, await _database.databaseService.getClientById(clientId));
      /* istanbul ignore next */
      cov_244aboelxv().s[17]++;
      if (!client) {
        /* istanbul ignore next */
        cov_244aboelxv().b[1][0]++;
        cov_244aboelxv().s[18]++;
        throw new Error("Client not found");
      } else
      /* istanbul ignore next */
      {
        cov_244aboelxv().b[1][1]++;
      }
      const variables =
      /* istanbul ignore next */
      (cov_244aboelxv().s[19]++, {
        client_name: client.name,
        project_name: `Project #${projectId}`,
        project_status: "In Progress",
        progress_percentage: "75",
        update_message: updateMessage,
        next_milestone: "Design Review",
        account_manager: "Your Account Manager",
        ...customVariables
      });
      /* istanbul ignore next */
      cov_244aboelxv().s[20]++;
      return await _mailjet.mailjetService.sendEmail({
        from: this.defaultSender,
        to: [{
          email: client.email,
          name: client.name,
          variables
        }],
        subject: `Project Update: ${variables.project_name}`,
        templateId: await this.getTemplateId("Project Update"),
        variables,
        customId: `project_update_${projectId}`,
        eventPayload: JSON.stringify({
          type: "project_update",
          clientId,
          projectId
        })
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_244aboelxv().s[21]++;
      // Silent error handling: Failed to send project update
      throw error;
    }
  }
  // Send invoice email
  async sendInvoiceEmail(clientId, invoiceNumber, amount, dueDate, paymentLink) {
    /* istanbul ignore next */
    cov_244aboelxv().f[5]++;
    cov_244aboelxv().s[22]++;
    try {
      const client =
      /* istanbul ignore next */
      (cov_244aboelxv().s[23]++, await _database.databaseService.getClientById(clientId));
      /* istanbul ignore next */
      cov_244aboelxv().s[24]++;
      if (!client) {
        /* istanbul ignore next */
        cov_244aboelxv().b[2][0]++;
        cov_244aboelxv().s[25]++;
        throw new Error("Client not found");
      } else
      /* istanbul ignore next */
      {
        cov_244aboelxv().b[2][1]++;
      }
      const variables =
      /* istanbul ignore next */
      (cov_244aboelxv().s[26]++, {
        client_name: client.name,
        company_name: this.defaultSender.name,
        invoice_number: invoiceNumber,
        invoice_amount: amount,
        due_date: dueDate,
        payment_link:
        /* istanbul ignore next */
        (cov_244aboelxv().b[3][0]++, paymentLink) ||
        /* istanbul ignore next */
        (cov_244aboelxv().b[3][1]++, "#")
      });
      /* istanbul ignore next */
      cov_244aboelxv().s[27]++;
      return await _mailjet.mailjetService.sendEmail({
        from: this.defaultSender,
        to: [{
          email: client.email,
          name: client.name,
          variables
        }],
        subject: `Invoice ${invoiceNumber} from ${this.defaultSender.name}`,
        templateId: await this.getTemplateId("Invoice Notification"),
        variables,
        customId: `invoice_${invoiceNumber}`,
        eventPayload: JSON.stringify({
          type: "invoice",
          clientId,
          invoiceNumber
        })
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_244aboelxv().s[28]++;
      // Silent error handling: Failed to send invoice email
      throw error;
    }
  }
  // Send meeting reminder
  async sendMeetingReminder(clientId, meetingTitle, meetingDate, meetingTime, meetingLocation, agenda) {
    /* istanbul ignore next */
    cov_244aboelxv().f[6]++;
    cov_244aboelxv().s[29]++;
    try {
      const client =
      /* istanbul ignore next */
      (cov_244aboelxv().s[30]++, await _database.databaseService.getClientById(clientId));
      /* istanbul ignore next */
      cov_244aboelxv().s[31]++;
      if (!client) {
        /* istanbul ignore next */
        cov_244aboelxv().b[4][0]++;
        cov_244aboelxv().s[32]++;
        throw new Error("Client not found");
      } else
      /* istanbul ignore next */
      {
        cov_244aboelxv().b[4][1]++;
      }
      const variables =
      /* istanbul ignore next */
      (cov_244aboelxv().s[33]++, {
        client_name: client.name,
        meeting_title: meetingTitle,
        meeting_date: meetingDate,
        meeting_time: meetingTime,
        meeting_location: meetingLocation,
        meeting_agenda:
        /* istanbul ignore next */
        (cov_244aboelxv().b[5][0]++, agenda) ||
        /* istanbul ignore next */
        (cov_244aboelxv().b[5][1]++, "We will discuss your project progress and next steps."),
        account_manager: "Your Account Manager"
      });
      /* istanbul ignore next */
      cov_244aboelxv().s[34]++;
      return await _mailjet.mailjetService.sendEmail({
        from: this.defaultSender,
        to: [{
          email: client.email,
          name: client.name,
          variables
        }],
        subject: `Meeting Reminder: ${meetingTitle}`,
        templateId: await this.getTemplateId("Meeting Reminder"),
        variables,
        customId: `meeting_${clientId}_${Date.now()}`,
        eventPayload: JSON.stringify({
          type: "meeting_reminder",
          clientId
        })
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_244aboelxv().s[35]++;
      // Silent error handling: Failed to send meeting reminder
      throw error;
    }
  }
  // Send custom email
  async sendCustomEmail(recipients, subject, htmlContent, textContent, attachments, options) {
    /* istanbul ignore next */
    cov_244aboelxv().f[7]++;
    cov_244aboelxv().s[36]++;
    try {
      /* istanbul ignore next */
      cov_244aboelxv().s[37]++;
      return await _mailjet.mailjetService.sendEmail({
        from: this.defaultSender,
        to: recipients,
        subject,
        htmlPart: htmlContent,
        textPart: textContent,
        attachments,
        customId: options?.clientId ?
        /* istanbul ignore next */
        (cov_244aboelxv().b[6][0]++, `custom_${options.clientId}_${Date.now()}`) :
        /* istanbul ignore next */
        (cov_244aboelxv().b[6][1]++, undefined),
        eventPayload: options ?
        /* istanbul ignore next */
        (cov_244aboelxv().b[7][0]++, JSON.stringify(options)) :
        /* istanbul ignore next */
        (cov_244aboelxv().b[7][1]++, undefined)
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_244aboelxv().s[38]++;
      // Silent error handling: Failed to send custom email
      throw error;
    }
  }
  // Send bulk marketing email
  async sendMarketingCampaign(clientIds, subject, htmlContent, campaignName) {
    /* istanbul ignore next */
    cov_244aboelxv().f[8]++;
    cov_244aboelxv().s[39]++;
    try {
      const clients =
      /* istanbul ignore next */
      (cov_244aboelxv().s[40]++, await Promise.all(clientIds.map(id => {
        /* istanbul ignore next */
        cov_244aboelxv().f[9]++;
        cov_244aboelxv().s[41]++;
        return _database.databaseService.getClientById(id);
      })));
      const validClients =
      /* istanbul ignore next */
      (cov_244aboelxv().s[42]++, clients.filter(client => {
        /* istanbul ignore next */
        cov_244aboelxv().f[10]++;
        cov_244aboelxv().s[43]++;
        return /* istanbul ignore next */(cov_244aboelxv().b[8][0]++, client) &&
        /* istanbul ignore next */
        (cov_244aboelxv().b[8][1]++, client.email);
      }));
      const emails =
      /* istanbul ignore next */
      (cov_244aboelxv().s[44]++, validClients.map(client => {
        /* istanbul ignore next */
        cov_244aboelxv().f[11]++;
        cov_244aboelxv().s[45]++;
        return {
          from: this.defaultSender,
          to: [{
            email: client.email,
            name: client.name
          }],
          subject,
          htmlPart: htmlContent,
          customId: `campaign_${campaignName}_${client.id}`,
          eventPayload: JSON.stringify({
            type: "marketing_campaign",
            campaignName,
            clientId: client.id
          })
        };
      }));
      /* istanbul ignore next */
      cov_244aboelxv().s[46]++;
      return await _mailjet.mailjetService.sendBulkEmail(emails);
    } catch (error) {
      /* istanbul ignore next */
      cov_244aboelxv().s[47]++;
      // Silent error handling: Failed to send marketing campaign
      throw error;
    }
  }
  // Get email statistics
  async getEmailStats(customId) {
    /* istanbul ignore next */
    cov_244aboelxv().f[12]++;
    cov_244aboelxv().s[48]++;
    try {
      const stats =
      /* istanbul ignore next */
      (cov_244aboelxv().s[49]++, await _mailjet.mailjetService.getEmailStats());
      // Filter by customId if provided
      /* istanbul ignore next */
      cov_244aboelxv().s[50]++;
      if (customId) {
        /* istanbul ignore next */
        cov_244aboelxv().b[9][0]++;
        cov_244aboelxv().s[51]++;
        return stats.filter(stat => {
          /* istanbul ignore next */
          cov_244aboelxv().f[13]++;
          cov_244aboelxv().s[52]++;
          return /* istanbul ignore next */(cov_244aboelxv().b[10][0]++, stat.eventPayload) &&
          /* istanbul ignore next */
          (cov_244aboelxv().b[10][1]++, JSON.parse(stat.eventPayload).customId === customId);
        });
      } else
      /* istanbul ignore next */
      {
        cov_244aboelxv().b[9][1]++;
      }
      cov_244aboelxv().s[53]++;
      return stats;
    } catch (error) {
      /* istanbul ignore next */
      cov_244aboelxv().s[54]++;
      // Silent error handling: Failed to get email stats
      throw error;
    }
  }
  // Get client email history
  async getClientEmailHistory(clientId) {
    /* istanbul ignore next */
    cov_244aboelxv().f[14]++;
    cov_244aboelxv().s[55]++;
    try {
      const stats =
      /* istanbul ignore next */
      (cov_244aboelxv().s[56]++, await _mailjet.mailjetService.getEmailStats());
      /* istanbul ignore next */
      cov_244aboelxv().s[57]++;
      return stats.filter(stat => {
        /* istanbul ignore next */
        cov_244aboelxv().f[15]++;
        cov_244aboelxv().s[58]++;
        return /* istanbul ignore next */(cov_244aboelxv().b[11][0]++, stat.eventPayload) &&
        /* istanbul ignore next */
        (cov_244aboelxv().b[11][1]++, JSON.parse(stat.eventPayload).clientId === clientId);
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_244aboelxv().s[59]++;
      // Silent error handling: Failed to get client email history
      return [];
    }
  }
  // Initialize CRM email templates
  async initializeTemplates() {
    /* istanbul ignore next */
    cov_244aboelxv().f[16]++;
    cov_244aboelxv().s[60]++;
    try {
      /* istanbul ignore next */
      cov_244aboelxv().s[61]++;
      await _mailjet.mailjetService.initializeCRMTemplates();
    } catch (error) {
      // Silent error handling: Failed to initialize templates
    }
  }
  // Helper method to get template ID by name
  async getTemplateId(templateName) {
    /* istanbul ignore next */
    cov_244aboelxv().f[17]++;
    cov_244aboelxv().s[62]++;
    try {
      const templates =
      /* istanbul ignore next */
      (cov_244aboelxv().s[63]++, await _mailjet.mailjetService.getTemplates());
      const template =
      /* istanbul ignore next */
      (cov_244aboelxv().s[64]++, templates.find(t => {
        /* istanbul ignore next */
        cov_244aboelxv().f[18]++;
        cov_244aboelxv().s[65]++;
        return t.name === templateName;
      }));
      /* istanbul ignore next */
      cov_244aboelxv().s[66]++;
      return template?.id;
    } catch (error) {
      /* istanbul ignore next */
      cov_244aboelxv().s[67]++;
      // Silent error handling: Failed to get template ID
      return undefined;
    }
  }
  // Email automation workflows
  async setupEmailAutomation() {
    /* istanbul ignore next */
    cov_244aboelxv().f[19]++;
  } // Silent logging: Email automation workflows would be set up here
  constructor() {
    /* istanbul ignore next */
    cov_244aboelxv().f[20]++;
    cov_244aboelxv().s[68]++;
    this.defaultSender = {
      email:
      /* istanbul ignore next */
      (cov_244aboelxv().b[12][0]++, process.env.NEXT_PUBLIC_SENDER_EMAIL) ||
      /* istanbul ignore next */
      (cov_244aboelxv().b[12][1]++, "noreply@yourcrm.com"),
      name:
      /* istanbul ignore next */
      (cov_244aboelxv().b[13][0]++, process.env.NEXT_PUBLIC_SENDER_NAME) ||
      /* istanbul ignore next */
      (cov_244aboelxv().b[13][1]++, "CRM System")
    };
  }
}
const crmEmailService =
/* istanbul ignore next */
(cov_244aboelxv().s[69]++, new CRMEmailService());
const _default =
/* istanbul ignore next */
(cov_244aboelxv().s[70]++, crmEmailService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,