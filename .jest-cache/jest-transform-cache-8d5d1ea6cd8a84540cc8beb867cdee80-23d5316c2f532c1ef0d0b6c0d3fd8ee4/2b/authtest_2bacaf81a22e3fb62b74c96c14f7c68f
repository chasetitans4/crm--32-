6667233e8c9e41a2850a2acb65ec4a87
"use strict";
// Mock secureStorage
jest.mock('../../utils/secureStorage', ()=>{
    const secureStorage = {
        setJSON: jest.fn(),
        getJSON: jest.fn(),
        removeItem: jest.fn()
    };
    const setItemSecure = jest.fn();
    return {
        secureStorage,
        // Named exports used by auth.ts map to the same mocks for compatibility
        setSecureJSON: secureStorage.setJSON,
        getSecureJSON: secureStorage.getJSON,
        removeSecureItem: secureStorage.removeItem,
        setSecureItemAdvanced: setItemSecure,
        setSecureItem: jest.fn(),
        getSecureItem: jest.fn()
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _auth = require("../auth");
const _secureStorage = require("../../utils/secureStorage");
const mockSecureStorage = _secureStorage.secureStorage;
describe('AuthService', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Reset auth service state
        _auth.authService.signOut();
    });
    describe('signUp', ()=>{
        it('should create a new user account', async ()=>{
            const email = 'test@example.com';
            const password = 'password123';
            const userData = {
                name: 'Test User'
            };
            const user = await _auth.authService.signUp(email, password, userData);
            expect(user).toMatchObject({
                email,
                name: 'Test User',
                role: 'user'
            });
            expect(user.id).toBeDefined();
            expect(user.createdAt).toBeDefined();
            expect(mockSecureStorage.setJSON).toHaveBeenCalledWith('auth_user', user);
        });
        it('should use email prefix as name when name not provided', async ()=>{
            const email = 'john.doe@example.com';
            const password = 'password123';
            const user = await _auth.authService.signUp(email, password);
            expect(user.name).toBe('john.doe');
        });
        it('should handle signup errors', async ()=>{
            mockSecureStorage.setJSON.mockImplementation(()=>{
                throw new Error('Storage error');
            });
            await expect(_auth.authService.signUp('test@example.com', 'password123')).rejects.toThrow('Storage error');
        });
    });
    describe('signIn', ()=>{
        it('should authenticate user with valid credentials', async ()=>{
            const email = 'test@example.com';
            const password = 'password123';
            const user = await _auth.authService.signIn(email, password);
            expect(user).toMatchObject({
                email,
                name: 'test',
                role: 'user'
            });
            expect(user.lastLogin).toBeDefined();
            expect(_auth.authService.isAuthenticated()).toBe(true);
        });
        it('should handle signin errors', async ()=>{
            // Mock localStorage to throw error
            const originalSetItem = Storage.prototype.setItem;
            Storage.prototype.setItem = jest.fn(()=>{
                throw new Error('Storage error');
            });
            await expect(_auth.authService.signIn('test@example.com', 'password123')).rejects.toThrow('Storage error');
            Storage.prototype.setItem = originalSetItem;
        });
    });
    describe('signOut', ()=>{
        it('should clear user session', async ()=>{
            // First sign in
            await _auth.authService.signIn('test@example.com', 'password123');
            expect(_auth.authService.isAuthenticated()).toBe(true);
            // Then sign out
            await _auth.authService.signOut();
            expect(_auth.authService.isAuthenticated()).toBe(false);
            expect(_auth.authService.getCurrentUser()).toBeNull();
            expect(mockSecureStorage.removeItem).toHaveBeenCalledWith('auth_user');
        });
    });
    describe('updateProfile', ()=>{
        it('should update user profile when authenticated', async ()=>{
            // First sign in
            await _auth.authService.signIn('test@example.com', 'password123');
            const updates = {
                name: 'Updated Name',
                role: 'admin'
            };
            const updatedUser = await _auth.authService.updateProfile(updates);
            expect(updatedUser.name).toBe('Updated Name');
            expect(updatedUser.role).toBe('admin');
            expect(mockSecureStorage.setJSON).toHaveBeenCalledWith('auth_user', updatedUser);
        });
        it('should throw error when not authenticated', async ()=>{
            const updates = {
                name: 'Updated Name'
            };
            await expect(_auth.authService.updateProfile(updates)).rejects.toThrow('No authenticated user');
        });
    });
    describe('hasRole', ()=>{
        it('should validate admin role hierarchy', async ()=>{
            const adminUser = {
                id: '1',
                email: 'admin@example.com',
                name: 'Admin User',
                role: 'admin',
                createdAt: new Date().toISOString()
            };
            // Mock the user
            mockSecureStorage.getJSON.mockReturnValue(adminUser);
            _auth.authService.init();
            expect(_auth.authService.hasRole('admin')).toBe(true);
            expect(_auth.authService.hasRole('agent')).toBe(true);
            expect(_auth.authService.hasRole('user')).toBe(true);
        });
        it('should validate agent role hierarchy', async ()=>{
            await _auth.authService.signIn('agent@example.com', 'password123');
            await _auth.authService.updateProfile({
                role: 'agent'
            });
            expect(_auth.authService.hasRole('admin')).toBe(false);
            expect(_auth.authService.hasRole('agent')).toBe(true);
            expect(_auth.authService.hasRole('user')).toBe(true);
        });
        it('should validate user role hierarchy', async ()=>{
            await _auth.authService.signIn('user@example.com', 'password123');
            expect(_auth.authService.hasRole('admin')).toBe(false);
            expect(_auth.authService.hasRole('agent')).toBe(false);
            expect(_auth.authService.hasRole('user')).toBe(true);
        });
        it('should return false when not authenticated', ()=>{
            expect(_auth.authService.hasRole('user')).toBe(false);
        });
    });
    describe('getAccessToken', ()=>{
        it('should return token when authenticated', async ()=>{
            await _auth.authService.signIn('test@example.com', 'password123');
            const token = _auth.authService.getAccessToken();
            expect(token).toBe('mock_access_token');
        });
        it('should return null when not authenticated', ()=>{
            const token = _auth.authService.getAccessToken();
            expect(token).toBeNull();
        });
    });
    describe('state management', ()=>{
        it('should notify subscribers of state changes', async ()=>{
            const mockCallback = jest.fn();
            const unsubscribe = _auth.authService.subscribe(mockCallback);
            await _auth.authService.signIn('test@example.com', 'password123');
            expect(mockCallback).toHaveBeenCalled();
            const lastCall = mockCallback.mock.calls[mockCallback.mock.calls.length - 1][0];
            expect(lastCall.user).toBeDefined();
            expect(lastCall.loading).toBe(false);
            expect(lastCall.error).toBeNull();
            unsubscribe();
        });
        it('should handle subscription cleanup', ()=>{
            const mockCallback = jest.fn();
            const unsubscribe = _auth.authService.subscribe(mockCallback);
            unsubscribe();
            // State change should not trigger callback after unsubscribe
            _auth.authService.signIn('test@example.com', 'password123');
            expect(mockCallback).not.toHaveBeenCalled();
        });
    });
    describe('initialization', ()=>{
        it('should load user from storage on init', ()=>{
            const storedUser = {
                id: '1',
                email: 'stored@example.com',
                name: 'Stored User',
                role: 'user',
                createdAt: new Date().toISOString()
            };
            mockSecureStorage.getJSON.mockReturnValue(storedUser);
            _auth.authService.init();
            expect(_auth.authService.getCurrentUser()).toEqual(storedUser);
            expect(_auth.authService.isAuthenticated()).toBe(true);
        });
        it('should handle invalid stored data gracefully', ()=>{
            mockSecureStorage.getJSON.mockReturnValue('invalid-data');
            _auth.authService.init();
            expect(_auth.authService.getCurrentUser()).toBeNull();
            expect(_auth.authService.isAuthenticated()).toBe(false);
        });
        it('should handle storage errors gracefully', ()=>{
            mockSecureStorage.getJSON.mockImplementation(()=>{
                throw new Error('Storage error');
            });
            expect(()=>_auth.authService.init()).not.toThrow();
            expect(_auth.authService.getCurrentUser()).toBeNull();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,