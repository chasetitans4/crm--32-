{"version":3,"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\tests\\utils\\testUtils.tsx"],"sourcesContent":["import React from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ThemeProvider } from 'next-themes';\nimport { AuthProvider } from '../../src/context/AuthContext';\n// import { NotificationProvider } from '@/contexts/NotificationContext';\n// import { ErrorBoundary } from '@/components/ErrorBoundary';\n\n// Custom render function with providers\ninterface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {\n  initialEntries?: string[];\n  queryClient?: QueryClient;\n  user?: any;\n  theme?: 'light' | 'dark' | 'system';\n}\n\nfunction createTestQueryClient() {\n  return new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: false,\n        cacheTime: 0,\n        staleTime: 0,\n      },\n      mutations: {\n        retry: false,\n      },\n    },\n    logger: {\n      log: () => {},\n      warn: () => {},\n      error: () => {},\n    },\n  });\n}\n\nfunction AllTheProviders({\n  children,\n  queryClient = createTestQueryClient(),\n  user = null,\n  theme = 'light',\n}: {\n  children: React.ReactNode;\n  queryClient?: QueryClient;\n  user?: any;\n  theme?: string;\n}) {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider attribute=\"class\" defaultTheme={theme}>\n        <AuthProvider>\n          {children}\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nfunction customRender(\n  ui: React.ReactElement,\n  options: CustomRenderOptions = {}\n) {\n  const {\n    queryClient,\n    user,\n    theme,\n    ...renderOptions\n  } = options;\n\n  const Wrapper = ({ children }: { children: React.ReactNode }) => (\n    <AllTheProviders\n      queryClient={queryClient}\n      user={user}\n      theme={theme}\n    >\n      {children}\n    </AllTheProviders>\n  );\n\n  return {\n    ...render(ui, { wrapper: Wrapper, ...renderOptions }),\n    queryClient: queryClient || createTestQueryClient(),\n  };\n}\n\n// Mock data factories\nexport const mockUser = {\n  id: '1',\n  email: 'test@example.com',\n  name: 'Test User',\n  role: 'user' as const,\n  createdAt: '2023-01-01T00:00:00Z',\n};\n\nexport const mockAdmin = {\n  id: '2',\n  email: 'admin@example.com',\n  name: 'Admin User',\n  role: 'admin' as const,\n  createdAt: '2023-01-01T00:00:00Z',\n};\n\nexport const mockContact = {\n  id: '1',\n  firstName: 'John',\n  lastName: 'Doe',\n  email: 'john@example.com',\n  phone: '+1234567890',\n  company: 'Test Company',\n  status: 'active' as const,\n  createdAt: '2023-01-01T00:00:00Z',\n};\n\nexport const mockDeal = {\n  id: '1',\n  title: 'Test Deal',\n  amount: 10000,\n  stage: 'proposal' as const,\n  probability: 75,\n  contactId: '1',\n  expectedCloseDate: '2023-12-31',\n  createdAt: '2023-01-01T00:00:00Z',\n};\n\n// Test helpers\nexport const testHelpers = {\n  // Wait for element to appear\n  waitForElement: async (getByTestId: any, testId: string, timeout = 1000) => {\n    return new Promise((resolve, reject) => {\n      const startTime = Date.now();\n      const check = () => {\n        try {\n          const element = getByTestId(testId);\n          if (element) {\n            resolve(element);\n          } else {\n            throw new Error('Element not found');\n          }\n        } catch (error) {\n          if (Date.now() - startTime > timeout) {\n            reject(new Error(`Element with testId \"${testId}\" not found within ${timeout}ms`));\n          } else {\n            setTimeout(check, 10);\n          }\n        }\n      };\n      check();\n    });\n  },\n\n  // Simulate user typing\n  typeIntoInput: async (input: HTMLElement, text: string, delay = 50) => {\n    const { fireEvent } = await import('@testing-library/react');\n    \n    for (let i = 0; i < text.length; i++) {\n      fireEvent.change(input, {\n        target: { value: text.slice(0, i + 1) },\n      });\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  },\n\n  // Mock API response\n  mockApiResponse: (url: string, response: any, status = 200) => {\n    const mockFetch = global.fetch as jest.MockedFunction<typeof fetch>;\n    mockFetch.mockResolvedValueOnce({\n      ok: status >= 200 && status < 300,\n      status,\n      json: async () => response,\n      text: async () => JSON.stringify(response),\n      headers: new Headers(),\n      redirected: false,\n      statusText: 'OK',\n      type: 'basic',\n      url,\n      clone: function() { return this; },\n      body: null,\n      bodyUsed: false,\n    } as Response);\n  },\n\n  // Mock API error\n  mockApiError: (url: string, error: string, status = 500) => {\n    const mockFetch = global.fetch as jest.MockedFunction<typeof fetch>;\n    mockFetch.mockRejectedValueOnce(new Error(error));\n  },\n\n  // Create mock file\n  createMockFile: (name: string, size: number, type: string) => {\n    const file = new File([''], name, { type });\n    Object.defineProperty(file, 'size', {\n      value: size,\n      writable: false,\n    });\n    return file;\n  },\n\n  // Mock intersection observer\n  mockIntersectionObserver: (isIntersecting = true) => {\n    const mockIntersectionObserver = jest.fn();\n    mockIntersectionObserver.mockReturnValue({\n      observe: jest.fn(),\n      unobserve: jest.fn(),\n      disconnect: jest.fn(),\n    });\n\n    window.IntersectionObserver = mockIntersectionObserver;\n    \n    // Trigger intersection\n    const [callback] = mockIntersectionObserver.mock.calls[0];\n    if (callback) {\n      callback([{ isIntersecting }]);\n    }\n\n    return mockIntersectionObserver;\n  },\n\n  // Mock resize observer\n  mockResizeObserver: () => {\n    const mockResizeObserver = jest.fn();\n    mockResizeObserver.mockReturnValue({\n      observe: jest.fn(),\n      unobserve: jest.fn(),\n      disconnect: jest.fn(),\n    });\n\n    window.ResizeObserver = mockResizeObserver;\n    return mockResizeObserver;\n  },\n\n  // Mock geolocation\n  mockGeolocation: (coords = { latitude: 40.7128, longitude: -74.0060 }) => {\n    const mockGeolocation = {\n      getCurrentPosition: jest.fn((success) => {\n        success({\n          coords,\n          timestamp: Date.now(),\n        });\n      }),\n      watchPosition: jest.fn(),\n      clearWatch: jest.fn(),\n    };\n\n    Object.defineProperty(navigator, 'geolocation', {\n      value: mockGeolocation,\n      writable: true,\n    });\n\n    return mockGeolocation;\n  },\n\n  // Mock local storage\n  mockLocalStorage: () => {\n    const store: Record<string, string> = {};\n    \n    const mockStorage = {\n      getItem: jest.fn((key: string) => store[key] || null),\n      setItem: jest.fn((key: string, value: string) => {\n        store[key] = value;\n      }),\n      removeItem: jest.fn((key: string) => {\n        delete store[key];\n      }),\n      clear: jest.fn(() => {\n        Object.keys(store).forEach(key => delete store[key]);\n      }),\n      length: 0,\n      key: jest.fn(),\n    };\n\n    Object.defineProperty(window, 'localStorage', {\n      value: mockStorage,\n    });\n\n    return mockStorage;\n  },\n\n  // Create test query client\n  createTestQueryClient,\n\n  // Flush promises\n  flushPromises: () => new Promise(resolve => setTimeout(resolve, 0)),\n\n  // Mock timer helpers\n  advanceTimers: (ms: number) => {\n    jest.advanceTimersByTime(ms);\n  },\n\n  // Mock console methods\n  mockConsole: () => {\n    const originalConsole = { ...console };\n    const mockConsole = {\n      log: jest.fn(),\n      warn: jest.fn(),\n      error: jest.fn(),\n      info: jest.fn(),\n      debug: jest.fn(),\n    };\n\n    Object.assign(console, mockConsole);\n\n    return {\n      mockConsole,\n      restore: () => Object.assign(console, originalConsole),\n    };\n  },\n};\n\n// Performance testing helpers\nexport const performanceHelpers = {\n  // Measure render time\n  measureRenderTime: async (renderFn: () => void) => {\n    const start = performance.now();\n    renderFn();\n    await testHelpers.flushPromises();\n    const end = performance.now();\n    return end - start;\n  },\n\n  // Check for memory leaks\n  checkMemoryLeaks: () => {\n    const initialMemory = (performance as any).memory?.usedJSHeapSize || 0;\n    \n    return {\n      getMemoryDiff: () => {\n        const currentMemory = (performance as any).memory?.usedJSHeapSize || 0;\n        return currentMemory - initialMemory;\n      },\n    };\n  },\n\n  // Mock performance observer\n  mockPerformanceObserver: () => {\n    const mockObserver = jest.fn();\n    mockObserver.mockReturnValue({\n      observe: jest.fn(),\n      disconnect: jest.fn(),\n    });\n\n    (global as any).PerformanceObserver = mockObserver;\n    return mockObserver;\n  },\n};\n\n// Accessibility testing helpers\nexport const a11yHelpers = {\n  // Check for ARIA attributes\n  checkAriaAttributes: (element: HTMLElement) => {\n    const ariaAttributes = Array.from(element.attributes)\n      .filter(attr => attr.name.startsWith('aria-'))\n      .reduce((acc, attr) => {\n        acc[attr.name] = attr.value;\n        return acc;\n      }, {} as Record<string, string>);\n\n    return ariaAttributes;\n  },\n\n  // Check for keyboard navigation\n  checkKeyboardNavigation: async (element: HTMLElement) => {\n    const { fireEvent } = await import('@testing-library/react');\n    \n    const results = {\n      canFocus: false,\n      canTab: false,\n      canEnter: false,\n      canEscape: false,\n    };\n\n    // Test focus\n    element.focus();\n    results.canFocus = document.activeElement === element;\n\n    // Test tab navigation\n    fireEvent.keyDown(element, { key: 'Tab' });\n    results.canTab = true; // Simplified check\n\n    // Test enter key\n    fireEvent.keyDown(element, { key: 'Enter' });\n    results.canEnter = true; // Simplified check\n\n    // Test escape key\n    fireEvent.keyDown(element, { key: 'Escape' });\n    results.canEscape = true; // Simplified check\n\n    return results;\n  },\n\n  // Check color contrast (simplified)\n  checkColorContrast: (element: HTMLElement) => {\n    const styles = window.getComputedStyle(element);\n    return {\n      color: styles.color,\n      backgroundColor: styles.backgroundColor,\n      // Note: Actual contrast calculation would require more complex logic\n      hasGoodContrast: true, // Simplified\n    };\n  },\n};\n\n// Re-export everything from React Testing Library\nexport * from '@testing-library/react';\nexport { customRender as render };\nexport { createTestQueryClient };"],"names":["a11yHelpers","createTestQueryClient","mockAdmin","mockContact","mockDeal","mockUser","performanceHelpers","render","customRender","testHelpers","QueryClient","defaultOptions","queries","retry","cacheTime","staleTime","mutations","logger","log","warn","error","AllTheProviders","children","queryClient","user","theme","QueryClientProvider","client","ThemeProvider","attribute","defaultTheme","AuthProvider","ui","options","renderOptions","Wrapper","wrapper","id","email","name","role","createdAt","firstName","lastName","phone","company","status","title","amount","stage","probability","contactId","expectedCloseDate","waitForElement","getByTestId","testId","timeout","Promise","resolve","reject","startTime","Date","now","check","element","Error","setTimeout","typeIntoInput","input","text","delay","fireEvent","i","length","change","target","value","slice","mockApiResponse","url","response","mockFetch","global","fetch","mockResolvedValueOnce","ok","json","JSON","stringify","headers","Headers","redirected","statusText","type","clone","body","bodyUsed","mockApiError","mockRejectedValueOnce","createMockFile","size","file","File","Object","defineProperty","writable","mockIntersectionObserver","isIntersecting","jest","fn","mockReturnValue","observe","unobserve","disconnect","window","IntersectionObserver","callback","mock","calls","mockResizeObserver","ResizeObserver","mockGeolocation","coords","latitude","longitude","getCurrentPosition","success","timestamp","watchPosition","clearWatch","navigator","mockLocalStorage","store","mockStorage","getItem","key","setItem","removeItem","clear","keys","forEach","flushPromises","advanceTimers","ms","advanceTimersByTime","mockConsole","originalConsole","console","info","debug","assign","restore","measureRenderTime","renderFn","start","performance","end","checkMemoryLeaks","initialMemory","memory","usedJSHeapSize","getMemoryDiff","currentMemory","mockPerformanceObserver","mockObserver","PerformanceObserver","checkAriaAttributes","ariaAttributes","Array","from","attributes","filter","attr","startsWith","reduce","acc","checkKeyboardNavigation","results","canFocus","canTab","canEnter","canEscape","focus","document","activeElement","keyDown","checkColorContrast","styles","getComputedStyle","color","backgroundColor","hasGoodContrast"],"mappings":"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"}