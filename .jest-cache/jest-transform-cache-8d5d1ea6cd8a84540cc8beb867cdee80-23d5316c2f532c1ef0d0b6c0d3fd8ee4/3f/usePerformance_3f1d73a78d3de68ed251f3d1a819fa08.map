{"version":3,"names":["cov_1xpdjfyitg","actualCoverage","s","useApiPerformance","f","useMemoryMonitoring","usePerformanceMonitoring","useRenderPerformance","useRoutePerformance","useWebVitals","withPerformanceTracking","metrics","setMetrics","_react","useState","_performance","webVitalsTracker","getMetrics","score","setScore","getScore","useEffect","unsubscribe","onUpdate","newMetrics","refresh","componentName","renderCountRef","useRef","startTimeRef","renderTimes","setRenderTimes","current","endTime","performance","now","b","renderTime","prev","slice","mark","averageRenderTime","length","reduce","sum","time","renderCount","lastRenderTime","apiMetrics","setApiMetrics","calls","averageResponseTime","errorRate","measureApiCall","useCallback","endpoint","apiCall","startTime","startMark","Date","endMark","result","duration","measure","newCalls","timestamp","status","avgResponseTime","call","errorCount","filter","error","routeMetrics","setRouteMetrics","changes","averageChangeTime","measureRouteChange","from","to","newChanges","avgChangeTime","change","startRouteChange","routeName","memoryInfo","setMemoryInfo","updateMemoryInfo","memory","used","Math","round","usedJSHeapSize","total","totalJSHeapSize","limit","jsHeapSizeLimit","percentage","interval","setInterval","clearInterval","isMemorySupported","webVitals","isMonitoring","setIsMonitoring","performanceAlerts","setPerformanceAlerts","checkPerformance","alerts","lcp","push","type","message","metric","fid","cls","generateReport","toISOString","url","window","location","href","userAgent","navigator","clearAlerts","WrappedComponent","PerformanceTrackedComponent","props","renderPerf","console","warn","toFixed","React","createElement"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\usePerformance.ts"],"sourcesContent":["// React hooks for performance monitoring and Web Vitals tracking\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { webVitalsTracker, WebVitalsMetrics, CustomPerformanceMetrics } from '@/utils/performance';\n\ninterface PerformanceState {\n  webVitals: WebVitalsMetrics;\n  customMetrics: CustomPerformanceMetrics;\n  score: { overall: number; breakdown: Record<string, { score: number; rating: string }> };\n  isLoading: boolean;\n}\n\n// Hook for Web Vitals monitoring\nexport function useWebVitals() {\n  const [metrics, setMetrics] = useState<WebVitalsMetrics>(webVitalsTracker.getMetrics());\n  const [score, setScore] = useState(webVitalsTracker.getScore());\n\n  useEffect(() => {\n    const unsubscribe = webVitalsTracker.onUpdate((newMetrics) => {\n      setMetrics(newMetrics);\n      setScore(webVitalsTracker.getScore());\n    });\n\n    return unsubscribe;\n  }, []);\n\n  return {\n    metrics,\n    score,\n    refresh: () => {\n      setMetrics(webVitalsTracker.getMetrics());\n      setScore(webVitalsTracker.getScore());\n    }\n  };\n}\n\n// Hook for measuring component render performance\nexport function useRenderPerformance(componentName: string) {\n  const renderCountRef = useRef(0);\n  const startTimeRef = useRef<number>(0);\n  const [renderTimes, setRenderTimes] = useState<number[]>([]);\n\n  useEffect(() => {\n    renderCountRef.current++;\n    const endTime = performance.now();\n    \n    if (startTimeRef.current > 0) {\n      const renderTime = endTime - startTimeRef.current;\n      setRenderTimes(prev => [...prev.slice(-9), renderTime]); // Keep last 10 renders\n      \n      // Mark performance for debugging\n      performance.mark(`${componentName}-render-${renderCountRef.current}`);\n    }\n    \n    startTimeRef.current = endTime;\n  });\n\n  const averageRenderTime = renderTimes.length > 0 \n    ? renderTimes.reduce((sum, time) => sum + time, 0) / renderTimes.length \n    : 0;\n\n  return {\n    renderCount: renderCountRef.current,\n    renderTimes,\n    averageRenderTime,\n    lastRenderTime: renderTimes[renderTimes.length - 1] || 0\n  };\n}\n\n// Hook for measuring API call performance\nexport function useApiPerformance() {\n  const [apiMetrics, setApiMetrics] = useState<{\n    calls: Array<{ endpoint: string; duration: number; timestamp: number; status: 'success' | 'error' }>;\n    averageResponseTime: number;\n    errorRate: number;\n  }>({\n    calls: [],\n    averageResponseTime: 0,\n    errorRate: 0\n  });\n\n  const measureApiCall = useCallback(async <T>(\n    endpoint: string,\n    apiCall: () => Promise<T>\n  ): Promise<T> => {\n    const startTime = performance.now();\n    const startMark = `api-${endpoint}-start-${Date.now()}`;\n    const endMark = `api-${endpoint}-end-${Date.now()}`;\n    \n    performance.mark(startMark);\n    \n    try {\n      const result = await apiCall();\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      performance.mark(endMark);\n      performance.measure(`api-${endpoint}`, startMark, endMark);\n      \n      setApiMetrics(prev => {\n        const newCalls = [...prev.calls.slice(-19), { // Keep last 20 calls\n          endpoint,\n          duration,\n          timestamp: Date.now(),\n          status: 'success' as const\n        }];\n        \n        const avgResponseTime = newCalls.reduce((sum, call) => sum + call.duration, 0) / newCalls.length;\n        const errorCount = newCalls.filter(call => call.status === 'error').length;\n        const errorRate = (errorCount / newCalls.length) * 100;\n        \n        return {\n          calls: newCalls,\n          averageResponseTime: avgResponseTime,\n          errorRate\n        };\n      });\n      \n      return result;\n    } catch (error) {\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      performance.mark(endMark);\n      performance.measure(`api-${endpoint}-error`, startMark, endMark);\n      \n      setApiMetrics(prev => {\n        const newCalls = [...prev.calls.slice(-19), {\n          endpoint,\n          duration,\n          timestamp: Date.now(),\n          status: 'error' as const\n        }];\n        \n        const avgResponseTime = newCalls.reduce((sum, call) => sum + call.duration, 0) / newCalls.length;\n        const errorCount = newCalls.filter(call => call.status === 'error').length;\n        const errorRate = (errorCount / newCalls.length) * 100;\n        \n        return {\n          calls: newCalls,\n          averageResponseTime: avgResponseTime,\n          errorRate\n        };\n      });\n      \n      throw error;\n    }\n  }, []);\n\n  return {\n    ...apiMetrics,\n    measureApiCall\n  };\n}\n\n// Hook for measuring route change performance\nexport function useRoutePerformance() {\n  const [routeMetrics, setRouteMetrics] = useState<{\n    changes: Array<{ from: string; to: string; duration: number; timestamp: number }>;\n    averageChangeTime: number;\n  }>({\n    changes: [],\n    averageChangeTime: 0\n  });\n\n  const measureRouteChange = useCallback((from: string, to: string, startTime: number) => {\n    const endTime = performance.now();\n    const duration = endTime - startTime;\n    \n    performance.mark(`route-change-${to}`);\n    performance.measure(`route-change-${from}-to-${to}`, `route-change-${from}`, `route-change-${to}`);\n    \n    setRouteMetrics(prev => {\n      const newChanges = [...prev.changes.slice(-9), { // Keep last 10 route changes\n        from,\n        to,\n        duration,\n        timestamp: Date.now()\n      }];\n      \n      const avgChangeTime = newChanges.reduce((sum, change) => sum + change.duration, 0) / newChanges.length;\n      \n      return {\n        changes: newChanges,\n        averageChangeTime: avgChangeTime\n      };\n    });\n  }, []);\n\n  const startRouteChange = useCallback((routeName: string) => {\n    performance.mark(`route-change-${routeName}`);\n    return performance.now();\n  }, []);\n\n  return {\n    ...routeMetrics,\n    measureRouteChange,\n    startRouteChange\n  };\n}\n\n// Hook for memory usage monitoring\nexport function useMemoryMonitoring() {\n  const [memoryInfo, setMemoryInfo] = useState<{\n    used: number;\n    total: number;\n    limit: number;\n    percentage: number;\n  } | null>(null);\n\n  const updateMemoryInfo = useCallback(() => {\n    if ('memory' in performance) {\n      const memory = (performance as any).memory;\n      const used = Math.round(memory.usedJSHeapSize / 1024 / 1024);\n      const total = Math.round(memory.totalJSHeapSize / 1024 / 1024);\n      const limit = Math.round(memory.jsHeapSizeLimit / 1024 / 1024);\n      const percentage = Math.round((used / limit) * 100);\n      \n      setMemoryInfo({ used, total, limit, percentage });\n    }\n  }, []);\n\n  useEffect(() => {\n    updateMemoryInfo();\n    const interval = setInterval(updateMemoryInfo, 5000); // Update every 5 seconds\n    \n    return () => clearInterval(interval);\n  }, [updateMemoryInfo]);\n\n  return {\n    memoryInfo,\n    updateMemoryInfo,\n    isMemorySupported: 'memory' in performance\n  };\n}\n\n// Hook for comprehensive performance monitoring\nexport function usePerformanceMonitoring() {\n  const webVitals = useWebVitals();\n  const memory = useMemoryMonitoring();\n  const [isMonitoring, setIsMonitoring] = useState(true);\n  const [performanceAlerts, setPerformanceAlerts] = useState<Array<{\n    type: 'warning' | 'error';\n    message: string;\n    timestamp: number;\n    metric: string;\n  }>>([]);\n\n  // Monitor for performance issues\n  useEffect(() => {\n    if (!isMonitoring) return;\n\n    const checkPerformance = () => {\n      const alerts: typeof performanceAlerts = [];\n      \n      // Check Web Vitals\n      if (webVitals.metrics.lcp && webVitals.metrics.lcp > 4000) {\n        alerts.push({\n          type: 'error',\n          message: `Poor LCP: ${webVitals.metrics.lcp}ms (should be < 2500ms)`,\n          timestamp: Date.now(),\n          metric: 'lcp'\n        });\n      }\n      \n      if (webVitals.metrics.fid && webVitals.metrics.fid > 300) {\n        alerts.push({\n          type: 'error',\n          message: `Poor FID: ${webVitals.metrics.fid}ms (should be < 100ms)`,\n          timestamp: Date.now(),\n          metric: 'fid'\n        });\n      }\n      \n      if (webVitals.metrics.cls && webVitals.metrics.cls > 0.25) {\n        alerts.push({\n          type: 'error',\n          message: `Poor CLS: ${webVitals.metrics.cls} (should be < 0.1)`,\n          timestamp: Date.now(),\n          metric: 'cls'\n        });\n      }\n      \n      // Check memory usage\n      if (memory.memoryInfo && memory.memoryInfo.percentage > 80) {\n        alerts.push({\n          type: 'warning',\n          message: `High memory usage: ${memory.memoryInfo.percentage}% (${memory.memoryInfo.used}MB)`,\n          timestamp: Date.now(),\n          metric: 'memory'\n        });\n      }\n      \n      if (alerts.length > 0) {\n        setPerformanceAlerts(prev => [...prev.slice(-9), ...alerts]); // Keep last 10 alerts\n      }\n    };\n\n    const interval = setInterval(checkPerformance, 10000); // Check every 10 seconds\n    return () => clearInterval(interval);\n  }, [isMonitoring, webVitals.metrics, memory.memoryInfo]);\n\n  const generateReport = useCallback(() => {\n    return {\n      timestamp: new Date().toISOString(),\n      webVitals: webVitals.metrics,\n      score: webVitals.score,\n      memory: memory.memoryInfo,\n      alerts: performanceAlerts,\n      url: typeof window !== 'undefined' ? window.location.href : '',\n      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : ''\n    };\n  }, [webVitals, memory.memoryInfo, performanceAlerts]);\n\n  const clearAlerts = useCallback(() => {\n    setPerformanceAlerts([]);\n  }, []);\n\n  return {\n    webVitals: webVitals.metrics,\n    score: webVitals.score,\n    memory: memory.memoryInfo,\n    alerts: performanceAlerts,\n    isMonitoring,\n    setIsMonitoring,\n    generateReport,\n    clearAlerts,\n    refresh: webVitals.refresh\n  };\n}\n\n// Performance measurement decorators for React components\nexport function withPerformanceTracking<P extends object>(\n  WrappedComponent: React.ComponentType<P>,\n  componentName: string\n) {\n  return function PerformanceTrackedComponent(props: P) {\n    const renderPerf = useRenderPerformance(componentName);\n    \n    useEffect(() => {\n      if (renderPerf.averageRenderTime > 16) { // 60fps threshold\n        console.warn(`Component ${componentName} average render time: ${renderPerf.averageRenderTime.toFixed(2)}ms`);\n      }\n    }, [renderPerf.averageRenderTime]);\n    \n    return React.createElement(WrappedComponent, props);\n  };\n}"],"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","ignoreList":[]}