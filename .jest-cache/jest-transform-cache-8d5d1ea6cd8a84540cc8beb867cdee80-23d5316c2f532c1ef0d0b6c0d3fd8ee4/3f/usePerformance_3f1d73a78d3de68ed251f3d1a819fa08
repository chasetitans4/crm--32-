0c11909c25a694932ed3246e368ea98b
// React hooks for performance monitoring and Web Vitals tracking
"use strict";

/* istanbul ignore next */
function cov_1xpdjfyitg() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\usePerformance.ts";
  var hash = "edf29745e90737500e2025e0742e4ff85c43ee95";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\usePerformance.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "2": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 7
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 34,
          column: 3
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 33
        }
      },
      "5": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 35
        }
      },
      "6": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 40
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 36
        }
      },
      "8": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 35
        }
      },
      "9": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 28
        }
      },
      "10": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 39
        }
      },
      "11": {
        start: {
          line: 35,
          column: 15
        },
        end: {
          line: 35,
          column: 31
        }
      },
      "12": {
        start: {
          line: 36,
          column: 21
        },
        end: {
          line: 36,
          column: 52
        }
      },
      "13": {
        start: {
          line: 38,
          column: 34
        },
        end: {
          line: 38,
          column: 98
        }
      },
      "14": {
        start: {
          line: 39,
          column: 30
        },
        end: {
          line: 39,
          column: 92
        }
      },
      "15": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 46,
          column: 11
        }
      },
      "16": {
        start: {
          line: 41,
          column: 28
        },
        end: {
          line: 44,
          column: 10
        }
      },
      "17": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 35
        }
      },
      "18": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 63
        }
      },
      "19": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 27
        }
      },
      "20": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 54,
          column: 6
        }
      },
      "21": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 67
        }
      },
      "22": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 63
        }
      },
      "23": {
        start: {
          line: 57,
          column: 27
        },
        end: {
          line: 57,
          column: 48
        }
      },
      "24": {
        start: {
          line: 58,
          column: 25
        },
        end: {
          line: 58,
          column: 46
        }
      },
      "25": {
        start: {
          line: 59,
          column: 42
        },
        end: {
          line: 59,
          column: 66
        }
      },
      "26": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 73,
          column: 7
        }
      },
      "27": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 33
        }
      },
      "28": {
        start: {
          line: 62,
          column: 24
        },
        end: {
          line: 62,
          column: 41
        }
      },
      "29": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "30": {
        start: {
          line: 64,
          column: 31
        },
        end: {
          line: 64,
          column: 61
        }
      },
      "31": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 68,
          column: 19
        }
      },
      "32": {
        start: {
          line: 65,
          column: 35
        },
        end: {
          line: 68,
          column: 17
        }
      },
      "33": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 82
        }
      },
      "34": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 39
        }
      },
      "35": {
        start: {
          line: 74,
          column: 30
        },
        end: {
          line: 74,
          column: 126
        }
      },
      "36": {
        start: {
          line: 74,
          column: 87
        },
        end: {
          line: 74,
          column: 97
        }
      },
      "37": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 80,
          column: 6
        }
      },
      "38": {
        start: {
          line: 83,
          column: 40
        },
        end: {
          line: 87,
          column: 6
        }
      },
      "39": {
        start: {
          line: 88,
          column: 27
        },
        end: {
          line: 145,
          column: 10
        }
      },
      "40": {
        start: {
          line: 89,
          column: 26
        },
        end: {
          line: 89,
          column: 43
        }
      },
      "41": {
        start: {
          line: 90,
          column: 26
        },
        end: {
          line: 90,
          column: 63
        }
      },
      "42": {
        start: {
          line: 91,
          column: 24
        },
        end: {
          line: 91,
          column: 59
        }
      },
      "43": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 36
        }
      },
      "44": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "45": {
        start: {
          line: 94,
          column: 27
        },
        end: {
          line: 94,
          column: 42
        }
      },
      "46": {
        start: {
          line: 95,
          column: 28
        },
        end: {
          line: 95,
          column: 45
        }
      },
      "47": {
        start: {
          line: 96,
          column: 29
        },
        end: {
          line: 96,
          column: 48
        }
      },
      "48": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 38
        }
      },
      "49": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 71
        }
      },
      "50": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 117,
          column: 15
        }
      },
      "51": {
        start: {
          line: 100,
          column: 33
        },
        end: {
          line: 108,
          column: 17
        }
      },
      "52": {
        start: {
          line: 109,
          column: 40
        },
        end: {
          line: 109,
          column: 110
        }
      },
      "53": {
        start: {
          line: 109,
          column: 69
        },
        end: {
          line: 109,
          column: 88
        }
      },
      "54": {
        start: {
          line: 110,
          column: 35
        },
        end: {
          line: 110,
          column: 90
        }
      },
      "55": {
        start: {
          line: 110,
          column: 59
        },
        end: {
          line: 110,
          column: 82
        }
      },
      "56": {
        start: {
          line: 111,
          column: 34
        },
        end: {
          line: 111,
          column: 68
        }
      },
      "57": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 116,
          column: 18
        }
      },
      "58": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 26
        }
      },
      "59": {
        start: {
          line: 120,
          column: 28
        },
        end: {
          line: 120,
          column: 45
        }
      },
      "60": {
        start: {
          line: 121,
          column: 29
        },
        end: {
          line: 121,
          column: 48
        }
      },
      "61": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 38
        }
      },
      "62": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 77
        }
      },
      "63": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 142,
          column: 15
        }
      },
      "64": {
        start: {
          line: 125,
          column: 33
        },
        end: {
          line: 133,
          column: 17
        }
      },
      "65": {
        start: {
          line: 134,
          column: 40
        },
        end: {
          line: 134,
          column: 110
        }
      },
      "66": {
        start: {
          line: 134,
          column: 69
        },
        end: {
          line: 134,
          column: 88
        }
      },
      "67": {
        start: {
          line: 135,
          column: 35
        },
        end: {
          line: 135,
          column: 90
        }
      },
      "68": {
        start: {
          line: 135,
          column: 59
        },
        end: {
          line: 135,
          column: 82
        }
      },
      "69": {
        start: {
          line: 136,
          column: 34
        },
        end: {
          line: 136,
          column: 68
        }
      },
      "70": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 141,
          column: 18
        }
      },
      "71": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 24
        }
      },
      "72": {
        start: {
          line: 146,
          column: 4
        },
        end: {
          line: 149,
          column: 6
        }
      },
      "73": {
        start: {
          line: 152,
          column: 44
        },
        end: {
          line: 155,
          column: 6
        }
      },
      "74": {
        start: {
          line: 156,
          column: 31
        },
        end: {
          line: 177,
          column: 10
        }
      },
      "75": {
        start: {
          line: 157,
          column: 24
        },
        end: {
          line: 157,
          column: 41
        }
      },
      "76": {
        start: {
          line: 158,
          column: 25
        },
        end: {
          line: 158,
          column: 44
        }
      },
      "77": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 47
        }
      },
      "78": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 107
        }
      },
      "79": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 176,
          column: 11
        }
      },
      "80": {
        start: {
          line: 162,
          column: 31
        },
        end: {
          line: 170,
          column: 13
        }
      },
      "81": {
        start: {
          line: 171,
          column: 34
        },
        end: {
          line: 171,
          column: 112
        }
      },
      "82": {
        start: {
          line: 171,
          column: 67
        },
        end: {
          line: 171,
          column: 88
        }
      },
      "83": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 175,
          column: 14
        }
      },
      "84": {
        start: {
          line: 178,
          column: 29
        },
        end: {
          line: 181,
          column: 10
        }
      },
      "85": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 54
        }
      },
      "86": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 33
        }
      },
      "87": {
        start: {
          line: 182,
          column: 4
        },
        end: {
          line: 186,
          column: 6
        }
      },
      "88": {
        start: {
          line: 189,
          column: 40
        },
        end: {
          line: 189,
          column: 66
        }
      },
      "89": {
        start: {
          line: 190,
          column: 29
        },
        end: {
          line: 204,
          column: 10
        }
      },
      "90": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "91": {
        start: {
          line: 192,
          column: 27
        },
        end: {
          line: 192,
          column: 45
        }
      },
      "92": {
        start: {
          line: 193,
          column: 25
        },
        end: {
          line: 193,
          column: 72
        }
      },
      "93": {
        start: {
          line: 194,
          column: 26
        },
        end: {
          line: 194,
          column: 74
        }
      },
      "94": {
        start: {
          line: 195,
          column: 26
        },
        end: {
          line: 195,
          column: 74
        }
      },
      "95": {
        start: {
          line: 196,
          column: 31
        },
        end: {
          line: 196,
          column: 61
        }
      },
      "96": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 202,
          column: 15
        }
      },
      "97": {
        start: {
          line: 205,
          column: 4
        },
        end: {
          line: 211,
          column: 7
        }
      },
      "98": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 27
        }
      },
      "99": {
        start: {
          line: 207,
          column: 25
        },
        end: {
          line: 207,
          column: 60
        }
      },
      "100": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 208,
          column: 43
        }
      },
      "101": {
        start: {
          line: 208,
          column: 19
        },
        end: {
          line: 208,
          column: 42
        }
      },
      "102": {
        start: {
          line: 212,
          column: 4
        },
        end: {
          line: 216,
          column: 6
        }
      },
      "103": {
        start: {
          line: 219,
          column: 22
        },
        end: {
          line: 219,
          column: 36
        }
      },
      "104": {
        start: {
          line: 220,
          column: 19
        },
        end: {
          line: 220,
          column: 40
        }
      },
      "105": {
        start: {
          line: 221,
          column: 44
        },
        end: {
          line: 221,
          column: 70
        }
      },
      "106": {
        start: {
          line: 222,
          column: 54
        },
        end: {
          line: 222,
          column: 78
        }
      },
      "107": {
        start: {
          line: 224,
          column: 4
        },
        end: {
          line: 275,
          column: 7
        }
      },
      "108": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 34
        }
      },
      "109": {
        start: {
          line: 225,
          column: 27
        },
        end: {
          line: 225,
          column: 34
        }
      },
      "110": {
        start: {
          line: 226,
          column: 33
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "111": {
        start: {
          line: 227,
          column: 27
        },
        end: {
          line: 227,
          column: 29
        }
      },
      "112": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 236,
          column: 13
        }
      },
      "113": {
        start: {
          line: 230,
          column: 16
        },
        end: {
          line: 235,
          column: 19
        }
      },
      "114": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 244,
          column: 13
        }
      },
      "115": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 243,
          column: 19
        }
      },
      "116": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 252,
          column: 13
        }
      },
      "117": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 251,
          column: 19
        }
      },
      "118": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 261,
          column: 13
        }
      },
      "119": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 260,
          column: 19
        }
      },
      "120": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 267,
          column: 13
        }
      },
      "121": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 266,
          column: 23
        }
      },
      "122": {
        start: {
          line: 263,
          column: 45
        },
        end: {
          line: 266,
          column: 21
        }
      },
      "123": {
        start: {
          line: 269,
          column: 25
        },
        end: {
          line: 269,
          column: 61
        }
      },
      "124": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 270,
          column: 43
        }
      },
      "125": {
        start: {
          line: 270,
          column: 19
        },
        end: {
          line: 270,
          column: 42
        }
      },
      "126": {
        start: {
          line: 276,
          column: 27
        },
        end: {
          line: 290,
          column: 6
        }
      },
      "127": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 285,
          column: 10
        }
      },
      "128": {
        start: {
          line: 291,
          column: 24
        },
        end: {
          line: 293,
          column: 10
        }
      },
      "129": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 292,
          column: 33
        }
      },
      "130": {
        start: {
          line: 294,
          column: 4
        },
        end: {
          line: 304,
          column: 6
        }
      },
      "131": {
        start: {
          line: 307,
          column: 4
        },
        end: {
          line: 317,
          column: 6
        }
      },
      "132": {
        start: {
          line: 308,
          column: 27
        },
        end: {
          line: 308,
          column: 62
        }
      },
      "133": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 315,
          column: 11
        }
      },
      "134": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 312,
          column: 13
        }
      },
      "135": {
        start: {
          line: 311,
          column: 16
        },
        end: {
          line: 311,
          column: 125
        }
      },
      "136": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 60
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 16
          }
        },
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 31
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 36
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 32
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 31
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 25
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 24
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 28
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 35
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 31
      },
      "8": {
        name: "useWebVitals",
        decl: {
          start: {
            line: 37,
            column: 9
          },
          end: {
            line: 37,
            column: 21
          }
        },
        loc: {
          start: {
            line: 37,
            column: 24
          },
          end: {
            line: 55,
            column: 1
          }
        },
        line: 37
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 40,
            column: 26
          },
          end: {
            line: 40,
            column: 27
          }
        },
        loc: {
          start: {
            line: 40,
            column: 30
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 40
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 41,
            column: 67
          },
          end: {
            line: 41,
            column: 68
          }
        },
        loc: {
          start: {
            line: 41,
            column: 81
          },
          end: {
            line: 44,
            column: 9
          }
        },
        line: 41
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 50,
            column: 17
          },
          end: {
            line: 50,
            column: 18
          }
        },
        loc: {
          start: {
            line: 50,
            column: 21
          },
          end: {
            line: 53,
            column: 9
          }
        },
        line: 50
      },
      "12": {
        name: "useRenderPerformance",
        decl: {
          start: {
            line: 56,
            column: 9
          },
          end: {
            line: 56,
            column: 29
          }
        },
        loc: {
          start: {
            line: 56,
            column: 45
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 56
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 60,
            column: 26
          },
          end: {
            line: 60,
            column: 27
          }
        },
        loc: {
          start: {
            line: 60,
            column: 30
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 60
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 65,
            column: 27
          },
          end: {
            line: 65,
            column: 28
          }
        },
        loc: {
          start: {
            line: 65,
            column: 35
          },
          end: {
            line: 68,
            column: 17
          }
        },
        line: 65
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 74,
            column: 74
          },
          end: {
            line: 74,
            column: 75
          }
        },
        loc: {
          start: {
            line: 74,
            column: 87
          },
          end: {
            line: 74,
            column: 97
          }
        },
        line: 74
      },
      "16": {
        name: "useApiPerformance",
        decl: {
          start: {
            line: 82,
            column: 9
          },
          end: {
            line: 82,
            column: 26
          }
        },
        loc: {
          start: {
            line: 82,
            column: 29
          },
          end: {
            line: 150,
            column: 1
          }
        },
        line: 82
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 88,
            column: 51
          },
          end: {
            line: 88,
            column: 52
          }
        },
        loc: {
          start: {
            line: 88,
            column: 78
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 88
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 99,
            column: 26
          },
          end: {
            line: 99,
            column: 27
          }
        },
        loc: {
          start: {
            line: 99,
            column: 34
          },
          end: {
            line: 117,
            column: 13
          }
        },
        line: 99
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 109,
            column: 56
          },
          end: {
            line: 109,
            column: 57
          }
        },
        loc: {
          start: {
            line: 109,
            column: 69
          },
          end: {
            line: 109,
            column: 88
          }
        },
        line: 109
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 110,
            column: 51
          },
          end: {
            line: 110,
            column: 52
          }
        },
        loc: {
          start: {
            line: 110,
            column: 59
          },
          end: {
            line: 110,
            column: 82
          }
        },
        line: 110
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 124,
            column: 26
          },
          end: {
            line: 124,
            column: 27
          }
        },
        loc: {
          start: {
            line: 124,
            column: 34
          },
          end: {
            line: 142,
            column: 13
          }
        },
        line: 124
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 134,
            column: 56
          },
          end: {
            line: 134,
            column: 57
          }
        },
        loc: {
          start: {
            line: 134,
            column: 69
          },
          end: {
            line: 134,
            column: 88
          }
        },
        line: 134
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 135,
            column: 51
          },
          end: {
            line: 135,
            column: 52
          }
        },
        loc: {
          start: {
            line: 135,
            column: 59
          },
          end: {
            line: 135,
            column: 82
          }
        },
        line: 135
      },
      "24": {
        name: "useRoutePerformance",
        decl: {
          start: {
            line: 151,
            column: 9
          },
          end: {
            line: 151,
            column: 28
          }
        },
        loc: {
          start: {
            line: 151,
            column: 31
          },
          end: {
            line: 187,
            column: 1
          }
        },
        line: 151
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 156,
            column: 55
          },
          end: {
            line: 156,
            column: 56
          }
        },
        loc: {
          start: {
            line: 156,
            column: 78
          },
          end: {
            line: 177,
            column: 5
          }
        },
        line: 156
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 161,
            column: 24
          },
          end: {
            line: 161,
            column: 25
          }
        },
        loc: {
          start: {
            line: 161,
            column: 32
          },
          end: {
            line: 176,
            column: 9
          }
        },
        line: 161
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 171,
            column: 52
          },
          end: {
            line: 171,
            column: 53
          }
        },
        loc: {
          start: {
            line: 171,
            column: 67
          },
          end: {
            line: 171,
            column: 88
          }
        },
        line: 171
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 178,
            column: 53
          },
          end: {
            line: 178,
            column: 54
          }
        },
        loc: {
          start: {
            line: 178,
            column: 66
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 178
      },
      "29": {
        name: "useMemoryMonitoring",
        decl: {
          start: {
            line: 188,
            column: 9
          },
          end: {
            line: 188,
            column: 28
          }
        },
        loc: {
          start: {
            line: 188,
            column: 31
          },
          end: {
            line: 217,
            column: 1
          }
        },
        line: 188
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 190,
            column: 53
          },
          end: {
            line: 190,
            column: 54
          }
        },
        loc: {
          start: {
            line: 190,
            column: 57
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 190
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 205,
            column: 26
          },
          end: {
            line: 205,
            column: 27
          }
        },
        loc: {
          start: {
            line: 205,
            column: 30
          },
          end: {
            line: 209,
            column: 5
          }
        },
        line: 205
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 208,
            column: 15
          },
          end: {
            line: 208,
            column: 16
          }
        },
        loc: {
          start: {
            line: 208,
            column: 19
          },
          end: {
            line: 208,
            column: 42
          }
        },
        line: 208
      },
      "33": {
        name: "usePerformanceMonitoring",
        decl: {
          start: {
            line: 218,
            column: 9
          },
          end: {
            line: 218,
            column: 33
          }
        },
        loc: {
          start: {
            line: 218,
            column: 36
          },
          end: {
            line: 305,
            column: 1
          }
        },
        line: 218
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 224,
            column: 26
          },
          end: {
            line: 224,
            column: 27
          }
        },
        loc: {
          start: {
            line: 224,
            column: 30
          },
          end: {
            line: 271,
            column: 5
          }
        },
        line: 224
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 226,
            column: 33
          },
          end: {
            line: 226,
            column: 34
          }
        },
        loc: {
          start: {
            line: 226,
            column: 37
          },
          end: {
            line: 268,
            column: 9
          }
        },
        line: 226
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 263,
            column: 37
          },
          end: {
            line: 263,
            column: 38
          }
        },
        loc: {
          start: {
            line: 263,
            column: 45
          },
          end: {
            line: 266,
            column: 21
          }
        },
        line: 263
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 270,
            column: 15
          },
          end: {
            line: 270,
            column: 16
          }
        },
        loc: {
          start: {
            line: 270,
            column: 19
          },
          end: {
            line: 270,
            column: 42
          }
        },
        line: 270
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 276,
            column: 51
          },
          end: {
            line: 276,
            column: 52
          }
        },
        loc: {
          start: {
            line: 276,
            column: 55
          },
          end: {
            line: 286,
            column: 5
          }
        },
        line: 276
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 291,
            column: 48
          },
          end: {
            line: 291,
            column: 49
          }
        },
        loc: {
          start: {
            line: 291,
            column: 52
          },
          end: {
            line: 293,
            column: 5
          }
        },
        line: 291
      },
      "40": {
        name: "withPerformanceTracking",
        decl: {
          start: {
            line: 306,
            column: 9
          },
          end: {
            line: 306,
            column: 32
          }
        },
        loc: {
          start: {
            line: 306,
            column: 66
          },
          end: {
            line: 318,
            column: 1
          }
        },
        line: 306
      },
      "41": {
        name: "PerformanceTrackedComponent",
        decl: {
          start: {
            line: 307,
            column: 20
          },
          end: {
            line: 307,
            column: 47
          }
        },
        loc: {
          start: {
            line: 307,
            column: 55
          },
          end: {
            line: 317,
            column: 5
          }
        },
        line: 307
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 309,
            column: 30
          },
          end: {
            line: 309,
            column: 31
          }
        },
        loc: {
          start: {
            line: 309,
            column: 34
          },
          end: {
            line: 313,
            column: 9
          }
        },
        line: 309
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "1": {
        loc: {
          start: {
            line: 74,
            column: 30
          },
          end: {
            line: 74,
            column: 126
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 74,
            column: 55
          },
          end: {
            line: 74,
            column: 122
          }
        }, {
          start: {
            line: 74,
            column: 125
          },
          end: {
            line: 74,
            column: 126
          }
        }],
        line: 74
      },
      "2": {
        loc: {
          start: {
            line: 79,
            column: 24
          },
          end: {
            line: 79,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 24
          },
          end: {
            line: 79,
            column: 59
          }
        }, {
          start: {
            line: 79,
            column: 63
          },
          end: {
            line: 79,
            column: 64
          }
        }],
        line: 79
      },
      "3": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "4": {
        loc: {
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 225,
            column: 34
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 225,
            column: 8
          },
          end: {
            line: 225,
            column: 34
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 225
      },
      "5": {
        loc: {
          start: {
            line: 229,
            column: 12
          },
          end: {
            line: 236,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 229,
            column: 12
          },
          end: {
            line: 236,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 229
      },
      "6": {
        loc: {
          start: {
            line: 229,
            column: 16
          },
          end: {
            line: 229,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 229,
            column: 16
          },
          end: {
            line: 229,
            column: 37
          }
        }, {
          start: {
            line: 229,
            column: 41
          },
          end: {
            line: 229,
            column: 69
          }
        }],
        line: 229
      },
      "7": {
        loc: {
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 244,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 244,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "8": {
        loc: {
          start: {
            line: 237,
            column: 16
          },
          end: {
            line: 237,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 16
          },
          end: {
            line: 237,
            column: 37
          }
        }, {
          start: {
            line: 237,
            column: 41
          },
          end: {
            line: 237,
            column: 68
          }
        }],
        line: 237
      },
      "9": {
        loc: {
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "10": {
        loc: {
          start: {
            line: 245,
            column: 16
          },
          end: {
            line: 245,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 245,
            column: 16
          },
          end: {
            line: 245,
            column: 37
          }
        }, {
          start: {
            line: 245,
            column: 41
          },
          end: {
            line: 245,
            column: 69
          }
        }],
        line: 245
      },
      "11": {
        loc: {
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 261,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 261,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "12": {
        loc: {
          start: {
            line: 254,
            column: 16
          },
          end: {
            line: 254,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 254,
            column: 16
          },
          end: {
            line: 254,
            column: 33
          }
        }, {
          start: {
            line: 254,
            column: 37
          },
          end: {
            line: 254,
            column: 70
          }
        }],
        line: 254
      },
      "13": {
        loc: {
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 267,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 267,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 262
      },
      "14": {
        loc: {
          start: {
            line: 283,
            column: 17
          },
          end: {
            line: 283,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 283,
            column: 49
          },
          end: {
            line: 283,
            column: 69
          }
        }, {
          start: {
            line: 283,
            column: 72
          },
          end: {
            line: 283,
            column: 74
          }
        }],
        line: 283
      },
      "15": {
        loc: {
          start: {
            line: 284,
            column: 23
          },
          end: {
            line: 284,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 284,
            column: 58
          },
          end: {
            line: 284,
            column: 77
          }
        }, {
          start: {
            line: 284,
            column: 80
          },
          end: {
            line: 284,
            column: 82
          }
        }],
        line: 284
      },
      "16": {
        loc: {
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 312,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 312,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 310
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\usePerformance.ts"],
      sourcesContent: ["// React hooks for performance monitoring and Web Vitals tracking\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { webVitalsTracker, WebVitalsMetrics, CustomPerformanceMetrics } from '@/utils/performance';\n\ninterface PerformanceState {\n  webVitals: WebVitalsMetrics;\n  customMetrics: CustomPerformanceMetrics;\n  score: { overall: number; breakdown: Record<string, { score: number; rating: string }> };\n  isLoading: boolean;\n}\n\n// Hook for Web Vitals monitoring\nexport function useWebVitals() {\n  const [metrics, setMetrics] = useState<WebVitalsMetrics>(webVitalsTracker.getMetrics());\n  const [score, setScore] = useState(webVitalsTracker.getScore());\n\n  useEffect(() => {\n    const unsubscribe = webVitalsTracker.onUpdate((newMetrics) => {\n      setMetrics(newMetrics);\n      setScore(webVitalsTracker.getScore());\n    });\n\n    return unsubscribe;\n  }, []);\n\n  return {\n    metrics,\n    score,\n    refresh: () => {\n      setMetrics(webVitalsTracker.getMetrics());\n      setScore(webVitalsTracker.getScore());\n    }\n  };\n}\n\n// Hook for measuring component render performance\nexport function useRenderPerformance(componentName: string) {\n  const renderCountRef = useRef(0);\n  const startTimeRef = useRef<number>(0);\n  const [renderTimes, setRenderTimes] = useState<number[]>([]);\n\n  useEffect(() => {\n    renderCountRef.current++;\n    const endTime = performance.now();\n    \n    if (startTimeRef.current > 0) {\n      const renderTime = endTime - startTimeRef.current;\n      setRenderTimes(prev => [...prev.slice(-9), renderTime]); // Keep last 10 renders\n      \n      // Mark performance for debugging\n      performance.mark(`${componentName}-render-${renderCountRef.current}`);\n    }\n    \n    startTimeRef.current = endTime;\n  });\n\n  const averageRenderTime = renderTimes.length > 0 \n    ? renderTimes.reduce((sum, time) => sum + time, 0) / renderTimes.length \n    : 0;\n\n  return {\n    renderCount: renderCountRef.current,\n    renderTimes,\n    averageRenderTime,\n    lastRenderTime: renderTimes[renderTimes.length - 1] || 0\n  };\n}\n\n// Hook for measuring API call performance\nexport function useApiPerformance() {\n  const [apiMetrics, setApiMetrics] = useState<{\n    calls: Array<{ endpoint: string; duration: number; timestamp: number; status: 'success' | 'error' }>;\n    averageResponseTime: number;\n    errorRate: number;\n  }>({\n    calls: [],\n    averageResponseTime: 0,\n    errorRate: 0\n  });\n\n  const measureApiCall = useCallback(async <T>(\n    endpoint: string,\n    apiCall: () => Promise<T>\n  ): Promise<T> => {\n    const startTime = performance.now();\n    const startMark = `api-${endpoint}-start-${Date.now()}`;\n    const endMark = `api-${endpoint}-end-${Date.now()}`;\n    \n    performance.mark(startMark);\n    \n    try {\n      const result = await apiCall();\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      performance.mark(endMark);\n      performance.measure(`api-${endpoint}`, startMark, endMark);\n      \n      setApiMetrics(prev => {\n        const newCalls = [...prev.calls.slice(-19), { // Keep last 20 calls\n          endpoint,\n          duration,\n          timestamp: Date.now(),\n          status: 'success' as const\n        }];\n        \n        const avgResponseTime = newCalls.reduce((sum, call) => sum + call.duration, 0) / newCalls.length;\n        const errorCount = newCalls.filter(call => call.status === 'error').length;\n        const errorRate = (errorCount / newCalls.length) * 100;\n        \n        return {\n          calls: newCalls,\n          averageResponseTime: avgResponseTime,\n          errorRate\n        };\n      });\n      \n      return result;\n    } catch (error) {\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      performance.mark(endMark);\n      performance.measure(`api-${endpoint}-error`, startMark, endMark);\n      \n      setApiMetrics(prev => {\n        const newCalls = [...prev.calls.slice(-19), {\n          endpoint,\n          duration,\n          timestamp: Date.now(),\n          status: 'error' as const\n        }];\n        \n        const avgResponseTime = newCalls.reduce((sum, call) => sum + call.duration, 0) / newCalls.length;\n        const errorCount = newCalls.filter(call => call.status === 'error').length;\n        const errorRate = (errorCount / newCalls.length) * 100;\n        \n        return {\n          calls: newCalls,\n          averageResponseTime: avgResponseTime,\n          errorRate\n        };\n      });\n      \n      throw error;\n    }\n  }, []);\n\n  return {\n    ...apiMetrics,\n    measureApiCall\n  };\n}\n\n// Hook for measuring route change performance\nexport function useRoutePerformance() {\n  const [routeMetrics, setRouteMetrics] = useState<{\n    changes: Array<{ from: string; to: string; duration: number; timestamp: number }>;\n    averageChangeTime: number;\n  }>({\n    changes: [],\n    averageChangeTime: 0\n  });\n\n  const measureRouteChange = useCallback((from: string, to: string, startTime: number) => {\n    const endTime = performance.now();\n    const duration = endTime - startTime;\n    \n    performance.mark(`route-change-${to}`);\n    performance.measure(`route-change-${from}-to-${to}`, `route-change-${from}`, `route-change-${to}`);\n    \n    setRouteMetrics(prev => {\n      const newChanges = [...prev.changes.slice(-9), { // Keep last 10 route changes\n        from,\n        to,\n        duration,\n        timestamp: Date.now()\n      }];\n      \n      const avgChangeTime = newChanges.reduce((sum, change) => sum + change.duration, 0) / newChanges.length;\n      \n      return {\n        changes: newChanges,\n        averageChangeTime: avgChangeTime\n      };\n    });\n  }, []);\n\n  const startRouteChange = useCallback((routeName: string) => {\n    performance.mark(`route-change-${routeName}`);\n    return performance.now();\n  }, []);\n\n  return {\n    ...routeMetrics,\n    measureRouteChange,\n    startRouteChange\n  };\n}\n\n// Hook for memory usage monitoring\nexport function useMemoryMonitoring() {\n  const [memoryInfo, setMemoryInfo] = useState<{\n    used: number;\n    total: number;\n    limit: number;\n    percentage: number;\n  } | null>(null);\n\n  const updateMemoryInfo = useCallback(() => {\n    if ('memory' in performance) {\n      const memory = (performance as any).memory;\n      const used = Math.round(memory.usedJSHeapSize / 1024 / 1024);\n      const total = Math.round(memory.totalJSHeapSize / 1024 / 1024);\n      const limit = Math.round(memory.jsHeapSizeLimit / 1024 / 1024);\n      const percentage = Math.round((used / limit) * 100);\n      \n      setMemoryInfo({ used, total, limit, percentage });\n    }\n  }, []);\n\n  useEffect(() => {\n    updateMemoryInfo();\n    const interval = setInterval(updateMemoryInfo, 5000); // Update every 5 seconds\n    \n    return () => clearInterval(interval);\n  }, [updateMemoryInfo]);\n\n  return {\n    memoryInfo,\n    updateMemoryInfo,\n    isMemorySupported: 'memory' in performance\n  };\n}\n\n// Hook for comprehensive performance monitoring\nexport function usePerformanceMonitoring() {\n  const webVitals = useWebVitals();\n  const memory = useMemoryMonitoring();\n  const [isMonitoring, setIsMonitoring] = useState(true);\n  const [performanceAlerts, setPerformanceAlerts] = useState<Array<{\n    type: 'warning' | 'error';\n    message: string;\n    timestamp: number;\n    metric: string;\n  }>>([]);\n\n  // Monitor for performance issues\n  useEffect(() => {\n    if (!isMonitoring) return;\n\n    const checkPerformance = () => {\n      const alerts: typeof performanceAlerts = [];\n      \n      // Check Web Vitals\n      if (webVitals.metrics.lcp && webVitals.metrics.lcp > 4000) {\n        alerts.push({\n          type: 'error',\n          message: `Poor LCP: ${webVitals.metrics.lcp}ms (should be < 2500ms)`,\n          timestamp: Date.now(),\n          metric: 'lcp'\n        });\n      }\n      \n      if (webVitals.metrics.fid && webVitals.metrics.fid > 300) {\n        alerts.push({\n          type: 'error',\n          message: `Poor FID: ${webVitals.metrics.fid}ms (should be < 100ms)`,\n          timestamp: Date.now(),\n          metric: 'fid'\n        });\n      }\n      \n      if (webVitals.metrics.cls && webVitals.metrics.cls > 0.25) {\n        alerts.push({\n          type: 'error',\n          message: `Poor CLS: ${webVitals.metrics.cls} (should be < 0.1)`,\n          timestamp: Date.now(),\n          metric: 'cls'\n        });\n      }\n      \n      // Check memory usage\n      if (memory.memoryInfo && memory.memoryInfo.percentage > 80) {\n        alerts.push({\n          type: 'warning',\n          message: `High memory usage: ${memory.memoryInfo.percentage}% (${memory.memoryInfo.used}MB)`,\n          timestamp: Date.now(),\n          metric: 'memory'\n        });\n      }\n      \n      if (alerts.length > 0) {\n        setPerformanceAlerts(prev => [...prev.slice(-9), ...alerts]); // Keep last 10 alerts\n      }\n    };\n\n    const interval = setInterval(checkPerformance, 10000); // Check every 10 seconds\n    return () => clearInterval(interval);\n  }, [isMonitoring, webVitals.metrics, memory.memoryInfo]);\n\n  const generateReport = useCallback(() => {\n    return {\n      timestamp: new Date().toISOString(),\n      webVitals: webVitals.metrics,\n      score: webVitals.score,\n      memory: memory.memoryInfo,\n      alerts: performanceAlerts,\n      url: typeof window !== 'undefined' ? window.location.href : '',\n      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : ''\n    };\n  }, [webVitals, memory.memoryInfo, performanceAlerts]);\n\n  const clearAlerts = useCallback(() => {\n    setPerformanceAlerts([]);\n  }, []);\n\n  return {\n    webVitals: webVitals.metrics,\n    score: webVitals.score,\n    memory: memory.memoryInfo,\n    alerts: performanceAlerts,\n    isMonitoring,\n    setIsMonitoring,\n    generateReport,\n    clearAlerts,\n    refresh: webVitals.refresh\n  };\n}\n\n// Performance measurement decorators for React components\nexport function withPerformanceTracking<P extends object>(\n  WrappedComponent: React.ComponentType<P>,\n  componentName: string\n) {\n  return function PerformanceTrackedComponent(props: P) {\n    const renderPerf = useRenderPerformance(componentName);\n    \n    useEffect(() => {\n      if (renderPerf.averageRenderTime > 16) { // 60fps threshold\n        console.warn(`Component ${componentName} average render time: ${renderPerf.averageRenderTime.toFixed(2)}ms`);\n      }\n    }, [renderPerf.averageRenderTime]);\n    \n    return React.createElement(WrappedComponent, props);\n  };\n}"],
      names: ["useApiPerformance", "useMemoryMonitoring", "usePerformanceMonitoring", "useRenderPerformance", "useRoutePerformance", "useWebVitals", "withPerformanceTracking", "metrics", "setMetrics", "useState", "webVitalsTracker", "getMetrics", "score", "setScore", "getScore", "useEffect", "unsubscribe", "onUpdate", "newMetrics", "refresh", "componentName", "renderCountRef", "useRef", "startTimeRef", "renderTimes", "setRenderTimes", "current", "endTime", "performance", "now", "renderTime", "prev", "slice", "mark", "averageRenderTime", "length", "reduce", "sum", "time", "renderCount", "lastRenderTime", "apiMetrics", "setApiMetrics", "calls", "averageResponseTime", "errorRate", "measureApiCall", "useCallback", "endpoint", "apiCall", "startTime", "startMark", "Date", "endMark", "result", "duration", "measure", "newCalls", "timestamp", "status", "avgResponseTime", "call", "errorCount", "filter", "error", "routeMetrics", "setRouteMetrics", "changes", "averageChangeTime", "measureRouteChange", "from", "to", "newChanges", "avgChangeTime", "change", "startRouteChange", "routeName", "memoryInfo", "setMemoryInfo", "updateMemoryInfo", "memory", "used", "Math", "round", "usedJSHeapSize", "total", "totalJSHeapSize", "limit", "jsHeapSizeLimit", "percentage", "interval", "setInterval", "clearInterval", "isMemorySupported", "webVitals", "isMonitoring", "setIsMonitoring", "performanceAlerts", "setPerformanceAlerts", "checkPerformance", "alerts", "lcp", "push", "type", "message", "metric", "fid", "cls", "generateReport", "toISOString", "url", "window", "location", "href", "userAgent", "navigator", "clearAlerts", "WrappedComponent", "PerformanceTrackedComponent", "props", "renderPerf", "console", "warn", "toFixed", "React", "createElement"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "edf29745e90737500e2025e0742e4ff85c43ee95"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1xpdjfyitg = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1xpdjfyitg();
cov_1xpdjfyitg().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1xpdjfyitg().f[0]++;
  cov_1xpdjfyitg().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1xpdjfyitg().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_1xpdjfyitg().s[3]++;
_export(exports, {
  get useApiPerformance() {
    /* istanbul ignore next */
    cov_1xpdjfyitg().f[1]++;
    cov_1xpdjfyitg().s[4]++;
    return useApiPerformance;
  },
  get useMemoryMonitoring() {
    /* istanbul ignore next */
    cov_1xpdjfyitg().f[2]++;
    cov_1xpdjfyitg().s[5]++;
    return useMemoryMonitoring;
  },
  get usePerformanceMonitoring() {
    /* istanbul ignore next */
    cov_1xpdjfyitg().f[3]++;
    cov_1xpdjfyitg().s[6]++;
    return usePerformanceMonitoring;
  },
  get useRenderPerformance() {
    /* istanbul ignore next */
    cov_1xpdjfyitg().f[4]++;
    cov_1xpdjfyitg().s[7]++;
    return useRenderPerformance;
  },
  get useRoutePerformance() {
    /* istanbul ignore next */
    cov_1xpdjfyitg().f[5]++;
    cov_1xpdjfyitg().s[8]++;
    return useRoutePerformance;
  },
  get useWebVitals() {
    /* istanbul ignore next */
    cov_1xpdjfyitg().f[6]++;
    cov_1xpdjfyitg().s[9]++;
    return useWebVitals;
  },
  get withPerformanceTracking() {
    /* istanbul ignore next */
    cov_1xpdjfyitg().f[7]++;
    cov_1xpdjfyitg().s[10]++;
    return withPerformanceTracking;
  }
});
const _react =
/* istanbul ignore next */
(cov_1xpdjfyitg().s[11]++, require("react"));
const _performance =
/* istanbul ignore next */
(cov_1xpdjfyitg().s[12]++, require("../utils/performance"));
function useWebVitals() {
  /* istanbul ignore next */
  cov_1xpdjfyitg().f[8]++;
  const [metrics, setMetrics] =
  /* istanbul ignore next */
  (cov_1xpdjfyitg().s[13]++, (0, _react.useState)(_performance.webVitalsTracker.getMetrics()));
  const [score, setScore] =
  /* istanbul ignore next */
  (cov_1xpdjfyitg().s[14]++, (0, _react.useState)(_performance.webVitalsTracker.getScore()));
  /* istanbul ignore next */
  cov_1xpdjfyitg().s[15]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_1xpdjfyitg().f[9]++;
    const unsubscribe =
    /* istanbul ignore next */
    (cov_1xpdjfyitg().s[16]++, _performance.webVitalsTracker.onUpdate(newMetrics => {
      /* istanbul ignore next */
      cov_1xpdjfyitg().f[10]++;
      cov_1xpdjfyitg().s[17]++;
      setMetrics(newMetrics);
      /* istanbul ignore next */
      cov_1xpdjfyitg().s[18]++;
      setScore(_performance.webVitalsTracker.getScore());
    }));
    /* istanbul ignore next */
    cov_1xpdjfyitg().s[19]++;
    return unsubscribe;
  }, []);
  /* istanbul ignore next */
  cov_1xpdjfyitg().s[20]++;
  return {
    metrics,
    score,
    refresh: () => {
      /* istanbul ignore next */
      cov_1xpdjfyitg().f[11]++;
      cov_1xpdjfyitg().s[21]++;
      setMetrics(_performance.webVitalsTracker.getMetrics());
      /* istanbul ignore next */
      cov_1xpdjfyitg().s[22]++;
      setScore(_performance.webVitalsTracker.getScore());
    }
  };
}
function useRenderPerformance(componentName) {
  /* istanbul ignore next */
  cov_1xpdjfyitg().f[12]++;
  const renderCountRef =
  /* istanbul ignore next */
  (cov_1xpdjfyitg().s[23]++, (0, _react.useRef)(0));
  const startTimeRef =
  /* istanbul ignore next */
  (cov_1xpdjfyitg().s[24]++, (0, _react.useRef)(0));
  const [renderTimes, setRenderTimes] =
  /* istanbul ignore next */
  (cov_1xpdjfyitg().s[25]++, (0, _react.useState)([]));
  /* istanbul ignore next */
  cov_1xpdjfyitg().s[26]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_1xpdjfyitg().f[13]++;
    cov_1xpdjfyitg().s[27]++;
    renderCountRef.current++;
    const endTime =
    /* istanbul ignore next */
    (cov_1xpdjfyitg().s[28]++, performance.now());
    /* istanbul ignore next */
    cov_1xpdjfyitg().s[29]++;
    if (startTimeRef.current > 0) {
      /* istanbul ignore next */
      cov_1xpdjfyitg().b[0][0]++;
      const renderTime =
      /* istanbul ignore next */
      (cov_1xpdjfyitg().s[30]++, endTime - startTimeRef.current);
      /* istanbul ignore next */
      cov_1xpdjfyitg().s[31]++;
      setRenderTimes(prev => {
        /* istanbul ignore next */
        cov_1xpdjfyitg().f[14]++;
        cov_1xpdjfyitg().s[32]++;
        return [...prev.slice(-9), renderTime];
      }); // Keep last 10 renders
      // Mark performance for debugging
      /* istanbul ignore next */
      cov_1xpdjfyitg().s[33]++;
      performance.mark(`${componentName}-render-${renderCountRef.current}`);
    } else
    /* istanbul ignore next */
    {
      cov_1xpdjfyitg().b[0][1]++;
    }
    cov_1xpdjfyitg().s[34]++;
    startTimeRef.current = endTime;
  });
  const averageRenderTime =
  /* istanbul ignore next */
  (cov_1xpdjfyitg().s[35]++, renderTimes.length > 0 ?
  /* istanbul ignore next */
  (cov_1xpdjfyitg().b[1][0]++, renderTimes.reduce((sum, time) => {
    /* istanbul ignore next */
    cov_1xpdjfyitg().f[15]++;
    cov_1xpdjfyitg().s[36]++;
    return sum + time;
  }, 0) / renderTimes.length) :
  /* istanbul ignore next */
  (cov_1xpdjfyitg().b[1][1]++, 0));
  /* istanbul ignore next */
  cov_1xpdjfyitg().s[37]++;
  return {
    renderCount: renderCountRef.current,
    renderTimes,
    averageRenderTime,
    lastRenderTime:
    /* istanbul ignore next */
    (cov_1xpdjfyitg().b[2][0]++, renderTimes[renderTimes.length - 1]) ||
    /* istanbul ignore next */
    (cov_1xpdjfyitg().b[2][1]++, 0)
  };
}
function useApiPerformance() {
  /* istanbul ignore next */
  cov_1xpdjfyitg().f[16]++;
  const [apiMetrics, setApiMetrics] =
  /* istanbul ignore next */
  (cov_1xpdjfyitg().s[38]++, (0, _react.useState)({
    calls: [],
    averageResponseTime: 0,
    errorRate: 0
  }));
  const measureApiCall =
  /* istanbul ignore next */
  (cov_1xpdjfyitg().s[39]++, (0, _react.useCallback)(async (endpoint, apiCall) => {
    /* istanbul ignore next */
    cov_1xpdjfyitg().f[17]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1xpdjfyitg().s[40]++, performance.now());
    const startMark =
    /* istanbul ignore next */
    (cov_1xpdjfyitg().s[41]++, `api-${endpoint}-start-${Date.now()}`);
    const endMark =
    /* istanbul ignore next */
    (cov_1xpdjfyitg().s[42]++, `api-${endpoint}-end-${Date.now()}`);
    /* istanbul ignore next */
    cov_1xpdjfyitg().s[43]++;
    performance.mark(startMark);
    /* istanbul ignore next */
    cov_1xpdjfyitg().s[44]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1xpdjfyitg().s[45]++, await apiCall());
      const endTime =
      /* istanbul ignore next */
      (cov_1xpdjfyitg().s[46]++, performance.now());
      const duration =
      /* istanbul ignore next */
      (cov_1xpdjfyitg().s[47]++, endTime - startTime);
      /* istanbul ignore next */
      cov_1xpdjfyitg().s[48]++;
      performance.mark(endMark);
      /* istanbul ignore next */
      cov_1xpdjfyitg().s[49]++;
      performance.measure(`api-${endpoint}`, startMark, endMark);
      /* istanbul ignore next */
      cov_1xpdjfyitg().s[50]++;
      setApiMetrics(prev => {
        /* istanbul ignore next */
        cov_1xpdjfyitg().f[18]++;
        const newCalls =
        /* istanbul ignore next */
        (cov_1xpdjfyitg().s[51]++, [...prev.calls.slice(-19), {
          endpoint,
          duration,
          timestamp: Date.now(),
          status: 'success'
        }]);
        const avgResponseTime =
        /* istanbul ignore next */
        (cov_1xpdjfyitg().s[52]++, newCalls.reduce((sum, call) => {
          /* istanbul ignore next */
          cov_1xpdjfyitg().f[19]++;
          cov_1xpdjfyitg().s[53]++;
          return sum + call.duration;
        }, 0) / newCalls.length);
        const errorCount =
        /* istanbul ignore next */
        (cov_1xpdjfyitg().s[54]++, newCalls.filter(call => {
          /* istanbul ignore next */
          cov_1xpdjfyitg().f[20]++;
          cov_1xpdjfyitg().s[55]++;
          return call.status === 'error';
        }).length);
        const errorRate =
        /* istanbul ignore next */
        (cov_1xpdjfyitg().s[56]++, errorCount / newCalls.length * 100);
        /* istanbul ignore next */
        cov_1xpdjfyitg().s[57]++;
        return {
          calls: newCalls,
          averageResponseTime: avgResponseTime,
          errorRate
        };
      });
      /* istanbul ignore next */
      cov_1xpdjfyitg().s[58]++;
      return result;
    } catch (error) {
      const endTime =
      /* istanbul ignore next */
      (cov_1xpdjfyitg().s[59]++, performance.now());
      const duration =
      /* istanbul ignore next */
      (cov_1xpdjfyitg().s[60]++, endTime - startTime);
      /* istanbul ignore next */
      cov_1xpdjfyitg().s[61]++;
      performance.mark(endMark);
      /* istanbul ignore next */
      cov_1xpdjfyitg().s[62]++;
      performance.measure(`api-${endpoint}-error`, startMark, endMark);
      /* istanbul ignore next */
      cov_1xpdjfyitg().s[63]++;
      setApiMetrics(prev => {
        /* istanbul ignore next */
        cov_1xpdjfyitg().f[21]++;
        const newCalls =
        /* istanbul ignore next */
        (cov_1xpdjfyitg().s[64]++, [...prev.calls.slice(-19), {
          endpoint,
          duration,
          timestamp: Date.now(),
          status: 'error'
        }]);
        const avgResponseTime =
        /* istanbul ignore next */
        (cov_1xpdjfyitg().s[65]++, newCalls.reduce((sum, call) => {
          /* istanbul ignore next */
          cov_1xpdjfyitg().f[22]++;
          cov_1xpdjfyitg().s[66]++;
          return sum + call.duration;
        }, 0) / newCalls.length);
        const errorCount =
        /* istanbul ignore next */
        (cov_1xpdjfyitg().s[67]++, newCalls.filter(call => {
          /* istanbul ignore next */
          cov_1xpdjfyitg().f[23]++;
          cov_1xpdjfyitg().s[68]++;
          return call.status === 'error';
        }).length);
        const errorRate =
        /* istanbul ignore next */
        (cov_1xpdjfyitg().s[69]++, errorCount / newCalls.length * 100);
        /* istanbul ignore next */
        cov_1xpdjfyitg().s[70]++;
        return {
          calls: newCalls,
          averageResponseTime: avgResponseTime,
          errorRate
        };
      });
      /* istanbul ignore next */
      cov_1xpdjfyitg().s[71]++;
      throw error;
    }
  }, []));
  /* istanbul ignore next */
  cov_1xpdjfyitg().s[72]++;
  return {
    ...apiMetrics,
    measureApiCall
  };
}
function useRoutePerformance() {
  /* istanbul ignore next */
  cov_1xpdjfyitg().f[24]++;
  const [routeMetrics, setRouteMetrics] =
  /* istanbul ignore next */
  (cov_1xpdjfyitg().s[73]++, (0, _react.useState)({
    changes: [],
    averageChangeTime: 0
  }));
  const measureRouteChange =
  /* istanbul ignore next */
  (cov_1xpdjfyitg().s[74]++, (0, _react.useCallback)((from, to, startTime) => {
    /* istanbul ignore next */
    cov_1xpdjfyitg().f[25]++;
    const endTime =
    /* istanbul ignore next */
    (cov_1xpdjfyitg().s[75]++, performance.now());
    const duration =
    /* istanbul ignore next */
    (cov_1xpdjfyitg().s[76]++, endTime - startTime);
    /* istanbul ignore next */
    cov_1xpdjfyitg().s[77]++;
    performance.mark(`route-change-${to}`);
    /* istanbul ignore next */
    cov_1xpdjfyitg().s[78]++;
    performance.measure(`route-change-${from}-to-${to}`, `route-change-${from}`, `route-change-${to}`);
    /* istanbul ignore next */
    cov_1xpdjfyitg().s[79]++;
    setRouteMetrics(prev => {
      /* istanbul ignore next */
      cov_1xpdjfyitg().f[26]++;
      const newChanges =
      /* istanbul ignore next */
      (cov_1xpdjfyitg().s[80]++, [...prev.changes.slice(-9), {
        from,
        to,
        duration,
        timestamp: Date.now()
      }]);
      const avgChangeTime =
      /* istanbul ignore next */
      (cov_1xpdjfyitg().s[81]++, newChanges.reduce((sum, change) => {
        /* istanbul ignore next */
        cov_1xpdjfyitg().f[27]++;
        cov_1xpdjfyitg().s[82]++;
        return sum + change.duration;
      }, 0) / newChanges.length);
      /* istanbul ignore next */
      cov_1xpdjfyitg().s[83]++;
      return {
        changes: newChanges,
        averageChangeTime: avgChangeTime
      };
    });
  }, []));
  const startRouteChange =
  /* istanbul ignore next */
  (cov_1xpdjfyitg().s[84]++, (0, _react.useCallback)(routeName => {
    /* istanbul ignore next */
    cov_1xpdjfyitg().f[28]++;
    cov_1xpdjfyitg().s[85]++;
    performance.mark(`route-change-${routeName}`);
    /* istanbul ignore next */
    cov_1xpdjfyitg().s[86]++;
    return performance.now();
  }, []));
  /* istanbul ignore next */
  cov_1xpdjfyitg().s[87]++;
  return {
    ...routeMetrics,
    measureRouteChange,
    startRouteChange
  };
}
function useMemoryMonitoring() {
  /* istanbul ignore next */
  cov_1xpdjfyitg().f[29]++;
  const [memoryInfo, setMemoryInfo] =
  /* istanbul ignore next */
  (cov_1xpdjfyitg().s[88]++, (0, _react.useState)(null));
  const updateMemoryInfo =
  /* istanbul ignore next */
  (cov_1xpdjfyitg().s[89]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_1xpdjfyitg().f[30]++;
    cov_1xpdjfyitg().s[90]++;
    if ('memory' in performance) {
      /* istanbul ignore next */
      cov_1xpdjfyitg().b[3][0]++;
      const memory =
      /* istanbul ignore next */
      (cov_1xpdjfyitg().s[91]++, performance.memory);
      const used =
      /* istanbul ignore next */
      (cov_1xpdjfyitg().s[92]++, Math.round(memory.usedJSHeapSize / 1024 / 1024));
      const total =
      /* istanbul ignore next */
      (cov_1xpdjfyitg().s[93]++, Math.round(memory.totalJSHeapSize / 1024 / 1024));
      const limit =
      /* istanbul ignore next */
      (cov_1xpdjfyitg().s[94]++, Math.round(memory.jsHeapSizeLimit / 1024 / 1024));
      const percentage =
      /* istanbul ignore next */
      (cov_1xpdjfyitg().s[95]++, Math.round(used / limit * 100));
      /* istanbul ignore next */
      cov_1xpdjfyitg().s[96]++;
      setMemoryInfo({
        used,
        total,
        limit,
        percentage
      });
    } else
    /* istanbul ignore next */
    {
      cov_1xpdjfyitg().b[3][1]++;
    }
  }, []));
  /* istanbul ignore next */
  cov_1xpdjfyitg().s[97]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_1xpdjfyitg().f[31]++;
    cov_1xpdjfyitg().s[98]++;
    updateMemoryInfo();
    const interval =
    /* istanbul ignore next */
    (cov_1xpdjfyitg().s[99]++, setInterval(updateMemoryInfo, 5000)); // Update every 5 seconds
    /* istanbul ignore next */
    cov_1xpdjfyitg().s[100]++;
    return () => {
      /* istanbul ignore next */
      cov_1xpdjfyitg().f[32]++;
      cov_1xpdjfyitg().s[101]++;
      return clearInterval(interval);
    };
  }, [updateMemoryInfo]);
  /* istanbul ignore next */
  cov_1xpdjfyitg().s[102]++;
  return {
    memoryInfo,
    updateMemoryInfo,
    isMemorySupported: 'memory' in performance
  };
}
function usePerformanceMonitoring() {
  /* istanbul ignore next */
  cov_1xpdjfyitg().f[33]++;
  const webVitals =
  /* istanbul ignore next */
  (cov_1xpdjfyitg().s[103]++, useWebVitals());
  const memory =
  /* istanbul ignore next */
  (cov_1xpdjfyitg().s[104]++, useMemoryMonitoring());
  const [isMonitoring, setIsMonitoring] =
  /* istanbul ignore next */
  (cov_1xpdjfyitg().s[105]++, (0, _react.useState)(true));
  const [performanceAlerts, setPerformanceAlerts] =
  /* istanbul ignore next */
  (cov_1xpdjfyitg().s[106]++, (0, _react.useState)([]));
  // Monitor for performance issues
  /* istanbul ignore next */
  cov_1xpdjfyitg().s[107]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_1xpdjfyitg().f[34]++;
    cov_1xpdjfyitg().s[108]++;
    if (!isMonitoring) {
      /* istanbul ignore next */
      cov_1xpdjfyitg().b[4][0]++;
      cov_1xpdjfyitg().s[109]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1xpdjfyitg().b[4][1]++;
    }
    cov_1xpdjfyitg().s[110]++;
    const checkPerformance = () => {
      /* istanbul ignore next */
      cov_1xpdjfyitg().f[35]++;
      const alerts =
      /* istanbul ignore next */
      (cov_1xpdjfyitg().s[111]++, []);
      // Check Web Vitals
      /* istanbul ignore next */
      cov_1xpdjfyitg().s[112]++;
      if (
      /* istanbul ignore next */
      (cov_1xpdjfyitg().b[6][0]++, webVitals.metrics.lcp) &&
      /* istanbul ignore next */
      (cov_1xpdjfyitg().b[6][1]++, webVitals.metrics.lcp > 4000)) {
        /* istanbul ignore next */
        cov_1xpdjfyitg().b[5][0]++;
        cov_1xpdjfyitg().s[113]++;
        alerts.push({
          type: 'error',
          message: `Poor LCP: ${webVitals.metrics.lcp}ms (should be < 2500ms)`,
          timestamp: Date.now(),
          metric: 'lcp'
        });
      } else
      /* istanbul ignore next */
      {
        cov_1xpdjfyitg().b[5][1]++;
      }
      cov_1xpdjfyitg().s[114]++;
      if (
      /* istanbul ignore next */
      (cov_1xpdjfyitg().b[8][0]++, webVitals.metrics.fid) &&
      /* istanbul ignore next */
      (cov_1xpdjfyitg().b[8][1]++, webVitals.metrics.fid > 300)) {
        /* istanbul ignore next */
        cov_1xpdjfyitg().b[7][0]++;
        cov_1xpdjfyitg().s[115]++;
        alerts.push({
          type: 'error',
          message: `Poor FID: ${webVitals.metrics.fid}ms (should be < 100ms)`,
          timestamp: Date.now(),
          metric: 'fid'
        });
      } else
      /* istanbul ignore next */
      {
        cov_1xpdjfyitg().b[7][1]++;
      }
      cov_1xpdjfyitg().s[116]++;
      if (
      /* istanbul ignore next */
      (cov_1xpdjfyitg().b[10][0]++, webVitals.metrics.cls) &&
      /* istanbul ignore next */
      (cov_1xpdjfyitg().b[10][1]++, webVitals.metrics.cls > 0.25)) {
        /* istanbul ignore next */
        cov_1xpdjfyitg().b[9][0]++;
        cov_1xpdjfyitg().s[117]++;
        alerts.push({
          type: 'error',
          message: `Poor CLS: ${webVitals.metrics.cls} (should be < 0.1)`,
          timestamp: Date.now(),
          metric: 'cls'
        });
      } else
      /* istanbul ignore next */
      {
        cov_1xpdjfyitg().b[9][1]++;
      }
      // Check memory usage
      cov_1xpdjfyitg().s[118]++;
      if (
      /* istanbul ignore next */
      (cov_1xpdjfyitg().b[12][0]++, memory.memoryInfo) &&
      /* istanbul ignore next */
      (cov_1xpdjfyitg().b[12][1]++, memory.memoryInfo.percentage > 80)) {
        /* istanbul ignore next */
        cov_1xpdjfyitg().b[11][0]++;
        cov_1xpdjfyitg().s[119]++;
        alerts.push({
          type: 'warning',
          message: `High memory usage: ${memory.memoryInfo.percentage}% (${memory.memoryInfo.used}MB)`,
          timestamp: Date.now(),
          metric: 'memory'
        });
      } else
      /* istanbul ignore next */
      {
        cov_1xpdjfyitg().b[11][1]++;
      }
      cov_1xpdjfyitg().s[120]++;
      if (alerts.length > 0) {
        /* istanbul ignore next */
        cov_1xpdjfyitg().b[13][0]++;
        cov_1xpdjfyitg().s[121]++;
        setPerformanceAlerts(prev => {
          /* istanbul ignore next */
          cov_1xpdjfyitg().f[36]++;
          cov_1xpdjfyitg().s[122]++;
          return [...prev.slice(-9), ...alerts];
        }); // Keep last 10 alerts
      } else
      /* istanbul ignore next */
      {
        cov_1xpdjfyitg().b[13][1]++;
      }
    };
    const interval =
    /* istanbul ignore next */
    (cov_1xpdjfyitg().s[123]++, setInterval(checkPerformance, 10000)); // Check every 10 seconds
    /* istanbul ignore next */
    cov_1xpdjfyitg().s[124]++;
    return () => {
      /* istanbul ignore next */
      cov_1xpdjfyitg().f[37]++;
      cov_1xpdjfyitg().s[125]++;
      return clearInterval(interval);
    };
  }, [isMonitoring, webVitals.metrics, memory.memoryInfo]);
  const generateReport =
  /* istanbul ignore next */
  (cov_1xpdjfyitg().s[126]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_1xpdjfyitg().f[38]++;
    cov_1xpdjfyitg().s[127]++;
    return {
      timestamp: new Date().toISOString(),
      webVitals: webVitals.metrics,
      score: webVitals.score,
      memory: memory.memoryInfo,
      alerts: performanceAlerts,
      url: typeof window !== 'undefined' ?
      /* istanbul ignore next */
      (cov_1xpdjfyitg().b[14][0]++, window.location.href) :
      /* istanbul ignore next */
      (cov_1xpdjfyitg().b[14][1]++, ''),
      userAgent: typeof navigator !== 'undefined' ?
      /* istanbul ignore next */
      (cov_1xpdjfyitg().b[15][0]++, navigator.userAgent) :
      /* istanbul ignore next */
      (cov_1xpdjfyitg().b[15][1]++, '')
    };
  }, [webVitals, memory.memoryInfo, performanceAlerts]));
  const clearAlerts =
  /* istanbul ignore next */
  (cov_1xpdjfyitg().s[128]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_1xpdjfyitg().f[39]++;
    cov_1xpdjfyitg().s[129]++;
    setPerformanceAlerts([]);
  }, []));
  /* istanbul ignore next */
  cov_1xpdjfyitg().s[130]++;
  return {
    webVitals: webVitals.metrics,
    score: webVitals.score,
    memory: memory.memoryInfo,
    alerts: performanceAlerts,
    isMonitoring,
    setIsMonitoring,
    generateReport,
    clearAlerts,
    refresh: webVitals.refresh
  };
}
function withPerformanceTracking(WrappedComponent, componentName) {
  /* istanbul ignore next */
  cov_1xpdjfyitg().f[40]++;
  cov_1xpdjfyitg().s[131]++;
  return function PerformanceTrackedComponent(props) {
    /* istanbul ignore next */
    cov_1xpdjfyitg().f[41]++;
    const renderPerf =
    /* istanbul ignore next */
    (cov_1xpdjfyitg().s[132]++, useRenderPerformance(componentName));
    /* istanbul ignore next */
    cov_1xpdjfyitg().s[133]++;
    (0, _react.useEffect)(() => {
      /* istanbul ignore next */
      cov_1xpdjfyitg().f[42]++;
      cov_1xpdjfyitg().s[134]++;
      if (renderPerf.averageRenderTime > 16) {
        /* istanbul ignore next */
        cov_1xpdjfyitg().b[16][0]++;
        cov_1xpdjfyitg().s[135]++;
        console.warn(`Component ${componentName} average render time: ${renderPerf.averageRenderTime.toFixed(2)}ms`);
      } else
      /* istanbul ignore next */
      {
        cov_1xpdjfyitg().b[16][1]++;
      }
    }, [renderPerf.averageRenderTime]);
    /* istanbul ignore next */
    cov_1xpdjfyitg().s[136]++;
    return React.createElement(WrappedComponent, props);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,