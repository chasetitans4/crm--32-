{"version":3,"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\tests\\integration\\auth.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '../utils/testUtils';\n// MSW imports temporarily disabled\n// import { rest } from 'msw';\n// import { server } from '../mocks/server';\nimport { LoginForm } from '@/components/auth/LoginForm';\nimport { AuthProvider } from '@/contexts/AuthContext';\nimport { mockUser } from '../utils/testUtils';\n\ndescribe('Authentication Integration Tests', () => {\n  beforeEach(() => {\n    // Clear any stored auth state\n    localStorage.clear();\n    sessionStorage.clear();\n  });\n\n  describe('Login Flow', () => {\n    it('successfully logs in a user', async () => {\n      render(\n        <AuthProvider>\n          <LoginForm />\n        </AuthProvider>\n      );\n\n      // Fill in login form\n      const emailInput = screen.getByLabelText(/email/i);\n      const passwordInput = screen.getByLabelText(/password/i);\n      const submitButton = screen.getByRole('button', { name: /sign in/i });\n\n      fireEvent.change(emailInput, { target: { value: 'test@example.com' } });\n      fireEvent.change(passwordInput, { target: { value: 'password123' } });\n      fireEvent.click(submitButton);\n\n      // Wait for successful login\n      await waitFor(() => {\n        expect(screen.getByText(/welcome back/i)).toBeInTheDocument();\n      });\n\n      // Check that user data is stored\n      const storedUser = localStorage.getItem('user');\n      expect(storedUser).toBeTruthy();\n      expect(JSON.parse(storedUser!)).toMatchObject({\n        email: 'test@example.com',\n        name: 'Test User',\n      });\n    });\n\n    it('handles login errors gracefully', async () => {\n      // Override the login endpoint to return an error\n      // server.use(\n      //   rest.post('/api/auth/login', (req, res, ctx) => {\n      //     return res(\n      //       ctx.status(401),\n      //       ctx.json({\n      //         error: 'Invalid credentials',\n      //         message: 'Email or password is incorrect',\n      //       })\n      //     );\n      //   })\n      // );\n\n      render(\n        <AuthProvider>\n          <LoginForm />\n        </AuthProvider>\n      );\n\n      const emailInput = screen.getByLabelText(/email/i);\n      const passwordInput = screen.getByLabelText(/password/i);\n      const submitButton = screen.getByRole('button', { name: /sign in/i });\n\n      fireEvent.change(emailInput, { target: { value: 'wrong@example.com' } });\n      fireEvent.change(passwordInput, { target: { value: 'wrongpassword' } });\n      fireEvent.click(submitButton);\n\n      // Wait for error message\n      await waitFor(() => {\n        expect(screen.getByText(/invalid credentials/i)).toBeInTheDocument();\n      });\n\n      // Ensure no user data is stored\n      expect(localStorage.getItem('user')).toBeNull();\n    });\n\n    it('validates form inputs', async () => {\n      render(\n        <AuthProvider>\n          <LoginForm />\n        </AuthProvider>\n      );\n\n      const submitButton = screen.getByRole('button', { name: /sign in/i });\n      fireEvent.click(submitButton);\n\n      // Check for validation errors\n      await waitFor(() => {\n        expect(screen.getByText(/email is required/i)).toBeInTheDocument();\n        expect(screen.getByText(/password is required/i)).toBeInTheDocument();\n      });\n    });\n\n    it('shows loading state during login', async () => {\n      // Add delay to login endpoint\n      // server.use(\n      //   rest.post('/api/auth/login', (req, res, ctx) => {\n      //     return res(\n      //       ctx.delay(1000),\n      //       ctx.status(200),\n      //       ctx.json({\n      //         user: mockUser,\n      //         token: 'mock-jwt-token',\n      //       })\n      //     );\n      //   })\n      // );\n\n      render(\n        <AuthProvider>\n          <LoginForm />\n        </AuthProvider>\n      );\n\n      const emailInput = screen.getByLabelText(/email/i);\n      const passwordInput = screen.getByLabelText(/password/i);\n      const submitButton = screen.getByRole('button', { name: /sign in/i });\n\n      fireEvent.change(emailInput, { target: { value: 'test@example.com' } });\n      fireEvent.change(passwordInput, { target: { value: 'password123' } });\n      fireEvent.click(submitButton);\n\n      // Check loading state\n      expect(screen.getByText(/signing in/i)).toBeInTheDocument();\n      expect(submitButton).toBeDisabled();\n    });\n  });\n\n  describe('Logout Flow', () => {\n    it('successfully logs out a user', async () => {\n      // Start with authenticated user\n      localStorage.setItem('user', JSON.stringify(mockUser));\n      localStorage.setItem('token', 'mock-jwt-token');\n\n      const LogoutComponent = () => {\n        const { logout, user } = useAuth();\n        \n        return (\n          <div>\n            {user && <p>Welcome, {user.name}</p>}\n            <button onClick={logout}>Logout</button>\n          </div>\n        );\n      };\n\n      render(\n        <AuthProvider initialUser={mockUser}>\n          <LogoutComponent />\n        </AuthProvider>\n      );\n\n      // Verify user is logged in\n      expect(screen.getByText(/welcome, test user/i)).toBeInTheDocument();\n\n      // Click logout\n      const logoutButton = screen.getByRole('button', { name: /logout/i });\n      fireEvent.click(logoutButton);\n\n      // Wait for logout to complete\n      await waitFor(() => {\n        expect(screen.queryByText(/welcome, test user/i)).not.toBeInTheDocument();\n      });\n\n      // Check that user data is cleared\n      expect(localStorage.getItem('user')).toBeNull();\n      expect(localStorage.getItem('token')).toBeNull();\n    });\n\n    it('handles logout errors', async () => {\n      // Override logout endpoint to return error\n      // server.use(\n      //   rest.post('/api/auth/logout', (req, res, ctx) => {\n      //     return res(\n      //       ctx.status(500),\n      //       ctx.json({\n      //         error: 'Server Error',\n      //         message: 'Failed to logout',\n      //       })\n      //     );\n      //   })\n      // );\n\n      localStorage.setItem('user', JSON.stringify(mockUser));\n\n      const LogoutComponent = () => {\n        const { logout, user } = useAuth();\n        \n        return (\n          <div>\n            {user && <p>Welcome, {user.name}</p>}\n            <button onClick={logout}>Logout</button>\n          </div>\n        );\n      };\n\n      render(\n        <AuthProvider initialUser={mockUser}>\n          <LogoutComponent />\n        </AuthProvider>\n      );\n\n      const logoutButton = screen.getByRole('button', { name: /logout/i });\n      fireEvent.click(logoutButton);\n\n      // Even if server logout fails, local state should be cleared\n      await waitFor(() => {\n        expect(screen.queryByText(/welcome, test user/i)).not.toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Protected Routes', () => {\n    it('redirects unauthenticated users to login', async () => {\n      const ProtectedComponent = () => {\n        const { user, loading } = useAuth();\n        \n        if (loading) return <div>Loading...</div>;\n        if (!user) return <div>Please log in</div>;\n        \n        return <div>Protected Content</div>;\n      };\n\n      render(\n        <AuthProvider>\n          <ProtectedComponent />\n        </AuthProvider>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText(/please log in/i)).toBeInTheDocument();\n      });\n    });\n\n    it('allows authenticated users to access protected content', async () => {\n      const ProtectedComponent = () => {\n        const { user, loading } = useAuth();\n        \n        if (loading) return <div>Loading...</div>;\n        if (!user) return <div>Please log in</div>;\n        \n        return <div>Protected Content</div>;\n      };\n\n      render(\n        <AuthProvider initialUser={mockUser}>\n          <ProtectedComponent />\n        </AuthProvider>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText(/protected content/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Token Management', () => {\n    it('refreshes expired tokens automatically', async () => {\n      // Mock token refresh endpoint\n      // server.use(\n      //   rest.post('/api/auth/refresh', (req, res, ctx) => {\n      //     return res(\n      //       ctx.status(200),\n      //       ctx.json({\n      //         token: 'new-jwt-token',\n      //         user: mockUser,\n      //       })\n      //     );\n      //   })\n      // );\n\n      // Set expired token\n      localStorage.setItem('token', 'expired-token');\n      localStorage.setItem('user', JSON.stringify(mockUser));\n\n      const TestComponent = () => {\n        const { user } = useAuth();\n        return user ? <div>Authenticated</div> : <div>Not authenticated</div>;\n      };\n\n      render(\n        <AuthProvider>\n          <TestComponent />\n        </AuthProvider>\n      );\n\n      // Should automatically refresh token and maintain authentication\n      await waitFor(() => {\n        expect(screen.getByText(/authenticated/i)).toBeInTheDocument();\n      });\n\n      // Check that new token is stored\n      expect(localStorage.getItem('token')).toBe('new-jwt-token');\n    });\n\n    it('logs out user when token refresh fails', async () => {\n      // Mock failed token refresh\n      // server.use(\n      //   rest.post('/api/auth/refresh', (req, res, ctx) => {\n      //     return res(\n      //       ctx.status(401),\n      //       ctx.json({\n      //         error: 'Invalid refresh token',\n      //       })\n      //     );\n      //   })\n      // );\n\n      localStorage.setItem('token', 'invalid-token');\n      localStorage.setItem('user', JSON.stringify(mockUser));\n\n      const TestComponent = () => {\n        const { user } = useAuth();\n        return user ? <div>Authenticated</div> : <div>Not authenticated</div>;\n      };\n\n      render(\n        <AuthProvider>\n          <TestComponent />\n        </AuthProvider>\n      );\n\n      // Should log out user when refresh fails\n      await waitFor(() => {\n        expect(screen.getByText(/not authenticated/i)).toBeInTheDocument();\n      });\n\n      // Check that tokens are cleared\n      expect(localStorage.getItem('token')).toBeNull();\n      expect(localStorage.getItem('user')).toBeNull();\n    });\n  });\n\n  describe('Session Persistence', () => {\n    it('restores user session on page reload', async () => {\n      localStorage.setItem('user', JSON.stringify(mockUser));\n      localStorage.setItem('token', 'valid-token');\n\n      const TestComponent = () => {\n        const { user, loading } = useAuth();\n        \n        if (loading) return <div>Loading...</div>;\n        return user ? <div>Welcome back, {user.name}</div> : <div>Not logged in</div>;\n      };\n\n      render(\n        <AuthProvider>\n          <TestComponent />\n        </AuthProvider>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText(/welcome back, test user/i)).toBeInTheDocument();\n      });\n    });\n\n    it('handles corrupted session data', async () => {\n      localStorage.setItem('user', 'invalid-json');\n      localStorage.setItem('token', 'some-token');\n\n      const TestComponent = () => {\n        const { user, loading } = useAuth();\n        \n        if (loading) return <div>Loading...</div>;\n        return user ? <div>Authenticated</div> : <div>Not authenticated</div>;\n      };\n\n      render(\n        <AuthProvider>\n          <TestComponent />\n        </AuthProvider>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText(/not authenticated/i)).toBeInTheDocument();\n      });\n\n      // Should clear corrupted data\n      expect(localStorage.getItem('user')).toBeNull();\n    });\n  });\n});"],"names":["describe","beforeEach","localStorage","clear","sessionStorage","it","render","AuthProvider","LoginForm","emailInput","screen","getByLabelText","passwordInput","submitButton","getByRole","name","fireEvent","change","target","value","click","waitFor","expect","getByText","toBeInTheDocument","storedUser","getItem","toBeTruthy","JSON","parse","toMatchObject","email","toBeNull","toBeDisabled","setItem","stringify","mockUser","LogoutComponent","logout","user","useAuth","div","p","button","onClick","initialUser","logoutButton","queryByText","not","ProtectedComponent","loading","TestComponent","toBe"],"mappings":"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"}