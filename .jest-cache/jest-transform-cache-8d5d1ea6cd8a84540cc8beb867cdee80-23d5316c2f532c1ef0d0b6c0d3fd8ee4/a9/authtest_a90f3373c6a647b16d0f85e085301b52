93459021b32057ea0847a3de074449ca
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _testUtils = require("../utils/testUtils");
const _LoginForm = require("../../src/components/auth/LoginForm");
const _AuthContext = require("../../src/contexts/AuthContext");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('Authentication Integration Tests', ()=>{
    beforeEach(()=>{
        // Clear any stored auth state
        localStorage.clear();
        sessionStorage.clear();
    });
    describe('Login Flow', ()=>{
        it('successfully logs in a user', async ()=>{
            (0, _testUtils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthContext.AuthProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_LoginForm.LoginForm, {})
            }));
            // Fill in login form
            const emailInput = _testUtils.screen.getByLabelText(/email/i);
            const passwordInput = _testUtils.screen.getByLabelText(/password/i);
            const submitButton = _testUtils.screen.getByRole('button', {
                name: /sign in/i
            });
            _testUtils.fireEvent.change(emailInput, {
                target: {
                    value: 'test@example.com'
                }
            });
            _testUtils.fireEvent.change(passwordInput, {
                target: {
                    value: 'password123'
                }
            });
            _testUtils.fireEvent.click(submitButton);
            // Wait for successful login
            await (0, _testUtils.waitFor)(()=>{
                expect(_testUtils.screen.getByText(/welcome back/i)).toBeInTheDocument();
            });
            // Check that user data is stored
            const storedUser = localStorage.getItem('user');
            expect(storedUser).toBeTruthy();
            expect(JSON.parse(storedUser)).toMatchObject({
                email: 'test@example.com',
                name: 'Test User'
            });
        });
        it('handles login errors gracefully', async ()=>{
            // Override the login endpoint to return an error
            // server.use(
            //   rest.post('/api/auth/login', (req, res, ctx) => {
            //     return res(
            //       ctx.status(401),
            //       ctx.json({
            //         error: 'Invalid credentials',
            //         message: 'Email or password is incorrect',
            //       })
            //     );
            //   })
            // );
            (0, _testUtils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthContext.AuthProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_LoginForm.LoginForm, {})
            }));
            const emailInput = _testUtils.screen.getByLabelText(/email/i);
            const passwordInput = _testUtils.screen.getByLabelText(/password/i);
            const submitButton = _testUtils.screen.getByRole('button', {
                name: /sign in/i
            });
            _testUtils.fireEvent.change(emailInput, {
                target: {
                    value: 'wrong@example.com'
                }
            });
            _testUtils.fireEvent.change(passwordInput, {
                target: {
                    value: 'wrongpassword'
                }
            });
            _testUtils.fireEvent.click(submitButton);
            // Wait for error message
            await (0, _testUtils.waitFor)(()=>{
                expect(_testUtils.screen.getByText(/invalid credentials/i)).toBeInTheDocument();
            });
            // Ensure no user data is stored
            expect(localStorage.getItem('user')).toBeNull();
        });
        it('validates form inputs', async ()=>{
            (0, _testUtils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthContext.AuthProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_LoginForm.LoginForm, {})
            }));
            const submitButton = _testUtils.screen.getByRole('button', {
                name: /sign in/i
            });
            _testUtils.fireEvent.click(submitButton);
            // Check for validation errors
            await (0, _testUtils.waitFor)(()=>{
                expect(_testUtils.screen.getByText(/email is required/i)).toBeInTheDocument();
                expect(_testUtils.screen.getByText(/password is required/i)).toBeInTheDocument();
            });
        });
        it('shows loading state during login', async ()=>{
            // Add delay to login endpoint
            // server.use(
            //   rest.post('/api/auth/login', (req, res, ctx) => {
            //     return res(
            //       ctx.delay(1000),
            //       ctx.status(200),
            //       ctx.json({
            //         user: mockUser,
            //         token: 'mock-jwt-token',
            //       })
            //     );
            //   })
            // );
            (0, _testUtils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthContext.AuthProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_LoginForm.LoginForm, {})
            }));
            const emailInput = _testUtils.screen.getByLabelText(/email/i);
            const passwordInput = _testUtils.screen.getByLabelText(/password/i);
            const submitButton = _testUtils.screen.getByRole('button', {
                name: /sign in/i
            });
            _testUtils.fireEvent.change(emailInput, {
                target: {
                    value: 'test@example.com'
                }
            });
            _testUtils.fireEvent.change(passwordInput, {
                target: {
                    value: 'password123'
                }
            });
            _testUtils.fireEvent.click(submitButton);
            // Check loading state
            expect(_testUtils.screen.getByText(/signing in/i)).toBeInTheDocument();
            expect(submitButton).toBeDisabled();
        });
    });
    describe('Logout Flow', ()=>{
        it('successfully logs out a user', async ()=>{
            // Start with authenticated user
            localStorage.setItem('user', JSON.stringify(_testUtils.mockUser));
            localStorage.setItem('token', 'mock-jwt-token');
            const LogoutComponent = ()=>{
                const { logout, user } = useAuth();
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        user && /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                            children: [
                                "Welcome, ",
                                user.name
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                            onClick: logout,
                            children: "Logout"
                        })
                    ]
                });
            };
            (0, _testUtils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthContext.AuthProvider, {
                initialUser: _testUtils.mockUser,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(LogoutComponent, {})
            }));
            // Verify user is logged in
            expect(_testUtils.screen.getByText(/welcome, test user/i)).toBeInTheDocument();
            // Click logout
            const logoutButton = _testUtils.screen.getByRole('button', {
                name: /logout/i
            });
            _testUtils.fireEvent.click(logoutButton);
            // Wait for logout to complete
            await (0, _testUtils.waitFor)(()=>{
                expect(_testUtils.screen.queryByText(/welcome, test user/i)).not.toBeInTheDocument();
            });
            // Check that user data is cleared
            expect(localStorage.getItem('user')).toBeNull();
            expect(localStorage.getItem('token')).toBeNull();
        });
        it('handles logout errors', async ()=>{
            // Override logout endpoint to return error
            // server.use(
            //   rest.post('/api/auth/logout', (req, res, ctx) => {
            //     return res(
            //       ctx.status(500),
            //       ctx.json({
            //         error: 'Server Error',
            //         message: 'Failed to logout',
            //       })
            //     );
            //   })
            // );
            localStorage.setItem('user', JSON.stringify(_testUtils.mockUser));
            const LogoutComponent = ()=>{
                const { logout, user } = useAuth();
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        user && /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                            children: [
                                "Welcome, ",
                                user.name
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                            onClick: logout,
                            children: "Logout"
                        })
                    ]
                });
            };
            (0, _testUtils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthContext.AuthProvider, {
                initialUser: _testUtils.mockUser,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(LogoutComponent, {})
            }));
            const logoutButton = _testUtils.screen.getByRole('button', {
                name: /logout/i
            });
            _testUtils.fireEvent.click(logoutButton);
            // Even if server logout fails, local state should be cleared
            await (0, _testUtils.waitFor)(()=>{
                expect(_testUtils.screen.queryByText(/welcome, test user/i)).not.toBeInTheDocument();
            });
        });
    });
    describe('Protected Routes', ()=>{
        it('redirects unauthenticated users to login', async ()=>{
            const ProtectedComponent = ()=>{
                const { user, loading } = useAuth();
                if (loading) return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Loading..."
                });
                if (!user) return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Please log in"
                });
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Protected Content"
                });
            };
            (0, _testUtils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthContext.AuthProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ProtectedComponent, {})
            }));
            await (0, _testUtils.waitFor)(()=>{
                expect(_testUtils.screen.getByText(/please log in/i)).toBeInTheDocument();
            });
        });
        it('allows authenticated users to access protected content', async ()=>{
            const ProtectedComponent = ()=>{
                const { user, loading } = useAuth();
                if (loading) return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Loading..."
                });
                if (!user) return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Please log in"
                });
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Protected Content"
                });
            };
            (0, _testUtils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthContext.AuthProvider, {
                initialUser: _testUtils.mockUser,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ProtectedComponent, {})
            }));
            await (0, _testUtils.waitFor)(()=>{
                expect(_testUtils.screen.getByText(/protected content/i)).toBeInTheDocument();
            });
        });
    });
    describe('Token Management', ()=>{
        it('refreshes expired tokens automatically', async ()=>{
            // Mock token refresh endpoint
            // server.use(
            //   rest.post('/api/auth/refresh', (req, res, ctx) => {
            //     return res(
            //       ctx.status(200),
            //       ctx.json({
            //         token: 'new-jwt-token',
            //         user: mockUser,
            //       })
            //     );
            //   })
            // );
            // Set expired token
            localStorage.setItem('token', 'expired-token');
            localStorage.setItem('user', JSON.stringify(_testUtils.mockUser));
            const TestComponent = ()=>{
                const { user } = useAuth();
                return user ? /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Authenticated"
                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Not authenticated"
                });
            };
            (0, _testUtils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthContext.AuthProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            // Should automatically refresh token and maintain authentication
            await (0, _testUtils.waitFor)(()=>{
                expect(_testUtils.screen.getByText(/authenticated/i)).toBeInTheDocument();
            });
            // Check that new token is stored
            expect(localStorage.getItem('token')).toBe('new-jwt-token');
        });
        it('logs out user when token refresh fails', async ()=>{
            // Mock failed token refresh
            // server.use(
            //   rest.post('/api/auth/refresh', (req, res, ctx) => {
            //     return res(
            //       ctx.status(401),
            //       ctx.json({
            //         error: 'Invalid refresh token',
            //       })
            //     );
            //   })
            // );
            localStorage.setItem('token', 'invalid-token');
            localStorage.setItem('user', JSON.stringify(_testUtils.mockUser));
            const TestComponent = ()=>{
                const { user } = useAuth();
                return user ? /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Authenticated"
                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Not authenticated"
                });
            };
            (0, _testUtils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthContext.AuthProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            // Should log out user when refresh fails
            await (0, _testUtils.waitFor)(()=>{
                expect(_testUtils.screen.getByText(/not authenticated/i)).toBeInTheDocument();
            });
            // Check that tokens are cleared
            expect(localStorage.getItem('token')).toBeNull();
            expect(localStorage.getItem('user')).toBeNull();
        });
    });
    describe('Session Persistence', ()=>{
        it('restores user session on page reload', async ()=>{
            localStorage.setItem('user', JSON.stringify(_testUtils.mockUser));
            localStorage.setItem('token', 'valid-token');
            const TestComponent = ()=>{
                const { user, loading } = useAuth();
                if (loading) return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Loading..."
                });
                return user ? /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        "Welcome back, ",
                        user.name
                    ]
                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Not logged in"
                });
            };
            (0, _testUtils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthContext.AuthProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            await (0, _testUtils.waitFor)(()=>{
                expect(_testUtils.screen.getByText(/welcome back, test user/i)).toBeInTheDocument();
            });
        });
        it('handles corrupted session data', async ()=>{
            localStorage.setItem('user', 'invalid-json');
            localStorage.setItem('token', 'some-token');
            const TestComponent = ()=>{
                const { user, loading } = useAuth();
                if (loading) return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Loading..."
                });
                return user ? /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Authenticated"
                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Not authenticated"
                });
            };
            (0, _testUtils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthContext.AuthProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            }));
            await (0, _testUtils.waitFor)(()=>{
                expect(_testUtils.screen.getByText(/not authenticated/i)).toBeInTheDocument();
            });
            // Should clear corrupted data
            expect(localStorage.getItem('user')).toBeNull();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,