011e230e4af9fda545dacc6c9d9414f0
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
require("@testing-library/jest-dom");
const _ContractFieldInput = /*#__PURE__*/ _interop_require_default(require("../../components/forms/ContractFieldInput"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe("ContractFieldInput", ()=>{
    const mockOnChange = jest.fn();
    beforeEach(()=>{
        mockOnChange.mockClear();
    });
    it("renders text input correctly", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ContractFieldInput.default, {
            type: "text",
            name: "test",
            value: "test value",
            onChange: mockOnChange,
            "data-testid": "test-input"
        }));
        const input = _react.screen.getByTestId("test-input");
        expect(input).toBeInTheDocument();
        expect(input).toHaveValue("test value");
    });
    it("calls onChange when value changes", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ContractFieldInput.default, {
            type: "text",
            name: "test",
            value: "",
            onChange: mockOnChange,
            "data-testid": "test-input"
        }));
        const input = _react.screen.getByTestId("test-input");
        _react.fireEvent.change(input, {
            target: {
                value: "new value"
            }
        });
        expect(mockOnChange).toHaveBeenCalledWith("new value");
    });
    it("renders textarea when type is textarea", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ContractFieldInput.default, {
            type: "textarea",
            name: "test",
            value: "textarea value",
            onChange: mockOnChange,
            "data-testid": "test-textarea"
        }));
        const textarea = _react.screen.getByTestId("test-textarea");
        expect(textarea.tagName).toBe("TEXTAREA");
        expect(textarea).toHaveValue("textarea value");
    });
    it("applies disabled state correctly", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ContractFieldInput.default, {
            type: "text",
            name: "test",
            value: "",
            onChange: mockOnChange,
            disabled: true,
            "data-testid": "test-input"
        }));
        const input = _react.screen.getByTestId("test-input");
        expect(input).toBeDisabled();
        expect(input).toHaveClass("bg-gray-100", "cursor-not-allowed");
    });
    it("applies required attribute correctly", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ContractFieldInput.default, {
            type: "text",
            name: "test",
            value: "",
            onChange: mockOnChange,
            required: true,
            "data-testid": "test-input"
        }));
        const input = _react.screen.getByTestId("test-input");
        expect(input).toBeRequired();
    });
    it("applies custom className", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ContractFieldInput.default, {
            type: "text",
            name: "test",
            value: "",
            onChange: mockOnChange,
            className: "custom-class",
            "data-testid": "test-input"
        }));
        const input = _react.screen.getByTestId("test-input");
        expect(input).toHaveClass("custom-class");
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcY2hhc2VcXERvd25sb2Fkc1xcY3JtICgzMilcXHNyY1xcX190ZXN0c19fXFxjb21wb25lbnRzXFxDb250cmFjdEZpZWxkSW5wdXQudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCJcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnQgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdFwiXG5pbXBvcnQgXCJAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tXCJcbmltcG9ydCBDb250cmFjdEZpZWxkSW5wdXQgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvZm9ybXMvQ29udHJhY3RGaWVsZElucHV0XCJcblxuZGVzY3JpYmUoXCJDb250cmFjdEZpZWxkSW5wdXRcIiwgKCkgPT4ge1xuICBjb25zdCBtb2NrT25DaGFuZ2UgPSBqZXN0LmZuKClcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBtb2NrT25DaGFuZ2UubW9ja0NsZWFyKClcbiAgfSlcblxuICBpdChcInJlbmRlcnMgdGV4dCBpbnB1dCBjb3JyZWN0bHlcIiwgKCkgPT4ge1xuICAgIHJlbmRlcihcbiAgICAgIDxDb250cmFjdEZpZWxkSW5wdXRcbiAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICBuYW1lPVwidGVzdFwiXG4gICAgICAgIHZhbHVlPVwidGVzdCB2YWx1ZVwiXG4gICAgICAgIG9uQ2hhbmdlPXttb2NrT25DaGFuZ2V9XG4gICAgICAgIGRhdGEtdGVzdGlkPVwidGVzdC1pbnB1dFwiXG4gICAgICAvPixcbiAgICApXG5cbiAgICBjb25zdCBpbnB1dCA9IHNjcmVlbi5nZXRCeVRlc3RJZChcInRlc3QtaW5wdXRcIilcbiAgICBleHBlY3QoaW5wdXQpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICBleHBlY3QoaW5wdXQpLnRvSGF2ZVZhbHVlKFwidGVzdCB2YWx1ZVwiKVxuICB9KVxuXG4gIGl0KFwiY2FsbHMgb25DaGFuZ2Ugd2hlbiB2YWx1ZSBjaGFuZ2VzXCIsICgpID0+IHtcbiAgICByZW5kZXIoPENvbnRyYWN0RmllbGRJbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ0ZXN0XCIgdmFsdWU9XCJcIiBvbkNoYW5nZT17bW9ja09uQ2hhbmdlfSBkYXRhLXRlc3RpZD1cInRlc3QtaW5wdXRcIiAvPilcblxuICAgIGNvbnN0IGlucHV0ID0gc2NyZWVuLmdldEJ5VGVzdElkKFwidGVzdC1pbnB1dFwiKVxuICAgIGZpcmVFdmVudC5jaGFuZ2UoaW5wdXQsIHsgdGFyZ2V0OiB7IHZhbHVlOiBcIm5ldyB2YWx1ZVwiIH0gfSlcblxuICAgIGV4cGVjdChtb2NrT25DaGFuZ2UpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFwibmV3IHZhbHVlXCIpXG4gIH0pXG5cbiAgaXQoXCJyZW5kZXJzIHRleHRhcmVhIHdoZW4gdHlwZSBpcyB0ZXh0YXJlYVwiLCAoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPENvbnRyYWN0RmllbGRJbnB1dFxuICAgICAgICB0eXBlPVwidGV4dGFyZWFcIlxuICAgICAgICBuYW1lPVwidGVzdFwiXG4gICAgICAgIHZhbHVlPVwidGV4dGFyZWEgdmFsdWVcIlxuICAgICAgICBvbkNoYW5nZT17bW9ja09uQ2hhbmdlfVxuICAgICAgICBkYXRhLXRlc3RpZD1cInRlc3QtdGV4dGFyZWFcIlxuICAgICAgLz4sXG4gICAgKVxuXG4gICAgY29uc3QgdGV4dGFyZWEgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoXCJ0ZXN0LXRleHRhcmVhXCIpXG4gICAgZXhwZWN0KHRleHRhcmVhLnRhZ05hbWUpLnRvQmUoXCJURVhUQVJFQVwiKVxuICAgIGV4cGVjdCh0ZXh0YXJlYSkudG9IYXZlVmFsdWUoXCJ0ZXh0YXJlYSB2YWx1ZVwiKVxuICB9KVxuXG4gIGl0KFwiYXBwbGllcyBkaXNhYmxlZCBzdGF0ZSBjb3JyZWN0bHlcIiwgKCkgPT4ge1xuICAgIHJlbmRlcihcbiAgICAgIDxDb250cmFjdEZpZWxkSW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidGVzdFwiIHZhbHVlPVwiXCIgb25DaGFuZ2U9e21vY2tPbkNoYW5nZX0gZGlzYWJsZWQgZGF0YS10ZXN0aWQ9XCJ0ZXN0LWlucHV0XCIgLz4sXG4gICAgKVxuXG4gICAgY29uc3QgaW5wdXQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoXCJ0ZXN0LWlucHV0XCIpXG4gICAgZXhwZWN0KGlucHV0KS50b0JlRGlzYWJsZWQoKVxuICAgIGV4cGVjdChpbnB1dCkudG9IYXZlQ2xhc3MoXCJiZy1ncmF5LTEwMFwiLCBcImN1cnNvci1ub3QtYWxsb3dlZFwiKVxuICB9KVxuXG4gIGl0KFwiYXBwbGllcyByZXF1aXJlZCBhdHRyaWJ1dGUgY29ycmVjdGx5XCIsICgpID0+IHtcbiAgICByZW5kZXIoXG4gICAgICA8Q29udHJhY3RGaWVsZElucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInRlc3RcIiB2YWx1ZT1cIlwiIG9uQ2hhbmdlPXttb2NrT25DaGFuZ2V9IHJlcXVpcmVkIGRhdGEtdGVzdGlkPVwidGVzdC1pbnB1dFwiIC8+LFxuICAgIClcblxuICAgIGNvbnN0IGlucHV0ID0gc2NyZWVuLmdldEJ5VGVzdElkKFwidGVzdC1pbnB1dFwiKVxuICAgIGV4cGVjdChpbnB1dCkudG9CZVJlcXVpcmVkKClcbiAgfSlcblxuICBpdChcImFwcGxpZXMgY3VzdG9tIGNsYXNzTmFtZVwiLCAoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPENvbnRyYWN0RmllbGRJbnB1dFxuICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgIG5hbWU9XCJ0ZXN0XCJcbiAgICAgICAgdmFsdWU9XCJcIlxuICAgICAgICBvbkNoYW5nZT17bW9ja09uQ2hhbmdlfVxuICAgICAgICBjbGFzc05hbWU9XCJjdXN0b20tY2xhc3NcIlxuICAgICAgICBkYXRhLXRlc3RpZD1cInRlc3QtaW5wdXRcIlxuICAgICAgLz4sXG4gICAgKVxuXG4gICAgY29uc3QgaW5wdXQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoXCJ0ZXN0LWlucHV0XCIpXG4gICAgZXhwZWN0KGlucHV0KS50b0hhdmVDbGFzcyhcImN1c3RvbS1jbGFzc1wiKVxuICB9KVxufSlcbiJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIm1vY2tPbkNoYW5nZSIsImplc3QiLCJmbiIsImJlZm9yZUVhY2giLCJtb2NrQ2xlYXIiLCJpdCIsInJlbmRlciIsIkNvbnRyYWN0RmllbGRJbnB1dCIsInR5cGUiLCJuYW1lIiwidmFsdWUiLCJvbkNoYW5nZSIsImRhdGEtdGVzdGlkIiwiaW5wdXQiLCJzY3JlZW4iLCJnZXRCeVRlc3RJZCIsImV4cGVjdCIsInRvQmVJblRoZURvY3VtZW50IiwidG9IYXZlVmFsdWUiLCJmaXJlRXZlbnQiLCJjaGFuZ2UiLCJ0YXJnZXQiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsInRleHRhcmVhIiwidGFnTmFtZSIsInRvQmUiLCJkaXNhYmxlZCIsInRvQmVEaXNhYmxlZCIsInRvSGF2ZUNsYXNzIiwicmVxdWlyZWQiLCJ0b0JlUmVxdWlyZWQiLCJjbGFzc05hbWUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7dUJBQzBDO1FBQ25DOzJFQUN3Qjs7Ozs7O0FBRS9CQSxTQUFTLHNCQUFzQjtJQUM3QixNQUFNQyxlQUFlQyxLQUFLQyxFQUFFO0lBRTVCQyxXQUFXO1FBQ1RILGFBQWFJLFNBQVM7SUFDeEI7SUFFQUMsR0FBRyxnQ0FBZ0M7UUFDakNDLElBQUFBLGFBQU0sZ0JBQ0oscUJBQUNDLDJCQUFrQjtZQUNqQkMsTUFBSztZQUNMQyxNQUFLO1lBQ0xDLE9BQU07WUFDTkMsVUFBVVg7WUFDVlksZUFBWTs7UUFJaEIsTUFBTUMsUUFBUUMsYUFBTSxDQUFDQyxXQUFXLENBQUM7UUFDakNDLE9BQU9ILE9BQU9JLGlCQUFpQjtRQUMvQkQsT0FBT0gsT0FBT0ssV0FBVyxDQUFDO0lBQzVCO0lBRUFiLEdBQUcscUNBQXFDO1FBQ3RDQyxJQUFBQSxhQUFNLGdCQUFDLHFCQUFDQywyQkFBa0I7WUFBQ0MsTUFBSztZQUFPQyxNQUFLO1lBQU9DLE9BQU07WUFBR0MsVUFBVVg7WUFBY1ksZUFBWTs7UUFFaEcsTUFBTUMsUUFBUUMsYUFBTSxDQUFDQyxXQUFXLENBQUM7UUFDakNJLGdCQUFTLENBQUNDLE1BQU0sQ0FBQ1AsT0FBTztZQUFFUSxRQUFRO2dCQUFFWCxPQUFPO1lBQVk7UUFBRTtRQUV6RE0sT0FBT2hCLGNBQWNzQixvQkFBb0IsQ0FBQztJQUM1QztJQUVBakIsR0FBRywwQ0FBMEM7UUFDM0NDLElBQUFBLGFBQU0sZ0JBQ0oscUJBQUNDLDJCQUFrQjtZQUNqQkMsTUFBSztZQUNMQyxNQUFLO1lBQ0xDLE9BQU07WUFDTkMsVUFBVVg7WUFDVlksZUFBWTs7UUFJaEIsTUFBTVcsV0FBV1QsYUFBTSxDQUFDQyxXQUFXLENBQUM7UUFDcENDLE9BQU9PLFNBQVNDLE9BQU8sRUFBRUMsSUFBSSxDQUFDO1FBQzlCVCxPQUFPTyxVQUFVTCxXQUFXLENBQUM7SUFDL0I7SUFFQWIsR0FBRyxvQ0FBb0M7UUFDckNDLElBQUFBLGFBQU0sZ0JBQ0oscUJBQUNDLDJCQUFrQjtZQUFDQyxNQUFLO1lBQU9DLE1BQUs7WUFBT0MsT0FBTTtZQUFHQyxVQUFVWDtZQUFjMEIsUUFBUTtZQUFDZCxlQUFZOztRQUdwRyxNQUFNQyxRQUFRQyxhQUFNLENBQUNDLFdBQVcsQ0FBQztRQUNqQ0MsT0FBT0gsT0FBT2MsWUFBWTtRQUMxQlgsT0FBT0gsT0FBT2UsV0FBVyxDQUFDLGVBQWU7SUFDM0M7SUFFQXZCLEdBQUcsd0NBQXdDO1FBQ3pDQyxJQUFBQSxhQUFNLGdCQUNKLHFCQUFDQywyQkFBa0I7WUFBQ0MsTUFBSztZQUFPQyxNQUFLO1lBQU9DLE9BQU07WUFBR0MsVUFBVVg7WUFBYzZCLFFBQVE7WUFBQ2pCLGVBQVk7O1FBR3BHLE1BQU1DLFFBQVFDLGFBQU0sQ0FBQ0MsV0FBVyxDQUFDO1FBQ2pDQyxPQUFPSCxPQUFPaUIsWUFBWTtJQUM1QjtJQUVBekIsR0FBRyw0QkFBNEI7UUFDN0JDLElBQUFBLGFBQU0sZ0JBQ0oscUJBQUNDLDJCQUFrQjtZQUNqQkMsTUFBSztZQUNMQyxNQUFLO1lBQ0xDLE9BQU07WUFDTkMsVUFBVVg7WUFDVitCLFdBQVU7WUFDVm5CLGVBQVk7O1FBSWhCLE1BQU1DLFFBQVFDLGFBQU0sQ0FBQ0MsV0FBVyxDQUFDO1FBQ2pDQyxPQUFPSCxPQUFPZSxXQUFXLENBQUM7SUFDNUI7QUFDRiJ9