{"version":3,"names":["cov_jdujg0y4n","actualCoverage","s","databaseService","isRealSupabaseConnection","f","supabaseUrl","process","env","NEXT_PUBLIC_SUPABASE_URL","supabaseKey","NEXT_PUBLIC_SUPABASE_ANON_KEY","b","includes","DatabaseService","getClients","_supabase","supabase","id","name","email","phone","company","status","stage","value","source","notes","projects","custom_fields","created_at","Date","toISOString","updated_at","data","error","from","select","order","ascending","Error","message","getClientById","eq","single","code","createClient","client","insert","updateClient","updates","update","deleteClient","delete","searchClients","query","sanitizedQuery","_security","sanitizeSearchQuery","or","console","getTasks","title","description","priority","due_date","client_id","assigned_to","tags","time_estimate","time_spent","getTaskById","createTask","task","updateTask","deleteTask","getTasksByClient","clientId","getEvents","start_date","end_date","type","location","attendees","getEventById","createEvent","event","updateEvent","deleteEvent","getEventsByDateRange","startDate","endDate","gte","lte","getUsers","getUserById","createUser","user","updateUser","deleteUser","getCustomFields","entityType","createCustomField","field","updateCustomField","deleteCustomField","getSalesStages","color","createSalesStage","updateSalesStage","deleteSalesStage","getEmails","createEmail","updateEmail","getEmailsByClient","getApiKeys","userId","createApiKey","apiKey","updateApiKey","deleteApiKey","getClientStats","clientData","stats","total","length","totalValue","reduce","sum","byStatus","byStage","forEach","getTaskStats","taskData","byPriority","subscribeToClients","callback","channel","on","schema","table","subscribe","subscribeToTasks","subscribeToEvents"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\database.ts"],"sourcesContent":["import { supabase, Database } from \"../lib/supabase\"\nimport { sanitizeSearchQuery, encryptApiKey, decryptApiKey } from \"../utils/security\"\n\n// Helper types for database operations\ntype Inserts<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Insert\"]\ntype Updates<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Update\"]\ntype Rows<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Row\"]\n\n// Database types (using Supabase generated types)\nexport type Client = Database['public']['Tables']['clients']['Row']\nexport type Task = Database['public']['Tables']['tasks']['Row']\nexport type Event = Database['public']['Tables']['events']['Row']\nexport type User = Database['public']['Tables']['users']['Row']\nexport type CustomField = Database['public']['Tables']['custom_fields']['Row']\nexport type SalesStage = Database['public']['Tables']['sales_stages']['Row']\nexport type Email = Database['public']['Tables']['emails']['Row']\nexport type ApiKey = Database['public']['Tables']['api_keys']['Row']\n// Export insert and update data types for convenience\nexport type ClientInsertData = Inserts<\"clients\">\nexport type ClientUpdateData = Updates<\"clients\">\nexport type TaskInsertData = Inserts<\"tasks\">\nexport type TaskUpdateData = Updates<\"tasks\">\n\n// Helper function to check if we have a real Supabase connection\nconst isRealSupabaseConnection = () => {\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\n  const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n  return supabaseUrl && supabaseKey && !supabaseUrl.includes(\"your-project\") && !supabaseKey.includes(\"your-anon-key\")\n}\n\nclass DatabaseService {\n  // Client operations\n  async getClients(): Promise<Client[]> {\n    if (!supabase || !isRealSupabaseConnection()) {\n      // Return mock data\n      return [\n        {\n          id: \"1\",\n          name: \"Acme Corp\",\n          email: \"john@acme.com\",\n          phone: \"555-0123\",\n          company: \"Acme Corporation\",\n          status: \"active\",\n          stage: \"1\",\n          value: 5000,\n          source: \"Website\",\n          notes: \"Initial consultation completed\",\n          projects: [],\n          custom_fields: {},\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        },\n        {\n          id: \"2\",\n          name: \"Tech Solutions\",\n          email: \"sarah@techsolutions.com\",\n          phone: \"555-0456\",\n          company: \"Tech Solutions Inc\",\n          status: \"active\",\n          stage: \"3\",\n          value: 12000,\n          source: \"Referral\",\n          notes: \"Proposal sent\",\n          projects: [],\n          custom_fields: {},\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        },\n      ]\n    }\n\n    const { data, error } = await (supabase as any).from(\"clients\").select(\"*\").order(\"created_at\", { ascending: false })\n\n    if (error) throw new Error(`Failed to fetch clients: ${error.message}`)\n    return data || []\n  }\n\n  async getClientById(id: string): Promise<Client | null> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"clients\").select(\"*\").eq(\"id\", id).single()\n\n    if (error && error.code !== \"PGRST116\") {\n      throw new Error(`Failed to fetch client: ${error.message}`)\n    }\n    return data\n  }\n\n  async createClient(client: Inserts<\"clients\">): Promise<Client> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"clients\")\n      .insert({\n        ...client,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      })\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to create client: ${error.message}`)\n    return data\n  }\n\n  async updateClient(id: string, updates: Updates<\"clients\">): Promise<Client> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"clients\")\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"id\", id)\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to update client: ${error.message}`)\n    return data\n  }\n\n  async deleteClient(id: string): Promise<void> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { error } = await (supabase as any).from(\"clients\").delete().eq(\"id\", id)\n\n    if (error) throw new Error(`Failed to delete client: ${error.message}`)\n  }\n\n  async searchClients(query: string): Promise<Client[]> {\n    if (!supabase) throw new Error('Database not initialized')\n    const sanitizedQuery = sanitizeSearchQuery(query)\n    const { data, error } = await (supabase as any)\n      .from(\"clients\")\n      .select(\"*\")\n      .or(`name.ilike.%${sanitizedQuery}%,email.ilike.%${sanitizedQuery}%,company.ilike.%${sanitizedQuery}%`)\n      .order(\"created_at\", { ascending: false })\n\n    if (error) {\n      console.error('Database search error:', error)\n      throw new Error('Failed to search clients')\n    }\n    return data || []\n  }\n\n  // Task operations\n  async getTasks(): Promise<Task[]> {\n    if (!supabase || !isRealSupabaseConnection()) {\n      // Return mock data\n      return [\n        {\n          id: \"1\",\n          title: \"Design Homepage\",\n          description: \"Create homepage design mockup\",\n          status: \"pending\",\n          priority: \"high\",\n          due_date: \"2024-02-15\",\n          client_id: \"1\",\n          assigned_to: \"John Doe\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n          tags: [\"design\", \"homepage\"],\n          time_estimate: 8,\n          time_spent: 0,\n        },\n        {\n          id: \"2\",\n          title: \"Client Review\",\n          description: \"Review client feedback\",\n          status: \"completed\",\n          priority: \"medium\",\n          due_date: \"2024-02-20\",\n          client_id: \"2\",\n          assigned_to: \"Jane Smith\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n          tags: [\"review\", \"client\"],\n          time_estimate: 4,\n          time_spent: 3,\n        },\n      ]\n    }\n\n    const { data, error } = await (supabase as any).from(\"tasks\").select(\"*\").order(\"created_at\", { ascending: false })\n\n    if (error) throw new Error(`Failed to fetch tasks: ${error.message}`)\n    return data || []\n  }\n\n  async getTaskById(id: string): Promise<Task | null> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"tasks\").select(\"*\").eq(\"id\", id).single()\n\n    if (error && error.code !== \"PGRST116\") {\n      throw new Error(`Failed to fetch task: ${error.message}`)\n    }\n    return data\n  }\n\n  async createTask(task: Inserts<\"tasks\">): Promise<Task> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"tasks\")\n      .insert({\n        ...task,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      })\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to create task: ${error.message}`)\n    return data\n  }\n\n  async updateTask(id: string, updates: Updates<\"tasks\">): Promise<Task> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"tasks\")\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"id\", id)\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to update task: ${error.message}`)\n    return data\n  }\n\n  async deleteTask(id: string): Promise<void> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { error } = await (supabase as any).from(\"tasks\").delete().eq(\"id\", id)\n\n    if (error) throw new Error(`Failed to delete task: ${error.message}`)\n  }\n\n  async getTasksByClient(clientId: string): Promise<Task[]> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"tasks\")\n      .select(\"*\")\n      .eq(\"client_id\", clientId)\n      .order(\"created_at\", { ascending: false })\n\n    if (error) throw new Error(`Failed to fetch client tasks: ${error.message}`)\n    return data || []\n  }\n\n  // Event operations\n  async getEvents(): Promise<Event[]> {\n    if (!supabase || !isRealSupabaseConnection()) {\n      // Return mock data\n      return [\n        {\n          id: \"1\",\n          title: \"Client Meeting\",\n          description: \"Discuss project requirements\",\n          start_date: \"2024-02-15T10:00:00Z\",\n          end_date: \"2024-02-15T11:00:00Z\",\n          type: \"meeting\",\n          client_id: \"1\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n          location: \"Conference Room A\",\n          attendees: [\"john@techcorp.com\", \"sarah@company.com\"],\n        },\n        {\n          id: \"2\",\n          title: \"Follow-up Call\",\n          description: \"Check on project progress\",\n          start_date: \"2024-02-18T14:00:00Z\",\n          end_date: \"2024-02-18T14:30:00Z\",\n          type: \"call\",\n          client_id: \"2\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n          location: \"Phone Call\",\n          attendees: [\"mike@marketing.com\"],\n        },\n      ]\n    }\n\n    const { data, error } = await (supabase as any).from(\"events\").select(\"*\").order(\"start_date\", { ascending: true })\n\n    if (error) throw new Error(`Failed to fetch events: ${error.message}`)\n    return data || []\n  }\n\n  async getEventById(id: string): Promise<Event | null> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"events\").select(\"*\").eq(\"id\", id).single()\n\n    if (error && error.code !== \"PGRST116\") {\n      throw new Error(`Failed to fetch event: ${error.message}`)\n    }\n    return data\n  }\n\n  async createEvent(event: Inserts<\"events\">): Promise<Event> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"events\")\n      .insert({\n        ...event,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      })\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to create event: ${error.message}`)\n    return data\n  }\n\n  async updateEvent(id: string, updates: Updates<\"events\">): Promise<Event> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"events\")\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"id\", id)\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to update event: ${error.message}`)\n    return data\n  }\n\n  async deleteEvent(id: string): Promise<void> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { error } = await (supabase as any).from(\"events\").delete().eq(\"id\", id)\n\n    if (error) throw new Error(`Failed to delete event: ${error.message}`)\n  }\n\n  async getEventsByDateRange(startDate: string, endDate: string): Promise<Event[]> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"events\")\n      .select(\"*\")\n      .gte(\"start_date\", startDate)\n      .lte(\"end_date\", endDate)\n      .order(\"start_date\", { ascending: true })\n\n    if (error) throw new Error(`Failed to fetch events by date range: ${error.message}`)\n    return data || []\n  }\n\n  // User operations\n  async getUsers(): Promise<User[]> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"users\").select(\"*\").order(\"created_at\", { ascending: false })\n\n    if (error) throw new Error(`Failed to fetch users: ${error.message}`)\n    return data || []\n  }\n\n  async getUserById(id: string): Promise<User | null> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"users\").select(\"*\").eq(\"id\", id).single()\n\n    if (error && error.code !== \"PGRST116\") {\n      throw new Error(`Failed to fetch user: ${error.message}`)\n    }\n    return data\n  }\n\n  async createUser(user: Inserts<\"users\">): Promise<User> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"users\")\n      .insert({\n        ...user,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      })\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to create user: ${error.message}`)\n    return data\n  }\n\n  async updateUser(id: string, updates: Updates<\"users\">): Promise<User> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"users\")\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"id\", id)\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to update user: ${error.message}`)\n    return data\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { error } = await (supabase as any).from(\"users\").delete().eq(\"id\", id)\n\n    if (error) throw new Error(`Failed to delete user: ${error.message}`)\n  }\n\n  // Custom Fields operations\n  async getCustomFields(entityType?: string): Promise<CustomField[]> {\n    if (!supabase) throw new Error('Database not initialized')\n    let query = (supabase as any).from(\"custom_fields\").select(\"*\")\n\n    if (entityType) {\n      query = query.eq(\"entity_type\", entityType)\n    }\n\n    const { data, error } = await query.order(\"created_at\", { ascending: false })\n\n    if (error) throw new Error(`Failed to fetch custom fields: ${error.message}`)\n    return data || []\n  }\n\n  async createCustomField(field: Inserts<\"custom_fields\">): Promise<CustomField> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"custom_fields\")\n      .insert({\n        ...field,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      })\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to create custom field: ${error.message}`)\n    return data\n  }\n\n  async updateCustomField(id: string, updates: Updates<\"custom_fields\">): Promise<CustomField> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"custom_fields\")\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"id\", id)\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to update custom field: ${error.message}`)\n    return data\n  }\n\n  async deleteCustomField(id: string): Promise<void> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { error } = await (supabase as any).from(\"custom_fields\").delete().eq(\"id\", id)\n\n    if (error) throw new Error(`Failed to delete custom field: ${error.message}`)\n  }\n\n  // Sales Stages operations\n  async getSalesStages(): Promise<SalesStage[]> {\n    if (!supabase || !isRealSupabaseConnection()) {\n      // Return mock data\n      return [\n        {\n          id: \"1\",\n          name: \"Lead\",\n          color: \"#3B82F6\",\n          order: 1,\n          description: \"Initial lead stage\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        },\n        {\n          id: \"2\",\n          name: \"Qualified\",\n          color: \"#8B5CF6\",\n          order: 2,\n          description: \"Qualified prospect\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        },\n        {\n          id: \"3\",\n          name: \"Proposal\",\n          color: \"#F59E0B\",\n          order: 3,\n          description: \"Proposal sent\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        },\n        {\n          id: \"4\",\n          name: \"Negotiation\",\n          color: \"#F97316\",\n          order: 4,\n          description: \"In negotiation\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        },\n        {\n          id: \"5\",\n          name: \"Closed Won\",\n          color: \"#10B981\",\n          order: 5,\n          description: \"Deal closed successfully\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        },\n        {\n          id: \"6\",\n          name: \"Closed Lost\",\n          color: \"#EF4444\",\n          order: 6,\n          description: \"Deal lost\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        },\n      ]\n    }\n\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"sales_stages\").select(\"*\").order(\"order\", { ascending: true })\n\n    if (error) throw new Error(`Failed to fetch sales stages: ${error.message}`)\n    return data || []\n  }\n\n  async createSalesStage(stage: Inserts<\"sales_stages\">): Promise<SalesStage> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"sales_stages\")\n      .insert({\n        ...stage,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      })\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to create sales stage: ${error.message}`)\n    return data\n  }\n\n  async updateSalesStage(id: string, updates: Updates<\"sales_stages\">): Promise<SalesStage> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"sales_stages\")\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"id\", id)\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to update sales stage: ${error.message}`)\n    return data\n  }\n\n  async deleteSalesStage(id: string): Promise<void> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { error } = await (supabase as any).from(\"sales_stages\").delete().eq(\"id\", id)\n\n    if (error) throw new Error(`Failed to delete sales stage: ${error.message}`)\n  }\n\n  // Email operations\n  async getEmails(): Promise<Email[]> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"emails\").select(\"*\").order(\"created_at\", { ascending: false })\n\n    if (error) throw new Error(`Failed to fetch emails: ${error.message}`)\n    return data || []\n  }\n\n  async createEmail(email: Inserts<\"emails\">): Promise<Email> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"emails\")\n      .insert({\n        ...email,\n        created_at: new Date().toISOString(),\n      })\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to create email: ${error.message}`)\n    return data\n  }\n\n  async updateEmail(id: string, updates: Updates<\"emails\">): Promise<Email> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"emails\").update(updates).eq(\"id\", id).select().single()\n\n    if (error) throw new Error(`Failed to update email: ${error.message}`)\n    return data\n  }\n\n  async getEmailsByClient(clientId: string): Promise<Email[]> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"emails\")\n      .select(\"*\")\n      .eq(\"client_id\", clientId)\n      .order(\"created_at\", { ascending: false })\n\n    if (error) throw new Error(`Failed to fetch client emails: ${error.message}`)\n    return data || []\n  }\n\n  // API Keys operations\n  async getApiKeys(userId: string): Promise<ApiKey[]> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"api_keys\")\n      .select(\"*\")\n      .eq(\"user_id\", userId)\n      .order(\"created_at\", { ascending: false })\n\n    if (error) {\n      console.error('Database API keys fetch error:', error)\n      throw new Error('Failed to fetch API keys')\n    }\n    \n    // Return API keys as-is (key_hash is already encrypted)\n    return data || []\n  }\n\n  async createApiKey(apiKey: Database['public']['Tables']['api_keys']['Insert']): Promise<ApiKey> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any)\n      .from(\"api_keys\")\n      .insert(apiKey)\n      .select()\n      .single()\n\n    if (error) {\n      console.error('Database API key creation error:', error)\n      throw new Error('Failed to create API key')\n    }\n    \n    if (!data) throw new Error('No data returned from API key creation')\n    \n    return data\n  }\n\n  async updateApiKey(id: string, updates: Database['public']['Tables']['api_keys']['Update']): Promise<ApiKey> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"api_keys\").update(updates).eq(\"id\", id).select().single()\n\n    if (error) throw new Error(`Failed to update API key: ${error.message}`)\n    return data\n  }\n\n  async deleteApiKey(id: string): Promise<void> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { error } = await (supabase as any).from(\"api_keys\").delete().eq(\"id\", id)\n\n    if (error) throw new Error(`Failed to delete API key: ${error.message}`)\n  }\n\n  // Analytics and reporting\n  async getClientStats(): Promise<any> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"clients\").select(\"status, stage, value\")\n\n    if (error) throw new Error(`Failed to fetch client stats: ${error.message}`)\n\n    const clientData = data as Array<{ status: string; stage: string; value: number }>\n\n    const stats = {\n      total: clientData?.length || 0,\n      totalValue: clientData?.reduce((sum, client) => sum + (client.value || 0), 0) || 0,\n      byStatus: {} as Record<string, number>,\n      byStage: {} as Record<string, number>,\n    }\n\n    clientData?.forEach((client) => {\n      stats.byStatus[client.status] = (stats.byStatus[client.status] || 0) + 1\n      stats.byStage[client.stage] = (stats.byStage[client.stage] || 0) + 1\n    })\n\n    return stats\n  }\n\n  async getTaskStats(): Promise<any> {\n    if (!supabase) throw new Error('Database not initialized')\n    const { data, error } = await (supabase as any).from(\"tasks\").select(\"status, priority\")\n\n    if (error) throw new Error(`Failed to fetch task stats: ${error.message}`)\n\n    const taskData = data as Array<{ status: string; priority: string }>\n\n    const stats = {\n      total: taskData?.length || 0,\n      byStatus: {} as Record<string, number>,\n      byPriority: {} as Record<string, number>,\n    }\n\n    taskData?.forEach((task) => {\n      stats.byStatus[task.status] = (stats.byStatus[task.status] || 0) + 1\n      stats.byPriority[task.priority] = (stats.byPriority[task.priority] || 0) + 1\n    })\n\n    return stats\n  }\n\n  // Real-time subscriptions\n  subscribeToClients(callback: (payload: any) => void) {\n    if (!supabase || !isRealSupabaseConnection()) {\n      return null\n    }\n\n    return supabase\n      .channel(\"clients\")\n      .on(\"postgres_changes\", { event: \"*\", schema: \"public\", table: \"clients\" }, callback)\n      .subscribe()\n  }\n\n  subscribeToTasks(callback: (payload: any) => void) {\n    if (!supabase || !isRealSupabaseConnection()) {\n      return null\n    }\n\n    return supabase\n      .channel(\"tasks\")\n      .on(\"postgres_changes\", { event: \"*\", schema: \"public\", table: \"tasks\" }, callback)\n      .subscribe()\n  }\n\n  subscribeToEvents(callback: (payload: any) => void) {\n    if (!supabase || !isRealSupabaseConnection()) {\n      return null\n    }\n\n    return supabase\n      .channel(\"events\")\n      .on(\"postgres_changes\", { event: \"*\", schema: \"public\", table: \"events\" }, callback)\n      .subscribe()\n  }\n}\n\nexport const databaseService = new DatabaseService()\n"],"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","ignoreList":[]}