{"version":3,"names":["configService","cov_2md4ykpj89","f","s","default","_default","ConfigServiceImpl","getFeature","featureName","b","features","setFeature","enabled","getAllFeatures","isDevelopment","process","env","NODE_ENV","enableDataExport","enableCustomFields","enableAutomations","enableAdvancedAnalytics","enableEnhancedSearch","enableEmailTemplates","enableNotifications","enableReporting"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\configService.ts"],"sourcesContent":["// Configuration service for managing application settings\n// Mock configuration service for feature flags\nexport interface ConfigService {\n  getFeature: (featureName: string) => boolean\n  setFeature: (featureName: string, enabled: boolean) => void\n  getAllFeatures: () => Record<string, boolean>\n}\n\nexport interface DatabaseConfig {\n  supabaseUrl: string\n  supabaseAnonKey: string\n  supabaseServiceKey?: string\n}\n\nexport interface EmailConfig {\n  provider: \"mailjet\" | \"outlook\" | \"smtp\"\n  mailjet?: {\n    clientId: string\n    clientSecret: string\n    redirectUri: string\n  }\n  outlook?: {\n    clientId: string\n    clientSecret: string\n    redirectUri: string\n    tenantId: string\n  }\n  smtp?: {\n    host: string\n    port: number\n    secure: boolean\n    user: string\n    password: string\n  }\n}\n\nexport interface NotificationConfig {\n  enablePush: boolean\n  enableEmail: boolean\n  enableSMS: boolean\n  defaultDuration: number\n  maxNotifications: number\n}\n\nexport interface ThemeConfig {\n  defaultTheme: \"light\" | \"dark\" | \"system\"\n  allowUserThemeChange: boolean\n  customColors?: {\n    primary: string\n    secondary: string\n    accent: string\n  }\n}\n\nexport interface SecurityConfig {\n  sessionTimeout: number // minutes\n  maxLoginAttempts: number\n  passwordMinLength: number\n  requireTwoFactor: boolean\n  allowedDomains?: string[]\n}\n\nexport interface PerformanceConfig {\n  enableCaching: boolean\n  cacheTimeout: number // minutes\n  maxCacheSize: number // MB\n  enableOfflineMode: boolean\n  syncInterval: number // minutes\n  enableAnalytics: boolean\n}\n\nexport interface FeatureFlags {\n  enableAdvancedAnalytics: boolean\n  enableEmailIntegration: boolean\n  enableRealTimeUpdates: boolean\n  enableOfflineMode: boolean\n  enableRoleBasedAccess: boolean\n  enableAuditLog: boolean\n  enableDataExport: boolean\n  enableCustomFields: boolean\n  enableAutomations: boolean\n  enableIntegrations: boolean\n}\n\nexport interface AppConfig {\n  app: {\n    name: string\n    version: string\n    environment: \"development\" | \"staging\" | \"production\"\n    debug: boolean\n    apiUrl: string\n  }\n  database: DatabaseConfig\n  email: EmailConfig\n  notifications: NotificationConfig\n  theme: ThemeConfig\n  security: SecurityConfig\n  performance: PerformanceConfig\n  features: FeatureFlags\n}\n\nclass ConfigServiceImpl implements ConfigService {\n  private features: Record<string, boolean> = {\n    enableDataExport: true,\n    enableCustomFields: true,\n    enableAutomations: true,\n    enableAdvancedAnalytics: true,\n    enableEnhancedSearch: true,\n    enableEmailTemplates: true,\n    enableNotifications: true,\n    enableReporting: true,\n  }\n\n  getFeature(featureName: string): boolean {\n    return this.features[featureName] ?? false\n  }\n\n  setFeature(featureName: string, enabled: boolean): void {\n    this.features[featureName] = enabled\n  }\n\n  getAllFeatures(): Record<string, boolean> {\n    return { ...this.features }\n  }\n\n  isDevelopment(): boolean {\n    return process.env.NODE_ENV === 'development'\n  }\n}\n\n// Create and export singleton instance\nexport const configService = new ConfigServiceImpl()\nexport default configService\n"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAkIaA,cAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAH,aAAA;;MACbI,QAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAE,QAAA;;;AA/BA,MAAMC,iBAAA;EAYJC,WAAWC,WAAmB,EAAW;IAAA;IAAAP,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACvC,OAAO,2BAAAF,cAAA,GAAAQ,CAAA,cAAI,CAACC,QAAQ,CAACF,WAAA,CAAY;IAAA;IAAA,CAAAP,cAAA,GAAAQ,CAAA,UAAI;EACvC;EAEAE,WAAWH,WAAmB,EAAEI,OAAgB,EAAQ;IAAA;IAAAX,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACtD,IAAI,CAACO,QAAQ,CAACF,WAAA,CAAY,GAAGI,OAAA;EAC/B;EAEAC,eAAA,EAA0C;IAAA;IAAAZ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACxC,OAAO;MAAE,GAAG,IAAI,CAACO;IAAS;EAC5B;EAEAI,cAAA,EAAyB;IAAA;IAAAb,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACvB,OAAOY,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK;EAClC;;;;;SAzBQP,QAAA,GAAoC;MAC1CQ,gBAAA,EAAkB;MAClBC,kBAAA,EAAoB;MACpBC,iBAAA,EAAmB;MACnBC,uBAAA,EAAyB;MACzBC,oBAAA,EAAsB;MACtBC,oBAAA,EAAsB;MACtBC,mBAAA,EAAqB;MACrBC,eAAA,EAAiB;IACnB;;AAiBF;AAGO,MAAMzB,aAAA;AAAA;AAAA,CAAAC,cAAA,GAAAE,CAAA,QAAgB,IAAIG,iBAAA;MACjCD,QAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAE,CAAA,QAAeH,aAAA","ignoreList":[]}