{"version":3,"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\__tests__\\auth.test.ts"],"sourcesContent":["import { authService, AuthUser } from '../auth'\r\nimport { secureStorage, setSecureJSONAdvanced, getSecureJSONAdvanced } from '../../utils/secureStorage'\r\n\r\n// Mock secureStorage\r\njest.mock('../../utils/secureStorage', () => {\r\n  const secureStorage = {\r\n    setJSON: jest.fn(),\r\n    getJSON: jest.fn(),\r\n    removeItem: jest.fn(),\r\n  }\r\n  const setItemSecure = jest.fn()\r\n  const setJSONAdvanced = jest.fn()\r\n  const getJSONAdvanced = jest.fn()\r\n  return {\r\n    secureStorage,\r\n    // Legacy convenience exports\r\n    setSecureJSON: secureStorage.setJSON,\r\n    getSecureJSON: secureStorage.getJSON,\r\n    removeSecureItem: secureStorage.removeItem,\r\n    setSecureItemAdvanced: setItemSecure,\r\n    setSecureItem: jest.fn(),\r\n    getSecureItem: jest.fn(),\r\n    // Advanced JSON storage uses isolated mocks so tests don't interfere\r\n    setSecureJSONAdvanced: setJSONAdvanced,\r\n    getSecureJSONAdvanced: getJSONAdvanced,\r\n  }\r\n})\r\n\r\nconst mockSecureStorage = secureStorage as jest.Mocked<typeof secureStorage>\r\nconst mockSetJSONAdvanced = setSecureJSONAdvanced as unknown as jest.Mock\r\nconst mockGetJSONAdvanced = getSecureJSONAdvanced as unknown as jest.Mock\r\n\r\ndescribe('AuthService', () => {\r\n  beforeEach(async () => {\r\n    jest.resetAllMocks()\r\n    // Reset auth service state\r\n    await authService.signOut()\r\n  })\r\n\r\n  describe('signUp', () => {\r\n    it('should create a new user account', async () => {\r\n      const email = 'test@example.com'\r\n      const password = 'password123'\r\n      const userData = { name: 'Test User' }\r\n\r\n      const user = await authService.signUp(email, password, userData)\r\n\r\n      expect(user).toMatchObject({\r\n        email,\r\n        name: 'Test User',\r\n        role: 'user',\r\n      })\r\n      expect(user.id).toBeDefined()\r\n      expect(user.createdAt).toBeDefined()\r\n      expect(mockSetJSONAdvanced).toHaveBeenCalledWith('auth_user', user)\r\n    })\r\n\r\n    it('should use email prefix as name when name not provided', async () => {\r\n      const email = 'john.doe@example.com'\r\n      const password = 'password123'\r\n\r\n      const user = await authService.signUp(email, password)\r\n\r\n      expect(user.name).toBe('john.doe')\r\n    })\r\n\r\n    it('should handle signup errors', async () => {\r\n      mockSetJSONAdvanced.mockImplementationOnce(() => {\r\n        throw new Error('Storage error')\r\n      })\r\n\r\n      await expect(\r\n        authService.signUp('test@example.com', 'password123')\r\n      ).rejects.toThrow('Storage error')\r\n    })\r\n  })\r\n\r\n  describe('signIn', () => {\r\n    it('should authenticate user with valid credentials', async () => {\r\n      const email = 'test@example.com'\r\n      const password = 'password123'\r\n\r\n      const user = await authService.signIn(email, password)\r\n\r\n      expect(user).toMatchObject({\r\n        email,\r\n        name: 'test',\r\n        role: 'user',\r\n      })\r\n      expect(user.lastLogin).toBeDefined()\r\n      expect(authService.isAuthenticated()).toBe(true)\r\n    })\r\n\r\n    it('should handle signin errors', async () => {\r\n      // Cause secure JSON write to fail\r\n      mockSetJSONAdvanced.mockImplementationOnce(() => {\r\n        throw new Error('Storage error')\r\n      })\r\n\r\n      await expect(\r\n        authService.signIn('test@example.com', 'password123')\r\n      ).rejects.toThrow('Storage error')\r\n    })\r\n  })\r\n\r\n  describe('signOut', () => {\r\n    it('should clear user session', async () => {\r\n      // First sign in\r\n      await authService.signIn('test@example.com', 'password123')\r\n      expect(authService.isAuthenticated()).toBe(true)\r\n\r\n      // Then sign out\r\n      await authService.signOut()\r\n\r\n      expect(authService.isAuthenticated()).toBe(false)\r\n      expect(authService.getCurrentUser()).toBeNull()\r\n      expect(mockSecureStorage.removeItem).toHaveBeenCalledWith('auth_user')\r\n    })\r\n  })\r\n\r\n  describe('updateProfile', () => {\r\n    it('should update user profile when authenticated', async () => {\r\n      // First sign in\r\n      await authService.signIn('test@example.com', 'password123')\r\n\r\n      const updates = { name: 'Updated Name', role: 'admin' }\r\n      const updatedUser = await authService.updateProfile(updates)\r\n\r\n      expect(updatedUser.name).toBe('Updated Name')\r\n      expect(updatedUser.role).toBe('admin')\r\n      expect(mockSetJSONAdvanced).toHaveBeenCalledWith('auth_user', updatedUser)\r\n    })\r\n\r\n    it('should throw error when not authenticated', async () => {\r\n      const updates = { name: 'Updated Name' }\r\n\r\n      await expect(\r\n        authService.updateProfile(updates)\r\n      ).rejects.toThrow('No authenticated user')\r\n    })\r\n  })\r\n\r\n  describe('hasRole', () => {\r\n    it('should validate admin role hierarchy', async () => {\r\n      const adminUser: AuthUser = {\r\n        id: '1',\r\n        email: 'admin@example.com',\r\n        name: 'Admin User',\r\n        role: 'admin',\r\n        createdAt: new Date().toISOString(),\r\n      }\r\n\r\n      // Mock the user via advanced storage and init\r\n      mockGetJSONAdvanced.mockReturnValue(adminUser)\r\n      await authService.init()\r\n\r\n      expect(authService.hasRole('admin')).toBe(true)\r\n      expect(authService.hasRole('agent')).toBe(true)\r\n      expect(authService.hasRole('user')).toBe(true)\r\n    })\r\n\r\n    it('should validate agent role hierarchy', async () => {\r\n      await authService.signIn('agent@example.com', 'password123')\r\n      await authService.updateProfile({ role: 'agent' })\r\n\r\n      expect(authService.hasRole('admin')).toBe(false)\r\n      expect(authService.hasRole('agent')).toBe(true)\r\n      expect(authService.hasRole('user')).toBe(true)\r\n    })\r\n\r\n    it('should validate user role hierarchy', async () => {\r\n      await authService.signIn('user@example.com', 'password123')\r\n\r\n      expect(authService.hasRole('admin')).toBe(false)\r\n      expect(authService.hasRole('agent')).toBe(false)\r\n      expect(authService.hasRole('user')).toBe(true)\r\n    })\r\n\r\n    it('should return false when not authenticated', () => {\r\n      expect(authService.hasRole('user')).toBe(false)\r\n    })\r\n  })\r\n\r\n  describe('getAccessToken', () => {\r\n    it('should return token when authenticated', async () => {\r\n      await authService.signIn('test@example.com', 'password123')\r\n\r\n      const token = authService.getAccessToken()\r\n      expect(token).toEqual(expect.any(String))\r\n      expect((token as string).length).toBeGreaterThan(0)\r\n    })\r\n\r\n    it('should return null when not authenticated', () => {\r\n      const token = authService.getAccessToken()\r\n      expect(token).toBeNull()\r\n    })\r\n  })\r\n\r\n  describe('state management', () => {\r\n    it('should notify subscribers of state changes', async () => {\r\n      const mockCallback = jest.fn()\r\n      const unsubscribe = authService.subscribe(mockCallback)\r\n\r\n      await authService.signIn('test@example.com', 'password123')\r\n\r\n      // Ensure callback was called with the expected initial and updated states\r\n      expect(mockCallback).toHaveBeenCalled()\r\n\r\n      unsubscribe()\r\n    })\r\n\r\n    it('should handle unsubscribe without errors', () => {\r\n      const mockCallback = jest.fn()\r\n      const unsubscribe = authService.subscribe(mockCallback)\r\n\r\n      unsubscribe()\r\n      // Should not throw\r\n      expect(true).toBe(true)\r\n    })\r\n  })\r\n})"],"names":["jest","mock","secureStorage","setJSON","fn","getJSON","removeItem","setItemSecure","setJSONAdvanced","getJSONAdvanced","setSecureJSON","getSecureJSON","removeSecureItem","setSecureItemAdvanced","setSecureItem","getSecureItem","setSecureJSONAdvanced","getSecureJSONAdvanced","mockSecureStorage","mockSetJSONAdvanced","mockGetJSONAdvanced","describe","beforeEach","resetAllMocks","authService","signOut","it","email","password","userData","name","user","signUp","expect","toMatchObject","role","id","toBeDefined","createdAt","toHaveBeenCalledWith","toBe","mockImplementationOnce","Error","rejects","toThrow","signIn","lastLogin","isAuthenticated","getCurrentUser","toBeNull","updates","updatedUser","updateProfile","adminUser","Date","toISOString","mockReturnValue","init","hasRole","token","getAccessToken","toEqual","any","String","length","toBeGreaterThan","mockCallback","unsubscribe","subscribe","toHaveBeenCalled"],"mappings":";AAGA,qBAAqB;AACrBA,KAAKC,IAAI,CAAC,6BAA6B;IACrC,MAAMC,gBAAgB;QACpBC,SAASH,KAAKI,EAAE;QAChBC,SAASL,KAAKI,EAAE;QAChBE,YAAYN,KAAKI,EAAE;IACrB;IACA,MAAMG,gBAAgBP,KAAKI,EAAE;IAC7B,MAAMI,kBAAkBR,KAAKI,EAAE;IAC/B,MAAMK,kBAAkBT,KAAKI,EAAE;IAC/B,OAAO;QACLF;QACA,6BAA6B;QAC7BQ,eAAeR,cAAcC,OAAO;QACpCQ,eAAeT,cAAcG,OAAO;QACpCO,kBAAkBV,cAAcI,UAAU;QAC1CO,uBAAuBN;QACvBO,eAAed,KAAKI,EAAE;QACtBW,eAAef,KAAKI,EAAE;QACtB,qEAAqE;QACrEY,uBAAuBR;QACvBS,uBAAuBR;IACzB;AACF;;;;sBA1BsC;+BACsC;AA2B5E,MAAMS,oBAAoBhB,4BAAa;AACvC,MAAMiB,sBAAsBH,oCAAqB;AACjD,MAAMI,sBAAsBH,oCAAqB;AAEjDI,SAAS,eAAe;IACtBC,WAAW;QACTtB,KAAKuB,aAAa;QAClB,2BAA2B;QAC3B,MAAMC,iBAAW,CAACC,OAAO;IAC3B;IAEAJ,SAAS,UAAU;QACjBK,GAAG,oCAAoC;YACrC,MAAMC,QAAQ;YACd,MAAMC,WAAW;YACjB,MAAMC,WAAW;gBAAEC,MAAM;YAAY;YAErC,MAAMC,OAAO,MAAMP,iBAAW,CAACQ,MAAM,CAACL,OAAOC,UAAUC;YAEvDI,OAAOF,MAAMG,aAAa,CAAC;gBACzBP;gBACAG,MAAM;gBACNK,MAAM;YACR;YACAF,OAAOF,KAAKK,EAAE,EAAEC,WAAW;YAC3BJ,OAAOF,KAAKO,SAAS,EAAED,WAAW;YAClCJ,OAAOd,qBAAqBoB,oBAAoB,CAAC,aAAaR;QAChE;QAEAL,GAAG,0DAA0D;YAC3D,MAAMC,QAAQ;YACd,MAAMC,WAAW;YAEjB,MAAMG,OAAO,MAAMP,iBAAW,CAACQ,MAAM,CAACL,OAAOC;YAE7CK,OAAOF,KAAKD,IAAI,EAAEU,IAAI,CAAC;QACzB;QAEAd,GAAG,+BAA+B;YAChCP,oBAAoBsB,sBAAsB,CAAC;gBACzC,MAAM,IAAIC,MAAM;YAClB;YAEA,MAAMT,OACJT,iBAAW,CAACQ,MAAM,CAAC,oBAAoB,gBACvCW,OAAO,CAACC,OAAO,CAAC;QACpB;IACF;IAEAvB,SAAS,UAAU;QACjBK,GAAG,mDAAmD;YACpD,MAAMC,QAAQ;YACd,MAAMC,WAAW;YAEjB,MAAMG,OAAO,MAAMP,iBAAW,CAACqB,MAAM,CAAClB,OAAOC;YAE7CK,OAAOF,MAAMG,aAAa,CAAC;gBACzBP;gBACAG,MAAM;gBACNK,MAAM;YACR;YACAF,OAAOF,KAAKe,SAAS,EAAET,WAAW;YAClCJ,OAAOT,iBAAW,CAACuB,eAAe,IAAIP,IAAI,CAAC;QAC7C;QAEAd,GAAG,+BAA+B;YAChC,kCAAkC;YAClCP,oBAAoBsB,sBAAsB,CAAC;gBACzC,MAAM,IAAIC,MAAM;YAClB;YAEA,MAAMT,OACJT,iBAAW,CAACqB,MAAM,CAAC,oBAAoB,gBACvCF,OAAO,CAACC,OAAO,CAAC;QACpB;IACF;IAEAvB,SAAS,WAAW;QAClBK,GAAG,6BAA6B;YAC9B,gBAAgB;YAChB,MAAMF,iBAAW,CAACqB,MAAM,CAAC,oBAAoB;YAC7CZ,OAAOT,iBAAW,CAACuB,eAAe,IAAIP,IAAI,CAAC;YAE3C,gBAAgB;YAChB,MAAMhB,iBAAW,CAACC,OAAO;YAEzBQ,OAAOT,iBAAW,CAACuB,eAAe,IAAIP,IAAI,CAAC;YAC3CP,OAAOT,iBAAW,CAACwB,cAAc,IAAIC,QAAQ;YAC7ChB,OAAOf,kBAAkBZ,UAAU,EAAEiC,oBAAoB,CAAC;QAC5D;IACF;IAEAlB,SAAS,iBAAiB;QACxBK,GAAG,iDAAiD;YAClD,gBAAgB;YAChB,MAAMF,iBAAW,CAACqB,MAAM,CAAC,oBAAoB;YAE7C,MAAMK,UAAU;gBAAEpB,MAAM;gBAAgBK,MAAM;YAAQ;YACtD,MAAMgB,cAAc,MAAM3B,iBAAW,CAAC4B,aAAa,CAACF;YAEpDjB,OAAOkB,YAAYrB,IAAI,EAAEU,IAAI,CAAC;YAC9BP,OAAOkB,YAAYhB,IAAI,EAAEK,IAAI,CAAC;YAC9BP,OAAOd,qBAAqBoB,oBAAoB,CAAC,aAAaY;QAChE;QAEAzB,GAAG,6CAA6C;YAC9C,MAAMwB,UAAU;gBAAEpB,MAAM;YAAe;YAEvC,MAAMG,OACJT,iBAAW,CAAC4B,aAAa,CAACF,UAC1BP,OAAO,CAACC,OAAO,CAAC;QACpB;IACF;IAEAvB,SAAS,WAAW;QAClBK,GAAG,wCAAwC;YACzC,MAAM2B,YAAsB;gBAC1BjB,IAAI;gBACJT,OAAO;gBACPG,MAAM;gBACNK,MAAM;gBACNG,WAAW,IAAIgB,OAAOC,WAAW;YACnC;YAEA,8CAA8C;YAC9CnC,oBAAoBoC,eAAe,CAACH;YACpC,MAAM7B,iBAAW,CAACiC,IAAI;YAEtBxB,OAAOT,iBAAW,CAACkC,OAAO,CAAC,UAAUlB,IAAI,CAAC;YAC1CP,OAAOT,iBAAW,CAACkC,OAAO,CAAC,UAAUlB,IAAI,CAAC;YAC1CP,OAAOT,iBAAW,CAACkC,OAAO,CAAC,SAASlB,IAAI,CAAC;QAC3C;QAEAd,GAAG,wCAAwC;YACzC,MAAMF,iBAAW,CAACqB,MAAM,CAAC,qBAAqB;YAC9C,MAAMrB,iBAAW,CAAC4B,aAAa,CAAC;gBAAEjB,MAAM;YAAQ;YAEhDF,OAAOT,iBAAW,CAACkC,OAAO,CAAC,UAAUlB,IAAI,CAAC;YAC1CP,OAAOT,iBAAW,CAACkC,OAAO,CAAC,UAAUlB,IAAI,CAAC;YAC1CP,OAAOT,iBAAW,CAACkC,OAAO,CAAC,SAASlB,IAAI,CAAC;QAC3C;QAEAd,GAAG,uCAAuC;YACxC,MAAMF,iBAAW,CAACqB,MAAM,CAAC,oBAAoB;YAE7CZ,OAAOT,iBAAW,CAACkC,OAAO,CAAC,UAAUlB,IAAI,CAAC;YAC1CP,OAAOT,iBAAW,CAACkC,OAAO,CAAC,UAAUlB,IAAI,CAAC;YAC1CP,OAAOT,iBAAW,CAACkC,OAAO,CAAC,SAASlB,IAAI,CAAC;QAC3C;QAEAd,GAAG,8CAA8C;YAC/CO,OAAOT,iBAAW,CAACkC,OAAO,CAAC,SAASlB,IAAI,CAAC;QAC3C;IACF;IAEAnB,SAAS,kBAAkB;QACzBK,GAAG,0CAA0C;YAC3C,MAAMF,iBAAW,CAACqB,MAAM,CAAC,oBAAoB;YAE7C,MAAMc,QAAQnC,iBAAW,CAACoC,cAAc;YACxC3B,OAAO0B,OAAOE,OAAO,CAAC5B,OAAO6B,GAAG,CAACC;YACjC9B,OAAO,AAAC0B,MAAiBK,MAAM,EAAEC,eAAe,CAAC;QACnD;QAEAvC,GAAG,6CAA6C;YAC9C,MAAMiC,QAAQnC,iBAAW,CAACoC,cAAc;YACxC3B,OAAO0B,OAAOV,QAAQ;QACxB;IACF;IAEA5B,SAAS,oBAAoB;QAC3BK,GAAG,8CAA8C;YAC/C,MAAMwC,eAAelE,KAAKI,EAAE;YAC5B,MAAM+D,cAAc3C,iBAAW,CAAC4C,SAAS,CAACF;YAE1C,MAAM1C,iBAAW,CAACqB,MAAM,CAAC,oBAAoB;YAE7C,0EAA0E;YAC1EZ,OAAOiC,cAAcG,gBAAgB;YAErCF;QACF;QAEAzC,GAAG,4CAA4C;YAC7C,MAAMwC,eAAelE,KAAKI,EAAE;YAC5B,MAAM+D,cAAc3C,iBAAW,CAAC4C,SAAS,CAACF;YAE1CC;YACA,mBAAmB;YACnBlC,OAAO,MAAMO,IAAI,CAAC;QACpB;IACF;AACF"}