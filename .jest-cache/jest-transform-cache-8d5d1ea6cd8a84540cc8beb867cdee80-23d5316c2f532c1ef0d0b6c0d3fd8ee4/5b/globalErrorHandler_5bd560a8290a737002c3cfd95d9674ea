1cdfe41f2e89b7cd5f676f36e2a6f8d6
"use strict";

/* istanbul ignore next */
function cov_26bkpj8qvp() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\globalErrorHandler.ts";
  var hash = "46e3dba2e1a48287c741baca7a197ddffe21b7e0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\globalErrorHandler.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 34
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 41
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 37
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 44
        }
      },
      "8": {
        start: {
          line: 25,
          column: 23
        },
        end: {
          line: 25,
          column: 49
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 35
        }
      },
      "10": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 45,
          column: 10
        }
      },
      "11": {
        start: {
          line: 30,
          column: 26
        },
        end: {
          line: 30,
          column: 65
        }
      },
      "12": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 44,
          column: 15
        }
      },
      "13": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 62,
          column: 10
        }
      },
      "14": {
        start: {
          line: 47,
          column: 26
        },
        end: {
          line: 47,
          column: 104
        }
      },
      "15": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 59,
          column: 15
        }
      },
      "16": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 35
        }
      },
      "17": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 83,
          column: 10
        }
      },
      "18": {
        start: {
          line: 80,
          column: 33
        },
        end: {
          line: 80,
          column: 38
        }
      },
      "19": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 50
        }
      },
      "20": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 47
        }
      },
      "21": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 62
        }
      },
      "22": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 50
        }
      },
      "23": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 48
        }
      },
      "24": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 82
        }
      },
      "25": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "26": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 70
        }
      },
      "27": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 19
        }
      },
      "28": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "29": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 94
        }
      },
      "30": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 19
        }
      },
      "31": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 40
        }
      },
      "32": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 35
        }
      },
      "33": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 40
        }
      },
      "34": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 41
        }
      },
      "35": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 42
        }
      },
      "36": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 44
        }
      },
      "37": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 34
        }
      },
      "38": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 120,
          column: 11
        }
      },
      "39": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 60
        }
      },
      "40": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "41": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 19
        }
      },
      "42": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 68
        }
      },
      "43": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 88
        }
      },
      "44": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 50
        }
      },
      "45": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 48
        }
      },
      "46": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 35
        }
      },
      "47": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 58
        }
      },
      "48": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 65
        }
      },
      "49": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "50": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 89
        }
      },
      "51": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 54
        }
      },
      "52": {
        start: {
          line: 145,
          column: 47
        },
        end: {
          line: 145,
          column: 54
        }
      },
      "53": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 159,
          column: 10
        }
      },
      "54": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 59
        }
      },
      "55": {
        start: {
          line: 149,
          column: 28
        },
        end: {
          line: 149,
          column: 114
        }
      },
      "56": {
        start: {
          line: 149,
          column: 44
        },
        end: {
          line: 149,
          column: 103
        }
      },
      "57": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 158,
          column: 15
        }
      },
      "58": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 173,
          column: 10
        }
      },
      "59": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 58
        }
      },
      "60": {
        start: {
          line: 163,
          column: 28
        },
        end: {
          line: 163,
          column: 114
        }
      },
      "61": {
        start: {
          line: 163,
          column: 44
        },
        end: {
          line: 163,
          column: 103
        }
      },
      "62": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 172,
          column: 15
        }
      },
      "63": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 54
        }
      },
      "64": {
        start: {
          line: 176,
          column: 47
        },
        end: {
          line: 176,
          column: 54
        }
      },
      "65": {
        start: {
          line: 178,
          column: 30
        },
        end: {
          line: 178,
          column: 42
        }
      },
      "66": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 239,
          column: 10
        }
      },
      "67": {
        start: {
          line: 180,
          column: 30
        },
        end: {
          line: 180,
          column: 40
        }
      },
      "68": {
        start: {
          line: 181,
          column: 24
        },
        end: {
          line: 181,
          column: 162
        }
      },
      "69": {
        start: {
          line: 182,
          column: 27
        },
        end: {
          line: 182,
          column: 51
        }
      },
      "70": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 238,
          column: 13
        }
      },
      "71": {
        start: {
          line: 184,
          column: 33
        },
        end: {
          line: 184,
          column: 61
        }
      },
      "72": {
        start: {
          line: 185,
          column: 33
        },
        end: {
          line: 185,
          column: 55
        }
      },
      "73": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 199,
          column: 19
        }
      },
      "74": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 218,
          column: 17
        }
      },
      "75": {
        start: {
          line: 202,
          column: 20
        },
        end: {
          line: 217,
          column: 23
        }
      },
      "76": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 32
        }
      },
      "77": {
        start: {
          line: 221,
          column: 33
        },
        end: {
          line: 221,
          column: 55
        }
      },
      "78": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 236,
          column: 19
        }
      },
      "79": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 237,
          column: 28
        }
      },
      "80": {
        start: {
          line: 241,
          column: 32
        },
        end: {
          line: 241,
          column: 61
        }
      },
      "81": {
        start: {
          line: 242,
          column: 32
        },
        end: {
          line: 242,
          column: 61
        }
      },
      "82": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 250,
          column: 10
        }
      },
      "83": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 248,
          column: 14
        }
      },
      "84": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 94
        }
      },
      "85": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 310,
          column: 10
        }
      },
      "86": {
        start: {
          line: 252,
          column: 33
        },
        end: {
          line: 252,
          column: 51
        }
      },
      "87": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 288,
          column: 15
        }
      },
      "88": {
        start: {
          line: 254,
          column: 16
        },
        end: {
          line: 287,
          column: 17
        }
      },
      "89": {
        start: {
          line: 255,
          column: 37
        },
        end: {
          line: 255,
          column: 72
        }
      },
      "90": {
        start: {
          line: 256,
          column: 20
        },
        end: {
          line: 268,
          column: 23
        }
      },
      "91": {
        start: {
          line: 269,
          column: 20
        },
        end: {
          line: 286,
          column: 21
        }
      },
      "92": {
        start: {
          line: 270,
          column: 24
        },
        end: {
          line: 285,
          column: 27
        }
      },
      "93": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 308,
          column: 15
        }
      },
      "94": {
        start: {
          line: 290,
          column: 16
        },
        end: {
          line: 307,
          column: 17
        }
      },
      "95": {
        start: {
          line: 291,
          column: 37
        },
        end: {
          line: 291,
          column: 72
        }
      },
      "96": {
        start: {
          line: 292,
          column: 20
        },
        end: {
          line: 306,
          column: 23
        }
      },
      "97": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 52
        }
      },
      "98": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 313,
          column: 60
        }
      },
      "99": {
        start: {
          line: 313,
          column: 53
        },
        end: {
          line: 313,
          column: 60
        }
      },
      "100": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 337,
          column: 17
        }
      },
      "101": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 336,
          column: 13
        }
      },
      "102": {
        start: {
          line: 317,
          column: 31
        },
        end: {
          line: 317,
          column: 43
        }
      },
      "103": {
        start: {
          line: 318,
          column: 32
        },
        end: {
          line: 318,
          column: 61
        }
      },
      "104": {
        start: {
          line: 319,
          column: 28
        },
        end: {
          line: 319,
          column: 53
        }
      },
      "105": {
        start: {
          line: 320,
          column: 16
        },
        end: {
          line: 335,
          column: 17
        }
      },
      "106": {
        start: {
          line: 321,
          column: 20
        },
        end: {
          line: 334,
          column: 23
        }
      },
      "107": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 340,
          column: 58
        }
      },
      "108": {
        start: {
          line: 340,
          column: 51
        },
        end: {
          line: 340,
          column: 58
        }
      },
      "109": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 369,
          column: 9
        }
      },
      "110": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 368,
          column: 13
        }
      },
      "111": {
        start: {
          line: 344,
          column: 41
        },
        end: {
          line: 360,
          column: 18
        }
      },
      "112": {
        start: {
          line: 345,
          column: 20
        },
        end: {
          line: 359,
          column: 21
        }
      },
      "113": {
        start: {
          line: 346,
          column: 24
        },
        end: {
          line: 358,
          column: 25
        }
      },
      "114": {
        start: {
          line: 347,
          column: 28
        },
        end: {
          line: 357,
          column: 31
        }
      },
      "115": {
        start: {
          line: 361,
          column: 16
        },
        end: {
          line: 365,
          column: 19
        }
      },
      "116": {
        start: {
          line: 367,
          column: 16
        },
        end: {
          line: 367,
          column: 73
        }
      },
      "117": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 391,
          column: 9
        }
      },
      "118": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 390,
          column: 22
        }
      },
      "119": {
        start: {
          line: 373,
          column: 31
        },
        end: {
          line: 373,
          column: 49
        }
      },
      "120": {
        start: {
          line: 374,
          column: 31
        },
        end: {
          line: 374,
          column: 66
        }
      },
      "121": {
        start: {
          line: 375,
          column: 32
        },
        end: {
          line: 375,
          column: 68
        }
      },
      "122": {
        start: {
          line: 376,
          column: 37
        },
        end: {
          line: 376,
          column: 59
        }
      },
      "123": {
        start: {
          line: 377,
          column: 16
        },
        end: {
          line: 389,
          column: 17
        }
      },
      "124": {
        start: {
          line: 378,
          column: 20
        },
        end: {
          line: 388,
          column: 23
        }
      },
      "125": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 394,
          column: 62
        }
      },
      "126": {
        start: {
          line: 394,
          column: 55
        },
        end: {
          line: 394,
          column: 62
        }
      },
      "127": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 416,
          column: 11
        }
      },
      "128": {
        start: {
          line: 397,
          column: 27
        },
        end: {
          line: 397,
          column: 39
        }
      },
      "129": {
        start: {
          line: 398,
          column: 28
        },
        end: {
          line: 398,
          column: 57
        }
      },
      "130": {
        start: {
          line: 399,
          column: 23
        },
        end: {
          line: 399,
          column: 32
        }
      },
      "131": {
        start: {
          line: 400,
          column: 30
        },
        end: {
          line: 400,
          column: 46
        }
      },
      "132": {
        start: {
          line: 401,
          column: 25
        },
        end: {
          line: 401,
          column: 57
        }
      },
      "133": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 415,
          column: 15
        }
      },
      "134": {
        start: {
          line: 418,
          column: 8
        },
        end: {
          line: 430,
          column: 11
        }
      },
      "135": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 429,
          column: 15
        }
      },
      "136": {
        start: {
          line: 434,
          column: 31
        },
        end: {
          line: 434,
          column: 60
        }
      },
      "137": {
        start: {
          line: 435,
          column: 8
        },
        end: {
          line: 437,
          column: 9
        }
      },
      "138": {
        start: {
          line: 436,
          column: 12
        },
        end: {
          line: 436,
          column: 22
        }
      },
      "139": {
        start: {
          line: 439,
          column: 32
        },
        end: {
          line: 456,
          column: 9
        }
      },
      "140": {
        start: {
          line: 458,
          column: 24
        },
        end: {
          line: 458,
          column: 87
        }
      },
      "141": {
        start: {
          line: 460,
          column: 8
        },
        end: {
          line: 465,
          column: 9
        }
      },
      "142": {
        start: {
          line: 461,
          column: 12
        },
        end: {
          line: 461,
          column: 60
        }
      },
      "143": {
        start: {
          line: 462,
          column: 12
        },
        end: {
          line: 462,
          column: 52
        }
      },
      "144": {
        start: {
          line: 463,
          column: 12
        },
        end: {
          line: 463,
          column: 55
        }
      },
      "145": {
        start: {
          line: 464,
          column: 12
        },
        end: {
          line: 464,
          column: 31
        }
      },
      "146": {
        start: {
          line: 467,
          column: 8
        },
        end: {
          line: 469,
          column: 9
        }
      },
      "147": {
        start: {
          line: 468,
          column: 12
        },
        end: {
          line: 468,
          column: 74
        }
      },
      "148": {
        start: {
          line: 471,
          column: 8
        },
        end: {
          line: 471,
          column: 44
        }
      },
      "149": {
        start: {
          line: 472,
          column: 8
        },
        end: {
          line: 472,
          column: 23
        }
      },
      "150": {
        start: {
          line: 475,
          column: 8
        },
        end: {
          line: 497,
          column: 9
        }
      },
      "151": {
        start: {
          line: 476,
          column: 28
        },
        end: {
          line: 483,
          column: 13
        }
      },
      "152": {
        start: {
          line: 484,
          column: 28
        },
        end: {
          line: 486,
          column: 13
        }
      },
      "153": {
        start: {
          line: 487,
          column: 12
        },
        end: {
          line: 489,
          column: 13
        }
      },
      "154": {
        start: {
          line: 488,
          column: 16
        },
        end: {
          line: 488,
          column: 74
        }
      },
      "155": {
        start: {
          line: 490,
          column: 12
        },
        end: {
          line: 494,
          column: 15
        }
      },
      "156": {
        start: {
          line: 496,
          column: 12
        },
        end: {
          line: 496,
          column: 76
        }
      },
      "157": {
        start: {
          line: 500,
          column: 8
        },
        end: {
          line: 500,
          column: 36
        }
      },
      "158": {
        start: {
          line: 501,
          column: 8
        },
        end: {
          line: 507,
          column: 11
        }
      },
      "159": {
        start: {
          line: 510,
          column: 8
        },
        end: {
          line: 518,
          column: 11
        }
      },
      "160": {
        start: {
          line: 521,
          column: 8
        },
        end: {
          line: 527,
          column: 11
        }
      },
      "161": {
        start: {
          line: 530,
          column: 8
        },
        end: {
          line: 530,
          column: 46
        }
      },
      "162": {
        start: {
          line: 533,
          column: 8
        },
        end: {
          line: 533,
          column: 51
        }
      },
      "163": {
        start: {
          line: 536,
          column: 8
        },
        end: {
          line: 536,
          column: 40
        }
      },
      "164": {
        start: {
          line: 539,
          column: 8
        },
        end: {
          line: 539,
          column: 48
        }
      },
      "165": {
        start: {
          line: 544,
          column: 37
        },
        end: {
          line: 552,
          column: 1
        }
      },
      "166": {
        start: {
          line: 545,
          column: 4
        },
        end: {
          line: 548,
          column: 5
        }
      },
      "167": {
        start: {
          line: 546,
          column: 8
        },
        end: {
          line: 546,
          column: 65
        }
      },
      "168": {
        start: {
          line: 547,
          column: 8
        },
        end: {
          line: 547,
          column: 34
        }
      },
      "169": {
        start: {
          line: 549,
          column: 4
        },
        end: {
          line: 549,
          column: 56
        }
      },
      "170": {
        start: {
          line: 550,
          column: 4
        },
        end: {
          line: 550,
          column: 36
        }
      },
      "171": {
        start: {
          line: 551,
          column: 4
        },
        end: {
          line: 551,
          column: 30
        }
      },
      "172": {
        start: {
          line: 553,
          column: 30
        },
        end: {
          line: 555,
          column: 1
        }
      },
      "173": {
        start: {
          line: 554,
          column: 4
        },
        end: {
          line: 554,
          column: 38
        }
      },
      "174": {
        start: {
          line: 556,
          column: 34
        },
        end: {
          line: 561,
          column: 1
        }
      },
      "175": {
        start: {
          line: 557,
          column: 4
        },
        end: {
          line: 560,
          column: 5
        }
      },
      "176": {
        start: {
          line: 558,
          column: 8
        },
        end: {
          line: 558,
          column: 37
        }
      },
      "177": {
        start: {
          line: 559,
          column: 8
        },
        end: {
          line: 559,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 30
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 37
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 33
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 40
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 28
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 27
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 29,
            column: 33
          },
          end: {
            line: 29,
            column: 34
          }
        },
        loc: {
          start: {
            line: 29,
            column: 42
          },
          end: {
            line: 45,
            column: 9
          }
        },
        line: 29
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 46,
            column: 40
          },
          end: {
            line: 46,
            column: 41
          }
        },
        loc: {
          start: {
            line: 46,
            column: 49
          },
          end: {
            line: 62,
            column: 9
          }
        },
        line: 46
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 80,
            column: 24
          },
          end: {
            line: 80,
            column: 25
          }
        },
        loc: {
          start: {
            line: 80,
            column: 33
          },
          end: {
            line: 80,
            column: 38
          }
        },
        line: 80
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 81,
            column: 21
          },
          end: {
            line: 81,
            column: 22
          }
        },
        loc: {
          start: {
            line: 81,
            column: 25
          },
          end: {
            line: 81,
            column: 27
          }
        },
        line: 81
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        loc: {
          start: {
            line: 90,
            column: 24
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 90
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        loc: {
          start: {
            line: 93,
            column: 17
          },
          end: {
            line: 122,
            column: 5
          }
        },
        line: 93
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        loc: {
          start: {
            line: 123,
            column: 14
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 123
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 31
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 136
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 144,
            column: 5
          }
        },
        loc: {
          start: {
            line: 144,
            column: 26
          },
          end: {
            line: 174,
            column: 5
          }
        },
        line: 144
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 147,
            column: 24
          },
          end: {
            line: 147,
            column: 25
          }
        },
        loc: {
          start: {
            line: 147,
            column: 35
          },
          end: {
            line: 159,
            column: 9
          }
        },
        line: 147
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 149,
            column: 37
          },
          end: {
            line: 149,
            column: 38
          }
        },
        loc: {
          start: {
            line: 149,
            column: 44
          },
          end: {
            line: 149,
            column: 103
          }
        },
        line: 149
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 161,
            column: 23
          },
          end: {
            line: 161,
            column: 24
          }
        },
        loc: {
          start: {
            line: 161,
            column: 34
          },
          end: {
            line: 173,
            column: 9
          }
        },
        line: 161
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 163,
            column: 37
          },
          end: {
            line: 163,
            column: 38
          }
        },
        loc: {
          start: {
            line: 163,
            column: 44
          },
          end: {
            line: 163,
            column: 103
          }
        },
        line: 163
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        },
        loc: {
          start: {
            line: 175,
            column: 31
          },
          end: {
            line: 311,
            column: 5
          }
        },
        line: 175
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 179,
            column: 23
          },
          end: {
            line: 179,
            column: 24
          }
        },
        loc: {
          start: {
            line: 179,
            column: 40
          },
          end: {
            line: 239,
            column: 9
          }
        },
        line: 179
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 243,
            column: 40
          },
          end: {
            line: 243,
            column: 41
          }
        },
        loc: {
          start: {
            line: 243,
            column: 89
          },
          end: {
            line: 250,
            column: 9
          }
        },
        line: 243
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 251,
            column: 40
          },
          end: {
            line: 251,
            column: 41
          }
        },
        loc: {
          start: {
            line: 251,
            column: 55
          },
          end: {
            line: 310,
            column: 9
          }
        },
        line: 251
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 253,
            column: 42
          },
          end: {
            line: 253,
            column: 43
          }
        },
        loc: {
          start: {
            line: 253,
            column: 46
          },
          end: {
            line: 288,
            column: 13
          }
        },
        line: 253
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 289,
            column: 43
          },
          end: {
            line: 289,
            column: 44
          }
        },
        loc: {
          start: {
            line: 289,
            column: 47
          },
          end: {
            line: 308,
            column: 13
          }
        },
        line: 289
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 312,
            column: 4
          },
          end: {
            line: 312,
            column: 5
          }
        },
        loc: {
          start: {
            line: 312,
            column: 32
          },
          end: {
            line: 338,
            column: 5
          }
        },
        line: 312
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 314,
            column: 41
          },
          end: {
            line: 314,
            column: 42
          }
        },
        loc: {
          start: {
            line: 314,
            column: 50
          },
          end: {
            line: 337,
            column: 9
          }
        },
        line: 314
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 339,
            column: 4
          },
          end: {
            line: 339,
            column: 5
          }
        },
        loc: {
          start: {
            line: 339,
            column: 33
          },
          end: {
            line: 392,
            column: 5
          }
        },
        line: 339
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 344,
            column: 65
          },
          end: {
            line: 344,
            column: 66
          }
        },
        loc: {
          start: {
            line: 344,
            column: 73
          },
          end: {
            line: 360,
            column: 17
          }
        },
        line: 344
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 372,
            column: 24
          },
          end: {
            line: 372,
            column: 25
          }
        },
        loc: {
          start: {
            line: 372,
            column: 28
          },
          end: {
            line: 390,
            column: 13
          }
        },
        line: 372
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 393,
            column: 4
          },
          end: {
            line: 393,
            column: 5
          }
        },
        loc: {
          start: {
            line: 393,
            column: 35
          },
          end: {
            line: 431,
            column: 5
          }
        },
        line: 393
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 396,
            column: 43
          },
          end: {
            line: 396,
            column: 44
          }
        },
        loc: {
          start: {
            line: 396,
            column: 52
          },
          end: {
            line: 416,
            column: 9
          }
        },
        line: 396
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 418,
            column: 44
          },
          end: {
            line: 418,
            column: 45
          }
        },
        loc: {
          start: {
            line: 418,
            column: 48
          },
          end: {
            line: 430,
            column: 9
          }
        },
        line: 418
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 432,
            column: 4
          },
          end: {
            line: 432,
            column: 5
          }
        },
        loc: {
          start: {
            line: 432,
            column: 38
          },
          end: {
            line: 473,
            column: 5
          }
        },
        line: 432
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 474,
            column: 4
          },
          end: {
            line: 474,
            column: 5
          }
        },
        loc: {
          start: {
            line: 474,
            column: 50
          },
          end: {
            line: 498,
            column: 5
          }
        },
        line: 474
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 499,
            column: 4
          },
          end: {
            line: 499,
            column: 5
          }
        },
        loc: {
          start: {
            line: 499,
            column: 30
          },
          end: {
            line: 508,
            column: 5
          }
        },
        line: 499
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 509,
            column: 4
          },
          end: {
            line: 509,
            column: 5
          }
        },
        loc: {
          start: {
            line: 509,
            column: 27
          },
          end: {
            line: 519,
            column: 5
          }
        },
        line: 509
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 520,
            column: 4
          },
          end: {
            line: 520,
            column: 5
          }
        },
        loc: {
          start: {
            line: 520,
            column: 71
          },
          end: {
            line: 528,
            column: 5
          }
        },
        line: 520
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 529,
            column: 4
          },
          end: {
            line: 529,
            column: 5
          }
        },
        loc: {
          start: {
            line: 529,
            column: 17
          },
          end: {
            line: 531,
            column: 5
          }
        },
        line: 529
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 532,
            column: 4
          },
          end: {
            line: 532,
            column: 5
          }
        },
        loc: {
          start: {
            line: 532,
            column: 22
          },
          end: {
            line: 534,
            column: 5
          }
        },
        line: 532
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 535,
            column: 4
          },
          end: {
            line: 535,
            column: 5
          }
        },
        loc: {
          start: {
            line: 535,
            column: 18
          },
          end: {
            line: 537,
            column: 5
          }
        },
        line: 535
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 538,
            column: 4
          },
          end: {
            line: 538,
            column: 5
          }
        },
        loc: {
          start: {
            line: 538,
            column: 19
          },
          end: {
            line: 540,
            column: 5
          }
        },
        line: 538
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 544,
            column: 37
          },
          end: {
            line: 544,
            column: 38
          }
        },
        loc: {
          start: {
            line: 544,
            column: 47
          },
          end: {
            line: 552,
            column: 1
          }
        },
        line: 544
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 553,
            column: 30
          },
          end: {
            line: 553,
            column: 31
          }
        },
        loc: {
          start: {
            line: 553,
            column: 34
          },
          end: {
            line: 555,
            column: 1
          }
        },
        line: 553
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 556,
            column: 34
          },
          end: {
            line: 556,
            column: 35
          }
        },
        loc: {
          start: {
            line: 556,
            column: 38
          },
          end: {
            line: 561,
            column: 1
          }
        },
        line: 556
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 16
          },
          end: {
            line: 27,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 27,
            column: 25
          },
          end: {
            line: 27,
            column: 27
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 30,
            column: 26
          },
          end: {
            line: 30,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 26
          },
          end: {
            line: 30,
            column: 37
          }
        }, {
          start: {
            line: 30,
            column: 41
          },
          end: {
            line: 30,
            column: 65
          }
        }],
        line: 30
      },
      "2": {
        loc: {
          start: {
            line: 47,
            column: 26
          },
          end: {
            line: 47,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 47,
            column: 58
          },
          end: {
            line: 47,
            column: 70
          }
        }, {
          start: {
            line: 47,
            column: 73
          },
          end: {
            line: 47,
            column: 104
          }
        }],
        line: 47
      },
      "3": {
        loc: {
          start: {
            line: 76,
            column: 25
          },
          end: {
            line: 76,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 25
          },
          end: {
            line: 76,
            column: 45
          }
        }, {
          start: {
            line: 76,
            column: 49
          },
          end: {
            line: 76,
            column: 62
          }
        }],
        line: 76
      },
      "4": {
        loc: {
          start: {
            line: 77,
            column: 21
          },
          end: {
            line: 77,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 21
          },
          end: {
            line: 77,
            column: 56
          }
        }, {
          start: {
            line: 77,
            column: 60
          },
          end: {
            line: 77,
            column: 67
          }
        }],
        line: 77
      },
      "5": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "6": {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "7": {
        loc: {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "8": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "9": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 145,
            column: 54
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 145,
            column: 54
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "10": {
        loc: {
          start: {
            line: 149,
            column: 44
          },
          end: {
            line: 149,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 149,
            column: 70
          },
          end: {
            line: 149,
            column: 89
          }
        }, {
          start: {
            line: 149,
            column: 92
          },
          end: {
            line: 149,
            column: 103
          }
        }],
        line: 149
      },
      "11": {
        loc: {
          start: {
            line: 163,
            column: 44
          },
          end: {
            line: 163,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 163,
            column: 70
          },
          end: {
            line: 163,
            column: 89
          }
        }, {
          start: {
            line: 163,
            column: 92
          },
          end: {
            line: 163,
            column: 103
          }
        }],
        line: 163
      },
      "12": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 176,
            column: 54
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 176,
            column: 54
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "13": {
        loc: {
          start: {
            line: 181,
            column: 24
          },
          end: {
            line: 181,
            column: 162
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 181,
            column: 54
          },
          end: {
            line: 181,
            column: 61
          }
        }, {
          start: {
            line: 181,
            column: 64
          },
          end: {
            line: 181,
            column: 162
          }
        }],
        line: 181
      },
      "14": {
        loc: {
          start: {
            line: 181,
            column: 64
          },
          end: {
            line: 181,
            column: 162
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 181,
            column: 93
          },
          end: {
            line: 181,
            column: 104
          }
        }, {
          start: {
            line: 181,
            column: 107
          },
          end: {
            line: 181,
            column: 162
          }
        }],
        line: 181
      },
      "15": {
        loc: {
          start: {
            line: 181,
            column: 107
          },
          end: {
            line: 181,
            column: 162
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 181,
            column: 132
          },
          end: {
            line: 181,
            column: 144
          }
        }, {
          start: {
            line: 181,
            column: 147
          },
          end: {
            line: 181,
            column: 162
          }
        }],
        line: 181
      },
      "16": {
        loc: {
          start: {
            line: 182,
            column: 27
          },
          end: {
            line: 182,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 182,
            column: 27
          },
          end: {
            line: 182,
            column: 42
          }
        }, {
          start: {
            line: 182,
            column: 46
          },
          end: {
            line: 182,
            column: 51
          }
        }],
        line: 182
      },
      "17": {
        loc: {
          start: {
            line: 190,
            column: 27
          },
          end: {
            line: 190,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 190,
            column: 41
          },
          end: {
            line: 190,
            column: 47
          }
        }, {
          start: {
            line: 190,
            column: 50
          },
          end: {
            line: 190,
            column: 59
          }
        }],
        line: 190
      },
      "18": {
        loc: {
          start: {
            line: 201,
            column: 16
          },
          end: {
            line: 218,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 16
          },
          end: {
            line: 218,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "19": {
        loc: {
          start: {
            line: 204,
            column: 34
          },
          end: {
            line: 204,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 204,
            column: 59
          },
          end: {
            line: 204,
            column: 65
          }
        }, {
          start: {
            line: 204,
            column: 68
          },
          end: {
            line: 204,
            column: 76
          }
        }],
        line: 204
      },
      "20": {
        loc: {
          start: {
            line: 249,
            column: 59
          },
          end: {
            line: 249,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 249,
            column: 59
          },
          end: {
            line: 249,
            column: 64
          }
        }, {
          start: {
            line: 249,
            column: 68
          },
          end: {
            line: 249,
            column: 72
          }
        }],
        line: 249
      },
      "21": {
        loc: {
          start: {
            line: 254,
            column: 16
          },
          end: {
            line: 287,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 16
          },
          end: {
            line: 287,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "22": {
        loc: {
          start: {
            line: 259,
            column: 31
          },
          end: {
            line: 259,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 259,
            column: 52
          },
          end: {
            line: 259,
            column: 61
          }
        }, {
          start: {
            line: 259,
            column: 64
          },
          end: {
            line: 259,
            column: 70
          }
        }],
        line: 259
      },
      "23": {
        loc: {
          start: {
            line: 269,
            column: 20
          },
          end: {
            line: 286,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 269,
            column: 20
          },
          end: {
            line: 286,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 269
      },
      "24": {
        loc: {
          start: {
            line: 272,
            column: 38
          },
          end: {
            line: 272,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 272,
            column: 59
          },
          end: {
            line: 272,
            column: 65
          }
        }, {
          start: {
            line: 272,
            column: 68
          },
          end: {
            line: 272,
            column: 76
          }
        }],
        line: 272
      },
      "25": {
        loc: {
          start: {
            line: 290,
            column: 16
          },
          end: {
            line: 307,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 290,
            column: 16
          },
          end: {
            line: 307,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 290
      },
      "26": {
        loc: {
          start: {
            line: 313,
            column: 8
          },
          end: {
            line: 313,
            column: 60
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 313,
            column: 8
          },
          end: {
            line: 313,
            column: 60
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 313
      },
      "27": {
        loc: {
          start: {
            line: 316,
            column: 12
          },
          end: {
            line: 336,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 12
          },
          end: {
            line: 336,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 316
      },
      "28": {
        loc: {
          start: {
            line: 316,
            column: 16
          },
          end: {
            line: 316,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 316,
            column: 16
          },
          end: {
            line: 316,
            column: 28
          }
        }, {
          start: {
            line: 316,
            column: 32
          },
          end: {
            line: 316,
            column: 55
          }
        }],
        line: 316
      },
      "29": {
        loc: {
          start: {
            line: 319,
            column: 28
          },
          end: {
            line: 319,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 319,
            column: 28
          },
          end: {
            line: 319,
            column: 38
          }
        }, {
          start: {
            line: 319,
            column: 42
          },
          end: {
            line: 319,
            column: 53
          }
        }],
        line: 319
      },
      "30": {
        loc: {
          start: {
            line: 320,
            column: 16
          },
          end: {
            line: 335,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 320,
            column: 16
          },
          end: {
            line: 335,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 320
      },
      "31": {
        loc: {
          start: {
            line: 340,
            column: 8
          },
          end: {
            line: 340,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 340,
            column: 8
          },
          end: {
            line: 340,
            column: 58
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 340
      },
      "32": {
        loc: {
          start: {
            line: 342,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 342,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 342
      },
      "33": {
        loc: {
          start: {
            line: 346,
            column: 24
          },
          end: {
            line: 358,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 346,
            column: 24
          },
          end: {
            line: 358,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 346
      },
      "34": {
        loc: {
          start: {
            line: 371,
            column: 8
          },
          end: {
            line: 391,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 371,
            column: 8
          },
          end: {
            line: 391,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 371
      },
      "35": {
        loc: {
          start: {
            line: 377,
            column: 16
          },
          end: {
            line: 389,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 377,
            column: 16
          },
          end: {
            line: 389,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 377
      },
      "36": {
        loc: {
          start: {
            line: 394,
            column: 8
          },
          end: {
            line: 394,
            column: 62
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 394,
            column: 8
          },
          end: {
            line: 394,
            column: 62
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 394
      },
      "37": {
        loc: {
          start: {
            line: 403,
            column: 51
          },
          end: {
            line: 403,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 403,
            column: 56
          },
          end: {
            line: 403,
            column: 64
          }
        }, {
          start: {
            line: 403,
            column: 67
          },
          end: {
            line: 403,
            column: 69
          }
        }],
        line: 403
      },
      "38": {
        loc: {
          start: {
            line: 403,
            column: 72
          },
          end: {
            line: 403,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 403,
            column: 84
          },
          end: {
            line: 403,
            column: 113
          }
        }, {
          start: {
            line: 403,
            column: 116
          },
          end: {
            line: 403,
            column: 118
          }
        }],
        line: 403
      },
      "39": {
        loc: {
          start: {
            line: 432,
            column: 24
          },
          end: {
            line: 432,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 432,
            column: 34
          },
          end: {
            line: 432,
            column: 36
          }
        }],
        line: 432
      },
      "40": {
        loc: {
          start: {
            line: 435,
            column: 8
          },
          end: {
            line: 437,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 435,
            column: 8
          },
          end: {
            line: 437,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 435
      },
      "41": {
        loc: {
          start: {
            line: 460,
            column: 8
          },
          end: {
            line: 465,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 460,
            column: 8
          },
          end: {
            line: 465,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 460
      },
      "42": {
        loc: {
          start: {
            line: 467,
            column: 8
          },
          end: {
            line: 469,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 467,
            column: 8
          },
          end: {
            line: 469,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 467
      },
      "43": {
        loc: {
          start: {
            line: 467,
            column: 12
          },
          end: {
            line: 467,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 467,
            column: 12
          },
          end: {
            line: 467,
            column: 38
          }
        }, {
          start: {
            line: 467,
            column: 42
          },
          end: {
            line: 467,
            column: 68
          }
        }],
        line: 467
      },
      "44": {
        loc: {
          start: {
            line: 487,
            column: 12
          },
          end: {
            line: 489,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 487,
            column: 12
          },
          end: {
            line: 489,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 487
      },
      "45": {
        loc: {
          start: {
            line: 520,
            column: 27
          },
          end: {
            line: 520,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 520,
            column: 38
          },
          end: {
            line: 520,
            column: 47
          }
        }],
        line: 520
      },
      "46": {
        loc: {
          start: {
            line: 520,
            column: 49
          },
          end: {
            line: 520,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 520,
            column: 57
          },
          end: {
            line: 520,
            column: 63
          }
        }],
        line: 520
      },
      "47": {
        loc: {
          start: {
            line: 545,
            column: 4
          },
          end: {
            line: 548,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 545,
            column: 4
          },
          end: {
            line: 548,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 545
      },
      "48": {
        loc: {
          start: {
            line: 554,
            column: 11
          },
          end: {
            line: 554,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 554,
            column: 11
          },
          end: {
            line: 554,
            column: 29
          }
        }, {
          start: {
            line: 554,
            column: 33
          },
          end: {
            line: 554,
            column: 37
          }
        }],
        line: 554
      },
      "49": {
        loc: {
          start: {
            line: 557,
            column: 4
          },
          end: {
            line: 560,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 557,
            column: 4
          },
          end: {
            line: 560,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 557
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0],
      "46": [0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\globalErrorHandler.ts"],
      sourcesContent: ["import { ErrorTracker } from './errorTracking';\n\ninterface GlobalErrorHandlerConfig {\n  enableConsoleCapture?: boolean;\n  enableNetworkCapture?: boolean;\n  enablePerformanceCapture?: boolean;\n  enableUserInteractionCapture?: boolean;\n  enableUnhandledRejectionCapture?: boolean;\n  enableResourceErrorCapture?: boolean;\n  maxBreadcrumbs?: number;\n  enableAutoErrorResolution?: boolean;\n  reportToConsole?: boolean;\n  reportToServer?: boolean;\n  serverEndpoint?: string;\n  apiKey?: string;\n  environment?: string;\n  release?: string;\n  userId?: string;\n  sessionId?: string;\n  beforeSend?: (error: any) => any | null;\n  onError?: (error: any) => void;\n}\n\nclass GlobalErrorHandler {\n  private errorTracker: ErrorTracker;\n  private config: Required<GlobalErrorHandlerConfig>;\n  private isInitialized = false;\n  private originalConsoleError: typeof console.error;\n  private originalConsoleWarn: typeof console.warn;\n  private sessionId: string;\n\n  constructor(config: GlobalErrorHandlerConfig = {}) {\n    this.config = {\n      enableConsoleCapture: true,\n      enableNetworkCapture: true,\n      enablePerformanceCapture: true,\n      enableUserInteractionCapture: true,\n      enableUnhandledRejectionCapture: true,\n      enableResourceErrorCapture: true,\n      maxBreadcrumbs: 100,\n      enableAutoErrorResolution: false,\n      reportToConsole: process.env.NODE_ENV === 'development',\n      reportToServer: process.env.NODE_ENV === 'production',\n      serverEndpoint: '/api/errors',\n      apiKey: '',\n      environment: process.env.NODE_ENV || 'development',\n      release: process.env.NEXT_PUBLIC_APP_VERSION || '1.0.0',\n      userId: '',\n      sessionId: '',\n      beforeSend: (error) => error,\n      onError: () => {},\n      ...config\n    };\n\n    this.sessionId = this.generateSessionId();\n    this.config.sessionId = this.sessionId;\n\n    this.errorTracker = new ErrorTracker();\n\n    this.originalConsoleError = console.error;\n    this.originalConsoleWarn = console.warn;\n  }\n\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  public initialize(): void {\n    if (this.isInitialized) {\n      console.warn('GlobalErrorHandler is already initialized');\n      return;\n    }\n\n    if (typeof window === 'undefined') {\n      console.warn('GlobalErrorHandler can only be initialized in browser environment');\n      return;\n    }\n\n    this.setupGlobalErrorHandlers();\n    this.setupConsoleCapture();\n    this.setupNetworkErrorCapture();\n    this.setupResourceErrorCapture();\n    this.setupPerformanceMonitoring();\n    this.setupUserInteractionTracking();\n\n    this.isInitialized = true;\n\n    // Add breadcrumb for initialization\n    this.errorTracker.addBreadcrumb({\n      message: 'Global error handler initialized',\n      category: 'console',\n      level: 'info',\n      timestamp: Date.now(),\n      data: {\n        sessionId: this.sessionId,\n        environment: this.config.environment,\n        release: this.config.release\n      }\n    });\n\n    console.log('\uD83D\uDEE1\uFE0F Global Error Handler initialized');\n  }\n\n  public destroy(): void {\n    if (!this.isInitialized) {\n      return;\n    }\n\n    // Remove event listeners\n    window.removeEventListener('error', this.handleGlobalError);\n    window.removeEventListener('unhandledrejection', this.handleUnhandledRejection);\n\n    // Restore original console methods\n    console.error = this.originalConsoleError;\n    console.warn = this.originalConsoleWarn;\n\n    this.isInitialized = false;\n    console.log('\uD83D\uDEE1\uFE0F Global Error Handler destroyed');\n  }\n\n  private setupGlobalErrorHandlers(): void {\n    // Handle JavaScript errors\n    window.addEventListener('error', this.handleGlobalError);\n\n    // Handle unhandled promise rejections\n    if (this.config.enableUnhandledRejectionCapture) {\n      window.addEventListener('unhandledrejection', this.handleUnhandledRejection);\n    }\n  }\n\n  private handleGlobalError = (event: ErrorEvent): void => {\n    const error = event.error || new Error(event.message);\n    \n    this.captureError(error, {\n      category: 'javascript',\n      severity: 'high',\n      context: {\n        filename: event.filename,\n        lineno: event.lineno,\n        colno: event.colno,\n        source: 'global-error-handler',\n        type: 'ErrorEvent'\n      },\n      tags: {\n        source: 'window.onerror'\n      }\n    });\n  };\n\n  private handleUnhandledRejection = (event: PromiseRejectionEvent): void => {\n    const error = event.reason instanceof Error \n      ? event.reason \n      : new Error(String(event.reason));\n    \n    this.captureError(error, {\n      category: 'promise',\n      severity: 'high',\n      context: {\n        reason: event.reason,\n        source: 'global-error-handler',\n        type: 'PromiseRejectionEvent'\n      },\n      tags: {\n        source: 'unhandledrejection'\n      }\n    });\n\n    // Prevent the default browser behavior\n    event.preventDefault();\n  };\n\n  private setupConsoleCapture(): void {\n    if (!this.config.enableConsoleCapture) return;\n\n    // Capture console.error calls\n    console.error = (...args: any[]) => {\n      this.originalConsoleError.apply(console, args);\n      \n      const message = args.map(arg => \n        typeof arg === 'object' ? JSON.stringify(arg) : String(arg)\n      ).join(' ');\n      \n      this.errorTracker.addBreadcrumb({\n        message: `Console Error: ${message}`,\n        category: 'console',\n        level: 'error',\n        timestamp: Date.now(),\n        data: { args }\n      });\n    };\n\n    // Capture console.warn calls\n    console.warn = (...args: any[]) => {\n      this.originalConsoleWarn.apply(console, args);\n      \n      const message = args.map(arg => \n        typeof arg === 'object' ? JSON.stringify(arg) : String(arg)\n      ).join(' ');\n      \n      this.errorTracker.addBreadcrumb({\n        message: `Console Warning: ${message}`,\n        category: 'console',\n        level: 'warning',\n        timestamp: Date.now(),\n        data: { args }\n      });\n    };\n  }\n\n  private setupNetworkErrorCapture(): void {\n    if (!this.config.enableNetworkCapture) return;\n\n    // Intercept fetch requests\n    const originalFetch = window.fetch;\n    window.fetch = async (...args: Parameters<typeof fetch>) => {\n      const startTime = Date.now();\n      const url = typeof args[0] === 'string' ? args[0] : \n                   args[0] instanceof Request ? args[0].url : \n                   args[0] instanceof URL ? args[0].href : \n                   String(args[0]);\n      const method = args[1]?.method || 'GET';\n\n      try {\n        const response = await originalFetch(...args);\n        const duration = Date.now() - startTime;\n\n        // Log successful requests as breadcrumbs\n        this.errorTracker.addBreadcrumb({\n          message: `HTTP ${method} ${url}`,\n          category: 'http',\n          level: response.ok ? 'info' : 'warning',\n          timestamp: Date.now(),\n          data: {\n            url,\n            method,\n            status: response.status,\n            statusText: response.statusText,\n            duration\n          }\n        });\n\n        // Capture HTTP errors\n        if (!response.ok) {\n          this.captureError(new Error(`HTTP ${response.status}: ${response.statusText}`), {\n            category: 'network',\n            severity: response.status >= 500 ? 'high' : 'medium',\n            context: {\n              url,\n              method,\n              status: response.status,\n              statusText: response.statusText,\n              duration,\n              source: 'fetch-interceptor'\n            },\n            tags: {\n              httpStatus: response.status.toString(),\n              httpMethod: method\n            }\n          });\n        }\n\n        return response;\n      } catch (error) {\n        const duration = Date.now() - startTime;\n        \n        this.captureError(error as Error, {\n          category: 'network',\n          severity: 'high',\n          context: {\n            url,\n            method,\n            duration,\n            source: 'fetch-interceptor',\n            type: 'NetworkError'\n          },\n          tags: {\n            httpMethod: method,\n            networkError: true\n          }\n        });\n\n        throw error;\n      }\n    };\n\n    // Intercept XMLHttpRequest\n    const originalXHROpen = XMLHttpRequest.prototype.open;\n    const originalXHRSend = XMLHttpRequest.prototype.send;\n\n    XMLHttpRequest.prototype.open = function(method: string, url: string | URL, async?: boolean, username?: string | null, password?: string | null) {\n      (this as any)._errorHandler = {\n        method,\n        url: url.toString(),\n        startTime: Date.now()\n      };\n      return originalXHROpen.call(this, method, url, async ?? true, username, password);\n    };\n\n    XMLHttpRequest.prototype.send = function(body?: Document | XMLHttpRequestBodyInit | null) {\n      const errorHandler = (this as any)._errorHandler;\n      \n      this.addEventListener('load', () => {\n        if (errorHandler) {\n          const duration = Date.now() - errorHandler.startTime;\n          \n          globalErrorHandler.errorTracker.addBreadcrumb({\n            message: `XHR ${errorHandler.method} ${errorHandler.url}`,\n            category: 'http',\n            level: this.status >= 400 ? 'warning' : 'info',\n            timestamp: Date.now(),\n            data: {\n              url: errorHandler.url,\n              method: errorHandler.method,\n              status: this.status,\n              statusText: this.statusText,\n              duration\n            }\n          });\n\n          if (this.status >= 400) {\n            globalErrorHandler.captureError(\n              new Error(`XHR ${this.status}: ${this.statusText}`),\n              {\n                category: 'network',\n                severity: this.status >= 500 ? 'high' : 'medium',\n                context: {\n                  url: errorHandler.url,\n                  method: errorHandler.method,\n                  status: this.status,\n                  statusText: this.statusText,\n                  duration,\n                  source: 'xhr-interceptor'\n                },\n                tags: {\n                  httpStatus: this.status.toString(),\n                  httpMethod: errorHandler.method\n                }\n              }\n            );\n          }\n        }\n      });\n\n      this.addEventListener('error', () => {\n        if (errorHandler) {\n          const duration = Date.now() - errorHandler.startTime;\n          \n          globalErrorHandler.captureError(\n            new Error(`XHR Network Error: ${errorHandler.method} ${errorHandler.url}`),\n            {\n              category: 'network',\n              severity: 'high',\n              context: {\n                url: errorHandler.url,\n                method: errorHandler.method,\n                duration,\n                source: 'xhr-interceptor',\n                type: 'NetworkError'\n              },\n              tags: {\n                httpMethod: errorHandler.method,\n                networkError: true\n              }\n            }\n          );\n        }\n      });\n\n      return originalXHRSend.call(this, body);\n    };\n  }\n\n  private setupResourceErrorCapture(): void {\n    if (!this.config.enableResourceErrorCapture) return;\n\n    window.addEventListener('error', (event) => {\n      // Handle resource loading errors (images, scripts, stylesheets, etc.)\n      if (event.target && event.target !== window) {\n        const target = event.target as HTMLElement;\n        const tagName = target.tagName?.toLowerCase();\n        const src = (target as any).src || (target as any).href;\n\n        if (src) {\n          this.captureError(new Error(`Resource loading failed: ${src}`), {\n            category: 'resource',\n            severity: 'medium',\n            context: {\n              tagName,\n              src,\n              source: 'resource-error-handler',\n              type: 'ResourceError'\n            },\n            tags: {\n              resourceType: tagName,\n              resourceError: true\n            }\n          });\n        }\n      }\n    }, true); // Use capture phase\n  }\n\n  private setupPerformanceMonitoring(): void {\n    if (!this.config.enablePerformanceCapture) return;\n\n    // Monitor long tasks\n    if ('PerformanceObserver' in window) {\n      try {\n        const longTaskObserver = new PerformanceObserver((list) => {\n          for (const entry of list.getEntries()) {\n            if (entry.duration > 50) { // Tasks longer than 50ms\n              this.errorTracker.addBreadcrumb({\n                message: `Long task detected: ${entry.duration.toFixed(2)}ms`,\n                category: 'performance',\n                level: 'warning',\n                timestamp: Date.now(),\n                data: {\n                  duration: entry.duration,\n                  startTime: entry.startTime,\n                  name: entry.name\n                }\n              });\n            }\n          }\n        });\n        \n        longTaskObserver.observe({ entryTypes: ['longtask'] });\n      } catch (error) {\n        console.warn('Long task observer not supported:', error);\n      }\n    }\n\n    // Monitor memory usage\n    if ('memory' in performance) {\n      setInterval(() => {\n        const memory = (performance as any).memory;\n        const usedMB = memory.usedJSHeapSize / 1024 / 1024;\n        const limitMB = memory.jsHeapSizeLimit / 1024 / 1024;\n        const usagePercent = (usedMB / limitMB) * 100;\n\n        if (usagePercent > 80) {\n          this.errorTracker.addBreadcrumb({\n            message: `High memory usage: ${usagePercent.toFixed(1)}%`,\n            category: 'performance',\n            level: 'warning',\n            timestamp: Date.now(),\n            data: {\n              usedMB: usedMB.toFixed(2),\n              limitMB: limitMB.toFixed(2),\n              usagePercent: usagePercent.toFixed(1)\n            }\n          });\n        }\n      }, 30000); // Check every 30 seconds\n    }\n  }\n\n  private setupUserInteractionTracking(): void {\n    if (!this.config.enableUserInteractionCapture) return;\n\n    // Track clicks\n    document.addEventListener('click', (event) => {\n      const target = event.target as HTMLElement;\n      const tagName = target.tagName?.toLowerCase();\n      const id = target.id;\n      const className = target.className;\n      const text = target.textContent?.slice(0, 50);\n\n      this.errorTracker.addBreadcrumb({\n        message: `User clicked ${tagName}${id ? `#${id}` : ''}${className ? `.${className.split(' ')[0]}` : ''}`,\n        category: 'user',\n        level: 'info',\n        timestamp: Date.now(),\n        data: {\n          tagName,\n          id,\n          className,\n          text,\n          x: event.clientX,\n          y: event.clientY\n        }\n      });\n    });\n\n    // Track navigation\n    window.addEventListener('popstate', () => {\n      this.errorTracker.addBreadcrumb({\n        message: `Navigation to ${window.location.pathname}`,\n        category: 'navigation',\n        level: 'info',\n        timestamp: Date.now(),\n        data: {\n          pathname: window.location.pathname,\n          search: window.location.search,\n          hash: window.location.hash\n        }\n      });\n    });\n  }\n\n  public captureError(error: Error, options: any = {}): string {\n    // Apply beforeSend filter\n    const processedError = this.config.beforeSend(error);\n    if (!processedError) {\n      return '';\n    }\n\n    // Add global context\n    const enhancedOptions = {\n      ...options,\n      context: {\n        ...options.context,\n        sessionId: this.sessionId,\n        userId: this.config.userId,\n        environment: this.config.environment,\n        release: this.config.release,\n        userAgent: navigator.userAgent,\n        url: window.location.href,\n        timestamp: Date.now()\n      },\n      tags: {\n        ...options.tags,\n        environment: this.config.environment,\n        release: this.config.release\n      }\n    };\n\n    // Capture with error tracker\n    const errorId = this.errorTracker.captureError(processedError, enhancedOptions);\n\n    // Report to console if enabled\n    if (this.config.reportToConsole) {\n      console.group(`\uD83D\uDEA8 Error Captured [${errorId}]`);\n      console.error('Error:', processedError);\n      console.error('Options:', enhancedOptions);\n      console.groupEnd();\n    }\n\n    // Report to server if enabled\n    if (this.config.reportToServer && this.config.serverEndpoint) {\n      this.reportToServer(errorId, processedError, enhancedOptions);\n    }\n\n    // Call custom error handler\n    this.config.onError(processedError);\n\n    return errorId;\n  }\n\n  private async reportToServer(errorId: string, error: Error, options: any): Promise<void> {\n    try {\n      const payload = {\n        errorId,\n        message: error.message,\n        stack: error.stack,\n        name: error.name,\n        ...options,\n        timestamp: Date.now()\n      };\n\n      const headers: Record<string, string> = {\n        'Content-Type': 'application/json'\n      };\n\n      if (this.config.apiKey) {\n        headers['Authorization'] = `Bearer ${this.config.apiKey}`;\n      }\n\n      await fetch(this.config.serverEndpoint, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(payload)\n      });\n    } catch (reportError) {\n      console.error('Failed to report error to server:', reportError);\n    }\n  }\n\n  public setUser(userId: string, userData?: Record<string, any>): void {\n    this.config.userId = userId;\n    \n    this.errorTracker.addBreadcrumb({\n      message: `User identified: ${userId}`,\n      category: 'user',\n      level: 'info',\n      timestamp: Date.now(),\n      data: userData\n    });\n  }\n\n  public setContext(key: string, value: any): void {\n    this.errorTracker.addBreadcrumb({\n      message: `Context updated: ${key}`,\n      category: 'console',\n      level: 'info',\n      timestamp: Date.now(),\n      data: { [key]: value }\n    });\n  }\n\n  public addBreadcrumb(message: string, category: 'navigation' | 'user' | 'console' | 'network' | 'dom' | 'http' | 'performance' = 'console', level: 'info' | 'warning' | 'error' | 'debug' = 'info', data?: any): void {\n    this.errorTracker.addBreadcrumb({\n      message,\n      category,\n      level,\n      timestamp: Date.now(),\n      data\n    });\n  }\n\n  public getMetrics() {\n    return this.errorTracker.getMetrics();\n  }\n\n  public getRecentErrors() {\n    return this.errorTracker.getRecentErrors();\n  }\n\n  public clearErrors(): void {\n    this.errorTracker.clearErrors();\n  }\n\n  public exportErrors(): string {\n    return this.errorTracker.exportErrors();\n  }\n}\n\n// Global instance\nlet globalErrorHandler: GlobalErrorHandler;\n\nexport const initializeGlobalErrorHandler = (config?: GlobalErrorHandlerConfig): GlobalErrorHandler => {\n  if (globalErrorHandler) {\n    console.warn('Global error handler already initialized');\n    return globalErrorHandler;\n  }\n\n  globalErrorHandler = new GlobalErrorHandler(config);\n  globalErrorHandler.initialize();\n  \n  return globalErrorHandler;\n};\n\nexport const getGlobalErrorHandler = (): GlobalErrorHandler | null => {\n  return globalErrorHandler || null;\n};\n\nexport const destroyGlobalErrorHandler = (): void => {\n  if (globalErrorHandler) {\n    globalErrorHandler.destroy();\n    globalErrorHandler = null as any;\n  }\n};\n\nexport { GlobalErrorHandler };\nexport type { GlobalErrorHandlerConfig };"],
      names: ["GlobalErrorHandler", "destroyGlobalErrorHandler", "getGlobalErrorHandler", "initializeGlobalErrorHandler", "config", "isInitialized", "handleGlobalError", "event", "error", "Error", "message", "captureError", "category", "severity", "context", "filename", "lineno", "colno", "source", "type", "tags", "handleUnhandledRejection", "reason", "String", "preventDefault", "enableConsoleCapture", "enableNetworkCapture", "enablePerformanceCapture", "enableUserInteractionCapture", "enableUnhandledRejectionCapture", "enableResourceErrorCapture", "maxBreadcrumbs", "enableAutoErrorResolution", "reportToConsole", "process", "env", "NODE_ENV", "reportToServer", "serverEndpoint", "apiKey", "environment", "release", "NEXT_PUBLIC_APP_VERSION", "userId", "sessionId", "beforeSend", "onError", "generateSessionId", "errorTracker", "ErrorTracker", "originalConsoleError", "console", "originalConsoleWarn", "warn", "Date", "now", "Math", "random", "toString", "substr", "initialize", "window", "setupGlobalErrorHandlers", "setupConsoleCapture", "setupNetworkErrorCapture", "setupResourceErrorCapture", "setupPerformanceMonitoring", "setupUserInteractionTracking", "addBreadcrumb", "level", "timestamp", "data", "log", "destroy", "removeEventListener", "addEventListener", "args", "apply", "map", "arg", "JSON", "stringify", "join", "originalFetch", "fetch", "startTime", "url", "Request", "URL", "href", "method", "response", "duration", "ok", "status", "statusText", "httpStatus", "httpMethod", "networkError", "originalXHROpen", "XMLHttpRequest", "prototype", "open", "originalXHRSend", "send", "async", "username", "password", "_errorHandler", "call", "body", "errorHandler", "globalErrorHandler", "target", "tagName", "toLowerCase", "src", "resourceType", "resourceError", "longTaskObserver", "PerformanceObserver", "list", "entry", "getEntries", "toFixed", "name", "observe", "entryTypes", "performance", "setInterval", "memory", "usedMB", "usedJSHeapSize", "limitMB", "jsHeapSizeLimit", "usagePercent", "document", "id", "className", "text", "textContent", "slice", "split", "x", "clientX", "y", "clientY", "location", "pathname", "search", "hash", "options", "processedError", "enhancedOptions", "userAgent", "navigator", "errorId", "group", "groupEnd", "payload", "stack", "headers", "reportError", "setUser", "userData", "setContext", "key", "value", "getMetrics", "getRecentErrors", "clearErrors", "exportErrors"],
      mappings: ";;;;;;;;;;;QA6oBSA;eAAAA;;QAPIC;eAAAA;;QAJAC;eAAAA;;QAZAC;eAAAA;;;+BAtnBgB;AAuB7B,MAAMH;IAQJ,YAAYI,SAAmC,CAAC,CAAC,CAAE;aAL3CC,gBAAgB;aAwGhBC,oBAAoB,CAACC;YAC3B,MAAMC,QAAQD,MAAMC,KAAK,IAAI,IAAIC,MAAMF,MAAMG,OAAO;YAEpD,IAAI,CAACC,YAAY,CAACH,OAAO;gBACvBI,UAAU;gBACVC,UAAU;gBACVC,SAAS;oBACPC,UAAUR,MAAMQ,QAAQ;oBACxBC,QAAQT,MAAMS,MAAM;oBACpBC,OAAOV,MAAMU,KAAK;oBAClBC,QAAQ;oBACRC,MAAM;gBACR;gBACAC,MAAM;oBACJF,QAAQ;gBACV;YACF;QACF;aAEQG,2BAA2B,CAACd;YAClC,MAAMC,QAAQD,MAAMe,MAAM,YAAYb,QAClCF,MAAMe,MAAM,GACZ,IAAIb,MAAMc,OAAOhB,MAAMe,MAAM;YAEjC,IAAI,CAACX,YAAY,CAACH,OAAO;gBACvBI,UAAU;gBACVC,UAAU;gBACVC,SAAS;oBACPQ,QAAQf,MAAMe,MAAM;oBACpBJ,QAAQ;oBACRC,MAAM;gBACR;gBACAC,MAAM;oBACJF,QAAQ;gBACV;YACF;YAEA,uCAAuC;YACvCX,MAAMiB,cAAc;QACtB;QAzIE,IAAI,CAACpB,MAAM,GAAG;YACZqB,sBAAsB;YACtBC,sBAAsB;YACtBC,0BAA0B;YAC1BC,8BAA8B;YAC9BC,iCAAiC;YACjCC,4BAA4B;YAC5BC,gBAAgB;YAChBC,2BAA2B;YAC3BC,iBAAiBC,QAAQC,GAAG,CAACC,QAAQ,KAAK;YAC1CC,gBAAgBH,QAAQC,GAAG,CAACC,QAAQ,KAAK;YACzCE,gBAAgB;YAChBC,QAAQ;YACRC,aAAaN,QAAQC,GAAG,CAACC,QAAQ,IAAI;YACrCK,SAASP,QAAQC,GAAG,CAACO,uBAAuB,IAAI;YAChDC,QAAQ;YACRC,WAAW;YACXC,YAAY,CAACrC,QAAUA;YACvBsC,SAAS,KAAO;YAChB,GAAG1C,MAAM;QACX;QAEA,IAAI,CAACwC,SAAS,GAAG,IAAI,CAACG,iBAAiB;QACvC,IAAI,CAAC3C,MAAM,CAACwC,SAAS,GAAG,IAAI,CAACA,SAAS;QAEtC,IAAI,CAACI,YAAY,GAAG,IAAIC,2BAAY;QAEpC,IAAI,CAACC,oBAAoB,GAAGC,QAAQ3C,KAAK;QACzC,IAAI,CAAC4C,mBAAmB,GAAGD,QAAQE,IAAI;IACzC;IAEQN,oBAA4B;QAClC,OAAO,CAAC,QAAQ,EAAEO,KAAKC,GAAG,GAAG,CAAC,EAAEC,KAAKC,MAAM,GAAGC,QAAQ,CAAC,IAAIC,MAAM,CAAC,GAAG,IAAI;IAC3E;IAEOC,aAAmB;QACxB,IAAI,IAAI,CAACvD,aAAa,EAAE;YACtB8C,QAAQE,IAAI,CAAC;YACb;QACF;QAEA,IAAI,OAAOQ,WAAW,aAAa;YACjCV,QAAQE,IAAI,CAAC;YACb;QACF;QAEA,IAAI,CAACS,wBAAwB;QAC7B,IAAI,CAACC,mBAAmB;QACxB,IAAI,CAACC,wBAAwB;QAC7B,IAAI,CAACC,yBAAyB;QAC9B,IAAI,CAACC,0BAA0B;QAC/B,IAAI,CAACC,4BAA4B;QAEjC,IAAI,CAAC9D,aAAa,GAAG;QAErB,oCAAoC;QACpC,IAAI,CAAC2C,YAAY,CAACoB,aAAa,CAAC;YAC9B1D,SAAS;YACTE,UAAU;YACVyD,OAAO;YACPC,WAAWhB,KAAKC,GAAG;YACnBgB,MAAM;gBACJ3B,WAAW,IAAI,CAACA,SAAS;gBACzBJ,aAAa,IAAI,CAACpC,MAAM,CAACoC,WAAW;gBACpCC,SAAS,IAAI,CAACrC,MAAM,CAACqC,OAAO;YAC9B;QACF;QAEAU,QAAQqB,GAAG,CAAC;IACd;IAEOC,UAAgB;QACrB,IAAI,CAAC,IAAI,CAACpE,aAAa,EAAE;YACvB;QACF;QAEA,yBAAyB;QACzBwD,OAAOa,mBAAmB,CAAC,SAAS,IAAI,CAACpE,iBAAiB;QAC1DuD,OAAOa,mBAAmB,CAAC,sBAAsB,IAAI,CAACrD,wBAAwB;QAE9E,mCAAmC;QACnC8B,QAAQ3C,KAAK,GAAG,IAAI,CAAC0C,oBAAoB;QACzCC,QAAQE,IAAI,GAAG,IAAI,CAACD,mBAAmB;QAEvC,IAAI,CAAC/C,aAAa,GAAG;QACrB8C,QAAQqB,GAAG,CAAC;IACd;IAEQV,2BAAiC;QACvC,2BAA2B;QAC3BD,OAAOc,gBAAgB,CAAC,SAAS,IAAI,CAACrE,iBAAiB;QAEvD,sCAAsC;QACtC,IAAI,IAAI,CAACF,MAAM,CAACyB,+BAA+B,EAAE;YAC/CgC,OAAOc,gBAAgB,CAAC,sBAAsB,IAAI,CAACtD,wBAAwB;QAC7E;IACF;IA2CQ0C,sBAA4B;QAClC,IAAI,CAAC,IAAI,CAAC3D,MAAM,CAACqB,oBAAoB,EAAE;QAEvC,8BAA8B;QAC9B0B,QAAQ3C,KAAK,GAAG,CAAC,GAAGoE;YAClB,IAAI,CAAC1B,oBAAoB,CAAC2B,KAAK,CAAC1B,SAASyB;YAEzC,MAAMlE,UAAUkE,KAAKE,GAAG,CAACC,CAAAA,MACvB,OAAOA,QAAQ,WAAWC,KAAKC,SAAS,CAACF,OAAOxD,OAAOwD,MACvDG,IAAI,CAAC;YAEP,IAAI,CAAClC,YAAY,CAACoB,aAAa,CAAC;gBAC9B1D,SAAS,CAAC,eAAe,EAAEA,SAAS;gBACpCE,UAAU;gBACVyD,OAAO;gBACPC,WAAWhB,KAAKC,GAAG;gBACnBgB,MAAM;oBAAEK;gBAAK;YACf;QACF;QAEA,6BAA6B;QAC7BzB,QAAQE,IAAI,GAAG,CAAC,GAAGuB;YACjB,IAAI,CAACxB,mBAAmB,CAACyB,KAAK,CAAC1B,SAASyB;YAExC,MAAMlE,UAAUkE,KAAKE,GAAG,CAACC,CAAAA,MACvB,OAAOA,QAAQ,WAAWC,KAAKC,SAAS,CAACF,OAAOxD,OAAOwD,MACvDG,IAAI,CAAC;YAEP,IAAI,CAAClC,YAAY,CAACoB,aAAa,CAAC;gBAC9B1D,SAAS,CAAC,iBAAiB,EAAEA,SAAS;gBACtCE,UAAU;gBACVyD,OAAO;gBACPC,WAAWhB,KAAKC,GAAG;gBACnBgB,MAAM;oBAAEK;gBAAK;YACf;QACF;IACF;IAEQZ,2BAAiC;QACvC,IAAI,CAAC,IAAI,CAAC5D,MAAM,CAACsB,oBAAoB,EAAE;QAEvC,2BAA2B;QAC3B,MAAMyD,gBAAgBtB,OAAOuB,KAAK;QAClCvB,OAAOuB,KAAK,GAAG,OAAO,GAAGR;YACvB,MAAMS,YAAY/B,KAAKC,GAAG;YAC1B,MAAM+B,MAAM,OAAOV,IAAI,CAAC,EAAE,KAAK,WAAWA,IAAI,CAAC,EAAE,GACpCA,IAAI,CAAC,EAAE,YAAYW,UAAUX,IAAI,CAAC,EAAE,CAACU,GAAG,GACxCV,IAAI,CAAC,EAAE,YAAYY,MAAMZ,IAAI,CAAC,EAAE,CAACa,IAAI,GACrClE,OAAOqD,IAAI,CAAC,EAAE;YAC3B,MAAMc,SAASd,IAAI,CAAC,EAAE,EAAEc,UAAU;YAElC,IAAI;gBACF,MAAMC,WAAW,MAAMR,iBAAiBP;gBACxC,MAAMgB,WAAWtC,KAAKC,GAAG,KAAK8B;gBAE9B,yCAAyC;gBACzC,IAAI,CAACrC,YAAY,CAACoB,aAAa,CAAC;oBAC9B1D,SAAS,CAAC,KAAK,EAAEgF,OAAO,CAAC,EAAEJ,KAAK;oBAChC1E,UAAU;oBACVyD,OAAOsB,SAASE,EAAE,GAAG,SAAS;oBAC9BvB,WAAWhB,KAAKC,GAAG;oBACnBgB,MAAM;wBACJe;wBACAI;wBACAI,QAAQH,SAASG,MAAM;wBACvBC,YAAYJ,SAASI,UAAU;wBAC/BH;oBACF;gBACF;gBAEA,sBAAsB;gBACtB,IAAI,CAACD,SAASE,EAAE,EAAE;oBAChB,IAAI,CAAClF,YAAY,CAAC,IAAIF,MAAM,CAAC,KAAK,EAAEkF,SAASG,MAAM,CAAC,EAAE,EAAEH,SAASI,UAAU,EAAE,GAAG;wBAC9EnF,UAAU;wBACVC,UAAU8E,SAASG,MAAM,IAAI,MAAM,SAAS;wBAC5ChF,SAAS;4BACPwE;4BACAI;4BACAI,QAAQH,SAASG,MAAM;4BACvBC,YAAYJ,SAASI,UAAU;4BAC/BH;4BACA1E,QAAQ;wBACV;wBACAE,MAAM;4BACJ4E,YAAYL,SAASG,MAAM,CAACpC,QAAQ;4BACpCuC,YAAYP;wBACd;oBACF;gBACF;gBAEA,OAAOC;YACT,EAAE,OAAOnF,OAAO;gBACd,MAAMoF,WAAWtC,KAAKC,GAAG,KAAK8B;gBAE9B,IAAI,CAAC1E,YAAY,CAACH,OAAgB;oBAChCI,UAAU;oBACVC,UAAU;oBACVC,SAAS;wBACPwE;wBACAI;wBACAE;wBACA1E,QAAQ;wBACRC,MAAM;oBACR;oBACAC,MAAM;wBACJ6E,YAAYP;wBACZQ,cAAc;oBAChB;gBACF;gBAEA,MAAM1F;YACR;QACF;QAEA,2BAA2B;QAC3B,MAAM2F,kBAAkBC,eAAeC,SAAS,CAACC,IAAI;QACrD,MAAMC,kBAAkBH,eAAeC,SAAS,CAACG,IAAI;QAErDJ,eAAeC,SAAS,CAACC,IAAI,GAAG,SAASZ,MAAc,EAAEJ,GAAiB,EAAEmB,KAAe,EAAEC,QAAwB,EAAEC,QAAwB;YAC7I,AAAC,IAAI,CAASC,aAAa,GAAG;gBAC5BlB;gBACAJ,KAAKA,IAAI5B,QAAQ;gBACjB2B,WAAW/B,KAAKC,GAAG;YACrB;YACA,OAAO4C,gBAAgBU,IAAI,CAAC,IAAI,EAAEnB,QAAQJ,KAAKmB,SAAS,MAAMC,UAAUC;QAC1E;QAEAP,eAAeC,SAAS,CAACG,IAAI,GAAG,SAASM,IAA+C;YACtF,MAAMC,eAAe,AAAC,IAAI,CAASH,aAAa;YAEhD,IAAI,CAACjC,gBAAgB,CAAC,QAAQ;gBAC5B,IAAIoC,cAAc;oBAChB,MAAMnB,WAAWtC,KAAKC,GAAG,KAAKwD,aAAa1B,SAAS;oBAEpD2B,mBAAmBhE,YAAY,CAACoB,aAAa,CAAC;wBAC5C1D,SAAS,CAAC,IAAI,EAAEqG,aAAarB,MAAM,CAAC,CAAC,EAAEqB,aAAazB,GAAG,EAAE;wBACzD1E,UAAU;wBACVyD,OAAO,IAAI,CAACyB,MAAM,IAAI,MAAM,YAAY;wBACxCxB,WAAWhB,KAAKC,GAAG;wBACnBgB,MAAM;4BACJe,KAAKyB,aAAazB,GAAG;4BACrBI,QAAQqB,aAAarB,MAAM;4BAC3BI,QAAQ,IAAI,CAACA,MAAM;4BACnBC,YAAY,IAAI,CAACA,UAAU;4BAC3BH;wBACF;oBACF;oBAEA,IAAI,IAAI,CAACE,MAAM,IAAI,KAAK;wBACtBkB,mBAAmBrG,YAAY,CAC7B,IAAIF,MAAM,CAAC,IAAI,EAAE,IAAI,CAACqF,MAAM,CAAC,EAAE,EAAE,IAAI,CAACC,UAAU,EAAE,GAClD;4BACEnF,UAAU;4BACVC,UAAU,IAAI,CAACiF,MAAM,IAAI,MAAM,SAAS;4BACxChF,SAAS;gCACPwE,KAAKyB,aAAazB,GAAG;gCACrBI,QAAQqB,aAAarB,MAAM;gCAC3BI,QAAQ,IAAI,CAACA,MAAM;gCACnBC,YAAY,IAAI,CAACA,UAAU;gCAC3BH;gCACA1E,QAAQ;4BACV;4BACAE,MAAM;gCACJ4E,YAAY,IAAI,CAACF,MAAM,CAACpC,QAAQ;gCAChCuC,YAAYc,aAAarB,MAAM;4BACjC;wBACF;oBAEJ;gBACF;YACF;YAEA,IAAI,CAACf,gBAAgB,CAAC,SAAS;gBAC7B,IAAIoC,cAAc;oBAChB,MAAMnB,WAAWtC,KAAKC,GAAG,KAAKwD,aAAa1B,SAAS;oBAEpD2B,mBAAmBrG,YAAY,CAC7B,IAAIF,MAAM,CAAC,mBAAmB,EAAEsG,aAAarB,MAAM,CAAC,CAAC,EAAEqB,aAAazB,GAAG,EAAE,GACzE;wBACE1E,UAAU;wBACVC,UAAU;wBACVC,SAAS;4BACPwE,KAAKyB,aAAazB,GAAG;4BACrBI,QAAQqB,aAAarB,MAAM;4BAC3BE;4BACA1E,QAAQ;4BACRC,MAAM;wBACR;wBACAC,MAAM;4BACJ6E,YAAYc,aAAarB,MAAM;4BAC/BQ,cAAc;wBAChB;oBACF;gBAEJ;YACF;YAEA,OAAOK,gBAAgBM,IAAI,CAAC,IAAI,EAAEC;QACpC;IACF;IAEQ7C,4BAAkC;QACxC,IAAI,CAAC,IAAI,CAAC7D,MAAM,CAAC0B,0BAA0B,EAAE;QAE7C+B,OAAOc,gBAAgB,CAAC,SAAS,CAACpE;YAChC,sEAAsE;YACtE,IAAIA,MAAM0G,MAAM,IAAI1G,MAAM0G,MAAM,KAAKpD,QAAQ;gBAC3C,MAAMoD,SAAS1G,MAAM0G,MAAM;gBAC3B,MAAMC,UAAUD,OAAOC,OAAO,EAAEC;gBAChC,MAAMC,MAAM,AAACH,OAAeG,GAAG,IAAI,AAACH,OAAexB,IAAI;gBAEvD,IAAI2B,KAAK;oBACP,IAAI,CAACzG,YAAY,CAAC,IAAIF,MAAM,CAAC,yBAAyB,EAAE2G,KAAK,GAAG;wBAC9DxG,UAAU;wBACVC,UAAU;wBACVC,SAAS;4BACPoG;4BACAE;4BACAlG,QAAQ;4BACRC,MAAM;wBACR;wBACAC,MAAM;4BACJiG,cAAcH;4BACdI,eAAe;wBACjB;oBACF;gBACF;YACF;QACF,GAAG,OAAO,oBAAoB;IAChC;IAEQpD,6BAAmC;QACzC,IAAI,CAAC,IAAI,CAAC9D,MAAM,CAACuB,wBAAwB,EAAE;QAE3C,qBAAqB;QACrB,IAAI,yBAAyBkC,QAAQ;YACnC,IAAI;gBACF,MAAM0D,mBAAmB,IAAIC,oBAAoB,CAACC;oBAChD,KAAK,MAAMC,SAASD,KAAKE,UAAU,GAAI;wBACrC,IAAID,MAAM9B,QAAQ,GAAG,IAAI;4BACvB,IAAI,CAAC5C,YAAY,CAACoB,aAAa,CAAC;gCAC9B1D,SAAS,CAAC,oBAAoB,EAAEgH,MAAM9B,QAAQ,CAACgC,OAAO,CAAC,GAAG,EAAE,CAAC;gCAC7DhH,UAAU;gCACVyD,OAAO;gCACPC,WAAWhB,KAAKC,GAAG;gCACnBgB,MAAM;oCACJqB,UAAU8B,MAAM9B,QAAQ;oCACxBP,WAAWqC,MAAMrC,SAAS;oCAC1BwC,MAAMH,MAAMG,IAAI;gCAClB;4BACF;wBACF;oBACF;gBACF;gBAEAN,iBAAiBO,OAAO,CAAC;oBAAEC,YAAY;wBAAC;qBAAW;gBAAC;YACtD,EAAE,OAAOvH,OAAO;gBACd2C,QAAQE,IAAI,CAAC,qCAAqC7C;YACpD;QACF;QAEA,uBAAuB;QACvB,IAAI,YAAYwH,aAAa;YAC3BC,YAAY;gBACV,MAAMC,SAAS,AAACF,YAAoBE,MAAM;gBAC1C,MAAMC,SAASD,OAAOE,cAAc,GAAG,OAAO;gBAC9C,MAAMC,UAAUH,OAAOI,eAAe,GAAG,OAAO;gBAChD,MAAMC,eAAe,AAACJ,SAASE,UAAW;gBAE1C,IAAIE,eAAe,IAAI;oBACrB,IAAI,CAACvF,YAAY,CAACoB,aAAa,CAAC;wBAC9B1D,SAAS,CAAC,mBAAmB,EAAE6H,aAAaX,OAAO,CAAC,GAAG,CAAC,CAAC;wBACzDhH,UAAU;wBACVyD,OAAO;wBACPC,WAAWhB,KAAKC,GAAG;wBACnBgB,MAAM;4BACJ4D,QAAQA,OAAOP,OAAO,CAAC;4BACvBS,SAASA,QAAQT,OAAO,CAAC;4BACzBW,cAAcA,aAAaX,OAAO,CAAC;wBACrC;oBACF;gBACF;YACF,GAAG,QAAQ,yBAAyB;QACtC;IACF;IAEQzD,+BAAqC;QAC3C,IAAI,CAAC,IAAI,CAAC/D,MAAM,CAACwB,4BAA4B,EAAE;QAE/C,eAAe;QACf4G,SAAS7D,gBAAgB,CAAC,SAAS,CAACpE;YAClC,MAAM0G,SAAS1G,MAAM0G,MAAM;YAC3B,MAAMC,UAAUD,OAAOC,OAAO,EAAEC;YAChC,MAAMsB,KAAKxB,OAAOwB,EAAE;YACpB,MAAMC,YAAYzB,OAAOyB,SAAS;YAClC,MAAMC,OAAO1B,OAAO2B,WAAW,EAAEC,MAAM,GAAG;YAE1C,IAAI,CAAC7F,YAAY,CAACoB,aAAa,CAAC;gBAC9B1D,SAAS,CAAC,aAAa,EAAEwG,UAAUuB,KAAK,CAAC,CAAC,EAAEA,IAAI,GAAG,KAAKC,YAAY,CAAC,CAAC,EAAEA,UAAUI,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,IAAI;gBACxGlI,UAAU;gBACVyD,OAAO;gBACPC,WAAWhB,KAAKC,GAAG;gBACnBgB,MAAM;oBACJ2C;oBACAuB;oBACAC;oBACAC;oBACAI,GAAGxI,MAAMyI,OAAO;oBAChBC,GAAG1I,MAAM2I,OAAO;gBAClB;YACF;QACF;QAEA,mBAAmB;QACnBrF,OAAOc,gBAAgB,CAAC,YAAY;YAClC,IAAI,CAAC3B,YAAY,CAACoB,aAAa,CAAC;gBAC9B1D,SAAS,CAAC,cAAc,EAAEmD,OAAOsF,QAAQ,CAACC,QAAQ,EAAE;gBACpDxI,UAAU;gBACVyD,OAAO;gBACPC,WAAWhB,KAAKC,GAAG;gBACnBgB,MAAM;oBACJ6E,UAAUvF,OAAOsF,QAAQ,CAACC,QAAQ;oBAClCC,QAAQxF,OAAOsF,QAAQ,CAACE,MAAM;oBAC9BC,MAAMzF,OAAOsF,QAAQ,CAACG,IAAI;gBAC5B;YACF;QACF;IACF;IAEO3I,aAAaH,KAAY,EAAE+I,UAAe,CAAC,CAAC,EAAU;QAC3D,0BAA0B;QAC1B,MAAMC,iBAAiB,IAAI,CAACpJ,MAAM,CAACyC,UAAU,CAACrC;QAC9C,IAAI,CAACgJ,gBAAgB;YACnB,OAAO;QACT;QAEA,qBAAqB;QACrB,MAAMC,kBAAkB;YACtB,GAAGF,OAAO;YACVzI,SAAS;gBACP,GAAGyI,QAAQzI,OAAO;gBAClB8B,WAAW,IAAI,CAACA,SAAS;gBACzBD,QAAQ,IAAI,CAACvC,MAAM,CAACuC,MAAM;gBAC1BH,aAAa,IAAI,CAACpC,MAAM,CAACoC,WAAW;gBACpCC,SAAS,IAAI,CAACrC,MAAM,CAACqC,OAAO;gBAC5BiH,WAAWC,UAAUD,SAAS;gBAC9BpE,KAAKzB,OAAOsF,QAAQ,CAAC1D,IAAI;gBACzBnB,WAAWhB,KAAKC,GAAG;YACrB;YACAnC,MAAM;gBACJ,GAAGmI,QAAQnI,IAAI;gBACfoB,aAAa,IAAI,CAACpC,MAAM,CAACoC,WAAW;gBACpCC,SAAS,IAAI,CAACrC,MAAM,CAACqC,OAAO;YAC9B;QACF;QAEA,6BAA6B;QAC7B,MAAMmH,UAAU,IAAI,CAAC5G,YAAY,CAACrC,YAAY,CAAC6I,gBAAgBC;QAE/D,+BAA+B;QAC/B,IAAI,IAAI,CAACrJ,MAAM,CAAC6B,eAAe,EAAE;YAC/BkB,QAAQ0G,KAAK,CAAC,CAAC,mBAAmB,EAAED,QAAQ,CAAC,CAAC;YAC9CzG,QAAQ3C,KAAK,CAAC,UAAUgJ;YACxBrG,QAAQ3C,KAAK,CAAC,YAAYiJ;YAC1BtG,QAAQ2G,QAAQ;QAClB;QAEA,8BAA8B;QAC9B,IAAI,IAAI,CAAC1J,MAAM,CAACiC,cAAc,IAAI,IAAI,CAACjC,MAAM,CAACkC,cAAc,EAAE;YAC5D,IAAI,CAACD,cAAc,CAACuH,SAASJ,gBAAgBC;QAC/C;QAEA,4BAA4B;QAC5B,IAAI,CAACrJ,MAAM,CAAC0C,OAAO,CAAC0G;QAEpB,OAAOI;IACT;IAEA,MAAcvH,eAAeuH,OAAe,EAAEpJ,KAAY,EAAE+I,OAAY,EAAiB;QACvF,IAAI;YACF,MAAMQ,UAAU;gBACdH;gBACAlJ,SAASF,MAAME,OAAO;gBACtBsJ,OAAOxJ,MAAMwJ,KAAK;gBAClBnC,MAAMrH,MAAMqH,IAAI;gBAChB,GAAG0B,OAAO;gBACVjF,WAAWhB,KAAKC,GAAG;YACrB;YAEA,MAAM0G,UAAkC;gBACtC,gBAAgB;YAClB;YAEA,IAAI,IAAI,CAAC7J,MAAM,CAACmC,MAAM,EAAE;gBACtB0H,OAAO,CAAC,gBAAgB,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC7J,MAAM,CAACmC,MAAM,EAAE;YAC3D;YAEA,MAAM6C,MAAM,IAAI,CAAChF,MAAM,CAACkC,cAAc,EAAE;gBACtCoD,QAAQ;gBACRuE;gBACAnD,MAAM9B,KAAKC,SAAS,CAAC8E;YACvB;QACF,EAAE,OAAOG,aAAa;YACpB/G,QAAQ3C,KAAK,CAAC,qCAAqC0J;QACrD;IACF;IAEOC,QAAQxH,MAAc,EAAEyH,QAA8B,EAAQ;QACnE,IAAI,CAAChK,MAAM,CAACuC,MAAM,GAAGA;QAErB,IAAI,CAACK,YAAY,CAACoB,aAAa,CAAC;YAC9B1D,SAAS,CAAC,iBAAiB,EAAEiC,QAAQ;YACrC/B,UAAU;YACVyD,OAAO;YACPC,WAAWhB,KAAKC,GAAG;YACnBgB,MAAM6F;QACR;IACF;IAEOC,WAAWC,GAAW,EAAEC,KAAU,EAAQ;QAC/C,IAAI,CAACvH,YAAY,CAACoB,aAAa,CAAC;YAC9B1D,SAAS,CAAC,iBAAiB,EAAE4J,KAAK;YAClC1J,UAAU;YACVyD,OAAO;YACPC,WAAWhB,KAAKC,GAAG;YACnBgB,MAAM;gBAAE,CAAC+F,IAAI,EAAEC;YAAM;QACvB;IACF;IAEOnG,cAAc1D,OAAe,EAAEE,WAA2F,SAAS,EAAEyD,QAAgD,MAAM,EAAEE,IAAU,EAAQ;QACpN,IAAI,CAACvB,YAAY,CAACoB,aAAa,CAAC;YAC9B1D;YACAE;YACAyD;YACAC,WAAWhB,KAAKC,GAAG;YACnBgB;QACF;IACF;IAEOiG,aAAa;QAClB,OAAO,IAAI,CAACxH,YAAY,CAACwH,UAAU;IACrC;IAEOC,kBAAkB;QACvB,OAAO,IAAI,CAACzH,YAAY,CAACyH,eAAe;IAC1C;IAEOC,cAAoB;QACzB,IAAI,CAAC1H,YAAY,CAAC0H,WAAW;IAC/B;IAEOC,eAAuB;QAC5B,OAAO,IAAI,CAAC3H,YAAY,CAAC2H,YAAY;IACvC;AACF;AAEA,kBAAkB;AAClB,IAAI3D;AAEG,MAAM7G,+BAA+B,CAACC;IAC3C,IAAI4G,oBAAoB;QACtB7D,QAAQE,IAAI,CAAC;QACb,OAAO2D;IACT;IAEAA,qBAAqB,IAAIhH,mBAAmBI;IAC5C4G,mBAAmBpD,UAAU;IAE7B,OAAOoD;AACT;AAEO,MAAM9G,wBAAwB;IACnC,OAAO8G,sBAAsB;AAC/B;AAEO,MAAM/G,4BAA4B;IACvC,IAAI+G,oBAAoB;QACtBA,mBAAmBvC,OAAO;QAC1BuC,qBAAqB;IACvB;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "46e3dba2e1a48287c741baca7a197ddffe21b7e0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_26bkpj8qvp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_26bkpj8qvp();
cov_26bkpj8qvp().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_26bkpj8qvp().f[0]++;
  cov_26bkpj8qvp().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_26bkpj8qvp().s[3]++;
_export(exports, {
  get GlobalErrorHandler() {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[1]++;
    cov_26bkpj8qvp().s[4]++;
    return GlobalErrorHandler;
  },
  get destroyGlobalErrorHandler() {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[2]++;
    cov_26bkpj8qvp().s[5]++;
    return destroyGlobalErrorHandler;
  },
  get getGlobalErrorHandler() {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[3]++;
    cov_26bkpj8qvp().s[6]++;
    return getGlobalErrorHandler;
  },
  get initializeGlobalErrorHandler() {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[4]++;
    cov_26bkpj8qvp().s[7]++;
    return initializeGlobalErrorHandler;
  }
});
const _errorTracking =
/* istanbul ignore next */
(cov_26bkpj8qvp().s[8]++, require("./errorTracking"));
class GlobalErrorHandler {
  constructor(config =
  /* istanbul ignore next */
  (cov_26bkpj8qvp().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[5]++;
    cov_26bkpj8qvp().s[9]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[10]++;
    this.handleGlobalError = event => {
      /* istanbul ignore next */
      cov_26bkpj8qvp().f[6]++;
      const error =
      /* istanbul ignore next */
      (cov_26bkpj8qvp().s[11]++,
      /* istanbul ignore next */
      (cov_26bkpj8qvp().b[1][0]++, event.error) ||
      /* istanbul ignore next */
      (cov_26bkpj8qvp().b[1][1]++, new Error(event.message)));
      /* istanbul ignore next */
      cov_26bkpj8qvp().s[12]++;
      this.captureError(error, {
        category: 'javascript',
        severity: 'high',
        context: {
          filename: event.filename,
          lineno: event.lineno,
          colno: event.colno,
          source: 'global-error-handler',
          type: 'ErrorEvent'
        },
        tags: {
          source: 'window.onerror'
        }
      });
    };
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[13]++;
    this.handleUnhandledRejection = event => {
      /* istanbul ignore next */
      cov_26bkpj8qvp().f[7]++;
      const error =
      /* istanbul ignore next */
      (cov_26bkpj8qvp().s[14]++, event.reason instanceof Error ?
      /* istanbul ignore next */
      (cov_26bkpj8qvp().b[2][0]++, event.reason) :
      /* istanbul ignore next */
      (cov_26bkpj8qvp().b[2][1]++, new Error(String(event.reason))));
      /* istanbul ignore next */
      cov_26bkpj8qvp().s[15]++;
      this.captureError(error, {
        category: 'promise',
        severity: 'high',
        context: {
          reason: event.reason,
          source: 'global-error-handler',
          type: 'PromiseRejectionEvent'
        },
        tags: {
          source: 'unhandledrejection'
        }
      });
      // Prevent the default browser behavior
      /* istanbul ignore next */
      cov_26bkpj8qvp().s[16]++;
      event.preventDefault();
    };
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[17]++;
    this.config = {
      enableConsoleCapture: true,
      enableNetworkCapture: true,
      enablePerformanceCapture: true,
      enableUserInteractionCapture: true,
      enableUnhandledRejectionCapture: true,
      enableResourceErrorCapture: true,
      maxBreadcrumbs: 100,
      enableAutoErrorResolution: false,
      reportToConsole: process.env.NODE_ENV === 'development',
      reportToServer: process.env.NODE_ENV === 'production',
      serverEndpoint: '/api/errors',
      apiKey: '',
      environment:
      /* istanbul ignore next */
      (cov_26bkpj8qvp().b[3][0]++, process.env.NODE_ENV) ||
      /* istanbul ignore next */
      (cov_26bkpj8qvp().b[3][1]++, 'development'),
      release:
      /* istanbul ignore next */
      (cov_26bkpj8qvp().b[4][0]++, process.env.NEXT_PUBLIC_APP_VERSION) ||
      /* istanbul ignore next */
      (cov_26bkpj8qvp().b[4][1]++, '1.0.0'),
      userId: '',
      sessionId: '',
      beforeSend: error => {
        /* istanbul ignore next */
        cov_26bkpj8qvp().f[8]++;
        cov_26bkpj8qvp().s[18]++;
        return error;
      },
      onError: () => {
        /* istanbul ignore next */
        cov_26bkpj8qvp().f[9]++;
      },
      ...config
    };
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[19]++;
    this.sessionId = this.generateSessionId();
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[20]++;
    this.config.sessionId = this.sessionId;
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[21]++;
    this.errorTracker = new _errorTracking.ErrorTracker();
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[22]++;
    this.originalConsoleError = console.error;
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[23]++;
    this.originalConsoleWarn = console.warn;
  }
  generateSessionId() {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[10]++;
    cov_26bkpj8qvp().s[24]++;
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  initialize() {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[11]++;
    cov_26bkpj8qvp().s[25]++;
    if (this.isInitialized) {
      /* istanbul ignore next */
      cov_26bkpj8qvp().b[5][0]++;
      cov_26bkpj8qvp().s[26]++;
      console.warn('GlobalErrorHandler is already initialized');
      /* istanbul ignore next */
      cov_26bkpj8qvp().s[27]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_26bkpj8qvp().b[5][1]++;
    }
    cov_26bkpj8qvp().s[28]++;
    if (typeof window === 'undefined') {
      /* istanbul ignore next */
      cov_26bkpj8qvp().b[6][0]++;
      cov_26bkpj8qvp().s[29]++;
      console.warn('GlobalErrorHandler can only be initialized in browser environment');
      /* istanbul ignore next */
      cov_26bkpj8qvp().s[30]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_26bkpj8qvp().b[6][1]++;
    }
    cov_26bkpj8qvp().s[31]++;
    this.setupGlobalErrorHandlers();
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[32]++;
    this.setupConsoleCapture();
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[33]++;
    this.setupNetworkErrorCapture();
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[34]++;
    this.setupResourceErrorCapture();
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[35]++;
    this.setupPerformanceMonitoring();
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[36]++;
    this.setupUserInteractionTracking();
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[37]++;
    this.isInitialized = true;
    // Add breadcrumb for initialization
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[38]++;
    this.errorTracker.addBreadcrumb({
      message: 'Global error handler initialized',
      category: 'console',
      level: 'info',
      timestamp: Date.now(),
      data: {
        sessionId: this.sessionId,
        environment: this.config.environment,
        release: this.config.release
      }
    });
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[39]++;
    console.log('🛡️ Global Error Handler initialized');
  }
  destroy() {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[12]++;
    cov_26bkpj8qvp().s[40]++;
    if (!this.isInitialized) {
      /* istanbul ignore next */
      cov_26bkpj8qvp().b[7][0]++;
      cov_26bkpj8qvp().s[41]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_26bkpj8qvp().b[7][1]++;
    }
    // Remove event listeners
    cov_26bkpj8qvp().s[42]++;
    window.removeEventListener('error', this.handleGlobalError);
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[43]++;
    window.removeEventListener('unhandledrejection', this.handleUnhandledRejection);
    // Restore original console methods
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[44]++;
    console.error = this.originalConsoleError;
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[45]++;
    console.warn = this.originalConsoleWarn;
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[46]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[47]++;
    console.log('🛡️ Global Error Handler destroyed');
  }
  setupGlobalErrorHandlers() {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[13]++;
    cov_26bkpj8qvp().s[48]++;
    // Handle JavaScript errors
    window.addEventListener('error', this.handleGlobalError);
    // Handle unhandled promise rejections
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[49]++;
    if (this.config.enableUnhandledRejectionCapture) {
      /* istanbul ignore next */
      cov_26bkpj8qvp().b[8][0]++;
      cov_26bkpj8qvp().s[50]++;
      window.addEventListener('unhandledrejection', this.handleUnhandledRejection);
    } else
    /* istanbul ignore next */
    {
      cov_26bkpj8qvp().b[8][1]++;
    }
  }
  setupConsoleCapture() {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[14]++;
    cov_26bkpj8qvp().s[51]++;
    if (!this.config.enableConsoleCapture) {
      /* istanbul ignore next */
      cov_26bkpj8qvp().b[9][0]++;
      cov_26bkpj8qvp().s[52]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_26bkpj8qvp().b[9][1]++;
    }
    // Capture console.error calls
    cov_26bkpj8qvp().s[53]++;
    console.error = (...args) => {
      /* istanbul ignore next */
      cov_26bkpj8qvp().f[15]++;
      cov_26bkpj8qvp().s[54]++;
      this.originalConsoleError.apply(console, args);
      const message =
      /* istanbul ignore next */
      (cov_26bkpj8qvp().s[55]++, args.map(arg => {
        /* istanbul ignore next */
        cov_26bkpj8qvp().f[16]++;
        cov_26bkpj8qvp().s[56]++;
        return typeof arg === 'object' ?
        /* istanbul ignore next */
        (cov_26bkpj8qvp().b[10][0]++, JSON.stringify(arg)) :
        /* istanbul ignore next */
        (cov_26bkpj8qvp().b[10][1]++, String(arg));
      }).join(' '));
      /* istanbul ignore next */
      cov_26bkpj8qvp().s[57]++;
      this.errorTracker.addBreadcrumb({
        message: `Console Error: ${message}`,
        category: 'console',
        level: 'error',
        timestamp: Date.now(),
        data: {
          args
        }
      });
    };
    // Capture console.warn calls
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[58]++;
    console.warn = (...args) => {
      /* istanbul ignore next */
      cov_26bkpj8qvp().f[17]++;
      cov_26bkpj8qvp().s[59]++;
      this.originalConsoleWarn.apply(console, args);
      const message =
      /* istanbul ignore next */
      (cov_26bkpj8qvp().s[60]++, args.map(arg => {
        /* istanbul ignore next */
        cov_26bkpj8qvp().f[18]++;
        cov_26bkpj8qvp().s[61]++;
        return typeof arg === 'object' ?
        /* istanbul ignore next */
        (cov_26bkpj8qvp().b[11][0]++, JSON.stringify(arg)) :
        /* istanbul ignore next */
        (cov_26bkpj8qvp().b[11][1]++, String(arg));
      }).join(' '));
      /* istanbul ignore next */
      cov_26bkpj8qvp().s[62]++;
      this.errorTracker.addBreadcrumb({
        message: `Console Warning: ${message}`,
        category: 'console',
        level: 'warning',
        timestamp: Date.now(),
        data: {
          args
        }
      });
    };
  }
  setupNetworkErrorCapture() {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[19]++;
    cov_26bkpj8qvp().s[63]++;
    if (!this.config.enableNetworkCapture) {
      /* istanbul ignore next */
      cov_26bkpj8qvp().b[12][0]++;
      cov_26bkpj8qvp().s[64]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_26bkpj8qvp().b[12][1]++;
    }
    // Intercept fetch requests
    const originalFetch =
    /* istanbul ignore next */
    (cov_26bkpj8qvp().s[65]++, window.fetch);
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[66]++;
    window.fetch = async (...args) => {
      /* istanbul ignore next */
      cov_26bkpj8qvp().f[20]++;
      const startTime =
      /* istanbul ignore next */
      (cov_26bkpj8qvp().s[67]++, Date.now());
      const url =
      /* istanbul ignore next */
      (cov_26bkpj8qvp().s[68]++, typeof args[0] === 'string' ?
      /* istanbul ignore next */
      (cov_26bkpj8qvp().b[13][0]++, args[0]) :
      /* istanbul ignore next */
      (cov_26bkpj8qvp().b[13][1]++, args[0] instanceof Request ?
      /* istanbul ignore next */
      (cov_26bkpj8qvp().b[14][0]++, args[0].url) :
      /* istanbul ignore next */
      (cov_26bkpj8qvp().b[14][1]++, args[0] instanceof URL ?
      /* istanbul ignore next */
      (cov_26bkpj8qvp().b[15][0]++, args[0].href) :
      /* istanbul ignore next */
      (cov_26bkpj8qvp().b[15][1]++, String(args[0])))));
      const method =
      /* istanbul ignore next */
      (cov_26bkpj8qvp().s[69]++,
      /* istanbul ignore next */
      (cov_26bkpj8qvp().b[16][0]++, args[1]?.method) ||
      /* istanbul ignore next */
      (cov_26bkpj8qvp().b[16][1]++, 'GET'));
      /* istanbul ignore next */
      cov_26bkpj8qvp().s[70]++;
      try {
        const response =
        /* istanbul ignore next */
        (cov_26bkpj8qvp().s[71]++, await originalFetch(...args));
        const duration =
        /* istanbul ignore next */
        (cov_26bkpj8qvp().s[72]++, Date.now() - startTime);
        // Log successful requests as breadcrumbs
        /* istanbul ignore next */
        cov_26bkpj8qvp().s[73]++;
        this.errorTracker.addBreadcrumb({
          message: `HTTP ${method} ${url}`,
          category: 'http',
          level: response.ok ?
          /* istanbul ignore next */
          (cov_26bkpj8qvp().b[17][0]++, 'info') :
          /* istanbul ignore next */
          (cov_26bkpj8qvp().b[17][1]++, 'warning'),
          timestamp: Date.now(),
          data: {
            url,
            method,
            status: response.status,
            statusText: response.statusText,
            duration
          }
        });
        // Capture HTTP errors
        /* istanbul ignore next */
        cov_26bkpj8qvp().s[74]++;
        if (!response.ok) {
          /* istanbul ignore next */
          cov_26bkpj8qvp().b[18][0]++;
          cov_26bkpj8qvp().s[75]++;
          this.captureError(new Error(`HTTP ${response.status}: ${response.statusText}`), {
            category: 'network',
            severity: response.status >= 500 ?
            /* istanbul ignore next */
            (cov_26bkpj8qvp().b[19][0]++, 'high') :
            /* istanbul ignore next */
            (cov_26bkpj8qvp().b[19][1]++, 'medium'),
            context: {
              url,
              method,
              status: response.status,
              statusText: response.statusText,
              duration,
              source: 'fetch-interceptor'
            },
            tags: {
              httpStatus: response.status.toString(),
              httpMethod: method
            }
          });
        } else
        /* istanbul ignore next */
        {
          cov_26bkpj8qvp().b[18][1]++;
        }
        cov_26bkpj8qvp().s[76]++;
        return response;
      } catch (error) {
        const duration =
        /* istanbul ignore next */
        (cov_26bkpj8qvp().s[77]++, Date.now() - startTime);
        /* istanbul ignore next */
        cov_26bkpj8qvp().s[78]++;
        this.captureError(error, {
          category: 'network',
          severity: 'high',
          context: {
            url,
            method,
            duration,
            source: 'fetch-interceptor',
            type: 'NetworkError'
          },
          tags: {
            httpMethod: method,
            networkError: true
          }
        });
        /* istanbul ignore next */
        cov_26bkpj8qvp().s[79]++;
        throw error;
      }
    };
    // Intercept XMLHttpRequest
    const originalXHROpen =
    /* istanbul ignore next */
    (cov_26bkpj8qvp().s[80]++, XMLHttpRequest.prototype.open);
    const originalXHRSend =
    /* istanbul ignore next */
    (cov_26bkpj8qvp().s[81]++, XMLHttpRequest.prototype.send);
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[82]++;
    XMLHttpRequest.prototype.open = function (method, url, async, username, password) {
      /* istanbul ignore next */
      cov_26bkpj8qvp().f[21]++;
      cov_26bkpj8qvp().s[83]++;
      this._errorHandler = {
        method,
        url: url.toString(),
        startTime: Date.now()
      };
      /* istanbul ignore next */
      cov_26bkpj8qvp().s[84]++;
      return originalXHROpen.call(this, method, url,
      /* istanbul ignore next */
      (cov_26bkpj8qvp().b[20][0]++, async) ??
      /* istanbul ignore next */
      (cov_26bkpj8qvp().b[20][1]++, true), username, password);
    };
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[85]++;
    XMLHttpRequest.prototype.send = function (body) {
      /* istanbul ignore next */
      cov_26bkpj8qvp().f[22]++;
      const errorHandler =
      /* istanbul ignore next */
      (cov_26bkpj8qvp().s[86]++, this._errorHandler);
      /* istanbul ignore next */
      cov_26bkpj8qvp().s[87]++;
      this.addEventListener('load', () => {
        /* istanbul ignore next */
        cov_26bkpj8qvp().f[23]++;
        cov_26bkpj8qvp().s[88]++;
        if (errorHandler) {
          /* istanbul ignore next */
          cov_26bkpj8qvp().b[21][0]++;
          const duration =
          /* istanbul ignore next */
          (cov_26bkpj8qvp().s[89]++, Date.now() - errorHandler.startTime);
          /* istanbul ignore next */
          cov_26bkpj8qvp().s[90]++;
          globalErrorHandler.errorTracker.addBreadcrumb({
            message: `XHR ${errorHandler.method} ${errorHandler.url}`,
            category: 'http',
            level: this.status >= 400 ?
            /* istanbul ignore next */
            (cov_26bkpj8qvp().b[22][0]++, 'warning') :
            /* istanbul ignore next */
            (cov_26bkpj8qvp().b[22][1]++, 'info'),
            timestamp: Date.now(),
            data: {
              url: errorHandler.url,
              method: errorHandler.method,
              status: this.status,
              statusText: this.statusText,
              duration
            }
          });
          /* istanbul ignore next */
          cov_26bkpj8qvp().s[91]++;
          if (this.status >= 400) {
            /* istanbul ignore next */
            cov_26bkpj8qvp().b[23][0]++;
            cov_26bkpj8qvp().s[92]++;
            globalErrorHandler.captureError(new Error(`XHR ${this.status}: ${this.statusText}`), {
              category: 'network',
              severity: this.status >= 500 ?
              /* istanbul ignore next */
              (cov_26bkpj8qvp().b[24][0]++, 'high') :
              /* istanbul ignore next */
              (cov_26bkpj8qvp().b[24][1]++, 'medium'),
              context: {
                url: errorHandler.url,
                method: errorHandler.method,
                status: this.status,
                statusText: this.statusText,
                duration,
                source: 'xhr-interceptor'
              },
              tags: {
                httpStatus: this.status.toString(),
                httpMethod: errorHandler.method
              }
            });
          } else
          /* istanbul ignore next */
          {
            cov_26bkpj8qvp().b[23][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_26bkpj8qvp().b[21][1]++;
        }
      });
      /* istanbul ignore next */
      cov_26bkpj8qvp().s[93]++;
      this.addEventListener('error', () => {
        /* istanbul ignore next */
        cov_26bkpj8qvp().f[24]++;
        cov_26bkpj8qvp().s[94]++;
        if (errorHandler) {
          /* istanbul ignore next */
          cov_26bkpj8qvp().b[25][0]++;
          const duration =
          /* istanbul ignore next */
          (cov_26bkpj8qvp().s[95]++, Date.now() - errorHandler.startTime);
          /* istanbul ignore next */
          cov_26bkpj8qvp().s[96]++;
          globalErrorHandler.captureError(new Error(`XHR Network Error: ${errorHandler.method} ${errorHandler.url}`), {
            category: 'network',
            severity: 'high',
            context: {
              url: errorHandler.url,
              method: errorHandler.method,
              duration,
              source: 'xhr-interceptor',
              type: 'NetworkError'
            },
            tags: {
              httpMethod: errorHandler.method,
              networkError: true
            }
          });
        } else
        /* istanbul ignore next */
        {
          cov_26bkpj8qvp().b[25][1]++;
        }
      });
      /* istanbul ignore next */
      cov_26bkpj8qvp().s[97]++;
      return originalXHRSend.call(this, body);
    };
  }
  setupResourceErrorCapture() {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[25]++;
    cov_26bkpj8qvp().s[98]++;
    if (!this.config.enableResourceErrorCapture) {
      /* istanbul ignore next */
      cov_26bkpj8qvp().b[26][0]++;
      cov_26bkpj8qvp().s[99]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_26bkpj8qvp().b[26][1]++;
    }
    cov_26bkpj8qvp().s[100]++;
    window.addEventListener('error', event => {
      /* istanbul ignore next */
      cov_26bkpj8qvp().f[26]++;
      cov_26bkpj8qvp().s[101]++;
      // Handle resource loading errors (images, scripts, stylesheets, etc.)
      if (
      /* istanbul ignore next */
      (cov_26bkpj8qvp().b[28][0]++, event.target) &&
      /* istanbul ignore next */
      (cov_26bkpj8qvp().b[28][1]++, event.target !== window)) {
        /* istanbul ignore next */
        cov_26bkpj8qvp().b[27][0]++;
        const target =
        /* istanbul ignore next */
        (cov_26bkpj8qvp().s[102]++, event.target);
        const tagName =
        /* istanbul ignore next */
        (cov_26bkpj8qvp().s[103]++, target.tagName?.toLowerCase());
        const src =
        /* istanbul ignore next */
        (cov_26bkpj8qvp().s[104]++,
        /* istanbul ignore next */
        (cov_26bkpj8qvp().b[29][0]++, target.src) ||
        /* istanbul ignore next */
        (cov_26bkpj8qvp().b[29][1]++, target.href));
        /* istanbul ignore next */
        cov_26bkpj8qvp().s[105]++;
        if (src) {
          /* istanbul ignore next */
          cov_26bkpj8qvp().b[30][0]++;
          cov_26bkpj8qvp().s[106]++;
          this.captureError(new Error(`Resource loading failed: ${src}`), {
            category: 'resource',
            severity: 'medium',
            context: {
              tagName,
              src,
              source: 'resource-error-handler',
              type: 'ResourceError'
            },
            tags: {
              resourceType: tagName,
              resourceError: true
            }
          });
        } else
        /* istanbul ignore next */
        {
          cov_26bkpj8qvp().b[30][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_26bkpj8qvp().b[27][1]++;
      }
    }, true); // Use capture phase
  }
  setupPerformanceMonitoring() {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[27]++;
    cov_26bkpj8qvp().s[107]++;
    if (!this.config.enablePerformanceCapture) {
      /* istanbul ignore next */
      cov_26bkpj8qvp().b[31][0]++;
      cov_26bkpj8qvp().s[108]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_26bkpj8qvp().b[31][1]++;
    }
    // Monitor long tasks
    cov_26bkpj8qvp().s[109]++;
    if ('PerformanceObserver' in window) {
      /* istanbul ignore next */
      cov_26bkpj8qvp().b[32][0]++;
      cov_26bkpj8qvp().s[110]++;
      try {
        const longTaskObserver =
        /* istanbul ignore next */
        (cov_26bkpj8qvp().s[111]++, new PerformanceObserver(list => {
          /* istanbul ignore next */
          cov_26bkpj8qvp().f[28]++;
          cov_26bkpj8qvp().s[112]++;
          for (const entry of list.getEntries()) {
            /* istanbul ignore next */
            cov_26bkpj8qvp().s[113]++;
            if (entry.duration > 50) {
              /* istanbul ignore next */
              cov_26bkpj8qvp().b[33][0]++;
              cov_26bkpj8qvp().s[114]++;
              this.errorTracker.addBreadcrumb({
                message: `Long task detected: ${entry.duration.toFixed(2)}ms`,
                category: 'performance',
                level: 'warning',
                timestamp: Date.now(),
                data: {
                  duration: entry.duration,
                  startTime: entry.startTime,
                  name: entry.name
                }
              });
            } else
            /* istanbul ignore next */
            {
              cov_26bkpj8qvp().b[33][1]++;
            }
          }
        }));
        /* istanbul ignore next */
        cov_26bkpj8qvp().s[115]++;
        longTaskObserver.observe({
          entryTypes: ['longtask']
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_26bkpj8qvp().s[116]++;
        console.warn('Long task observer not supported:', error);
      }
    } else
    /* istanbul ignore next */
    {
      cov_26bkpj8qvp().b[32][1]++;
    }
    // Monitor memory usage
    cov_26bkpj8qvp().s[117]++;
    if ('memory' in performance) {
      /* istanbul ignore next */
      cov_26bkpj8qvp().b[34][0]++;
      cov_26bkpj8qvp().s[118]++;
      setInterval(() => {
        /* istanbul ignore next */
        cov_26bkpj8qvp().f[29]++;
        const memory =
        /* istanbul ignore next */
        (cov_26bkpj8qvp().s[119]++, performance.memory);
        const usedMB =
        /* istanbul ignore next */
        (cov_26bkpj8qvp().s[120]++, memory.usedJSHeapSize / 1024 / 1024);
        const limitMB =
        /* istanbul ignore next */
        (cov_26bkpj8qvp().s[121]++, memory.jsHeapSizeLimit / 1024 / 1024);
        const usagePercent =
        /* istanbul ignore next */
        (cov_26bkpj8qvp().s[122]++, usedMB / limitMB * 100);
        /* istanbul ignore next */
        cov_26bkpj8qvp().s[123]++;
        if (usagePercent > 80) {
          /* istanbul ignore next */
          cov_26bkpj8qvp().b[35][0]++;
          cov_26bkpj8qvp().s[124]++;
          this.errorTracker.addBreadcrumb({
            message: `High memory usage: ${usagePercent.toFixed(1)}%`,
            category: 'performance',
            level: 'warning',
            timestamp: Date.now(),
            data: {
              usedMB: usedMB.toFixed(2),
              limitMB: limitMB.toFixed(2),
              usagePercent: usagePercent.toFixed(1)
            }
          });
        } else
        /* istanbul ignore next */
        {
          cov_26bkpj8qvp().b[35][1]++;
        }
      }, 30000); // Check every 30 seconds
    } else
    /* istanbul ignore next */
    {
      cov_26bkpj8qvp().b[34][1]++;
    }
  }
  setupUserInteractionTracking() {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[30]++;
    cov_26bkpj8qvp().s[125]++;
    if (!this.config.enableUserInteractionCapture) {
      /* istanbul ignore next */
      cov_26bkpj8qvp().b[36][0]++;
      cov_26bkpj8qvp().s[126]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_26bkpj8qvp().b[36][1]++;
    }
    // Track clicks
    cov_26bkpj8qvp().s[127]++;
    document.addEventListener('click', event => {
      /* istanbul ignore next */
      cov_26bkpj8qvp().f[31]++;
      const target =
      /* istanbul ignore next */
      (cov_26bkpj8qvp().s[128]++, event.target);
      const tagName =
      /* istanbul ignore next */
      (cov_26bkpj8qvp().s[129]++, target.tagName?.toLowerCase());
      const id =
      /* istanbul ignore next */
      (cov_26bkpj8qvp().s[130]++, target.id);
      const className =
      /* istanbul ignore next */
      (cov_26bkpj8qvp().s[131]++, target.className);
      const text =
      /* istanbul ignore next */
      (cov_26bkpj8qvp().s[132]++, target.textContent?.slice(0, 50));
      /* istanbul ignore next */
      cov_26bkpj8qvp().s[133]++;
      this.errorTracker.addBreadcrumb({
        message: `User clicked ${tagName}${id ?
        /* istanbul ignore next */
        (cov_26bkpj8qvp().b[37][0]++, `#${id}`) :
        /* istanbul ignore next */
        (cov_26bkpj8qvp().b[37][1]++, '')}${className ?
        /* istanbul ignore next */
        (cov_26bkpj8qvp().b[38][0]++, `.${className.split(' ')[0]}`) :
        /* istanbul ignore next */
        (cov_26bkpj8qvp().b[38][1]++, '')}`,
        category: 'user',
        level: 'info',
        timestamp: Date.now(),
        data: {
          tagName,
          id,
          className,
          text,
          x: event.clientX,
          y: event.clientY
        }
      });
    });
    // Track navigation
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[134]++;
    window.addEventListener('popstate', () => {
      /* istanbul ignore next */
      cov_26bkpj8qvp().f[32]++;
      cov_26bkpj8qvp().s[135]++;
      this.errorTracker.addBreadcrumb({
        message: `Navigation to ${window.location.pathname}`,
        category: 'navigation',
        level: 'info',
        timestamp: Date.now(),
        data: {
          pathname: window.location.pathname,
          search: window.location.search,
          hash: window.location.hash
        }
      });
    });
  }
  captureError(error, options =
  /* istanbul ignore next */
  (cov_26bkpj8qvp().b[39][0]++, {})) {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[33]++;
    // Apply beforeSend filter
    const processedError =
    /* istanbul ignore next */
    (cov_26bkpj8qvp().s[136]++, this.config.beforeSend(error));
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[137]++;
    if (!processedError) {
      /* istanbul ignore next */
      cov_26bkpj8qvp().b[40][0]++;
      cov_26bkpj8qvp().s[138]++;
      return '';
    } else
    /* istanbul ignore next */
    {
      cov_26bkpj8qvp().b[40][1]++;
    }
    // Add global context
    const enhancedOptions =
    /* istanbul ignore next */
    (cov_26bkpj8qvp().s[139]++, {
      ...options,
      context: {
        ...options.context,
        sessionId: this.sessionId,
        userId: this.config.userId,
        environment: this.config.environment,
        release: this.config.release,
        userAgent: navigator.userAgent,
        url: window.location.href,
        timestamp: Date.now()
      },
      tags: {
        ...options.tags,
        environment: this.config.environment,
        release: this.config.release
      }
    });
    // Capture with error tracker
    const errorId =
    /* istanbul ignore next */
    (cov_26bkpj8qvp().s[140]++, this.errorTracker.captureError(processedError, enhancedOptions));
    // Report to console if enabled
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[141]++;
    if (this.config.reportToConsole) {
      /* istanbul ignore next */
      cov_26bkpj8qvp().b[41][0]++;
      cov_26bkpj8qvp().s[142]++;
      console.group(`🚨 Error Captured [${errorId}]`);
      /* istanbul ignore next */
      cov_26bkpj8qvp().s[143]++;
      console.error('Error:', processedError);
      /* istanbul ignore next */
      cov_26bkpj8qvp().s[144]++;
      console.error('Options:', enhancedOptions);
      /* istanbul ignore next */
      cov_26bkpj8qvp().s[145]++;
      console.groupEnd();
    } else
    /* istanbul ignore next */
    {
      cov_26bkpj8qvp().b[41][1]++;
    }
    // Report to server if enabled
    cov_26bkpj8qvp().s[146]++;
    if (
    /* istanbul ignore next */
    (cov_26bkpj8qvp().b[43][0]++, this.config.reportToServer) &&
    /* istanbul ignore next */
    (cov_26bkpj8qvp().b[43][1]++, this.config.serverEndpoint)) {
      /* istanbul ignore next */
      cov_26bkpj8qvp().b[42][0]++;
      cov_26bkpj8qvp().s[147]++;
      this.reportToServer(errorId, processedError, enhancedOptions);
    } else
    /* istanbul ignore next */
    {
      cov_26bkpj8qvp().b[42][1]++;
    }
    // Call custom error handler
    cov_26bkpj8qvp().s[148]++;
    this.config.onError(processedError);
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[149]++;
    return errorId;
  }
  async reportToServer(errorId, error, options) {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[34]++;
    cov_26bkpj8qvp().s[150]++;
    try {
      const payload =
      /* istanbul ignore next */
      (cov_26bkpj8qvp().s[151]++, {
        errorId,
        message: error.message,
        stack: error.stack,
        name: error.name,
        ...options,
        timestamp: Date.now()
      });
      const headers =
      /* istanbul ignore next */
      (cov_26bkpj8qvp().s[152]++, {
        'Content-Type': 'application/json'
      });
      /* istanbul ignore next */
      cov_26bkpj8qvp().s[153]++;
      if (this.config.apiKey) {
        /* istanbul ignore next */
        cov_26bkpj8qvp().b[44][0]++;
        cov_26bkpj8qvp().s[154]++;
        headers['Authorization'] = `Bearer ${this.config.apiKey}`;
      } else
      /* istanbul ignore next */
      {
        cov_26bkpj8qvp().b[44][1]++;
      }
      cov_26bkpj8qvp().s[155]++;
      await fetch(this.config.serverEndpoint, {
        method: 'POST',
        headers,
        body: JSON.stringify(payload)
      });
    } catch (reportError) {
      /* istanbul ignore next */
      cov_26bkpj8qvp().s[156]++;
      console.error('Failed to report error to server:', reportError);
    }
  }
  setUser(userId, userData) {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[35]++;
    cov_26bkpj8qvp().s[157]++;
    this.config.userId = userId;
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[158]++;
    this.errorTracker.addBreadcrumb({
      message: `User identified: ${userId}`,
      category: 'user',
      level: 'info',
      timestamp: Date.now(),
      data: userData
    });
  }
  setContext(key, value) {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[36]++;
    cov_26bkpj8qvp().s[159]++;
    this.errorTracker.addBreadcrumb({
      message: `Context updated: ${key}`,
      category: 'console',
      level: 'info',
      timestamp: Date.now(),
      data: {
        [key]: value
      }
    });
  }
  addBreadcrumb(message, category =
  /* istanbul ignore next */
  (cov_26bkpj8qvp().b[45][0]++, 'console'), level =
  /* istanbul ignore next */
  (cov_26bkpj8qvp().b[46][0]++, 'info'), data) {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[37]++;
    cov_26bkpj8qvp().s[160]++;
    this.errorTracker.addBreadcrumb({
      message,
      category,
      level,
      timestamp: Date.now(),
      data
    });
  }
  getMetrics() {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[38]++;
    cov_26bkpj8qvp().s[161]++;
    return this.errorTracker.getMetrics();
  }
  getRecentErrors() {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[39]++;
    cov_26bkpj8qvp().s[162]++;
    return this.errorTracker.getRecentErrors();
  }
  clearErrors() {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[40]++;
    cov_26bkpj8qvp().s[163]++;
    this.errorTracker.clearErrors();
  }
  exportErrors() {
    /* istanbul ignore next */
    cov_26bkpj8qvp().f[41]++;
    cov_26bkpj8qvp().s[164]++;
    return this.errorTracker.exportErrors();
  }
}
// Global instance
let globalErrorHandler;
/* istanbul ignore next */
cov_26bkpj8qvp().s[165]++;
const initializeGlobalErrorHandler = config => {
  /* istanbul ignore next */
  cov_26bkpj8qvp().f[42]++;
  cov_26bkpj8qvp().s[166]++;
  if (globalErrorHandler) {
    /* istanbul ignore next */
    cov_26bkpj8qvp().b[47][0]++;
    cov_26bkpj8qvp().s[167]++;
    console.warn('Global error handler already initialized');
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[168]++;
    return globalErrorHandler;
  } else
  /* istanbul ignore next */
  {
    cov_26bkpj8qvp().b[47][1]++;
  }
  cov_26bkpj8qvp().s[169]++;
  globalErrorHandler = new GlobalErrorHandler(config);
  /* istanbul ignore next */
  cov_26bkpj8qvp().s[170]++;
  globalErrorHandler.initialize();
  /* istanbul ignore next */
  cov_26bkpj8qvp().s[171]++;
  return globalErrorHandler;
};
/* istanbul ignore next */
cov_26bkpj8qvp().s[172]++;
const getGlobalErrorHandler = () => {
  /* istanbul ignore next */
  cov_26bkpj8qvp().f[43]++;
  cov_26bkpj8qvp().s[173]++;
  return /* istanbul ignore next */(cov_26bkpj8qvp().b[48][0]++, globalErrorHandler) ||
  /* istanbul ignore next */
  (cov_26bkpj8qvp().b[48][1]++, null);
};
/* istanbul ignore next */
cov_26bkpj8qvp().s[174]++;
const destroyGlobalErrorHandler = () => {
  /* istanbul ignore next */
  cov_26bkpj8qvp().f[44]++;
  cov_26bkpj8qvp().s[175]++;
  if (globalErrorHandler) {
    /* istanbul ignore next */
    cov_26bkpj8qvp().b[49][0]++;
    cov_26bkpj8qvp().s[176]++;
    globalErrorHandler.destroy();
    /* istanbul ignore next */
    cov_26bkpj8qvp().s[177]++;
    globalErrorHandler = null;
  } else
  /* istanbul ignore next */
  {
    cov_26bkpj8qvp().b[49][1]++;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,