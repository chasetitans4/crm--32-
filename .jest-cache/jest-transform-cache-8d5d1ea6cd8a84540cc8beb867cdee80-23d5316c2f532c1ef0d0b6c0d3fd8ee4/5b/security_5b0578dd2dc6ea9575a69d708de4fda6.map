{"version":3,"names":["checkRateLimit","cov_1vli5znnne","f","s","cspHeaders","decryptApiKey","decryptApiKeySync","encryptApiKey","encryptApiKeySync","escapeHTML","generateCSRFToken","generateSecureRandomString","getClientIpAddress","getSecurityHeaders","isValidEmail","isValidSessionToken","isValidURL","logSecurityEvent","rateLimiter","sanitizeHTML","sanitizeSearchQuery","sanitizeUserInput","securityService","validateFileUpload","validatePasswordStrength","validateTrainingContent","DOMPurify","window","b","Promise","resolve","then","_interop_require_wildcard","require","module","default","_analyticsService","RateLimiter","windowMs","max","input","replace","trim","sanitize","ALLOWED_TAGS","ALLOWED_ATTR","ALLOW_DATA_ATTR","FORBID_TAGS","FORBID_ATTR","html","url","urlObj","URL","includes","protocol","email","emailRegex","test","length","password","result","_validation","validatePasswordSecure","isValid","errors","error","score","array","Uint8Array","crypto","getRandomValues","i","Math","floor","random","Array","from","byte","toString","padStart","join","token","tokenRegex","query","substring","file","maxSize","allowedTypes","size","push","type","extension","name","split","pop","toLowerCase","mimeTypeMap","expectedExtensions","text","div","document","createElement","textContent","innerHTML","chars","LEGACY_ENCRYPTION_KEY","process","env","ENCRYPTION_KEY","NEXT_PUBLIC_ENCRYPTION_KEY","apiKey","_encryption","advancedEncryption","encryptedAt","Date","toISOString","source","console","subtle","btoa","encryptedApiKey","isEncrypted","decoded","atob","parts","Error","warn","response","fetch","data","json","ip","content","contentObj","requiredFields","field","title","description","allowedCategories","category","userId","action","key","isAllowed","event","logEntry","timestamp","sessionId","log","method","headers","body","JSON","stringify","catch","validateCSRFToken","validateSession","sanitizeInput","generateCSPHeader"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\security.ts"],"sourcesContent":["import { RateLimiter } from \"../services/analyticsService\" // Corrected import path\r\n\r\n// Dynamic import for DOMPurify to handle SSR\r\nlet DOMPurify: any = null\r\nif (typeof window !== 'undefined') {\r\n  import('dompurify').then((module: any) => {\r\n    DOMPurify = module.default || module\r\n  })\r\n}\r\n\r\n// Content Security Policy headers\r\nexport const cspHeaders = {\r\n  \"Content-Security-Policy\":\r\n    \"default-src 'self'; \" +\r\n    \"script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://unpkg.com; \" +\r\n    \"style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; \" +\r\n    \"img-src 'self' data: https: blob:; \" +\r\n    \"font-src 'self' data: https://fonts.gstatic.com; \" +\r\n    \"connect-src 'self' https://*.supabase.co https://api.github.com https://api.openai.com wss://*.supabase.co; \" +\r\n    \"media-src 'self' data: blob:; \" +\r\n    \"object-src 'none'; \" +\r\n    \"frame-src 'self' https://www.youtube.com https://player.vimeo.com; \" +\r\n    \"frame-ancestors 'none'; \" +\r\n    \"base-uri 'self'; \" +\r\n    \"form-action 'self'; \" +\r\n    \"upgrade-insecure-requests; \" +\r\n    \"block-all-mixed-content;\",\r\n}\r\n\r\n// Rate limiter instance for API calls\r\nexport const rateLimiter = new RateLimiter({\r\n  windowMs: 15 * 60 * 1000, // 15 minutes\r\n  max: 100, // limit each IP to 100 requests per windowMs\r\n})\r\n\r\n// Input sanitization function\r\nexport const sanitizeUserInput = (input: string): string => {\r\n  if (typeof input !== \"string\") {\r\n    return \"\"\r\n  }\r\n  // Fallback sanitization if DOMPurify is not available\r\n  if (!DOMPurify) {\r\n    return input.replace(/<[^>]*>/g, '').trim()\r\n  }\r\n  return DOMPurify.sanitize(input, {\r\n    ALLOWED_TAGS: [\"b\", \"i\", \"em\", \"strong\", \"a\", \"p\", \"br\"],\r\n    ALLOWED_ATTR: [\"href\", \"title\"],\r\n    ALLOW_DATA_ATTR: false,\r\n    FORBID_TAGS: [\"script\", \"object\", \"embed\", \"form\", \"input\"],\r\n    FORBID_ATTR: [\"onerror\", \"onload\", \"onclick\", \"onmouseover\"],\r\n  })\r\n}\r\n\r\n// HTML sanitization for rich content\r\nexport const sanitizeHTML = (html: string): string => {\r\n  if (typeof html !== \"string\") {\r\n    return \"\"\r\n  }\r\n  // Fallback sanitization if DOMPurify is not available\r\n  if (!DOMPurify) {\r\n    return html.replace(/<script[^>]*>.*?<\\/script>/gi, '').replace(/<[^>]*>/g, '').trim()\r\n  }\r\n  return DOMPurify.sanitize(html, {\r\n    ALLOWED_TAGS: [\r\n      \"p\",\r\n      \"br\",\r\n      \"strong\",\r\n      \"em\",\r\n      \"u\",\r\n      \"ol\",\r\n      \"ul\",\r\n      \"li\",\r\n      \"h1\",\r\n      \"h2\",\r\n      \"h3\",\r\n      \"h4\",\r\n      \"h5\",\r\n      \"h6\",\r\n      \"blockquote\",\r\n      \"code\",\r\n      \"pre\",\r\n      \"a\",\r\n      \"img\",\r\n    ],\r\n    ALLOWED_ATTR: {\r\n      \"a\": [\"href\", \"title\", \"target\"],\r\n      \"img\": [\"src\", \"alt\", \"title\", \"width\", \"height\"],\r\n      \"*\": [\"class\"],\r\n    } as Record<string, string[]>,\r\n    ALLOW_DATA_ATTR: false,\r\n    FORBID_TAGS: [\"script\", \"object\", \"embed\", \"form\", \"input\", \"iframe\"],\r\n    FORBID_ATTR: [\"onerror\", \"onload\", \"onclick\", \"onmouseover\", \"style\"],\r\n  })\r\n}\r\n\r\n// URL validation\r\nexport const isValidURL = (url: string): boolean => {\r\n  try {\r\n    const urlObj = new URL(url)\r\n    return [\"http:\", \"https:\"].includes(urlObj.protocol)\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n\r\n// Email validation\r\nexport const isValidEmail = (email: string): boolean => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\r\n  return emailRegex.test(email) && email.length <= 254\r\n}\r\n\r\n// Import standardized password validation\r\nimport { validatePasswordSecure } from './validation'\r\n\r\n// Password strength validation - now uses standardized validation\r\nexport const validatePasswordStrength = (\r\n  password: string,\r\n): {\r\n  isValid: boolean\r\n  errors: string[]\r\n  score: number\r\n} => {\r\n  const result = validatePasswordSecure(password)\r\n  \r\n  if (!result.isValid) {\r\n    return {\r\n      isValid: false,\r\n      errors: result.error ? [result.error] : ['Invalid password'],\r\n      score: 0\r\n    }\r\n  }\r\n  \r\n  // Calculate score based on password strength\r\n  let score = 0\r\n  if (password.length >= 8) score += 1\r\n  if (/[a-z]/.test(password)) score += 1\r\n  if (/[A-Z]/.test(password)) score += 1\r\n  if (/\\d/.test(password)) score += 1\r\n  if (/[!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(password)) score += 1\r\n  \r\n  return {\r\n    isValid: true,\r\n    errors: [],\r\n    score\r\n  }\r\n}\r\n\r\n// CSRF token generation and validation\r\nexport const generateCSRFToken = (): string => {\r\n  const array = new Uint8Array(32)\r\n  if (typeof crypto !== \"undefined\" && crypto.getRandomValues) {\r\n    crypto.getRandomValues(array)\r\n  } else {\r\n    // Fallback for environments without crypto.getRandomValues\r\n    for (let i = 0; i < array.length; i++) {\r\n      array[i] = Math.floor(Math.random() * 256)\r\n    }\r\n  }\r\n  return Array.from(array, (byte) => byte.toString(16).padStart(2, \"0\")).join(\"\")\r\n}\r\n\r\n// Session token validation\r\nexport const isValidSessionToken = (token: string): boolean => {\r\n  if (!token || typeof token !== \"string\") {\r\n    return false\r\n  }\r\n  // Check token format (should be hex string of specific length)\r\n  const tokenRegex = /^[a-f0-9]{64}$/i\r\n  return tokenRegex.test(token)\r\n}\r\n\r\n// SQL injection prevention for search queries\r\nexport const sanitizeSearchQuery = (query: string): string => {\r\n  if (typeof query !== \"string\") {\r\n    return \"\"\r\n  }\r\n  // Use whitelist approach - only allow alphanumeric, spaces, and safe punctuation\r\n  return query\r\n    .replace(/[^a-zA-Z0-9\\s\\-_.@]/g, \"\") // Only allow safe characters\r\n    .replace(/\\s+/g, \" \") // Normalize whitespace\r\n    .trim()\r\n    .substring(0, 100) // Limit length\r\n}\r\n\r\n// File upload validation\r\nexport const validateFileUpload = (\r\n  file: File,\r\n): {\r\n  isValid: boolean\r\n  errors: string[]\r\n} => {\r\n  const errors: string[] = []\r\n  const maxSize = 10 * 1024 * 1024 // 10MB\r\n  const allowedTypes = [\r\n    \"image/jpeg\",\r\n    \"image/png\",\r\n    \"image/gif\",\r\n    \"application/pdf\",\r\n    \"text/plain\",\r\n    \"application/msword\",\r\n    \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\r\n  ]\r\n  if (file.size > maxSize) {\r\n    errors.push(\"File size must be less than 10MB\")\r\n  }\r\n  if (!allowedTypes.includes(file.type)) {\r\n    errors.push(\"File type not allowed\")\r\n  }\r\n  // Check file extension matches MIME type\r\n  const extension = file.name.split(\".\").pop()?.toLowerCase()\r\n  const mimeTypeMap: Record<string, string[]> = {\r\n    \"image/jpeg\": [\"jpg\", \"jpeg\"],\r\n    \"image/png\": [\"png\"],\r\n    \"image/gif\": [\"gif\"],\r\n    \"application/pdf\": [\"pdf\"],\r\n    \"text/plain\": [\"txt\"],\r\n    \"application/msword\": [\"doc\"],\r\n    \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\": [\"docx\"],\r\n  }\r\n  const expectedExtensions = mimeTypeMap[file.type]\r\n  if (expectedExtensions && extension && !expectedExtensions.includes(extension)) {\r\n    errors.push(\"File extension does not match file type\")\r\n  }\r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors,\r\n  }\r\n}\r\n\r\n// XSS prevention for dynamic content\r\nexport const escapeHTML = (text: string): string => {\r\n  if (typeof text !== \"string\") {\r\n    return \"\"\r\n  }\r\n  const div = document.createElement(\"div\")\r\n  div.textContent = text\r\n  return div.innerHTML\r\n}\r\n\r\n// Secure random string generation\r\nexport const generateSecureRandomString = (length = 32): string => {\r\n  const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\r\n  let result = \"\"\r\n\r\n  if (typeof crypto !== \"undefined\" && crypto.getRandomValues) {\r\n    const array = new Uint8Array(length)\r\n    crypto.getRandomValues(array)\r\n    for (let i = 0; i < length; i++) {\r\n      result += chars[array[i] % chars.length]\r\n    }\r\n  } else {\r\n    // Fallback for environments without crypto.getRandomValues\r\n    for (let i = 0; i < length; i++) {\r\n      result += chars[Math.floor(Math.random() * chars.length)]\r\n    }\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n// Import advanced encryption system\r\nimport { advancedEncryption } from './encryption'\r\n\r\n// Legacy encryption key for backward compatibility\r\nconst LEGACY_ENCRYPTION_KEY = typeof window === 'undefined' \r\n  ? process.env.ENCRYPTION_KEY \r\n  : process.env.NEXT_PUBLIC_ENCRYPTION_KEY || 'fallback-client-key'\r\n\r\n/**\r\n * Encrypts API keys using AES-256-GCM encryption\r\n * Automatically handles both new and legacy formats\r\n */\r\nexport const encryptApiKey = async (apiKey: string): Promise<string> => {\r\n  try {\r\n    // Use advanced encryption for new data\r\n    return await advancedEncryption.encryptApiKey(apiKey, {\r\n      encryptedAt: new Date().toISOString(),\r\n      source: 'security_module'\r\n    })\r\n  } catch (error) {\r\n    console.error('Advanced encryption failed, falling back to legacy:', error)\r\n    // Fallback to legacy base64 encoding for compatibility\r\n    if (typeof crypto !== \"undefined\" && crypto.subtle) {\r\n      return btoa(apiKey + \":\" + LEGACY_ENCRYPTION_KEY)\r\n    }\r\n    return btoa(apiKey)\r\n  }\r\n}\r\n\r\n/**\r\n * Decrypts API keys, handling both new AES-256-GCM and legacy formats\r\n */\r\nexport const decryptApiKey = async (encryptedApiKey: string): Promise<string> => {\r\n  try {\r\n    // Check if it's new format (JSON structure)\r\n    if (advancedEncryption.isEncrypted(encryptedApiKey)) {\r\n      const result = await advancedEncryption.decryptApiKey(encryptedApiKey)\r\n      return result.apiKey\r\n    }\r\n    \r\n    // Handle legacy format\r\n    if (typeof crypto !== \"undefined\" && crypto.subtle) {\r\n      try {\r\n        const decoded = atob(encryptedApiKey)\r\n        const parts = decoded.split(\":\")\r\n        if (parts.length === 2 && parts[1] === LEGACY_ENCRYPTION_KEY) {\r\n          return parts[0]\r\n        }\r\n      } catch {\r\n        // Continue to fallback\r\n      }\r\n    }\r\n    \r\n    // Final fallback - simple base64 decode\r\n    try {\r\n      return atob(encryptedApiKey)\r\n    } catch {\r\n      return encryptedApiKey // Return as-is if all decoding fails\r\n    }\r\n  } catch (error) {\r\n    console.error('Decryption failed:', error)\r\n    throw new Error('Failed to decrypt API key')\r\n  }\r\n}\r\n\r\n/**\r\n * Synchronous versions for backward compatibility\r\n * Note: These use legacy encryption and should be migrated\r\n */\r\nexport const encryptApiKeySync = (apiKey: string): string => {\r\n  console.warn('⚠️  Using legacy synchronous encryption. Migrate to async encryptApiKey()')\r\n  if (typeof crypto !== \"undefined\" && crypto.subtle) {\r\n    return btoa(apiKey + \":\" + LEGACY_ENCRYPTION_KEY)\r\n  }\r\n  return btoa(apiKey)\r\n}\r\n\r\nexport const decryptApiKeySync = (encryptedApiKey: string): string => {\r\n  console.warn('⚠️  Using legacy synchronous decryption. Migrate to async decryptApiKey()')\r\n  if (typeof crypto !== \"undefined\" && crypto.subtle) {\r\n    try {\r\n      const decoded = atob(encryptedApiKey)\r\n      const parts = decoded.split(\":\")\r\n      if (parts.length === 2 && parts[1] === LEGACY_ENCRYPTION_KEY) {\r\n        return parts[0]\r\n      }\r\n    } catch {\r\n      // Continue to fallback\r\n    }\r\n  }\r\n  try {\r\n    return atob(encryptedApiKey)\r\n  } catch {\r\n    return encryptedApiKey\r\n  }\r\n}\r\n\r\n// Get client IP address\r\nexport const getClientIpAddress = async (): Promise<string> => {\r\n  try {\r\n    // Try to get IP from various sources\r\n    if (typeof window !== \"undefined\") {\r\n      // Client-side: use a service to get public IP\r\n      const response = await fetch('https://api.ipify.org?format=json')\r\n      const data = await response.json()\r\n      return data.ip || 'unknown'\r\n    }\r\n    // Server-side: would get from request headers\r\n    return 'server-side-ip'\r\n  } catch {\r\n    return 'unknown'\r\n  }\r\n}\r\n\r\n// Content validation for training modules\r\nexport const validateTrainingContent = (\r\n  content: unknown,\r\n): {\r\n  isValid: boolean\r\n  errors: string[]\r\n} => {\r\n  const errors: string[] = []\r\n  if (!content || typeof content !== \"object\" || content === null) {\r\n    errors.push(\"Content must be a valid object\")\r\n    return { isValid: false, errors }\r\n  }\r\n  \r\n  const contentObj = content as Record<string, unknown>\r\n  \r\n  // Validate required fields\r\n  const requiredFields = [\"title\", \"description\", \"category\"]\r\n  for (const field of requiredFields) {\r\n    if (!contentObj[field] || typeof contentObj[field] !== \"string\") {\r\n      errors.push(`${field} is required and must be a string`)\r\n    }\r\n  }\r\n  // Validate title length\r\n  if (contentObj.title && typeof contentObj.title === \"string\" && contentObj.title.length > 100) {\r\n    errors.push(\"Title must be less than 100 characters\")\r\n  }\r\n  // Validate description length\r\n  if (contentObj.description && typeof contentObj.description === \"string\" && contentObj.description.length > 1000) {\r\n    errors.push(\"Description must be less than 1000 characters\")\r\n  }\r\n  // Validate category\r\n  const allowedCategories = [\"security\", \"compliance\", \"technical\", \"soft-skills\", \"onboarding\"]\r\n  if (contentObj.category && typeof contentObj.category === \"string\" && !allowedCategories.includes(contentObj.category)) {\r\n    errors.push(\"Invalid category\")\r\n  }\r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors,\r\n  }\r\n}\r\n\r\n// Security headers for API responses\r\nexport const getSecurityHeaders = (): Record<string, string> => {\r\n  return {\r\n    \"X-Content-Type-Options\": \"nosniff\",\r\n    \"X-Frame-Options\": \"DENY\",\r\n    \"X-XSS-Protection\": \"1; mode=block\",\r\n    \"Referrer-Policy\": \"strict-origin-when-cross-origin\",\r\n    \"Permissions-Policy\": \"camera=(), microphone=(), geolocation=()\",\r\n    ...cspHeaders,\r\n  }\r\n}\r\n\r\n// Rate limiting check for user actions\r\nexport const checkRateLimit = (userId: string, action: string): boolean => {\r\n  const key = `${userId}:${action}`\r\n  return rateLimiter.isAllowed(key)\r\n}\r\n\r\n// Audit logging for security events\r\nexport const logSecurityEvent = (event: {\r\n  type: \"login\" | \"logout\" | \"failed_login\" | \"permission_denied\" | \"data_access\" | \"data_modification\"\r\n  userId?: string\r\n  ip?: string\r\n  userAgent?: string\r\n  details?: Record<string, unknown>\r\n}): void => {\r\n  const logEntry = {\r\n    ...event,\r\n    timestamp: new Date().toISOString(),\r\n    sessionId: generateSecureRandomString(16),\r\n  }\r\n  // In a real implementation, this would be sent to a secure logging service\r\n  console.log(\"Security Event:\", logEntry)\r\n  // Send to security monitoring service\r\n  if (typeof fetch !== \"undefined\") {\r\n    fetch(\"/api/security/audit\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        ...getSecurityHeaders(),\r\n      },\r\n      body: JSON.stringify(logEntry),\r\n    }).catch((error) => {\r\n      console.warn(\"Failed to log security event:\", error)\r\n    })\r\n  }\r\n}\r\n\r\n// Security service object with required methods\r\nexport const securityService = {\r\n  validateCSRFToken: (token: string): boolean => {\r\n    return isValidSessionToken(token)\r\n  },\r\n  \r\n  validateSession: (sessionId: string): boolean => {\r\n    return isValidSessionToken(sessionId)\r\n  },\r\n  \r\n  sanitizeInput: (input: string): string => {\r\n    return sanitizeUserInput(input)\r\n  },\r\n  \r\n  generateCSPHeader: (): string => {\r\n    return cspHeaders[\"Content-Security-Policy\"]\r\n  }\r\n}\r\n"],"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","ignoreList":[]}