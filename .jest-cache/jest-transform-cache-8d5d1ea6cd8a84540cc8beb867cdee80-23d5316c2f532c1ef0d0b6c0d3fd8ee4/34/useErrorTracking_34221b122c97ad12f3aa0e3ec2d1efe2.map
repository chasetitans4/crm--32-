{"version":3,"names":["cov_2g8j93htey","actualCoverage","s","useApiErrorTracking","f","useErrorAnalytics","useErrorBoundary","useErrorTracking","usePerformanceTracking","useUserInteractionTracking","options","b","enableAutoCapture","enablePerformanceMonitoring","enableUserTracking","context","tags","metrics","setMetrics","_react","useState","recentErrors","setRecentErrors","errorTracker","useRef","_errorTracking","getErrorTracker","useEffect","updateMetrics","currentMetrics","current","getMetrics","errors","getAllErrors","sort","a","timestamp","slice","interval","setInterval","clearInterval","trackError","useCallback","error","additionalContext","severity","category","fullContext","captureError","trackBreadcrumb","breadcrumb","addBreadcrumb","Date","now","trackUser","userId","userData","setUser","getError","errorId","resolveError","fingerprint","clearErrors","exportErrors","state","setState","hasError","errorInfo","captureErrorBoundary","componentStack","errorBoundary","resetErrorBoundary","performanceIssues","setPerformanceIssues","isMonitoring","setIsMonitoring","performanceObserver","startMonitoring","window","PerformanceObserver","list","entry","getEntries","entryType","navEntry","loadEventEnd","fetchStart","capturePerformanceIssue","type","message","toFixed","loadTime","domContentLoaded","domContentLoadedEventEnd","firstPaint","loadEventStart","threshold","actualValue","resourceEntry","duration","name","transferSize","encodedBodySize","observe","entryTypes","console","warn","stopMonitoring","disconnect","updatePerformanceIssues","issues","getPerformanceIssues","apiErrors","setApiErrors","trackApiError","request","api","url","method","status","requestId","level","data","trackApiSuccess","updateApiErrors","getErrorsByCategory","trackClick","element","trackNavigation","from","to","trackFormSubmission","formName","success","analytics","setAnalytics","errorTrends","topErrorMessages","errorsByBrowser","errorsByPage","calculateAnalytics","sevenDaysAgo","filter","i","date","dayStart","getFullYear","getMonth","getDate","getTime","dayEnd","dayErrors","push","toISOString","split","count","length","messageCounts","Map","forEach","get","set","occurrences","Array","entries","map","browser","find","tag","startsWith","page"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\useErrorTracking.ts"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport {\n  getErrorTracker,\n  captureError,\n  addBreadcrumb,\n  setUser,\n  type ErrorInfo,\n  type Breadcrumb,\n  type ErrorMetrics,\n  type PerformanceIssue\n} from '../utils/errorTracking';\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: React.ErrorInfo | null;\n  errorId: string | null;\n}\n\ninterface ErrorTrackingOptions {\n  enableAutoCapture?: boolean;\n  enablePerformanceMonitoring?: boolean;\n  enableUserTracking?: boolean;\n  context?: Record<string, any>;\n  tags?: string[];\n}\n\n// Hook for error tracking\nexport function useErrorTracking(options: ErrorTrackingOptions = {}) {\n  const {\n    enableAutoCapture = true,\n    enablePerformanceMonitoring = true,\n    enableUserTracking = true,\n    context = {},\n    tags = []\n  } = options;\n\n  const [metrics, setMetrics] = useState<ErrorMetrics | null>(null);\n  const [recentErrors, setRecentErrors] = useState<ErrorInfo[]>([]);\n  const errorTracker = useRef(getErrorTracker());\n\n  // Update metrics periodically\n  useEffect(() => {\n    const updateMetrics = () => {\n      const currentMetrics = errorTracker.current.getMetrics();\n      setMetrics(currentMetrics);\n      \n      const errors = errorTracker.current.getAllErrors()\n        .sort((a, b) => b.timestamp - a.timestamp)\n        .slice(0, 10);\n      setRecentErrors(errors);\n    };\n\n    updateMetrics();\n    const interval = setInterval(updateMetrics, 30000); // Update every 30 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Capture error manually\n  const trackError = useCallback((\n    error: Error | string,\n    additionalContext?: Record<string, any>,\n    severity: ErrorInfo['severity'] = 'medium',\n    category: ErrorInfo['category'] = 'javascript'\n  ) => {\n    const fullContext = {\n      ...context,\n      ...additionalContext,\n      tags: [...tags, ...(additionalContext?.tags || [])]\n    };\n    \n    return captureError(error, fullContext, severity, category);\n  }, [context, tags]);\n\n  // Add breadcrumb\n  const trackBreadcrumb = useCallback((breadcrumb: Omit<Breadcrumb, 'timestamp'>) => {\n    addBreadcrumb({\n      timestamp: Date.now(),\n      ...breadcrumb\n    });\n  }, []);\n\n  // Track user\n  const trackUser = useCallback((userId: string, userData?: Record<string, any>) => {\n    if (enableUserTracking) {\n      setUser(userId, userData);\n    }\n  }, [enableUserTracking]);\n\n  // Get error by ID\n  const getError = useCallback((errorId: string) => {\n    return errorTracker.current.getError(errorId);\n  }, []);\n\n  // Resolve error\n  const resolveError = useCallback((fingerprint: string) => {\n    return errorTracker.current.resolveError(fingerprint);\n  }, []);\n\n  // Clear all errors\n  const clearErrors = useCallback(() => {\n    errorTracker.current.clearErrors();\n    setMetrics(null);\n    setRecentErrors([]);\n  }, []);\n\n  // Export errors\n  const exportErrors = useCallback(() => {\n    return errorTracker.current.exportErrors();\n  }, []);\n\n  return {\n    trackError,\n    trackBreadcrumb,\n    trackUser,\n    getError,\n    resolveError,\n    clearErrors,\n    exportErrors,\n    metrics,\n    recentErrors\n  };\n}\n\n// Hook for error boundary functionality\nexport function useErrorBoundary() {\n  const [state, setState] = useState<ErrorBoundaryState>({\n    hasError: false,\n    error: null,\n    errorInfo: null,\n    errorId: null\n  });\n\n  const { trackError } = useErrorTracking();\n\n  // Capture error in boundary\n  const captureErrorBoundary = useCallback((error: Error, errorInfo: React.ErrorInfo) => {\n    const errorId = trackError(error, {\n      componentStack: errorInfo.componentStack,\n      errorBoundary: true\n    }, 'high', 'ui');\n\n    setState({\n      hasError: true,\n      error,\n      errorInfo,\n      errorId\n    });\n  }, [trackError]);\n\n  // Reset error boundary\n  const resetErrorBoundary = useCallback(() => {\n    setState({\n      hasError: false,\n      error: null,\n      errorInfo: null,\n      errorId: null\n    });\n  }, []);\n\n  return {\n    ...state,\n    captureErrorBoundary,\n    resetErrorBoundary\n  };\n}\n\n// Hook for performance monitoring\nexport function usePerformanceTracking() {\n  const [performanceIssues, setPerformanceIssues] = useState<PerformanceIssue[]>([]);\n  const [isMonitoring, setIsMonitoring] = useState(false);\n  const errorTracker = useRef(getErrorTracker());\n  const performanceObserver = useRef<PerformanceObserver | null>(null);\n\n  // Start performance monitoring\n  const startMonitoring = useCallback(() => {\n    if (isMonitoring || typeof window === 'undefined' || !window.PerformanceObserver) return;\n\n    try {\n      performanceObserver.current = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          // Monitor navigation timing\n          if (entry.entryType === 'navigation') {\n            const navEntry = entry as PerformanceNavigationTiming;\n            if (navEntry.loadEventEnd - navEntry.fetchStart > 3000) {\n              errorTracker.current.capturePerformanceIssue({\n                type: 'slow_render',\n                severity: 'medium',\n                message: `Slow page load: ${(navEntry.loadEventEnd - navEntry.fetchStart).toFixed(0)}ms`,\n                metrics: {\n                  loadTime: navEntry.loadEventEnd - navEntry.fetchStart,\n                  domContentLoaded: navEntry.domContentLoadedEventEnd - navEntry.fetchStart,\n                  firstPaint: navEntry.loadEventStart - navEntry.fetchStart\n                },\n                threshold: 3000,\n                actualValue: navEntry.loadEventEnd - navEntry.fetchStart\n              });\n            }\n          }\n\n          // Monitor resource timing\n          if (entry.entryType === 'resource') {\n            const resourceEntry = entry as PerformanceResourceTiming;\n            if (resourceEntry.duration > 2000) {\n              errorTracker.current.capturePerformanceIssue({\n                type: 'slow_api',\n                severity: 'medium',\n                message: `Slow resource load: ${resourceEntry.name} (${resourceEntry.duration.toFixed(0)}ms)`,\n                metrics: {\n                  duration: resourceEntry.duration,\n                  transferSize: resourceEntry.transferSize || 0,\n                  encodedBodySize: resourceEntry.encodedBodySize || 0\n                },\n                threshold: 2000,\n                actualValue: resourceEntry.duration\n              });\n            }\n          }\n        }\n      });\n\n      performanceObserver.current.observe({\n        entryTypes: ['navigation', 'resource', 'measure']\n      });\n\n      setIsMonitoring(true);\n    } catch (error) {\n      console.warn('Performance monitoring not supported:', error);\n    }\n  }, [isMonitoring]);\n\n  // Stop performance monitoring\n  const stopMonitoring = useCallback(() => {\n    if (performanceObserver.current) {\n      performanceObserver.current.disconnect();\n      performanceObserver.current = null;\n    }\n    setIsMonitoring(false);\n  }, []);\n\n  // Get performance issues\n  const updatePerformanceIssues = useCallback(() => {\n    const issues = errorTracker.current.getPerformanceIssues()\n      .sort((a, b) => b.timestamp - a.timestamp)\n      .slice(0, 20);\n    setPerformanceIssues(issues);\n  }, []);\n\n  // Auto-start monitoring and update issues\n  useEffect(() => {\n    startMonitoring();\n    updatePerformanceIssues();\n\n    const interval = setInterval(updatePerformanceIssues, 10000);\n\n    return () => {\n      stopMonitoring();\n      clearInterval(interval);\n    };\n  }, [startMonitoring, stopMonitoring, updatePerformanceIssues]);\n\n  return {\n    performanceIssues,\n    isMonitoring,\n    startMonitoring,\n    stopMonitoring,\n    updatePerformanceIssues\n  };\n}\n\n// Hook for API error tracking\nexport function useApiErrorTracking() {\n  const { trackError, trackBreadcrumb } = useErrorTracking();\n  const [apiErrors, setApiErrors] = useState<ErrorInfo[]>([]);\n  const errorTracker = useRef(getErrorTracker());\n\n  // Track API error\n  const trackApiError = useCallback((\n    error: Error | string,\n    request: {\n      url: string;\n      method: string;\n      status?: number;\n      duration?: number;\n      requestId?: string;\n    }\n  ) => {\n    const errorId = trackError(error, {\n      api: true,\n      url: request.url,\n      method: request.method,\n      status: request.status,\n      duration: request.duration,\n      requestId: request.requestId\n    }, 'medium', 'api');\n\n    // Add breadcrumb for API call\n    trackBreadcrumb({\n      message: `API ${request.method} ${request.url} - ${request.status || 'Failed'}`,\n      category: 'http',\n      level: 'error',\n      data: request\n    });\n\n    return errorId;\n  }, [trackError, trackBreadcrumb]);\n\n  // Track successful API call\n  const trackApiSuccess = useCallback((request: {\n    url: string;\n    method: string;\n    status: number;\n    duration: number;\n    requestId?: string;\n  }) => {\n    trackBreadcrumb({\n      message: `API ${request.method} ${request.url} - ${request.status}`,\n      category: 'http',\n      level: 'info',\n      data: request\n    });\n  }, [trackBreadcrumb]);\n\n  // Get API errors\n  useEffect(() => {\n    const updateApiErrors = () => {\n      const errors = errorTracker.current.getErrorsByCategory('api')\n        .sort((a, b) => b.timestamp - a.timestamp)\n        .slice(0, 10);\n      setApiErrors(errors);\n    };\n\n    updateApiErrors();\n    const interval = setInterval(updateApiErrors, 30000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return {\n    trackApiError,\n    trackApiSuccess,\n    apiErrors\n  };\n}\n\n// Hook for user interaction tracking\nexport function useUserInteractionTracking() {\n  const { trackBreadcrumb } = useErrorTracking();\n\n  // Track click\n  const trackClick = useCallback((element: string, data?: Record<string, any>) => {\n    trackBreadcrumb({\n      message: `Clicked ${element}`,\n      category: 'user',\n      level: 'info',\n      data: {\n        element,\n        ...data\n      }\n    });\n  }, [trackBreadcrumb]);\n\n  // Track navigation\n  const trackNavigation = useCallback((from: string, to: string) => {\n    trackBreadcrumb({\n      message: `Navigation from ${from} to ${to}`,\n      category: 'navigation',\n      level: 'info',\n      data: {\n        from,\n        to\n      }\n    });\n  }, [trackBreadcrumb]);\n\n  // Track form submission\n  const trackFormSubmission = useCallback((formName: string, success: boolean, data?: Record<string, any>) => {\n    trackBreadcrumb({\n      message: `Form ${formName} ${success ? 'submitted' : 'failed'}`,\n      category: 'user',\n      level: success ? 'info' : 'warning',\n      data: {\n        formName,\n        success,\n        ...data\n      }\n    });\n  }, [trackBreadcrumb]);\n\n  return {\n    trackClick,\n    trackNavigation,\n    trackFormSubmission\n  };\n}\n\n// Hook for error analytics\nexport function useErrorAnalytics() {\n  const [analytics, setAnalytics] = useState({\n    errorTrends: [] as Array<{ date: string; count: number }>,\n    topErrorMessages: [] as Array<{ message: string; count: number }>,\n    errorsByBrowser: {} as Record<string, number>,\n    errorsByPage: {} as Record<string, number>\n  });\n\n  const errorTracker = useRef(getErrorTracker());\n\n  // Calculate analytics\n  const calculateAnalytics = useCallback(() => {\n    const errors = errorTracker.current.getAllErrors();\n    \n    // Error trends (last 7 days)\n    const now = Date.now();\n    const sevenDaysAgo = now - (7 * 24 * 60 * 60 * 1000);\n    const recentErrors = errors.filter(error => error.timestamp > sevenDaysAgo);\n    \n    const errorTrends: Array<{ date: string; count: number }> = [];\n    for (let i = 6; i >= 0; i--) {\n      const date = new Date(now - (i * 24 * 60 * 60 * 1000));\n      const dayStart = new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime();\n      const dayEnd = dayStart + (24 * 60 * 60 * 1000);\n      \n      const dayErrors = recentErrors.filter(error => \n        error.timestamp >= dayStart && error.timestamp < dayEnd\n      );\n      \n      errorTrends.push({\n        date: date.toISOString().split('T')[0],\n        count: dayErrors.length\n      });\n    }\n    \n    // Top error messages\n    const messageCounts = new Map<string, number>();\n    errors.forEach(error => {\n      const count = messageCounts.get(error.message) || 0;\n      messageCounts.set(error.message, count + error.occurrences);\n    });\n    \n    const topErrorMessages = Array.from(messageCounts.entries())\n      .map(([message, count]) => ({ message, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10);\n    \n    // Errors by browser\n    const errorsByBrowser: Record<string, number> = {};\n    errors.forEach(error => {\n      const browser = error.tags.find(tag => tag.startsWith('browser:'))?.split(':')[1] || 'unknown';\n      errorsByBrowser[browser] = (errorsByBrowser[browser] || 0) + 1;\n    });\n    \n    // Errors by page\n    const errorsByPage: Record<string, number> = {};\n    errors.forEach(error => {\n      const page = error.tags.find(tag => tag.startsWith('page:'))?.split(':')[1] || 'unknown';\n      errorsByPage[page] = (errorsByPage[page] || 0) + 1;\n    });\n    \n    setAnalytics({\n      errorTrends,\n      topErrorMessages,\n      errorsByBrowser,\n      errorsByPage\n    });\n  }, []);\n\n  // Update analytics periodically\n  useEffect(() => {\n    calculateAnalytics();\n    const interval = setInterval(calculateAnalytics, 60000); // Update every minute\n\n    return () => clearInterval(interval);\n  }, [calculateAnalytics]);\n\n  return {\n    analytics,\n    calculateAnalytics\n  };\n}\n\n// Export types\nexport type {\n  ErrorBoundaryState,\n  ErrorTrackingOptions\n};"],"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","ignoreList":[]}