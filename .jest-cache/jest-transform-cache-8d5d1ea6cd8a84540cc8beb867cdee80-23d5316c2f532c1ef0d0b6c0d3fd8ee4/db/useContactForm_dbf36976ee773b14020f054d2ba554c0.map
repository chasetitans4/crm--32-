{"version":3,"names":["cov_1ru9alsmgw","actualCoverage","s","useContactForm","f","expandedContacts","setExpandedContacts","_react","useState","toggleContactExpansion","leadId","contactIndex","key","b","toString","prev","isContactExpanded","validateContact","contact","errors","name","trim","push","email","test","phone","validateContacts","contacts","allErrors","hasErrors","forEach","index","length","hasPrimary","some","isPrimary","formatPhoneNumber","digits","replace","slice","createEmptyContact","position"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\useContactForm.ts"],"sourcesContent":["import { useState } from 'react'\nimport type { Contact } from './useLeadManagement'\n\nexport const useContactForm = () => {\n  const [expandedContacts, setExpandedContacts] = useState<Record<string, boolean>>({})\n\n  const toggleContactExpansion = (leadId: number | null, contactIndex: number) => {\n    const key = leadId !== null ? `${leadId}-${contactIndex}` : contactIndex.toString()\n    setExpandedContacts(prev => ({\n      ...prev,\n      [key]: !prev[key]\n    }))\n  }\n\n  const isContactExpanded = (leadId: number | null, contactIndex: number) => {\n    const key = leadId !== null ? `${leadId}-${contactIndex}` : contactIndex.toString()\n    return expandedContacts[key] || false\n  }\n\n  const validateContact = (contact: Contact) => {\n    const errors: string[] = []\n    \n    if (!contact.name.trim()) {\n      errors.push('Name is required')\n    }\n    \n    if (!contact.email.trim()) {\n      errors.push('Email is required')\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(contact.email)) {\n      errors.push('Invalid email format')\n    }\n    \n    if (contact.phone && !/^[\\d\\s\\-\\(\\)\\+]+$/.test(contact.phone)) {\n      errors.push('Invalid phone format')\n    }\n    \n    return errors\n  }\n\n  const validateContacts = (contacts: Contact[]) => {\n    const allErrors: { [index: number]: string[] } = {}\n    let hasErrors = false\n    \n    contacts.forEach((contact, index) => {\n      const errors = validateContact(contact)\n      if (errors.length > 0) {\n        allErrors[index] = errors\n        hasErrors = true\n      }\n    })\n    \n    // Check if there's at least one primary contact\n    const hasPrimary = contacts.some(contact => contact.isPrimary)\n    if (!hasPrimary && contacts.length > 0) {\n      allErrors[0] = [...(allErrors[0] || []), 'At least one contact must be primary']\n      hasErrors = true\n    }\n    \n    return { errors: allErrors, hasErrors }\n  }\n\n  const formatPhoneNumber = (phone: string) => {\n    // Remove all non-digit characters\n    const digits = phone.replace(/\\D/g, '')\n    \n    // Format as (XXX) XXX-XXXX for US numbers\n    if (digits.length === 10) {\n      return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`\n    }\n    \n    // Return original if not a standard US number\n    return phone\n  }\n\n  const createEmptyContact = (): Contact => ({\n    name: '',\n    email: '',\n    phone: '',\n    position: '',\n    isPrimary: false\n  })\n\n  return {\n    expandedContacts,\n    setExpandedContacts,\n    toggleContactExpansion,\n    isContactExpanded,\n    validateContact,\n    validateContacts,\n    formatPhoneNumber,\n    createEmptyContact,\n  }\n}\n\nexport type { Contact }"],"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","ignoreList":[]}