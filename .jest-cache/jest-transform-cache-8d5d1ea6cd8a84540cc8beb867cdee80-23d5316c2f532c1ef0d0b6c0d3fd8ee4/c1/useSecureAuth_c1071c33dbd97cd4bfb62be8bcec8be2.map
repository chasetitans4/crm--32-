{"version":3,"names":["cov_2b8qdgkwyt","actualCoverage","s","useSecureAuth","f","auth","_AuthContext","useAuth","securityWarnings","setSecurityWarnings","_react","useState","loginAttempts","setLoginAttempts","isLocked","setIsLocked","lockoutTime","setLockoutTime","csrfToken","setCsrfToken","detectSuspiciousActivity","useCallback","activity","suspiciousPatterns","activityString","JSON","stringify","some","pattern","test","validateSecureConnection","b","window","location","protocol","hostname","checkPasswordStrength","password","result","_validation","validatePasswordSecure","isValid","score","feedback","error","length","push","detectBruteForce","attempts","validateTwoFactor","code","addSecurityWarning","warning","prev","clearSecurityWarnings","incrementLoginAttempts","resetLoginAttempts","lockAccount","duration","unlockTime","Date","now","setTimeout","generateCSRFToken","token","Math","random","toString","substring","verifyCredentials","email","Error","Promise","resolve"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\useSecureAuth.ts"],"sourcesContent":["\"use client\"\n\nimport { useState, useCallback } from \"react\"\nimport { useAuth } from \"../context/AuthContext\"\nimport { validatePasswordSecure } from \"../utils/validation\"\n\nexport interface SecurityFeatures {\n  detectSuspiciousActivity: (activity: any) => boolean\n  validateSecureConnection: () => boolean\n  checkPasswordStrength: (password: string) => { score: number; feedback: string[] }\n  detectBruteForce: (attempts: number) => boolean\n  validateTwoFactor: (code: string) => Promise<boolean>\n}\n\nexport const useSecureAuth = () => {\n  const auth = useAuth()\n  const [securityWarnings, setSecurityWarnings] = useState<string[]>([])\n  const [loginAttempts, setLoginAttempts] = useState(0)\n  const [isLocked, setIsLocked] = useState(false)\n  const [lockoutTime, setLockoutTime] = useState<Date | null>(null)\n  const [csrfToken, setCsrfToken] = useState<string | null>(null)\n\n  const detectSuspiciousActivity = useCallback((activity: any) => {\n    // Basic suspicious activity detection\n    const suspiciousPatterns = [/script/i, /javascript/i, /eval/i, /alert/i, /document\\./i, /window\\./i]\n\n    const activityString = JSON.stringify(activity)\n    return suspiciousPatterns.some((pattern) => pattern.test(activityString))\n  }, [])\n\n  const validateSecureConnection = useCallback(() => {\n    return window.location.protocol === \"https:\" || window.location.hostname === \"localhost\"\n  }, [])\n\n  const checkPasswordStrength = useCallback((password: string) => {\n    const result = validatePasswordSecure(password)\n    \n    if (!result.isValid) {\n      return { score: 0, feedback: result.error ? [result.error] : ['Invalid password'] }\n    }\n    \n    // Calculate score based on password strength\n    let score = 0\n    const feedback: string[] = []\n    \n    if (password.length >= 8) score += 1\n    else feedback.push(\"Password should be at least 8 characters long\")\n    if (/[a-z]/.test(password)) score += 1\n    else feedback.push(\"Password should contain lowercase letters\")\n    if (/[A-Z]/.test(password)) score += 1\n    else feedback.push(\"Password should contain uppercase letters\")\n    if (/\\d/.test(password)) score += 1\n    else feedback.push(\"Password should contain numbers\")\n    if (/[!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(password)) score += 1\n    else feedback.push(\"Password should contain special characters\")\n    \n    return { score, feedback }\n  }, [])\n\n  const detectBruteForce = useCallback((attempts: number) => {\n    return attempts > 5\n  }, [])\n\n  const validateTwoFactor = useCallback(async (code: string) => {\n    // Mock 2FA validation - in real app, this would call your 2FA service\n    return code.length === 6 && /^\\d{6}$/.test(code)\n  }, [])\n\n  const addSecurityWarning = useCallback((warning: string) => {\n    setSecurityWarnings((prev) => [...prev, warning])\n  }, [])\n\n  const clearSecurityWarnings = useCallback(() => {\n    setSecurityWarnings([])\n  }, [])\n\n  const incrementLoginAttempts = useCallback(() => {\n    setLoginAttempts((prev) => prev + 1)\n  }, [])\n\n  const resetLoginAttempts = useCallback(() => {\n    setLoginAttempts(0)\n  }, [])\n\n  const lockAccount = useCallback((duration: number = 300000) => { // 5 minutes default\n    setIsLocked(true)\n    const unlockTime = new Date(Date.now() + duration)\n    setLockoutTime(unlockTime)\n    setTimeout(() => {\n      setIsLocked(false)\n      setLockoutTime(null)\n    }, duration)\n  }, [])\n\n  const generateCSRFToken = useCallback(() => {\n    const token = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n    setCsrfToken(token)\n    return token\n  }, [])\n\n  const verifyCredentials = useCallback(async (email: string, password: string) => {\n    // In a real app, this would make an API call to verify credentials\n    // For now, we'll simulate credential verification\n    try {\n      // Basic validation\n      if (!email || !password) {\n        return false\n      }\n\n      // Check if account is locked\n      if (isLocked) {\n        throw new Error('Account is locked')\n      }\n\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 500))\n\n      // For demo purposes, accept any email/password combination\n      // In real app, this would verify against your authentication service\n      return true\n    } catch (error) {\n      incrementLoginAttempts()\n      \n      // Lock account after too many attempts\n      if (loginAttempts >= 4) {\n        lockAccount()\n      }\n      \n      return false\n    }\n  }, [isLocked, incrementLoginAttempts, loginAttempts, lockAccount])\n\n  return {\n    ...auth,\n    securityWarnings,\n    loginAttempts,\n    isLocked,\n    lockoutTime,\n    csrfToken,\n    detectSuspiciousActivity,\n    validateSecureConnection,\n    checkPasswordStrength,\n    detectBruteForce,\n    validateTwoFactor,\n    verifyCredentials,\n    addSecurityWarning,\n    clearSecurityWarnings,\n    incrementLoginAttempts,\n    resetLoginAttempts,\n    lockAccount,\n    generateCSRFToken,\n  }\n}\n"],"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","ignoreList":[]}