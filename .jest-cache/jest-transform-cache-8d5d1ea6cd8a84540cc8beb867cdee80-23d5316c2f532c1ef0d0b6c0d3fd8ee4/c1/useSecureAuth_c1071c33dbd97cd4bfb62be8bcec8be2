65e3baa8cefbf411e73cc3faa6df7948
"use client";
"use strict";

/* istanbul ignore next */
function cov_2b8qdgkwyt() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\useSecureAuth.ts";
  var hash = "1232956c10f8c8c8b07b2eb8e089fa6772742b88";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\useSecureAuth.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 29
        }
      },
      "3": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 31
        }
      },
      "4": {
        start: {
          line: 13,
          column: 21
        },
        end: {
          line: 13,
          column: 54
        }
      },
      "5": {
        start: {
          line: 14,
          column: 20
        },
        end: {
          line: 14,
          column: 50
        }
      },
      "6": {
        start: {
          line: 15,
          column: 22
        },
        end: {
          line: 155,
          column: 1
        }
      },
      "7": {
        start: {
          line: 16,
          column: 17
        },
        end: {
          line: 16,
          column: 44
        }
      },
      "8": {
        start: {
          line: 17,
          column: 52
        },
        end: {
          line: 17,
          column: 76
        }
      },
      "9": {
        start: {
          line: 18,
          column: 46
        },
        end: {
          line: 18,
          column: 69
        }
      },
      "10": {
        start: {
          line: 19,
          column: 36
        },
        end: {
          line: 19,
          column: 63
        }
      },
      "11": {
        start: {
          line: 20,
          column: 42
        },
        end: {
          line: 20,
          column: 68
        }
      },
      "12": {
        start: {
          line: 21,
          column: 38
        },
        end: {
          line: 21,
          column: 64
        }
      },
      "13": {
        start: {
          line: 22,
          column: 37
        },
        end: {
          line: 34,
          column: 10
        }
      },
      "14": {
        start: {
          line: 24,
          column: 35
        },
        end: {
          line: 31,
          column: 9
        }
      },
      "15": {
        start: {
          line: 32,
          column: 31
        },
        end: {
          line: 32,
          column: 55
        }
      },
      "16": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 80
        }
      },
      "17": {
        start: {
          line: 33,
          column: 50
        },
        end: {
          line: 33,
          column: 78
        }
      },
      "18": {
        start: {
          line: 35,
          column: 37
        },
        end: {
          line: 37,
          column: 10
        }
      },
      "19": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 97
        }
      },
      "20": {
        start: {
          line: 38,
          column: 34
        },
        end: {
          line: 67,
          column: 10
        }
      },
      "21": {
        start: {
          line: 39,
          column: 23
        },
        end: {
          line: 39,
          column: 72
        }
      },
      "22": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "23": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 48,
          column: 14
        }
      },
      "24": {
        start: {
          line: 51,
          column: 20
        },
        end: {
          line: 51,
          column: 21
        }
      },
      "25": {
        start: {
          line: 52,
          column: 25
        },
        end: {
          line: 52,
          column: 27
        }
      },
      "26": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 54,
          column: 76
        }
      },
      "27": {
        start: {
          line: 53,
          column: 34
        },
        end: {
          line: 53,
          column: 45
        }
      },
      "28": {
        start: {
          line: 54,
          column: 13
        },
        end: {
          line: 54,
          column: 76
        }
      },
      "29": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 56,
          column: 72
        }
      },
      "30": {
        start: {
          line: 55,
          column: 36
        },
        end: {
          line: 55,
          column: 47
        }
      },
      "31": {
        start: {
          line: 56,
          column: 13
        },
        end: {
          line: 56,
          column: 72
        }
      },
      "32": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 58,
          column: 72
        }
      },
      "33": {
        start: {
          line: 57,
          column: 36
        },
        end: {
          line: 57,
          column: 47
        }
      },
      "34": {
        start: {
          line: 58,
          column: 13
        },
        end: {
          line: 58,
          column: 72
        }
      },
      "35": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 60,
          column: 62
        }
      },
      "36": {
        start: {
          line: 59,
          column: 33
        },
        end: {
          line: 59,
          column: 44
        }
      },
      "37": {
        start: {
          line: 60,
          column: 13
        },
        end: {
          line: 60,
          column: 62
        }
      },
      "38": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 62,
          column: 73
        }
      },
      "39": {
        start: {
          line: 61,
          column: 66
        },
        end: {
          line: 61,
          column: 77
        }
      },
      "40": {
        start: {
          line: 62,
          column: 13
        },
        end: {
          line: 62,
          column: 73
        }
      },
      "41": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 66,
          column: 10
        }
      },
      "42": {
        start: {
          line: 68,
          column: 29
        },
        end: {
          line: 70,
          column: 10
        }
      },
      "43": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 28
        }
      },
      "44": {
        start: {
          line: 71,
          column: 30
        },
        end: {
          line: 74,
          column: 10
        }
      },
      "45": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 57
        }
      },
      "46": {
        start: {
          line: 75,
          column: 31
        },
        end: {
          line: 80,
          column: 10
        }
      },
      "47": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 79,
          column: 15
        }
      },
      "48": {
        start: {
          line: 76,
          column: 36
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "49": {
        start: {
          line: 81,
          column: 34
        },
        end: {
          line: 83,
          column: 10
        }
      },
      "50": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 32
        }
      },
      "51": {
        start: {
          line: 84,
          column: 35
        },
        end: {
          line: 86,
          column: 10
        }
      },
      "52": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 43
        }
      },
      "53": {
        start: {
          line: 85,
          column: 33
        },
        end: {
          line: 85,
          column: 41
        }
      },
      "54": {
        start: {
          line: 87,
          column: 31
        },
        end: {
          line: 89,
          column: 10
        }
      },
      "55": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 28
        }
      },
      "56": {
        start: {
          line: 90,
          column: 24
        },
        end: {
          line: 98,
          column: 10
        }
      },
      "57": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 26
        }
      },
      "58": {
        start: {
          line: 92,
          column: 27
        },
        end: {
          line: 92,
          column: 58
        }
      },
      "59": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 35
        }
      },
      "60": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 97,
          column: 21
        }
      },
      "61": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 31
        }
      },
      "62": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 33
        }
      },
      "63": {
        start: {
          line: 99,
          column: 30
        },
        end: {
          line: 103,
          column: 10
        }
      },
      "64": {
        start: {
          line: 100,
          column: 22
        },
        end: {
          line: 100,
          column: 111
        }
      },
      "65": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 28
        }
      },
      "66": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 21
        }
      },
      "67": {
        start: {
          line: 104,
          column: 30
        },
        end: {
          line: 134,
          column: 6
        }
      },
      "68": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "69": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 111,
          column: 13
        }
      },
      "70": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 29
        }
      },
      "71": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 115,
          column: 13
        }
      },
      "72": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 53
        }
      },
      "73": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 67
        }
      },
      "74": {
        start: {
          line: 117,
          column: 41
        },
        end: {
          line: 117,
          column: 65
        }
      },
      "75": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 24
        }
      },
      "76": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 37
        }
      },
      "77": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 126,
          column: 13
        }
      },
      "78": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 30
        }
      },
      "79": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 25
        }
      },
      "80": {
        start: {
          line: 135,
          column: 4
        },
        end: {
          line: 154,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 10
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 22
          },
          end: {
            line: 15,
            column: 23
          }
        },
        loc: {
          start: {
            line: 15,
            column: 26
          },
          end: {
            line: 155,
            column: 1
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 22,
            column: 61
          },
          end: {
            line: 22,
            column: 62
          }
        },
        loc: {
          start: {
            line: 22,
            column: 73
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 22
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 33,
            column: 39
          },
          end: {
            line: 33,
            column: 40
          }
        },
        loc: {
          start: {
            line: 33,
            column: 50
          },
          end: {
            line: 33,
            column: 78
          }
        },
        line: 33
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 35,
            column: 61
          },
          end: {
            line: 35,
            column: 62
          }
        },
        loc: {
          start: {
            line: 35,
            column: 65
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 35
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 38,
            column: 58
          },
          end: {
            line: 38,
            column: 59
          }
        },
        loc: {
          start: {
            line: 38,
            column: 70
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 38
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 68,
            column: 53
          },
          end: {
            line: 68,
            column: 54
          }
        },
        loc: {
          start: {
            line: 68,
            column: 65
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 68
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 71,
            column: 54
          },
          end: {
            line: 71,
            column: 55
          }
        },
        loc: {
          start: {
            line: 71,
            column: 68
          },
          end: {
            line: 74,
            column: 5
          }
        },
        line: 71
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 75,
            column: 55
          },
          end: {
            line: 75,
            column: 56
          }
        },
        loc: {
          start: {
            line: 75,
            column: 66
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 75
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 76,
            column: 28
          },
          end: {
            line: 76,
            column: 29
          }
        },
        loc: {
          start: {
            line: 76,
            column: 36
          },
          end: {
            line: 79,
            column: 13
          }
        },
        line: 76
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 81,
            column: 58
          },
          end: {
            line: 81,
            column: 59
          }
        },
        loc: {
          start: {
            line: 81,
            column: 62
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 81
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 84,
            column: 59
          },
          end: {
            line: 84,
            column: 60
          }
        },
        loc: {
          start: {
            line: 84,
            column: 63
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 84
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 85,
            column: 25
          },
          end: {
            line: 85,
            column: 26
          }
        },
        loc: {
          start: {
            line: 85,
            column: 33
          },
          end: {
            line: 85,
            column: 41
          }
        },
        line: 85
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 87,
            column: 55
          },
          end: {
            line: 87,
            column: 56
          }
        },
        loc: {
          start: {
            line: 87,
            column: 59
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 87
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 90,
            column: 48
          },
          end: {
            line: 90,
            column: 49
          }
        },
        loc: {
          start: {
            line: 90,
            column: 69
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 90
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 94,
            column: 19
          },
          end: {
            line: 94,
            column: 20
          }
        },
        loc: {
          start: {
            line: 94,
            column: 23
          },
          end: {
            line: 97,
            column: 9
          }
        },
        line: 94
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 99,
            column: 54
          },
          end: {
            line: 99,
            column: 55
          }
        },
        loc: {
          start: {
            line: 99,
            column: 58
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 99
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 104,
            column: 54
          },
          end: {
            line: 104,
            column: 55
          }
        },
        loc: {
          start: {
            line: 104,
            column: 79
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 104
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 117,
            column: 30
          },
          end: {
            line: 117,
            column: 31
          }
        },
        loc: {
          start: {
            line: 117,
            column: 41
          },
          end: {
            line: 117,
            column: 65
          }
        },
        line: 117
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 36,
            column: 15
          },
          end: {
            line: 36,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 15
          },
          end: {
            line: 36,
            column: 52
          }
        }, {
          start: {
            line: 36,
            column: 56
          },
          end: {
            line: 36,
            column: 96
          }
        }],
        line: 36
      },
      "1": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "2": {
        loc: {
          start: {
            line: 43,
            column: 26
          },
          end: {
            line: 47,
            column: 17
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 43,
            column: 41
          },
          end: {
            line: 45,
            column: 17
          }
        }, {
          start: {
            line: 45,
            column: 20
          },
          end: {
            line: 47,
            column: 17
          }
        }],
        line: 43
      },
      "3": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 54,
            column: 76
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 54,
            column: 76
          }
        }, {
          start: {
            line: 54,
            column: 13
          },
          end: {
            line: 54,
            column: 76
          }
        }],
        line: 53
      },
      "4": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 56,
            column: 72
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 56,
            column: 72
          }
        }, {
          start: {
            line: 56,
            column: 13
          },
          end: {
            line: 56,
            column: 72
          }
        }],
        line: 55
      },
      "5": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 58,
            column: 72
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 58,
            column: 72
          }
        }, {
          start: {
            line: 58,
            column: 13
          },
          end: {
            line: 58,
            column: 72
          }
        }],
        line: 57
      },
      "6": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 60,
            column: 62
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 60,
            column: 62
          }
        }, {
          start: {
            line: 60,
            column: 13
          },
          end: {
            line: 60,
            column: 62
          }
        }],
        line: 59
      },
      "7": {
        loc: {
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 62,
            column: 73
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 62,
            column: 73
          }
        }, {
          start: {
            line: 62,
            column: 13
          },
          end: {
            line: 62,
            column: 73
          }
        }],
        line: 61
      },
      "8": {
        loc: {
          start: {
            line: 73,
            column: 15
          },
          end: {
            line: 73,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 15
          },
          end: {
            line: 73,
            column: 32
          }
        }, {
          start: {
            line: 73,
            column: 36
          },
          end: {
            line: 73,
            column: 56
          }
        }],
        line: 73
      },
      "9": {
        loc: {
          start: {
            line: 90,
            column: 49
          },
          end: {
            line: 90,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 90,
            column: 60
          },
          end: {
            line: 90,
            column: 66
          }
        }],
        line: 90
      },
      "10": {
        loc: {
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 111,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 111,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "11": {
        loc: {
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 109,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 109,
            column: 22
          }
        }, {
          start: {
            line: 109,
            column: 26
          },
          end: {
            line: 109,
            column: 35
          }
        }],
        line: 109
      },
      "12": {
        loc: {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 115,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 115,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "13": {
        loc: {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 126,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 126,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\useSecureAuth.ts"],
      sourcesContent: ["\"use client\"\n\nimport { useState, useCallback } from \"react\"\nimport { useAuth } from \"../context/AuthContext\"\nimport { validatePasswordSecure } from \"../utils/validation\"\n\nexport interface SecurityFeatures {\n  detectSuspiciousActivity: (activity: any) => boolean\n  validateSecureConnection: () => boolean\n  checkPasswordStrength: (password: string) => { score: number; feedback: string[] }\n  detectBruteForce: (attempts: number) => boolean\n  validateTwoFactor: (code: string) => Promise<boolean>\n}\n\nexport const useSecureAuth = () => {\n  const auth = useAuth()\n  const [securityWarnings, setSecurityWarnings] = useState<string[]>([])\n  const [loginAttempts, setLoginAttempts] = useState(0)\n  const [isLocked, setIsLocked] = useState(false)\n  const [lockoutTime, setLockoutTime] = useState<Date | null>(null)\n  const [csrfToken, setCsrfToken] = useState<string | null>(null)\n\n  const detectSuspiciousActivity = useCallback((activity: any) => {\n    // Basic suspicious activity detection\n    const suspiciousPatterns = [/script/i, /javascript/i, /eval/i, /alert/i, /document\\./i, /window\\./i]\n\n    const activityString = JSON.stringify(activity)\n    return suspiciousPatterns.some((pattern) => pattern.test(activityString))\n  }, [])\n\n  const validateSecureConnection = useCallback(() => {\n    return window.location.protocol === \"https:\" || window.location.hostname === \"localhost\"\n  }, [])\n\n  const checkPasswordStrength = useCallback((password: string) => {\n    const result = validatePasswordSecure(password)\n    \n    if (!result.isValid) {\n      return { score: 0, feedback: result.error ? [result.error] : ['Invalid password'] }\n    }\n    \n    // Calculate score based on password strength\n    let score = 0\n    const feedback: string[] = []\n    \n    if (password.length >= 8) score += 1\n    else feedback.push(\"Password should be at least 8 characters long\")\n    if (/[a-z]/.test(password)) score += 1\n    else feedback.push(\"Password should contain lowercase letters\")\n    if (/[A-Z]/.test(password)) score += 1\n    else feedback.push(\"Password should contain uppercase letters\")\n    if (/\\d/.test(password)) score += 1\n    else feedback.push(\"Password should contain numbers\")\n    if (/[!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(password)) score += 1\n    else feedback.push(\"Password should contain special characters\")\n    \n    return { score, feedback }\n  }, [])\n\n  const detectBruteForce = useCallback((attempts: number) => {\n    return attempts > 5\n  }, [])\n\n  const validateTwoFactor = useCallback(async (code: string) => {\n    // Mock 2FA validation - in real app, this would call your 2FA service\n    return code.length === 6 && /^\\d{6}$/.test(code)\n  }, [])\n\n  const addSecurityWarning = useCallback((warning: string) => {\n    setSecurityWarnings((prev) => [...prev, warning])\n  }, [])\n\n  const clearSecurityWarnings = useCallback(() => {\n    setSecurityWarnings([])\n  }, [])\n\n  const incrementLoginAttempts = useCallback(() => {\n    setLoginAttempts((prev) => prev + 1)\n  }, [])\n\n  const resetLoginAttempts = useCallback(() => {\n    setLoginAttempts(0)\n  }, [])\n\n  const lockAccount = useCallback((duration: number = 300000) => { // 5 minutes default\n    setIsLocked(true)\n    const unlockTime = new Date(Date.now() + duration)\n    setLockoutTime(unlockTime)\n    setTimeout(() => {\n      setIsLocked(false)\n      setLockoutTime(null)\n    }, duration)\n  }, [])\n\n  const generateCSRFToken = useCallback(() => {\n    const token = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n    setCsrfToken(token)\n    return token\n  }, [])\n\n  const verifyCredentials = useCallback(async (email: string, password: string) => {\n    // In a real app, this would make an API call to verify credentials\n    // For now, we'll simulate credential verification\n    try {\n      // Basic validation\n      if (!email || !password) {\n        return false\n      }\n\n      // Check if account is locked\n      if (isLocked) {\n        throw new Error('Account is locked')\n      }\n\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 500))\n\n      // For demo purposes, accept any email/password combination\n      // In real app, this would verify against your authentication service\n      return true\n    } catch (error) {\n      incrementLoginAttempts()\n      \n      // Lock account after too many attempts\n      if (loginAttempts >= 4) {\n        lockAccount()\n      }\n      \n      return false\n    }\n  }, [isLocked, incrementLoginAttempts, loginAttempts, lockAccount])\n\n  return {\n    ...auth,\n    securityWarnings,\n    loginAttempts,\n    isLocked,\n    lockoutTime,\n    csrfToken,\n    detectSuspiciousActivity,\n    validateSecureConnection,\n    checkPasswordStrength,\n    detectBruteForce,\n    validateTwoFactor,\n    verifyCredentials,\n    addSecurityWarning,\n    clearSecurityWarnings,\n    incrementLoginAttempts,\n    resetLoginAttempts,\n    lockAccount,\n    generateCSRFToken,\n  }\n}\n"],
      names: ["useSecureAuth", "auth", "useAuth", "securityWarnings", "setSecurityWarnings", "useState", "loginAttempts", "setLoginAttempts", "isLocked", "setIsLocked", "lockoutTime", "setLockoutTime", "csrfToken", "setCsrfToken", "detectSuspiciousActivity", "useCallback", "activity", "suspiciousPatterns", "activityString", "JSON", "stringify", "some", "pattern", "test", "validateSecureConnection", "window", "location", "protocol", "hostname", "checkPasswordStrength", "password", "result", "validatePasswordSecure", "isValid", "score", "feedback", "error", "length", "push", "detectBruteForce", "attempts", "validateTwoFactor", "code", "addSecurityWarning", "warning", "prev", "clearSecurityWarnings", "incrementLoginAttempts", "resetLoginAttempts", "lockAccount", "duration", "unlockTime", "Date", "now", "setTimeout", "generateCSRFToken", "token", "Math", "random", "toString", "substring", "verifyCredentials", "email", "Error", "Promise", "resolve"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1232956c10f8c8c8b07b2eb8e089fa6772742b88"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2b8qdgkwyt = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2b8qdgkwyt();
cov_2b8qdgkwyt().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2b8qdgkwyt().s[1]++;
Object.defineProperty(exports, "useSecureAuth", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2b8qdgkwyt().f[0]++;
    cov_2b8qdgkwyt().s[2]++;
    return useSecureAuth;
  }
});
const _react =
/* istanbul ignore next */
(cov_2b8qdgkwyt().s[3]++, require("react"));
const _AuthContext =
/* istanbul ignore next */
(cov_2b8qdgkwyt().s[4]++, require("../context/AuthContext"));
const _validation =
/* istanbul ignore next */
(cov_2b8qdgkwyt().s[5]++, require("../utils/validation"));
/* istanbul ignore next */
cov_2b8qdgkwyt().s[6]++;
const useSecureAuth = () => {
  /* istanbul ignore next */
  cov_2b8qdgkwyt().f[1]++;
  const auth =
  /* istanbul ignore next */
  (cov_2b8qdgkwyt().s[7]++, (0, _AuthContext.useAuth)());
  const [securityWarnings, setSecurityWarnings] =
  /* istanbul ignore next */
  (cov_2b8qdgkwyt().s[8]++, (0, _react.useState)([]));
  const [loginAttempts, setLoginAttempts] =
  /* istanbul ignore next */
  (cov_2b8qdgkwyt().s[9]++, (0, _react.useState)(0));
  const [isLocked, setIsLocked] =
  /* istanbul ignore next */
  (cov_2b8qdgkwyt().s[10]++, (0, _react.useState)(false));
  const [lockoutTime, setLockoutTime] =
  /* istanbul ignore next */
  (cov_2b8qdgkwyt().s[11]++, (0, _react.useState)(null));
  const [csrfToken, setCsrfToken] =
  /* istanbul ignore next */
  (cov_2b8qdgkwyt().s[12]++, (0, _react.useState)(null));
  const detectSuspiciousActivity =
  /* istanbul ignore next */
  (cov_2b8qdgkwyt().s[13]++, (0, _react.useCallback)(activity => {
    /* istanbul ignore next */
    cov_2b8qdgkwyt().f[2]++;
    // Basic suspicious activity detection
    const suspiciousPatterns =
    /* istanbul ignore next */
    (cov_2b8qdgkwyt().s[14]++, [/script/i, /javascript/i, /eval/i, /alert/i, /document\./i, /window\./i]);
    const activityString =
    /* istanbul ignore next */
    (cov_2b8qdgkwyt().s[15]++, JSON.stringify(activity));
    /* istanbul ignore next */
    cov_2b8qdgkwyt().s[16]++;
    return suspiciousPatterns.some(pattern => {
      /* istanbul ignore next */
      cov_2b8qdgkwyt().f[3]++;
      cov_2b8qdgkwyt().s[17]++;
      return pattern.test(activityString);
    });
  }, []));
  const validateSecureConnection =
  /* istanbul ignore next */
  (cov_2b8qdgkwyt().s[18]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2b8qdgkwyt().f[4]++;
    cov_2b8qdgkwyt().s[19]++;
    return /* istanbul ignore next */(cov_2b8qdgkwyt().b[0][0]++, window.location.protocol === "https:") ||
    /* istanbul ignore next */
    (cov_2b8qdgkwyt().b[0][1]++, window.location.hostname === "localhost");
  }, []));
  const checkPasswordStrength =
  /* istanbul ignore next */
  (cov_2b8qdgkwyt().s[20]++, (0, _react.useCallback)(password => {
    /* istanbul ignore next */
    cov_2b8qdgkwyt().f[5]++;
    const result =
    /* istanbul ignore next */
    (cov_2b8qdgkwyt().s[21]++, (0, _validation.validatePasswordSecure)(password));
    /* istanbul ignore next */
    cov_2b8qdgkwyt().s[22]++;
    if (!result.isValid) {
      /* istanbul ignore next */
      cov_2b8qdgkwyt().b[1][0]++;
      cov_2b8qdgkwyt().s[23]++;
      return {
        score: 0,
        feedback: result.error ?
        /* istanbul ignore next */
        (cov_2b8qdgkwyt().b[2][0]++, [result.error]) :
        /* istanbul ignore next */
        (cov_2b8qdgkwyt().b[2][1]++, ['Invalid password'])
      };
    } else
    /* istanbul ignore next */
    {
      cov_2b8qdgkwyt().b[1][1]++;
    }
    // Calculate score based on password strength
    let score =
    /* istanbul ignore next */
    (cov_2b8qdgkwyt().s[24]++, 0);
    const feedback =
    /* istanbul ignore next */
    (cov_2b8qdgkwyt().s[25]++, []);
    /* istanbul ignore next */
    cov_2b8qdgkwyt().s[26]++;
    if (password.length >= 8) {
      /* istanbul ignore next */
      cov_2b8qdgkwyt().b[3][0]++;
      cov_2b8qdgkwyt().s[27]++;
      score += 1;
    } else {
      /* istanbul ignore next */
      cov_2b8qdgkwyt().b[3][1]++;
      cov_2b8qdgkwyt().s[28]++;
      feedback.push("Password should be at least 8 characters long");
    }
    /* istanbul ignore next */
    cov_2b8qdgkwyt().s[29]++;
    if (/[a-z]/.test(password)) {
      /* istanbul ignore next */
      cov_2b8qdgkwyt().b[4][0]++;
      cov_2b8qdgkwyt().s[30]++;
      score += 1;
    } else {
      /* istanbul ignore next */
      cov_2b8qdgkwyt().b[4][1]++;
      cov_2b8qdgkwyt().s[31]++;
      feedback.push("Password should contain lowercase letters");
    }
    /* istanbul ignore next */
    cov_2b8qdgkwyt().s[32]++;
    if (/[A-Z]/.test(password)) {
      /* istanbul ignore next */
      cov_2b8qdgkwyt().b[5][0]++;
      cov_2b8qdgkwyt().s[33]++;
      score += 1;
    } else {
      /* istanbul ignore next */
      cov_2b8qdgkwyt().b[5][1]++;
      cov_2b8qdgkwyt().s[34]++;
      feedback.push("Password should contain uppercase letters");
    }
    /* istanbul ignore next */
    cov_2b8qdgkwyt().s[35]++;
    if (/\d/.test(password)) {
      /* istanbul ignore next */
      cov_2b8qdgkwyt().b[6][0]++;
      cov_2b8qdgkwyt().s[36]++;
      score += 1;
    } else {
      /* istanbul ignore next */
      cov_2b8qdgkwyt().b[6][1]++;
      cov_2b8qdgkwyt().s[37]++;
      feedback.push("Password should contain numbers");
    }
    /* istanbul ignore next */
    cov_2b8qdgkwyt().s[38]++;
    if (/[!@#$%^&*()_+\-=[\]{};':"\\|,.<>/?]/.test(password)) {
      /* istanbul ignore next */
      cov_2b8qdgkwyt().b[7][0]++;
      cov_2b8qdgkwyt().s[39]++;
      score += 1;
    } else {
      /* istanbul ignore next */
      cov_2b8qdgkwyt().b[7][1]++;
      cov_2b8qdgkwyt().s[40]++;
      feedback.push("Password should contain special characters");
    }
    /* istanbul ignore next */
    cov_2b8qdgkwyt().s[41]++;
    return {
      score,
      feedback
    };
  }, []));
  const detectBruteForce =
  /* istanbul ignore next */
  (cov_2b8qdgkwyt().s[42]++, (0, _react.useCallback)(attempts => {
    /* istanbul ignore next */
    cov_2b8qdgkwyt().f[6]++;
    cov_2b8qdgkwyt().s[43]++;
    return attempts > 5;
  }, []));
  const validateTwoFactor =
  /* istanbul ignore next */
  (cov_2b8qdgkwyt().s[44]++, (0, _react.useCallback)(async code => {
    /* istanbul ignore next */
    cov_2b8qdgkwyt().f[7]++;
    cov_2b8qdgkwyt().s[45]++;
    // Mock 2FA validation - in real app, this would call your 2FA service
    return /* istanbul ignore next */(cov_2b8qdgkwyt().b[8][0]++, code.length === 6) &&
    /* istanbul ignore next */
    (cov_2b8qdgkwyt().b[8][1]++, /^\d{6}$/.test(code));
  }, []));
  const addSecurityWarning =
  /* istanbul ignore next */
  (cov_2b8qdgkwyt().s[46]++, (0, _react.useCallback)(warning => {
    /* istanbul ignore next */
    cov_2b8qdgkwyt().f[8]++;
    cov_2b8qdgkwyt().s[47]++;
    setSecurityWarnings(prev => {
      /* istanbul ignore next */
      cov_2b8qdgkwyt().f[9]++;
      cov_2b8qdgkwyt().s[48]++;
      return [...prev, warning];
    });
  }, []));
  const clearSecurityWarnings =
  /* istanbul ignore next */
  (cov_2b8qdgkwyt().s[49]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2b8qdgkwyt().f[10]++;
    cov_2b8qdgkwyt().s[50]++;
    setSecurityWarnings([]);
  }, []));
  const incrementLoginAttempts =
  /* istanbul ignore next */
  (cov_2b8qdgkwyt().s[51]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2b8qdgkwyt().f[11]++;
    cov_2b8qdgkwyt().s[52]++;
    setLoginAttempts(prev => {
      /* istanbul ignore next */
      cov_2b8qdgkwyt().f[12]++;
      cov_2b8qdgkwyt().s[53]++;
      return prev + 1;
    });
  }, []));
  const resetLoginAttempts =
  /* istanbul ignore next */
  (cov_2b8qdgkwyt().s[54]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2b8qdgkwyt().f[13]++;
    cov_2b8qdgkwyt().s[55]++;
    setLoginAttempts(0);
  }, []));
  const lockAccount =
  /* istanbul ignore next */
  (cov_2b8qdgkwyt().s[56]++, (0, _react.useCallback)((duration =
  /* istanbul ignore next */
  (cov_2b8qdgkwyt().b[9][0]++, 300000)) => {
    /* istanbul ignore next */
    cov_2b8qdgkwyt().f[14]++;
    cov_2b8qdgkwyt().s[57]++;
    setIsLocked(true);
    const unlockTime =
    /* istanbul ignore next */
    (cov_2b8qdgkwyt().s[58]++, new Date(Date.now() + duration));
    /* istanbul ignore next */
    cov_2b8qdgkwyt().s[59]++;
    setLockoutTime(unlockTime);
    /* istanbul ignore next */
    cov_2b8qdgkwyt().s[60]++;
    setTimeout(() => {
      /* istanbul ignore next */
      cov_2b8qdgkwyt().f[15]++;
      cov_2b8qdgkwyt().s[61]++;
      setIsLocked(false);
      /* istanbul ignore next */
      cov_2b8qdgkwyt().s[62]++;
      setLockoutTime(null);
    }, duration);
  }, []));
  const generateCSRFToken =
  /* istanbul ignore next */
  (cov_2b8qdgkwyt().s[63]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_2b8qdgkwyt().f[16]++;
    const token =
    /* istanbul ignore next */
    (cov_2b8qdgkwyt().s[64]++, Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15));
    /* istanbul ignore next */
    cov_2b8qdgkwyt().s[65]++;
    setCsrfToken(token);
    /* istanbul ignore next */
    cov_2b8qdgkwyt().s[66]++;
    return token;
  }, []));
  const verifyCredentials =
  /* istanbul ignore next */
  (cov_2b8qdgkwyt().s[67]++, (0, _react.useCallback)(async (email, password) => {
    /* istanbul ignore next */
    cov_2b8qdgkwyt().f[17]++;
    cov_2b8qdgkwyt().s[68]++;
    // In a real app, this would make an API call to verify credentials
    // For now, we'll simulate credential verification
    try {
      /* istanbul ignore next */
      cov_2b8qdgkwyt().s[69]++;
      // Basic validation
      if (
      /* istanbul ignore next */
      (cov_2b8qdgkwyt().b[11][0]++, !email) ||
      /* istanbul ignore next */
      (cov_2b8qdgkwyt().b[11][1]++, !password)) {
        /* istanbul ignore next */
        cov_2b8qdgkwyt().b[10][0]++;
        cov_2b8qdgkwyt().s[70]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_2b8qdgkwyt().b[10][1]++;
      }
      // Check if account is locked
      cov_2b8qdgkwyt().s[71]++;
      if (isLocked) {
        /* istanbul ignore next */
        cov_2b8qdgkwyt().b[12][0]++;
        cov_2b8qdgkwyt().s[72]++;
        throw new Error('Account is locked');
      } else
      /* istanbul ignore next */
      {
        cov_2b8qdgkwyt().b[12][1]++;
      }
      // Simulate API call delay
      cov_2b8qdgkwyt().s[73]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_2b8qdgkwyt().f[18]++;
        cov_2b8qdgkwyt().s[74]++;
        return setTimeout(resolve, 500);
      });
      // For demo purposes, accept any email/password combination
      // In real app, this would verify against your authentication service
      /* istanbul ignore next */
      cov_2b8qdgkwyt().s[75]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_2b8qdgkwyt().s[76]++;
      incrementLoginAttempts();
      // Lock account after too many attempts
      /* istanbul ignore next */
      cov_2b8qdgkwyt().s[77]++;
      if (loginAttempts >= 4) {
        /* istanbul ignore next */
        cov_2b8qdgkwyt().b[13][0]++;
        cov_2b8qdgkwyt().s[78]++;
        lockAccount();
      } else
      /* istanbul ignore next */
      {
        cov_2b8qdgkwyt().b[13][1]++;
      }
      cov_2b8qdgkwyt().s[79]++;
      return false;
    }
  }, [isLocked, incrementLoginAttempts, loginAttempts, lockAccount]));
  /* istanbul ignore next */
  cov_2b8qdgkwyt().s[80]++;
  return {
    ...auth,
    securityWarnings,
    loginAttempts,
    isLocked,
    lockoutTime,
    csrfToken,
    detectSuspiciousActivity,
    validateSecureConnection,
    checkPasswordStrength,
    detectBruteForce,
    validateTwoFactor,
    verifyCredentials,
    addSecurityWarning,
    clearSecurityWarnings,
    incrementLoginAttempts,
    resetLoginAttempts,
    lockAccount,
    generateCSRFToken
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,