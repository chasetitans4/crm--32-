{"version":3,"names":["cov_1nat1gpdx0","actualCoverage","s","EnhancedValidator","f","calculateInvoiceTotal","validateBusinessEmail","validateCurrency","validateTaxId","BUSINESS_RULES","MIN_PROJECT_DURATION_DAYS","MAX_PROJECT_DURATION_DAYS","MIN_HOURLY_RATE","MAX_HOURLY_RATE","MAX_LATE_FEE_PERCENTAGE","MIN_MILESTONE_AMOUNT","MAX_INVOICE_AMOUNT","OVERDUE_THRESHOLD_DAYS","validateContract","data","result","isValid","errors","warnings","_contractInvoiceSchemas","contractSchema","parse","error","_zod","z","ZodError","b","map","err","field","path","join","message","code","validateContractBusinessRules","validateInvoice","invoiceSchema","validateInvoiceBusinessRules","validateField","fieldPath","value","schema","contract","invoice","totalAmount","push","toLocaleString","dueDate","today","Date","dueDateObj","daysUntilDue","Math","ceil","getTime","daysOverdue","abs","items","forEach","item","index","quantity","price","email","businessDomains","domain","split","toLowerCase","includes","taxId","businessType","test","currency","supportedCurrencies","toUpperCase","subtotal","taxAmount","itemTotal","unitPrice","discountAmount","discount","discountedAmount","taxRate","round"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\utils\\enhancedValidation.ts"],"sourcesContent":["\"use client\"\n\nimport { z } from 'zod';\nimport { contractSchema, invoiceSchema, type Contract, type Invoice } from '../schemas/contractInvoiceSchemas';\n\n// Enhanced validation utilities for contract and invoice systems\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n}\n\nexport interface ValidationError {\n  field: string;\n  message: string;\n  code: string;\n}\n\nexport interface ValidationWarning {\n  field: string;\n  message: string;\n  code: string;\n}\n\n// Business validation rules\nconst BUSINESS_RULES = {\n  MIN_PROJECT_DURATION_DAYS: 1,\n  MAX_PROJECT_DURATION_DAYS: 365 * 2, // 2 years\n  MIN_HOURLY_RATE: 25,\n  MAX_HOURLY_RATE: 500,\n  MAX_LATE_FEE_PERCENTAGE: 25,\n  MIN_MILESTONE_AMOUNT: 100,\n  MAX_INVOICE_AMOUNT: 1000000,\n  OVERDUE_THRESHOLD_DAYS: 30\n};\n\nexport class EnhancedValidator {\n  /**\n   * Validate contract with schema and business rules\n   */\n  static validateContract(data: unknown): ValidationResult {\n    const result: ValidationResult = {\n      isValid: true,\n      errors: [],\n      warnings: []\n    };\n\n    try {\n      // Schema validation\n      contractSchema.parse(data);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        result.isValid = false;\n        result.errors = error.errors.map(err => ({\n          field: err.path.join('.'),\n          message: err.message,\n          code: err.code\n        }));\n      }\n    }\n\n    // Business rule validation\n    if (data) {\n      this.validateContractBusinessRules(data, result);\n    }\n\n    return result;\n  }\n\n  /**\n   * Validate invoice with schema and business rules\n   */\n  static validateInvoice(data: unknown): ValidationResult {\n    const result: ValidationResult = {\n      isValid: true,\n      errors: [],\n      warnings: []\n    };\n\n    try {\n      // Schema validation\n      invoiceSchema.parse(data);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        result.isValid = false;\n        result.errors = error.errors.map(err => ({\n          field: err.path.join('.'),\n          message: err.message,\n          code: err.code\n        }));\n      }\n    }\n\n    // Business rule validation\n    if (data) {\n      this.validateInvoiceBusinessRules(data, result);\n    }\n\n    return result;\n  }\n\n  /**\n   * Validate individual field for real-time validation\n   */\n  static validateField(fieldPath: string, value: unknown, schema: z.ZodSchema): ValidationResult {\n    const result: ValidationResult = {\n      isValid: true,\n      errors: [],\n      warnings: []\n    };\n\n    try {\n      schema.parse(value);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        result.isValid = false;\n        result.errors = error.errors.map(err => ({\n          field: fieldPath,\n          message: err.message,\n          code: err.code\n        }));\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Contract business rules validation\n   */\n  private static validateContractBusinessRules(contract: Partial<Contract>, result: ValidationResult): void {\n    // Timeline validation - commented out as timeline property doesn't exist on projectDetails\n    // if (contract.projectDetails?.timeline) {\n    //   const { startDate, endDate, estimatedHours } = contract.projectDetails.timeline;\n    //   \n    //   if (startDate && endDate) {\n    //     const durationDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n    //     \n    //     if (durationDays < BUSINESS_RULES.MIN_PROJECT_DURATION_DAYS) {\n    //       result.warnings.push({\n    //         field: 'projectDetails.timeline',\n    //         message: 'Project duration is very short. Consider if this is realistic.',\n    //         code: 'SHORT_DURATION'\n    //       });\n    //     }\n    //     \n    //     if (durationDays > BUSINESS_RULES.MAX_PROJECT_DURATION_DAYS) {\n    //       result.errors.push({\n    //         field: 'projectDetails.timeline.endDate',\n    //         message: 'Project duration exceeds maximum allowed period of 2 years.',\n    //         code: 'DURATION_TOO_LONG'\n    //       });\n    //       result.isValid = false;\n    //     }\n    //   }\n\n    //   // Hourly rate validation\n    //   if (estimatedHours && contract.totalAmount) {\n    //     const hourlyRate = contract.totalAmount / estimatedHours;\n    //     \n    //     if (hourlyRate < BUSINESS_RULES.MIN_HOURLY_RATE) {\n    //       result.warnings.push({\n    //         field: 'totalAmount',\n    //         message: `Hourly rate ($${hourlyRate.toFixed(2)}) is below recommended minimum ($${BUSINESS_RULES.MIN_HOURLY_RATE}).`,\n    //         code: 'LOW_HOURLY_RATE'\n    //       });\n    //     }\n    //     \n    //     if (hourlyRate > BUSINESS_RULES.MAX_HOURLY_RATE) {\n    //       result.warnings.push({\n    //         field: 'totalAmount',\n    //         message: `Hourly rate ($${hourlyRate.toFixed(2)}) is unusually high. Please verify.`,\n    //         code: 'HIGH_HOURLY_RATE'\n    //       });\n    //     }\n    //   }\n    // }\n\n    // Financial terms validation - commented out as these properties don't exist on current contract type\n    // if (contract.financialTerms) {\n    //   const { milestones, lateFeePercentage } = contract.financialTerms;\n    //   \n    //   // Milestone amount validation\n    //   if (milestones) {\n    //     milestones.forEach((milestone, index) => {\n    //       if (milestone.amount < BUSINESS_RULES.MIN_MILESTONE_AMOUNT) {\n    //         result.warnings.push({\n    //           field: `financialTerms.milestones.${index}.amount`,\n    //           message: `Milestone amount ($${milestone.amount}) is below recommended minimum ($${BUSINESS_RULES.MIN_MILESTONE_AMOUNT}).`,\n    //           code: 'LOW_MILESTONE_AMOUNT'\n    //         });\n    //       }\n    //     });\n    //   }\n    //   \n    //   // Late fee validation\n    //   if (lateFeePercentage && lateFeePercentage > BUSINESS_RULES.MAX_LATE_FEE_PERCENTAGE) {\n    //     result.errors.push({\n    //       field: 'financialTerms.lateFeePercentage',\n    //       message: `Late fee percentage (${lateFeePercentage}%) exceeds maximum allowed (${BUSINESS_RULES.MAX_LATE_FEE_PERCENTAGE}%).`,\n    //       code: 'EXCESSIVE_LATE_FEE'\n    //     });\n    //     result.isValid = false;\n    //   }\n    // }\n  }\n\n  /**\n   * Invoice business rules validation\n   */\n  private static validateInvoiceBusinessRules(invoice: Partial<Invoice>, result: ValidationResult): void {\n    // Amount validation\n    if (invoice.totalAmount) {\n      if (invoice.totalAmount > BUSINESS_RULES.MAX_INVOICE_AMOUNT) {\n        result.warnings.push({\n          field: 'totalAmount',\n          message: `Invoice amount ($${invoice.totalAmount.toLocaleString()}) is unusually high. Please verify.`,\n          code: 'HIGH_INVOICE_AMOUNT'\n        });\n      }\n    }\n\n    // Due date validation\n    if (invoice.dueDate) {\n      const today = new Date();\n      const dueDateObj = invoice.dueDate instanceof Date ? invoice.dueDate : new Date(invoice.dueDate);\n      const daysUntilDue = Math.ceil((dueDateObj.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n      \n      if (daysUntilDue < 0) {\n        const daysOverdue = Math.abs(daysUntilDue);\n        if (daysOverdue > BUSINESS_RULES.OVERDUE_THRESHOLD_DAYS) {\n          result.warnings.push({\n            field: 'dueDate',\n            message: `Invoice is ${daysOverdue} days overdue. Consider collection actions.`,\n            code: 'SEVERELY_OVERDUE'\n          });\n        }\n      }\n    }\n\n    // Item validation\n    if (invoice.items) {\n      invoice.items.forEach((item, index) => {\n        if (item.quantity && item.quantity > 1000) {\n          result.warnings.push({\n            field: `items.${index}.quantity`,\n            message: `Item quantity (${item.quantity}) is unusually high. Please verify.`,\n            code: 'HIGH_QUANTITY'\n          });\n        }\n        \n        if (item.price && item.price > 10000) {\n          result.warnings.push({\n            field: `items.${index}.price`,\n            message: `Unit price ($${item.price.toLocaleString()}) is unusually high. Please verify.`,\n            code: 'HIGH_UNIT_PRICE'\n          });\n        }\n      });\n    }\n  }\n}\n\n// Utility functions\nexport const validateBusinessEmail = (email: string): boolean => {\n  const businessDomains = ['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com'];\n  const domain = email.split('@')[1]?.toLowerCase();\n  return domain ? !businessDomains.includes(domain) : false;\n};\n\nexport const validateTaxId = (taxId: string, businessType: string): boolean => {\n  if (!taxId) return true; // Optional field\n  \n  switch (businessType) {\n    case 'corporation':\n      return /^\\d{2}-\\d{7}$/.test(taxId); // EIN format\n    case 'individual':\n      return /^\\d{3}-\\d{2}-\\d{4}$/.test(taxId); // SSN format\n    default:\n      return /^\\d{2}-\\d{7}$/.test(taxId); // Default to EIN\n  }\n};\n\nexport const validateCurrency = (currency: string): boolean => {\n  const supportedCurrencies = ['USD', 'EUR', 'GBP', 'CAD', 'AUD'];\n  return supportedCurrencies.includes(currency.toUpperCase());\n};\n\nexport const calculateInvoiceTotal = (items: { quantity?: number; unitPrice?: number; price?: number; taxRate?: number; discount?: number }[]): { subtotal: number; taxAmount: number; totalAmount: number } => {\n  let subtotal = 0;\n  let taxAmount = 0;\n  \n  items.forEach(item => {\n    const itemTotal = (item.quantity || 0) * (item.unitPrice || 0);\n    const discountAmount = itemTotal * (item.discount || 0);\n    const discountedAmount = itemTotal - discountAmount;\n    \n    subtotal += discountedAmount;\n    taxAmount += discountedAmount * (item.taxRate || 0);\n  });\n  \n  return {\n    subtotal: Math.round(subtotal * 100) / 100,\n    taxAmount: Math.round(taxAmount * 100) / 100,\n    totalAmount: Math.round((subtotal + taxAmount) * 100) / 100\n  };\n};\n"],"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","ignoreList":[]}