{"version":3,"names":["default","cov_2gqr7kvrmv","f","s","_default","notificationService","NotificationService","getNotifications","userId","limit","b","_supabase","supabase","Error","data","error","from","select","eq","order","ascending","message","getUnreadCount","count","head","markAsRead","notificationId","update","read","updated_at","Date","toISOString","markAllAsRead","deleteNotification","delete","createNotification","notification","insert","created_at","single","getNotificationPreferences","code","updateNotificationPreferences","preferences","upsert","user_id","createTaskReminder","taskId","dueDate","task_reminders","reminderTime","getTime","reminder_timing","type","title","priority","action_url","action_label","metadata","task_id","scheduled_for","createEventAlert","eventId","startDate","event_alerts","alertTime","event_id","createInvoiceDueAlert","invoiceId","clientName","amount","invoice_due_alerts","isOverdue","invoice_id","client_name","createLeadAssignmentAlert","leadId","leadName","assignedBy","lead_assignments","lead_id","assigned_by","createMentionAlert","mentionedBy","context","contextUrl","mentioned_by","subscribeToNotifications","callback","listeners","push","channel","on","event","schema","table","filter","notifications","currentNotifications","forEach","listener","subscribe","unsubscribe","l","sendEmailNotification","templateName","variables","email_notifications","user","email","template","subject","body","Object","entries","key","value","placeholder","replace","RegExp","String","createBulkNotifications","map","cleanupOldNotifications","daysToKeep","cutoffDate","setDate","getDate","lt"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\notificationService.ts"],"sourcesContent":["import { supabase } from \"../lib/supabase\"\nimport type { Database } from \"../lib/supabase\"\n\ntype Tables<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Row\"]\ntype Inserts<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Insert\"]\ntype Updates<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Update\"]\n\nexport interface NotificationPreferences {\n  id: string\n  user_id: string\n  email_notifications: boolean\n  push_notifications: boolean\n  in_app_notifications: boolean\n  task_reminders: boolean\n  event_alerts: boolean\n  lead_assignments: boolean\n  invoice_due_alerts: boolean\n  system_updates: boolean\n  marketing_emails: boolean\n  reminder_timing: number // minutes before event\n  quiet_hours_start: string // HH:MM format\n  quiet_hours_end: string // HH:MM format\n  created_at: string\n  updated_at: string\n}\n\nexport interface Notification {\n  id: string\n  user_id: string\n  type: \"task\" | \"event\" | \"invoice\" | \"lead\" | \"system\" | \"mention\"\n  title: string\n  message: string\n  priority: \"low\" | \"medium\" | \"high\" | \"urgent\"\n  read: boolean\n  action_url?: string\n  action_label?: string\n  metadata?: Record<string, any>\n  scheduled_for?: string\n  created_at: string\n  updated_at: string\n}\n\nexport interface NotificationTemplate {\n  id: string\n  name: string\n  type: string\n  subject: string\n  body: string\n  variables: string[]\n  active: boolean\n  created_at: string\n  updated_at: string\n}\n\nclass NotificationService {\n  private listeners: Array<(notifications: Notification[]) => void> = []\n  private currentNotifications: Notification[] = []\n\n  // Notification CRUD operations\n  async getNotifications(userId: string, limit = 50): Promise<Notification[]> {\n    if (!supabase) {\n      throw new Error('Supabase client is not initialized');\n    }\n    \n    const { data, error } = await supabase\n      .from(\"notifications\")\n      .select(\"*\")\n      .eq(\"user_id\", userId)\n      .order(\"created_at\", { ascending: false })\n      .limit(limit)\n\n    if (error) throw new Error(`Failed to fetch notifications: ${error.message}`)\n    return data || []\n  }\n\n  async getUnreadCount(userId: string): Promise<number> {\n    if (!supabase) {\n      throw new Error('Supabase client is not initialized');\n    }\n    \n    const { count, error } = await supabase\n      .from(\"notifications\")\n      .select(\"*\", { count: \"exact\", head: true })\n      .eq(\"user_id\", userId)\n      .eq(\"read\", false)\n\n    if (error) throw new Error(`Failed to get unread count: ${error.message}`)\n    return count || 0\n  }\n\n  async markAsRead(notificationId: string): Promise<void> {\n    if (!supabase) {\n      throw new Error('Supabase client is not initialized');\n    }\n    \n    const { error } = await (supabase as any)\n      .from(\"notifications\")\n      .update({ read: true, updated_at: new Date().toISOString() } as any)\n      .eq(\"id\", notificationId)\n\n    if (error) throw new Error(`Failed to mark notification as read: ${error.message}`)\n  }\n\n  async markAllAsRead(userId: string): Promise<void> {\n    const { error } = await (supabase as any)\n      .from(\"notifications\")\n      .update({ read: true, updated_at: new Date().toISOString() } as any)\n      .eq(\"user_id\", userId)\n      .eq(\"read\", false)\n\n    if (error) throw new Error(`Failed to mark all notifications as read: ${error.message}`)\n  }\n\n  async deleteNotification(notificationId: string): Promise<void> {\n    const { error } = await (supabase as any).from(\"notifications\").delete().eq(\"id\", notificationId)\n\n    if (error) throw new Error(`Failed to delete notification: ${error.message}`)\n  }\n\n  async createNotification(\n    notification: Omit<Notification, \"id\" | \"created_at\" | \"updated_at\">,\n  ): Promise<Notification> {\n    const { data, error } = await (supabase as any)\n      .from(\"notifications\")\n      .insert({\n        ...notification,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      } as any)\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to create notification: ${error.message}`)\n    return data\n  }\n\n  // Notification preferences\n  async getNotificationPreferences(userId: string): Promise<NotificationPreferences | null> {\n    if (!supabase) {\n      throw new Error('Supabase client is not initialized');\n    }\n    \n    const { data, error } = await supabase.from(\"notification_preferences\").select(\"*\").eq(\"user_id\", userId).single()\n\n    if (error && error.code !== \"PGRST116\") {\n      throw new Error(`Failed to fetch notification preferences: ${error.message}`)\n    }\n    return data\n  }\n\n  async updateNotificationPreferences(\n    userId: string,\n    preferences: Partial<Omit<NotificationPreferences, \"id\" | \"user_id\" | \"created_at\" | \"updated_at\">>,\n  ): Promise<NotificationPreferences> {\n    const { data, error } = await (supabase as any)\n      .from(\"notification_preferences\")\n      .upsert({\n        user_id: userId,\n        ...preferences,\n        updated_at: new Date().toISOString(),\n      } as any)\n      .select()\n      .single()\n\n    if (error) throw new Error(`Failed to update notification preferences: ${error.message}`)\n    return data\n  }\n\n  // Smart notification creation based on events\n  async createTaskReminder(taskId: string, userId: string, dueDate: Date): Promise<void> {\n    const preferences = await this.getNotificationPreferences(userId)\n    if (!preferences?.task_reminders) return\n\n    const reminderTime = new Date(dueDate.getTime() - preferences.reminder_timing * 60 * 1000)\n\n    await this.createNotification({\n      user_id: userId,\n      type: \"task\",\n      title: \"Task Due Soon\",\n      message: `Your task is due in ${preferences.reminder_timing} minutes`,\n      priority: \"medium\",\n      read: false,\n      action_url: \"/tasks\",\n      action_label: \"View Task\",\n      metadata: { task_id: taskId },\n      scheduled_for: reminderTime.toISOString(),\n    })\n  }\n\n  async createEventAlert(eventId: string, userId: string, startDate: Date, title: string): Promise<void> {\n    const preferences = await this.getNotificationPreferences(userId)\n    if (!preferences?.event_alerts) return\n\n    const alertTime = new Date(startDate.getTime() - preferences.reminder_timing * 60 * 1000)\n\n    await this.createNotification({\n      user_id: userId,\n      type: \"event\",\n      title: \"Upcoming Event\",\n      message: `\"${title}\" starts in ${preferences.reminder_timing} minutes`,\n      priority: \"high\",\n      read: false,\n      action_url: \"/calendar\",\n      action_label: \"View Calendar\",\n      metadata: { event_id: eventId },\n      scheduled_for: alertTime.toISOString(),\n    })\n  }\n\n  async createInvoiceDueAlert(\n    invoiceId: string,\n    userId: string,\n    clientName: string,\n    amount: number,\n    dueDate: Date,\n  ): Promise<void> {\n    const preferences = await this.getNotificationPreferences(userId)\n    if (!preferences?.invoice_due_alerts) return\n\n    const isOverdue = dueDate < new Date()\n    const priority = isOverdue ? \"urgent\" : \"high\"\n    const title = isOverdue ? \"Invoice Overdue\" : \"Invoice Due Today\"\n    const message = isOverdue\n      ? `Invoice for ${clientName} ($${amount}) is overdue`\n      : `Invoice for ${clientName} ($${amount}) is due today`\n\n    await this.createNotification({\n      user_id: userId,\n      type: \"invoice\",\n      title,\n      message,\n      priority,\n      read: false,\n      action_url: \"/invoicing\",\n      action_label: \"View Invoice\",\n      metadata: { invoice_id: invoiceId, client_name: clientName, amount },\n    })\n  }\n\n  async createLeadAssignmentAlert(leadId: string, userId: string, leadName: string, assignedBy: string): Promise<void> {\n    const preferences = await this.getNotificationPreferences(userId)\n    if (!preferences?.lead_assignments) return\n\n    await this.createNotification({\n      user_id: userId,\n      type: \"lead\",\n      title: \"New Lead Assigned\",\n      message: `You have been assigned a new lead: ${leadName} by ${assignedBy}`,\n      priority: \"medium\",\n      read: false,\n      action_url: \"/clients\",\n      action_label: \"View Lead\",\n      metadata: { lead_id: leadId, assigned_by: assignedBy },\n    })\n  }\n\n  async createMentionAlert(userId: string, mentionedBy: string, context: string, contextUrl: string): Promise<void> {\n    await this.createNotification({\n      user_id: userId,\n      type: \"mention\",\n      title: \"You were mentioned\",\n      message: `${mentionedBy} mentioned you in ${context}`,\n      priority: \"medium\",\n      read: false,\n      action_url: contextUrl,\n      action_label: \"View\",\n      metadata: { mentioned_by: mentionedBy, context },\n    })\n  }\n\n  // Real-time subscription\n  subscribeToNotifications(userId: string, callback: (notifications: Notification[]) => void) {\n    if (!supabase) {\n      throw new Error('Supabase client is not initialized');\n    }\n    \n    this.listeners.push(callback)\n\n    const channel = supabase\n      .channel(`notifications:${userId}`)\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"*\",\n          schema: \"public\",\n          table: \"notifications\",\n          filter: `user_id=eq.${userId}`,\n        },\n        async () => {\n          // Fetch updated notifications\n          const notifications = await this.getNotifications(userId)\n          this.currentNotifications = notifications\n          this.listeners.forEach((listener) => listener(notifications))\n        },\n      )\n      .subscribe()\n\n    return () => {\n      channel.unsubscribe()\n      this.listeners = this.listeners.filter((l) => l !== callback)\n    }\n  }\n\n  // Email notification service\n  async sendEmailNotification(userId: string, templateName: string, variables: Record<string, any>): Promise<void> {\n    const preferences = await this.getNotificationPreferences(userId)\n    if (!preferences?.email_notifications) return\n\n    // Get user email\n    const { data: user } = await (supabase as any).from(\"users\").select(\"email\").eq(\"id\", userId).single()\n\n    if (!user?.email) return\n\n    // Get email template\n    const { data: template } = await (supabase as any)\n      .from(\"notification_templates\")\n      .select(\"*\")\n      .eq(\"name\", templateName)\n      .eq(\"active\", true)\n      .single()\n\n    if (!template) return\n\n    // Replace variables in template\n    let subject = (template as any).subject\n    let body = (template as any).body\n\n    Object.entries(variables).forEach(([key, value]) => {\n      const placeholder = `{{${key}}}`\n      subject = subject.replace(new RegExp(placeholder, \"g\"), String(value))\n      body = body.replace(new RegExp(placeholder, \"g\"), String(value))\n    })\n\n    // Send email (integrate with your email service)\n    // This would typically call an email service like SendGrid, Mailgun, etc.\n    // Silent logging - Sending email notification\n  }\n\n  // Batch operations for performance\n  async createBulkNotifications(\n    notifications: Array<Omit<Notification, \"id\" | \"created_at\" | \"updated_at\">>,\n  ): Promise<void> {\n    const { error } = await (supabase as any).from(\"notifications\").insert(\n      notifications.map((notification) => ({\n        ...notification,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      })) as any,\n    )\n\n    if (error) throw new Error(`Failed to create bulk notifications: ${error.message}`)\n  }\n\n  // Cleanup old notifications\n  async cleanupOldNotifications(userId: string, daysToKeep = 30): Promise<void> {\n    const cutoffDate = new Date()\n    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep)\n\n    const { error } = await (supabase as any)\n      .from(\"notifications\")\n      .delete()\n      .eq(\"user_id\", userId)\n      .eq(\"read\", true)\n      .lt(\"created_at\", cutoffDate.toISOString())\n\n    if (error) throw new Error(`Failed to cleanup old notifications: ${error.message}`)\n  }\n}\n\nexport const notificationService = new NotificationService()\nexport default notificationService\n"],"mappingskXAA,QAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAC,QAAA;;MADaC,oBAAA;IAAA;IAAAJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAAE,mBAAA;;;;;kCAjXY;AAsDzB,MAAMC,mBAAA;EAIJ;EACA,MAAMC,iBAAiBC,MAAc,EAAEC,KAAA;EAAA;EAAA,CAAAR,cAAA,GAAAS,CAAA,UAAQ,EAAE,GAA2B;IAAA;IAAAT,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC1E,IAAI,CAACQ,SAAA,CAAAC,QAAQ,EAAE;MAAA;MAAAX,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACb,MAAM,IAAIU,KAAA,CAAM;IAClB;IAAA;IAAA;MAAAZ,cAAA,GAAAS,CAAA;IAAA;IAEA,MAAM;MAAEI,IAAI;MAAEC;IAAK,CAAE;IAAA;IAAA,CAAAd,cAAA,GAAAE,CAAA,OAAG,MAAMQ,SAAA,CAAAC,QAAQ,CACnCI,IAAI,CAAC,iBACLC,MAAM,CAAC,KACPC,EAAE,CAAC,WAAWV,MAAA,EACdW,KAAK,CAAC,cAAc;MAAEC,SAAA,EAAW;IAAM,GACvCX,KAAK,CAACA,KAAA;IAAA;IAAAR,cAAA,GAAAE,CAAA;IAET,IAAIY,KAAA,EAAO;MAAA;MAAAd,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA,MAAM,IAAIU,KAAA,CAAM,kCAAkCE,KAAA,CAAMM,OAAO,EAAE;IAAA;IAAA;IAAA;MAAApB,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IAC5E,OAAO,2BAAAF,cAAA,GAAAS,CAAA,UAAAI,IAAA;IAAA;IAAA,CAAAb,cAAA,GAAAS,CAAA,UAAQ,EAAE;EACnB;EAEA,MAAMY,eAAed,MAAc,EAAmB;IAAA;IAAAP,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACpD,IAAI,CAACQ,SAAA,CAAAC,QAAQ,EAAE;MAAA;MAAAX,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACb,MAAM,IAAIU,KAAA,CAAM;IAClB;IAAA;IAAA;MAAAZ,cAAA,GAAAS,CAAA;IAAA;IAEA,MAAM;MAAEa,KAAK;MAAER;IAAK,CAAE;IAAA;IAAA,CAAAd,cAAA,GAAAE,CAAA,QAAG,MAAMQ,SAAA,CAAAC,QAAQ,CACpCI,IAAI,CAAC,iBACLC,MAAM,CAAC,KAAK;MAAEM,KAAA,EAAO;MAASC,IAAA,EAAM;IAAK,GACzCN,EAAE,CAAC,WAAWV,MAAA,EACdU,EAAE,CAAC,QAAQ;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IAEd,IAAIY,KAAA,EAAO;MAAA;MAAAd,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA,MAAM,IAAIU,KAAA,CAAM,+BAA+BE,KAAA,CAAMM,OAAO,EAAE;IAAA;IAAA;IAAA;MAAApB,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IACzE,OAAO,2BAAAF,cAAA,GAAAS,CAAA,UAAAa,KAAA;IAAA;IAAA,CAAAtB,cAAA,GAAAS,CAAA,UAAS;EAClB;EAEA,MAAMe,WAAWC,cAAsB,EAAiB;IAAA;IAAAzB,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACtD,IAAI,CAACQ,SAAA,CAAAC,QAAQ,EAAE;MAAA;MAAAX,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACb,MAAM,IAAIU,KAAA,CAAM;IAClB;IAAA;IAAA;MAAAZ,cAAA,GAAAS,CAAA;IAAA;IAEA,MAAM;MAAEK;IAAK,CAAE;IAAA;IAAA,CAAAd,cAAA,GAAAE,CAAA,QAAG,MAAMQ,SAAC,CAAAC,QAAQ,CAC9BI,IAAI,CAAC,iBACLW,MAAM,CAAC;MAAEC,IAAA,EAAM;MAAMC,UAAA,EAAY,IAAIC,IAAA,GAAOC,WAAW;IAAG,GAC1Db,EAAE,CAAC,MAAMQ,cAAA;IAAA;IAAAzB,cAAA,GAAAE,CAAA;IAEZ,IAAIY,KAAA,EAAO;MAAA;MAAAd,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA,MAAM,IAAIU,KAAA,CAAM,wCAAwCE,KAAA,CAAMM,OAAO,EAAE;IAAA;IAAA;IAAA;MAAApB,cAAA,GAAAS,CAAA;IAAA;EACpF;EAEA,MAAMsB,cAAcxB,MAAc,EAAiB;IAAA;IAAAP,cAAA,GAAAC,CAAA;IACjD,MAAM;MAAEa;IAAK,CAAE;IAAA;IAAA,CAAAd,cAAA,GAAAE,CAAA,QAAG,MAAMQ,SAAC,CAAAC,QAAQ,CAC9BI,IAAI,CAAC,iBACLW,MAAM,CAAC;MAAEC,IAAA,EAAM;MAAMC,UAAA,EAAY,IAAIC,IAAA,GAAOC,WAAW;IAAG,GAC1Db,EAAE,CAAC,WAAWV,MAAA,EACdU,EAAE,CAAC,QAAQ;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IAEd,IAAIY,KAAA,EAAO;MAAA;MAAAd,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA,MAAM,IAAIU,KAAA,CAAM,6CAA6CE,KAAA,CAAMM,OAAO,EAAE;IAAA;IAAA;IAAA;MAAApB,cAAA,GAAAS,CAAA;IAAA;EACzF;EAEA,MAAMuB,mBAAmBP,cAAsB,EAAiB;IAAA;IAAAzB,cAAA,GAAAC,CAAA;IAC9D,MAAM;MAAEa;IAAK,CAAE;IAAA;IAAA,CAAAd,cAAA,GAAAE,CAAA,QAAG,MAAMQ,SAAC,CAAAC,QAAQ,CAASI,IAAI,CAAC,iBAAiBkB,MAAM,GAAGhB,EAAE,CAAC,MAAMQ,cAAA;IAAA;IAAAzB,cAAA,GAAAE,CAAA;IAElF,IAAIY,KAAA,EAAO;MAAA;MAAAd,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA,MAAM,IAAIU,KAAA,CAAM,kCAAkCE,KAAA,CAAMM,OAAO,EAAE;IAAA;IAAA;IAAA;MAAApB,cAAA,GAAAS,CAAA;IAAA;EAC9E;EAEA,MAAMyB,mBACJC,YAAoE,EAC7C;IAAA;IAAAnC,cAAA,GAAAC,CAAA;IACvB,MAAM;MAAEY,IAAI;MAAEC;IAAK,CAAE;IAAA;IAAA,CAAAd,cAAA,GAAAE,CAAA,QAAG,MAAMQ,SAAC,CAAAC,QAAQ,CACpCI,IAAI,CAAC,iBACLqB,MAAM,CAAC;MACN,GAAGD,YAAY;MACfE,UAAA,EAAY,IAAIR,IAAA,GAAOC,WAAW;MAClCF,UAAA,EAAY,IAAIC,IAAA,GAAOC,WAAW;IACpC,GACCd,MAAM,GACNsB,MAAM;IAAA;IAAAtC,cAAA,GAAAE,CAAA;IAET,IAAIY,KAAA,EAAO;MAAA;MAAAd,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA,MAAM,IAAIU,KAAA,CAAM,kCAAkCE,KAAA,CAAMM,OAAO,EAAE;IAAA;IAAA;IAAA;MAAApB,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IAC5E,OAAOW,IAAA;EACT;EAEA;EACA,MAAM0B,2BAA2BhC,MAAc,EAA2C;IAAA;IAAAP,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACxF,IAAI,CAACQ,SAAA,CAAAC,QAAQ,EAAE;MAAA;MAAAX,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACb,MAAM,IAAIU,KAAA,CAAM;IAClB;IAAA;IAAA;MAAAZ,cAAA,GAAAS,CAAA;IAAA;IAEA,MAAM;MAAEI,IAAI;MAAEC;IAAK,CAAE;IAAA;IAAA,CAAAd,cAAA,GAAAE,CAAA,QAAG,MAAMQ,SAAA,CAAAC,QAAQ,CAACI,IAAI,CAAC,4BAA4BC,MAAM,CAAC,KAAKC,EAAE,CAAC,WAAWV,MAAA,EAAQ+B,MAAM;IAAA;IAAAtC,cAAA,GAAAE,CAAA;IAEhH;IAAI;IAAA,CAAAF,cAAA,GAAAS,CAAA,WAAAK,KAAA;IAAA;IAAA,CAAAd,cAAA,GAAAS,CAAA,WAASK,KAAA,CAAM0B,IAAI,KAAK,aAAY;MAAA;MAAAxC,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACtC,MAAM,IAAIU,KAAA,CAAM,6CAA6CE,KAAA,CAAMM,OAAO,EAAE;IAC9E;IAAA;IAAA;MAAApB,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IACA,OAAOW,IAAA;EACT;EAEA,MAAM4B,8BACJlC,MAAc,EACdmC,WAAmG,EACjE;IAAA;IAAA1C,cAAA,GAAAC,CAAA;IAClC,MAAM;MAAEY,IAAI;MAAEC;IAAK,CAAE;IAAA;IAAA,CAAAd,cAAA,GAAAE,CAAA,QAAG,MAAMQ,SAAC,CAAAC,QAAQ,CACpCI,IAAI,CAAC,4BACL4B,MAAM,CAAC;MACNC,OAAA,EAASrC,MAAA;MACT,GAAGmC,WAAW;MACdd,UAAA,EAAY,IAAIC,IAAA,GAAOC,WAAW;IACpC,GACCd,MAAM,GACNsB,MAAM;IAAA;IAAAtC,cAAA,GAAAE,CAAA;IAET,IAAIY,KAAA,EAAO;MAAA;MAAAd,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA,MAAM,IAAIU,KAAA,CAAM,8CAA8CE,KAAA,CAAMM,OAAO,EAAE;IAAA;IAAA;IAAA;MAAApB,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IACxF,OAAOW,IAAA;EACT;EAEA;EACA,MAAMgC,mBAAmBC,MAAc,EAAEvC,MAAc,EAAEwC,OAAa,EAAiB;IAAA;IAAA/C,cAAA,GAAAC,CAAA;IACrF,MAAMyC,WAAA;IAAA;IAAA,CAAA1C,cAAA,GAAAE,CAAA,QAAc,MAAM,IAAI,CAACqC,0BAA0B,CAAChC,MAAA;IAAA;IAAAP,cAAA,GAAAE,CAAA;IAC1D,IAAI,CAACwC,WAAA,EAAaM,cAAA,EAAgB;MAAA;MAAAhD,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAS,CAAA;IAAA;IAElC,MAAMwC,YAAA;IAAA;IAAA,CAAAjD,cAAA,GAAAE,CAAA,QAAe,IAAI2B,IAAA,CAAKkB,OAAA,CAAQG,OAAO,KAAKR,WAAA,CAAYS,eAAe,GAAG,KAAK;IAAA;IAAAnD,cAAA,GAAAE,CAAA;IAErF,MAAM,IAAI,CAACgC,kBAAkB,CAAC;MAC5BU,OAAA,EAASrC,MAAA;MACT6C,IAAA,EAAM;MACNC,KAAA,EAAO;MACPjC,OAAA,EAAS,uBAAuBsB,WAAA,CAAYS,eAAe,UAAU;MACrEG,QAAA,EAAU;MACV3B,IAAA,EAAM;MACN4B,UAAA,EAAY;MACZC,YAAA,EAAc;MACdC,QAAA,EAAU;QAAEC,OAAA,EAASZ;MAAO;MAC5Ba,aAAA,EAAeV,YAAA,CAAanB,WAAW;IACzC;EACF;EAEA,MAAM8B,iBAAiBC,OAAe,EAAEtD,MAAc,EAAEuD,SAAe,EAAET,KAAa,EAAiB;IAAA;IAAArD,cAAA,GAAAC,CAAA;IACrG,MAAMyC,WAAA;IAAA;IAAA,CAAA1C,cAAA,GAAAE,CAAA,QAAc,MAAM,IAAI,CAACqC,0BAA0B,CAAChC,MAAA;IAAA;IAAAP,cAAA,GAAAE,CAAA;IAC1D,IAAI,CAACwC,WAAA,EAAaqB,YAAA,EAAc;MAAA;MAAA/D,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAS,CAAA;IAAA;IAEhC,MAAMuD,SAAA;IAAA;IAAA,CAAAhE,cAAA,GAAAE,CAAA,QAAY,IAAI2B,IAAA,CAAKiC,SAAA,CAAUZ,OAAO,KAAKR,WAAA,CAAYS,eAAe,GAAG,KAAK;IAAA;IAAAnD,cAAA,GAAAE,CAAA;IAEpF,MAAM,IAAI,CAACgC,kBAAkB,CAAC;MAC5BU,OAAA,EAASrC,MAAA;MACT6C,IAAA,EAAM;MACNC,KAAA,EAAO;MACPjC,OAAA,EAAS,IAAIiC,KAAA,eAAoBX,WAAA,CAAYS,eAAe,UAAU;MACtEG,QAAA,EAAU;MACV3B,IAAA,EAAM;MACN4B,UAAA,EAAY;MACZC,YAAA,EAAc;MACdC,QAAA,EAAU;QAAEQ,QAAA,EAAUJ;MAAQ;MAC9BF,aAAA,EAAeK,SAAA,CAAUlC,WAAW;IACtC;EACF;EAEA,MAAMoC,sBACJC,SAAiB,EACjB5D,MAAc,EACd6D,UAAkB,EAClBC,MAAc,EACdtB,OAAa,EACE;IAAA;IAAA/C,cAAA,GAAAC,CAAA;IACf,MAAMyC,WAAA;IAAA;IAAA,CAAA1C,cAAA,GAAAE,CAAA,QAAc,MAAM,IAAI,CAACqC,0BAA0B,CAAChC,MAAA;IAAA;IAAAP,cAAA,GAAAE,CAAA;IAC1D,IAAI,CAACwC,WAAA,EAAa4B,kBAAA,EAAoB;MAAA;MAAAtE,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAS,CAAA;IAAA;IAEtC,MAAM8D,SAAA;IAAA;IAAA,CAAAvE,cAAA,GAAAE,CAAA,QAAY6C,OAAA,GAAU,IAAIlB,IAAA;IAChC,MAAMyB,QAAA;IAAA;IAAA,CAAAtD,cAAA,GAAAE,CAAA,QAAWqE,SAAA;IAAA;IAAA,CAAAvE,cAAA,GAAAS,CAAA,WAAY;IAAA;IAAA,CAAAT,cAAA,GAAAS,CAAA,WAAW;IACxC,MAAM4C,KAAA;IAAA;IAAA,CAAArD,cAAA,GAAAE,CAAA,QAAQqE,SAAA;IAAA;IAAA,CAAAvE,cAAA,GAAAS,CAAA,WAAY;IAAA;IAAA,CAAAT,cAAA,GAAAS,CAAA,WAAoB;IAC9C,MAAMW,OAAA;IAAA;IAAA,CAAApB,cAAA,GAAAE,CAAA,QAAUqE,SAAA;IAAA;IAAA,CAAAvE,cAAA,GAAAS,CAAA,WACZ,eAAe2D,UAAA,MAAgBC,MAAA,cAAoB;IAAA;IAAA,CAAArE,cAAA,GAAAS,CAAA,WACnD,eAAe2D,UAAA,MAAgBC,MAAA,gBAAsB;IAAA;IAAArE,cAAA,GAAAE,CAAA;IAEzD,MAAM,IAAI,CAACgC,kBAAkB,CAAC;MAC5BU,OAAA,EAASrC,MAAA;MACT6C,IAAA,EAAM;MACNC,KAAA;MACAjC,OAAA;MACAkC,QAAA;MACA3B,IAAA,EAAM;MACN4B,UAAA,EAAY;MACZC,YAAA,EAAc;MACdC,QAAA,EAAU;QAAEe,UAAA,EAAYL,SAAA;QAAWM,WAAA,EAAaL,UAAA;QAAYC;MAAO;IACrE;EACF;EAEA,MAAMK,0BAA0BC,MAAc,EAAEpE,MAAc,EAAEqE,QAAgB,EAAEC,UAAkB,EAAiB;IAAA;IAAA7E,cAAA,GAAAC,CAAA;IACnH,MAAMyC,WAAA;IAAA;IAAA,CAAA1C,cAAA,GAAAE,CAAA,QAAc,MAAM,IAAI,CAACqC,0BAA0B,CAAChC,MAAA;IAAA;IAAAP,cAAA,GAAAE,CAAA;IAC1D,IAAI,CAACwC,WAAA,EAAaoC,gBAAA,EAAkB;MAAA;MAAA9E,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IAEpC,MAAM,IAAI,CAACgC,kBAAkB,CAAC;MAC5BU,OAAA,EAASrC,MAAA;MACT6C,IAAA,EAAM;MACNC,KAAA,EAAO;MACPjC,OAAA,EAAS,sCAAsCwD,QAAA,OAAeC,UAAA,EAAY;MAC1EvB,QAAA,EAAU;MACV3B,IAAA,EAAM;MACN4B,UAAA,EAAY;MACZC,YAAA,EAAc;MACdC,QAAA,EAAU;QAAEsB,OAAA,EAASJ,MAAA;QAAQK,WAAA,EAAaH;MAAW;IACvD;EACF;EAEA,MAAMI,mBAAmB1E,MAAc,EAAE2E,WAAmB,EAAEC,OAAe,EAAEC,UAAkB,EAAiB;IAAA;IAAApF,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAChH,MAAM,IAAI,CAACgC,kBAAkB,CAAC;MAC5BU,OAAA,EAASrC,MAAA;MACT6C,IAAA,EAAM;MACNC,KAAA,EAAO;MACPjC,OAAA,EAAS,GAAG8D,WAAA,qBAAgCC,OAAA,EAAS;MACrD7B,QAAA,EAAU;MACV3B,IAAA,EAAM;MACN4B,UAAA,EAAY6B,UAAA;MACZ5B,YAAA,EAAc;MACdC,QAAA,EAAU;QAAE4B,YAAA,EAAcH,WAAA;QAAaC;MAAQ;IACjD;EACF;EAEA;EACAG,yBAAyB/E,MAAc,EAAEgF,QAAiD,EAAE;IAAA;IAAAvF,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC1F,IAAI,CAACQ,SAAA,CAAAC,QAAQ,EAAE;MAAA;MAAAX,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MACb,MAAM,IAAIU,KAAA,CAAM;IAClB;IAAA;IAAA;MAAAZ,cAAA,GAAAS,CAAA;IAAA;IAAAT,cAAA,GAAAE,CAAA;IAEA,IAAI,CAACsF,SAAS,CAACC,IAAI,CAACF,QAAA;IAEpB,MAAMG,OAAA;IAAA;IAAA,CAAA1F,cAAA,GAAAE,CAAA,QAAUQ,SAAA,CAAAC,QAAQ,CACrB+E,OAAO,CAAC,iBAAiBnF,MAAA,EAAQ,EACjCoF,EAAE,CACD,oBACA;MACEC,KAAA,EAAO;MACPC,MAAA,EAAQ;MACRC,KAAA,EAAO;MACPC,MAAA,EAAQ,cAAcxF,MAAA;IACxB,GACA;MAAA;MAAAP,cAAA,GAAAC,CAAA;MACE;MACA,MAAM+F,aAAA;MAAA;MAAA,CAAAhG,cAAA,GAAAE,CAAA,QAAgB,MAAM,IAAI,CAACI,gBAAgB,CAACC,MAAA;MAAA;MAAAP,cAAA,GAAAE,CAAA;MAClD,IAAI,CAAC+F,oBAAoB,GAAGD,aAAA;MAAA;MAAAhG,cAAA,GAAAE,CAAA;MAC5B,IAAI,CAACsF,SAAS,CAACU,OAAO,CAAEC,QAAA,IAAa;QAAA;QAAAnG,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA,OAAAiG,QAAA,CAASH,aAAA;MAAA;IAChD,GAEDI,SAAS;IAAA;IAAApG,cAAA,GAAAE,CAAA;IAEZ,OAAO;MAAA;MAAAF,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MACLwF,OAAA,CAAQW,WAAW;MAAA;MAAArG,cAAA,GAAAE,CAAA;MACnB,IAAI,CAACsF,SAAS,GAAG,IAAI,CAACA,SAAS,CAACO,MAAM,CAAEO,CAAA,IAAM;QAAA;QAAAtG,cAAA,GAAAC,CAAA;QAAAD,cAAA,GAAAE,CAAA;QAAA,OAAAoG,CAAA,KAAMf,QAAA;MAAA;IACtD;EACF;EAEA;EACA,MAAMgB,sBAAsBhG,MAAc,EAAEiG,YAAoB,EAAEC,SAA8B,EAAiB;IAAA;IAAAzG,cAAA,GAAAC,CAAA;IAC/G,MAAMyC,WAAA;IAAA;IAAA,CAAA1C,cAAA,GAAAE,CAAA,QAAc,MAAM,IAAI,CAACqC,0BAA0B,CAAChC,MAAA;IAAA;IAAAP,cAAA,GAAAE,CAAA;IAC1D,IAAI,CAACwC,WAAA,EAAagE,mBAAA,EAAqB;MAAA;MAAA1G,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAS,CAAA;IAAA;IAEvC;IACA,MAAM;MAAEI,IAAA,EAAM8F;IAAI,CAAE;IAAA;IAAA,CAAA3G,cAAA,GAAAE,CAAA,QAAG,MAAMQ,SAAC,CAAAC,QAAQ,CAASI,IAAI,CAAC,SAASC,MAAM,CAAC,SAASC,EAAE,CAAC,MAAMV,MAAA,EAAQ+B,MAAM;IAAA;IAAAtC,cAAA,GAAAE,CAAA;IAEpG,IAAI,CAACyG,IAAA,EAAMC,KAAA,EAAO;MAAA;MAAA5G,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAS,CAAA;IAAA;IAElB;IACA,MAAM;MAAEI,IAAA,EAAMgG;IAAQ,CAAE;IAAA;IAAA,CAAA7G,cAAA,GAAAE,CAAA,QAAG,MAAMQ,SAAC,CAAAC,QAAQ,CACvCI,IAAI,CAAC,0BACLC,MAAM,CAAC,KACPC,EAAE,CAAC,QAAQuF,YAAA,EACXvF,EAAE,CAAC,UAAU,MACbqB,MAAM;IAAA;IAAAtC,cAAA,GAAAE,CAAA;IAET,IAAI,CAAC2G,QAAA,EAAU;MAAA;MAAA7G,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAS,CAAA;IAAA;IAEf;IACA,IAAIqG,OAAA;IAAA;IAAA,CAAA9G,cAAA,GAAAE,CAAA,QAAU2G,QAAC,CAAiBC,OAAO;IACvC,IAAIC,IAAA;IAAA;IAAA,CAAA/G,cAAA,GAAAE,CAAA,QAAO2G,QAAC,CAAiBE,IAAI;IAAA;IAAA/G,cAAA,GAAAE,CAAA;IAEjC8G,MAAA,CAAOC,OAAO,CAACR,SAAA,EAAWP,OAAO,CAAC,CAAC,CAACgB,GAAA,EAAKC,KAAA,CAAM;MAAA;MAAAnH,cAAA,GAAAC,CAAA;MAC7C,MAAMmH,WAAA;MAAA;MAAA,CAAApH,cAAA,GAAAE,CAAA,QAAc,KAAKgH,GAAA,IAAO;MAAA;MAAAlH,cAAA,GAAAE,CAAA;MAChC4G,OAAA,GAAUA,OAAA,CAAQO,OAAO,CAAC,IAAIC,MAAA,CAAOF,WAAA,EAAa,MAAMG,MAAA,CAAOJ,KAAA;MAAA;MAAAnH,cAAA,GAAAE,CAAA;MAC/D6G,IAAA,GAAOA,IAAA,CAAKM,OAAO,CAAC,IAAIC,MAAA,CAAOF,WAAA,EAAa,MAAMG,MAAA,CAAOJ,KAAA;IAC3D;IAEA;IACA;IACA;EACF;EAEA;EACA,MAAMK,wBACJxB,aAA4E,EAC7D;IAAA;IAAAhG,cAAA,GAAAC,CAAA;IACf,MAAM;MAAEa;IAAK,CAAE;IAAA;IAAA,CAAAd,cAAA,GAAAE,CAAA,QAAG,MAAMQ,SAAC,CAAAC,QAAQ,CAASI,IAAI,CAAC,iBAAiBqB,MAAM,CACpE4D,aAAA,CAAcyB,GAAG,CAAEtF,YAAA,IAAkB;MAAA;MAAAnC,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAE,CAAA;MAAA;QACnC,GAAGiC,YAAY;QACfE,UAAA,EAAY,IAAIR,IAAA,GAAOC,WAAW;QAClCF,UAAA,EAAY,IAAIC,IAAA,GAAOC,WAAW;MACpC;IAAA;IAAA;IAAA9B,cAAA,GAAAE,CAAA;IAGF,IAAIY,KAAA,EAAO;MAAA;MAAAd,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA,MAAM,IAAIU,KAAA,CAAM,wCAAwCE,KAAA,CAAMM,OAAO,EAAE;IAAA;IAAA;IAAA;MAAApB,cAAA,GAAAS,CAAA;IAAA;EACpF;EAEA;EACA,MAAMiH,wBAAwBnH,MAAc,EAAEoH,UAAA;EAAA;EAAA,CAAA3H,cAAA,GAAAS,CAAA,WAAa,EAAE,GAAiB;IAAA;IAAAT,cAAA,GAAAC,CAAA;IAC5E,MAAM2H,UAAA;IAAA;IAAA,CAAA5H,cAAA,GAAAE,CAAA,QAAa,IAAI2B,IAAA;IAAA;IAAA7B,cAAA,GAAAE,CAAA;IACvB0H,UAAA,CAAWC,OAAO,CAACD,UAAA,CAAWE,OAAO,KAAKH,UAAA;IAE1C,MAAM;MAAE7G;IAAK,CAAE;IAAA;IAAA,CAAAd,cAAA,GAAAE,CAAA,SAAG,MAAMQ,SAAC,CAAAC,QAAQ,CAC9BI,IAAI,CAAC,iBACLkB,MAAM,GACNhB,EAAE,CAAC,WAAWV,MAAA,EACdU,EAAE,CAAC,QAAQ,MACX8G,EAAE,CAAC,cAAcH,UAAA,CAAW9F,WAAW;IAAA;IAAA9B,cAAA,GAAAE,CAAA;IAE1C,IAAIY,KAAA,EAAO;MAAA;MAAAd,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAE,CAAA;MAAA,MAAM,IAAIU,KAAA,CAAM,wCAAwCE,KAAA,CAAMM,OAAO,EAAE;IAAA;IAAA;IAAA;MAAApB,cAAA,GAAAS,CAAA;IAAA;EACpF;;;;;SAvTQ+E,SAAA,GAA4D,EAAE;IAAA;IAAAxF,cAAA,GAAAE,CAAA;SAC9D+F,oBAAA,GAAuC,EAAE;;AAuTnD;AAEO,MAAM7F,mBAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAE,CAAA,SAAsB,IAAIG,mBAAA;MACvCF,QAAA;AAAA;AAAA,CAAAH,cAAA,GAAAE,CAAA,SAAeE,mBAAA","ignoreList":[]}