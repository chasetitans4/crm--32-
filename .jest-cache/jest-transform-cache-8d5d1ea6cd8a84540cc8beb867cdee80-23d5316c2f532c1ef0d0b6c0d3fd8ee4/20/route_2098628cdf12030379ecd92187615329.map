{"version":3,"names":["DELETE","cov_gudtunkot","f","s","GET","PUT","mockClients","id","name","email","phone","status","created_at","updated_at","request","params","Promise","resolve","setTimeout","client","find","c","b","_server","NextResponse","json","success","error","data","console","body","clientIndex","findIndex","updatedClient","Date","toISOString","deletedClient","splice","message"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\app\\api\\clients\\[id]\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\n\n// Mock client data (in a real app, this would come from a database)\nconst mockClients = [\n  {\n    id: '1',\n    name: 'Acme Corporation',\n    email: 'contact@acme.com',\n    phone: '+1-555-0123',\n    status: 'active',\n    created_at: '2024-01-15T10:00:00Z',\n    updated_at: '2024-01-20T15:30:00Z'\n  },\n  {\n    id: '2',\n    name: 'TechStart Inc',\n    email: 'hello@techstart.com',\n    phone: '+1-555-0456',\n    status: 'active',\n    created_at: '2024-01-10T09:00:00Z',\n    updated_at: '2024-01-25T11:45:00Z'\n  }\n]\n\n// GET /api/clients/[id]\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    \n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 100))\n    \n    const client = mockClients.find(c => c.id === id)\n    \n    if (!client) {\n      return NextResponse.json(\n        { success: false, error: 'Client not found' },\n        { status: 404 }\n      )\n    }\n    \n    return NextResponse.json({\n      success: true,\n      data: client\n    })\n  } catch (error) {\n    console.error('Error fetching client:', error)\n    return NextResponse.json(\n      { success: false, error: 'Failed to fetch client' },\n      { status: 500 }\n    )\n  }\n}\n\n// PATCH /api/clients/[id]\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    const body = await request.json()\n    \n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 200))\n    \n    const clientIndex = mockClients.findIndex(c => c.id === id)\n    \n    if (clientIndex === -1) {\n      return NextResponse.json(\n        { success: false, error: 'Client not found' },\n        { status: 404 }\n      )\n    }\n    \n    const updatedClient = {\n      ...mockClients[clientIndex],\n      ...body,\n      updated_at: new Date().toISOString()\n    }\n    \n    mockClients[clientIndex] = updatedClient\n    \n    return NextResponse.json({\n      success: true,\n      data: updatedClient\n    })\n  } catch (error) {\n    console.error('Error updating client:', error)\n    return NextResponse.json(\n      { success: false, error: 'Failed to update client' },\n      { status: 500 }\n    )\n  }\n}\n\n// DELETE /api/clients/[id]\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    \n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 150))\n    \n    const clientIndex = mockClients.findIndex(c => c.id === id)\n    \n    if (clientIndex === -1) {\n      return NextResponse.json(\n        { success: false, error: 'Client not found' },\n        { status: 404 }\n      )\n    }\n    \n    const deletedClient = mockClients.splice(clientIndex, 1)[0]\n    \n    return NextResponse.json({\n      success: true,\n      data: deletedClient,\n      message: 'Client deleted successfully'\n    })\n  } catch (error) {\n    console.error('Error deleting client:', error)\n    return NextResponse.json(\n      { success: false, error: 'Failed to delete client' },\n      { status: 500 }\n    )\n  }\n}"],"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","ignoreList":[]}