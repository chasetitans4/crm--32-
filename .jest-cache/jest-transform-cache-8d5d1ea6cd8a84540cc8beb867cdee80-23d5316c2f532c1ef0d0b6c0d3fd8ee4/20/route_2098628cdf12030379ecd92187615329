a75ea69b17c0a474323f36a1d4ecbc41
"use strict";

/* istanbul ignore next */
function cov_gudtunkot() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\app\\api\\clients\\[id]\\route.ts";
  var hash = "0140010f86d051ea52cbd36bd9b2752ef327a22c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\app\\api\\clients\\[id]\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 21,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 22
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 19
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 19
        }
      },
      "7": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "8": {
        start: {
          line: 24,
          column: 20
        },
        end: {
          line: 43,
          column: 1
        }
      },
      "9": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "10": {
        start: {
          line: 46,
          column: 23
        },
        end: {
          line: 46,
          column: 35
        }
      },
      "11": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 63
        }
      },
      "12": {
        start: {
          line: 48,
          column: 37
        },
        end: {
          line: 48,
          column: 61
        }
      },
      "13": {
        start: {
          line: 49,
          column: 23
        },
        end: {
          line: 49,
          column: 57
        }
      },
      "14": {
        start: {
          line: 49,
          column: 45
        },
        end: {
          line: 49,
          column: 56
        }
      },
      "15": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "16": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 56,
          column: 15
        }
      },
      "17": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 61,
          column: 11
        }
      },
      "18": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 55
        }
      },
      "19": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 69,
          column: 11
        }
      },
      "20": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 105,
          column: 5
        }
      },
      "21": {
        start: {
          line: 74,
          column: 23
        },
        end: {
          line: 74,
          column: 35
        }
      },
      "22": {
        start: {
          line: 75,
          column: 21
        },
        end: {
          line: 75,
          column: 41
        }
      },
      "23": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 63
        }
      },
      "24": {
        start: {
          line: 77,
          column: 37
        },
        end: {
          line: 77,
          column: 61
        }
      },
      "25": {
        start: {
          line: 78,
          column: 28
        },
        end: {
          line: 78,
          column: 67
        }
      },
      "26": {
        start: {
          line: 78,
          column: 55
        },
        end: {
          line: 78,
          column: 66
        }
      },
      "27": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "28": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 85,
          column: 15
        }
      },
      "29": {
        start: {
          line: 87,
          column: 30
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "30": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 49
        }
      },
      "31": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 96,
          column: 11
        }
      },
      "32": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 55
        }
      },
      "33": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 104,
          column: 11
        }
      },
      "34": {
        start: {
          line: 108,
          column: 4
        },
        end: {
          line: 135,
          column: 5
        }
      },
      "35": {
        start: {
          line: 109,
          column: 23
        },
        end: {
          line: 109,
          column: 35
        }
      },
      "36": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 63
        }
      },
      "37": {
        start: {
          line: 111,
          column: 37
        },
        end: {
          line: 111,
          column: 61
        }
      },
      "38": {
        start: {
          line: 112,
          column: 28
        },
        end: {
          line: 112,
          column: 67
        }
      },
      "39": {
        start: {
          line: 112,
          column: 55
        },
        end: {
          line: 112,
          column: 66
        }
      },
      "40": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "41": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 119,
          column: 15
        }
      },
      "42": {
        start: {
          line: 121,
          column: 30
        },
        end: {
          line: 121,
          column: 67
        }
      },
      "43": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 126,
          column: 11
        }
      },
      "44": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 55
        }
      },
      "45": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 134,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 44,
            column: 15
          },
          end: {
            line: 44,
            column: 18
          }
        },
        loc: {
          start: {
            line: 44,
            column: 40
          },
          end: {
            line: 71,
            column: 1
          }
        },
        line: 44
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 48,
            column: 26
          },
          end: {
            line: 48,
            column: 27
          }
        },
        loc: {
          start: {
            line: 48,
            column: 37
          },
          end: {
            line: 48,
            column: 61
          }
        },
        line: 48
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 49,
            column: 40
          },
          end: {
            line: 49,
            column: 41
          }
        },
        loc: {
          start: {
            line: 49,
            column: 45
          },
          end: {
            line: 49,
            column: 56
          }
        },
        line: 49
      },
      "7": {
        name: "PUT",
        decl: {
          start: {
            line: 72,
            column: 15
          },
          end: {
            line: 72,
            column: 18
          }
        },
        loc: {
          start: {
            line: 72,
            column: 40
          },
          end: {
            line: 106,
            column: 1
          }
        },
        line: 72
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 77,
            column: 26
          },
          end: {
            line: 77,
            column: 27
          }
        },
        loc: {
          start: {
            line: 77,
            column: 37
          },
          end: {
            line: 77,
            column: 61
          }
        },
        line: 77
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 78,
            column: 50
          },
          end: {
            line: 78,
            column: 51
          }
        },
        loc: {
          start: {
            line: 78,
            column: 55
          },
          end: {
            line: 78,
            column: 66
          }
        },
        line: 78
      },
      "10": {
        name: "DELETE",
        decl: {
          start: {
            line: 107,
            column: 15
          },
          end: {
            line: 107,
            column: 21
          }
        },
        loc: {
          start: {
            line: 107,
            column: 43
          },
          end: {
            line: 136,
            column: 1
          }
        },
        line: 107
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 111,
            column: 26
          },
          end: {
            line: 111,
            column: 27
          }
        },
        loc: {
          start: {
            line: 111,
            column: 37
          },
          end: {
            line: 111,
            column: 61
          }
        },
        line: 111
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 112,
            column: 50
          },
          end: {
            line: 112,
            column: 51
          }
        },
        loc: {
          start: {
            line: 112,
            column: 55
          },
          end: {
            line: 112,
            column: 66
          }
        },
        line: 112
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "1": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "2": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\app\\api\\clients\\[id]\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server'\n\n// Mock client data (in a real app, this would come from a database)\nconst mockClients = [\n  {\n    id: '1',\n    name: 'Acme Corporation',\n    email: 'contact@acme.com',\n    phone: '+1-555-0123',\n    status: 'active',\n    created_at: '2024-01-15T10:00:00Z',\n    updated_at: '2024-01-20T15:30:00Z'\n  },\n  {\n    id: '2',\n    name: 'TechStart Inc',\n    email: 'hello@techstart.com',\n    phone: '+1-555-0456',\n    status: 'active',\n    created_at: '2024-01-10T09:00:00Z',\n    updated_at: '2024-01-25T11:45:00Z'\n  }\n]\n\n// GET /api/clients/[id]\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    \n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 100))\n    \n    const client = mockClients.find(c => c.id === id)\n    \n    if (!client) {\n      return NextResponse.json(\n        { success: false, error: 'Client not found' },\n        { status: 404 }\n      )\n    }\n    \n    return NextResponse.json({\n      success: true,\n      data: client\n    })\n  } catch (error) {\n    console.error('Error fetching client:', error)\n    return NextResponse.json(\n      { success: false, error: 'Failed to fetch client' },\n      { status: 500 }\n    )\n  }\n}\n\n// PATCH /api/clients/[id]\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    const body = await request.json()\n    \n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 200))\n    \n    const clientIndex = mockClients.findIndex(c => c.id === id)\n    \n    if (clientIndex === -1) {\n      return NextResponse.json(\n        { success: false, error: 'Client not found' },\n        { status: 404 }\n      )\n    }\n    \n    const updatedClient = {\n      ...mockClients[clientIndex],\n      ...body,\n      updated_at: new Date().toISOString()\n    }\n    \n    mockClients[clientIndex] = updatedClient\n    \n    return NextResponse.json({\n      success: true,\n      data: updatedClient\n    })\n  } catch (error) {\n    console.error('Error updating client:', error)\n    return NextResponse.json(\n      { success: false, error: 'Failed to update client' },\n      { status: 500 }\n    )\n  }\n}\n\n// DELETE /api/clients/[id]\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const { id } = await params\n    \n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 150))\n    \n    const clientIndex = mockClients.findIndex(c => c.id === id)\n    \n    if (clientIndex === -1) {\n      return NextResponse.json(\n        { success: false, error: 'Client not found' },\n        { status: 404 }\n      )\n    }\n    \n    const deletedClient = mockClients.splice(clientIndex, 1)[0]\n    \n    return NextResponse.json({\n      success: true,\n      data: deletedClient,\n      message: 'Client deleted successfully'\n    })\n  } catch (error) {\n    console.error('Error deleting client:', error)\n    return NextResponse.json(\n      { success: false, error: 'Failed to delete client' },\n      { status: 500 }\n    )\n  }\n}"],
      names: ["DELETE", "GET", "PUT", "mockClients", "id", "name", "email", "phone", "status", "created_at", "updated_at", "request", "params", "Promise", "resolve", "setTimeout", "client", "find", "c", "NextResponse", "json", "success", "error", "data", "console", "body", "clientIndex", "findIndex", "updatedClient", "Date", "toISOString", "deletedClient", "splice", "message"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0140010f86d051ea52cbd36bd9b2752ef327a22c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_gudtunkot = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_gudtunkot();
cov_gudtunkot().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_gudtunkot().f[0]++;
  cov_gudtunkot().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_gudtunkot().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: Object.getOwnPropertyDescriptor(all, name).get
    });
  }
}
/* istanbul ignore next */
cov_gudtunkot().s[3]++;
_export(exports, {
  get DELETE() {
    /* istanbul ignore next */
    cov_gudtunkot().f[1]++;
    cov_gudtunkot().s[4]++;
    return DELETE;
  },
  get GET() {
    /* istanbul ignore next */
    cov_gudtunkot().f[2]++;
    cov_gudtunkot().s[5]++;
    return GET;
  },
  get PUT() {
    /* istanbul ignore next */
    cov_gudtunkot().f[3]++;
    cov_gudtunkot().s[6]++;
    return PUT;
  }
});
const _server =
/* istanbul ignore next */
(cov_gudtunkot().s[7]++, require("next/server"));
// Mock client data (in a real app, this would come from a database)
const mockClients =
/* istanbul ignore next */
(cov_gudtunkot().s[8]++, [{
  id: '1',
  name: 'Acme Corporation',
  email: 'contact@acme.com',
  phone: '+1-555-0123',
  status: 'active',
  created_at: '2024-01-15T10:00:00Z',
  updated_at: '2024-01-20T15:30:00Z'
}, {
  id: '2',
  name: 'TechStart Inc',
  email: 'hello@techstart.com',
  phone: '+1-555-0456',
  status: 'active',
  created_at: '2024-01-10T09:00:00Z',
  updated_at: '2024-01-25T11:45:00Z'
}]);
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_gudtunkot().f[4]++;
  cov_gudtunkot().s[9]++;
  try {
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_gudtunkot().s[10]++, await params);
    // Simulate API delay
    /* istanbul ignore next */
    cov_gudtunkot().s[11]++;
    await new Promise(resolve => {
      /* istanbul ignore next */
      cov_gudtunkot().f[5]++;
      cov_gudtunkot().s[12]++;
      return setTimeout(resolve, 100);
    });
    const client =
    /* istanbul ignore next */
    (cov_gudtunkot().s[13]++, mockClients.find(c => {
      /* istanbul ignore next */
      cov_gudtunkot().f[6]++;
      cov_gudtunkot().s[14]++;
      return c.id === id;
    }));
    /* istanbul ignore next */
    cov_gudtunkot().s[15]++;
    if (!client) {
      /* istanbul ignore next */
      cov_gudtunkot().b[0][0]++;
      cov_gudtunkot().s[16]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Client not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_gudtunkot().b[0][1]++;
    }
    cov_gudtunkot().s[17]++;
    return _server.NextResponse.json({
      success: true,
      data: client
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_gudtunkot().s[18]++;
    console.error('Error fetching client:', error);
    /* istanbul ignore next */
    cov_gudtunkot().s[19]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Failed to fetch client'
    }, {
      status: 500
    });
  }
}
async function PUT(request, {
  params
}) {
  /* istanbul ignore next */
  cov_gudtunkot().f[7]++;
  cov_gudtunkot().s[20]++;
  try {
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_gudtunkot().s[21]++, await params);
    const body =
    /* istanbul ignore next */
    (cov_gudtunkot().s[22]++, await request.json());
    // Simulate API delay
    /* istanbul ignore next */
    cov_gudtunkot().s[23]++;
    await new Promise(resolve => {
      /* istanbul ignore next */
      cov_gudtunkot().f[8]++;
      cov_gudtunkot().s[24]++;
      return setTimeout(resolve, 200);
    });
    const clientIndex =
    /* istanbul ignore next */
    (cov_gudtunkot().s[25]++, mockClients.findIndex(c => {
      /* istanbul ignore next */
      cov_gudtunkot().f[9]++;
      cov_gudtunkot().s[26]++;
      return c.id === id;
    }));
    /* istanbul ignore next */
    cov_gudtunkot().s[27]++;
    if (clientIndex === -1) {
      /* istanbul ignore next */
      cov_gudtunkot().b[1][0]++;
      cov_gudtunkot().s[28]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Client not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_gudtunkot().b[1][1]++;
    }
    const updatedClient =
    /* istanbul ignore next */
    (cov_gudtunkot().s[29]++, {
      ...mockClients[clientIndex],
      ...body,
      updated_at: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_gudtunkot().s[30]++;
    mockClients[clientIndex] = updatedClient;
    /* istanbul ignore next */
    cov_gudtunkot().s[31]++;
    return _server.NextResponse.json({
      success: true,
      data: updatedClient
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_gudtunkot().s[32]++;
    console.error('Error updating client:', error);
    /* istanbul ignore next */
    cov_gudtunkot().s[33]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Failed to update client'
    }, {
      status: 500
    });
  }
}
async function DELETE(request, {
  params
}) {
  /* istanbul ignore next */
  cov_gudtunkot().f[10]++;
  cov_gudtunkot().s[34]++;
  try {
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_gudtunkot().s[35]++, await params);
    // Simulate API delay
    /* istanbul ignore next */
    cov_gudtunkot().s[36]++;
    await new Promise(resolve => {
      /* istanbul ignore next */
      cov_gudtunkot().f[11]++;
      cov_gudtunkot().s[37]++;
      return setTimeout(resolve, 150);
    });
    const clientIndex =
    /* istanbul ignore next */
    (cov_gudtunkot().s[38]++, mockClients.findIndex(c => {
      /* istanbul ignore next */
      cov_gudtunkot().f[12]++;
      cov_gudtunkot().s[39]++;
      return c.id === id;
    }));
    /* istanbul ignore next */
    cov_gudtunkot().s[40]++;
    if (clientIndex === -1) {
      /* istanbul ignore next */
      cov_gudtunkot().b[2][0]++;
      cov_gudtunkot().s[41]++;
      return _server.NextResponse.json({
        success: false,
        error: 'Client not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_gudtunkot().b[2][1]++;
    }
    const deletedClient =
    /* istanbul ignore next */
    (cov_gudtunkot().s[42]++, mockClients.splice(clientIndex, 1)[0]);
    /* istanbul ignore next */
    cov_gudtunkot().s[43]++;
    return _server.NextResponse.json({
      success: true,
      data: deletedClient,
      message: 'Client deleted successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_gudtunkot().s[44]++;
    console.error('Error deleting client:', error);
    /* istanbul ignore next */
    cov_gudtunkot().s[45]++;
    return _server.NextResponse.json({
      success: false,
      error: 'Failed to delete client'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,