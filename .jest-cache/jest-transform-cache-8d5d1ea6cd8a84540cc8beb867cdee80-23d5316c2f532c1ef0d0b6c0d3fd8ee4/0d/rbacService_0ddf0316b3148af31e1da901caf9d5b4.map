{"version":3,"names":["default","cov_2cj9qztkhx","f","s","_default","rbacService","RBACService","hasPermission","context","permissions","getUserPermissions","user_id","permissionKey","resource","action","has","b","resource_id","checkResourceSpecificPermission","error","checkClientAccess","checkTaskAccess","checkProjectAccess","userId","clientId","_supabase","supabase","Error","data","from","select","eq","single","taskId","assigned_to","created_by","projectId","cacheKey","now","Date","userPermissionsCache","cacheExpiry","get","userRoles","or","toISOString","Set","forEach","userRole","role","role_permissions","rp","permission","add","set","CACHE_DURATION","getRoles","order","message","map","createRole","insert","created_at","updated_at","canAccessResource","canModifyResource","resourceId","canDeleteResource","clearAllCache","clear","Map"],"sources":["C:\\Users\\chase\\Downloads\\crm (32)\\src\\services\\rbacService.ts"],"sourcesContent":["import { supabase } from \"../lib/supabase\"\r\nimport type { Database } from \"../lib/supabase\"\r\n\r\ntype Tables<T extends keyof Database[\"public\"][\"Tables\"]> = Database[\"public\"][\"Tables\"][T][\"Row\"]\r\n\r\nexport interface Role {\r\n  id: string\r\n  name: string\r\n  description: string\r\n  permissions: Permission[]\r\n  is_system_role: boolean\r\n  created_at: string\r\n  updated_at: string\r\n}\r\n\r\nexport interface Permission {\r\n  id: string\r\n  name: string\r\n  resource: string\r\n  action: string\r\n  description: string\r\n  created_at: string\r\n}\r\n\r\nexport interface UserRole {\r\n  id: string\r\n  user_id: string\r\n  role_id: string\r\n  assigned_by: string\r\n  assigned_at: string\r\n  expires_at?: string\r\n}\r\n\r\nexport interface RolePermission {\r\n  id: string\r\n  role_id: string\r\n  permission_id: string\r\n  granted_by: string\r\n  granted_at: string\r\n}\r\n\r\nexport type Resource =\r\n  | \"clients\"\r\n  | \"tasks\"\r\n  | \"events\"\r\n  | \"projects\"\r\n  | \"invoices\"\r\n  | \"reports\"\r\n  | \"settings\"\r\n  | \"users\"\r\n  | \"roles\"\r\n  | \"integrations\"\r\n  | \"analytics\"\r\n  | \"notifications\"\r\n\r\nexport type Action =\r\n  | \"create\"\r\n  | \"read\"\r\n  | \"update\"\r\n  | \"delete\"\r\n  | \"assign\"\r\n  | \"approve\"\r\n  | \"export\"\r\n  | \"import\"\r\n  | \"manage\"\r\n  | \"view_all\"\r\n  | \"edit_all\"\r\n\r\nexport interface AccessContext {\r\n  user_id: string\r\n  resource: Resource\r\n  action: Action\r\n  resource_id?: string\r\n  additional_context?: Record<string, any>\r\n}\r\n\r\nclass RBACService {\r\n  private userPermissionsCache: Map<string, Set<string>> = new Map()\r\n  private cacheExpiry: Map<string, number> = new Map()\r\n  private readonly CACHE_DURATION = 5 * 60 * 1000 // 5 minutes\r\n\r\n  // Permission checking\r\n  async hasPermission(context: AccessContext): Promise<boolean> {\r\n    try {\r\n      const permissions = await this.getUserPermissions(context.user_id)\r\n      const permissionKey = `${context.resource}:${context.action}`\r\n\r\n      // Check direct permission\r\n      if (permissions.has(permissionKey)) {\r\n        return true\r\n      }\r\n\r\n      // Check wildcard permissions\r\n      if (\r\n        permissions.has(`${context.resource}:*`) ||\r\n        permissions.has(`*:${context.action}`) ||\r\n        permissions.has(\"*:*\")\r\n      ) {\r\n        return true\r\n      }\r\n\r\n      // Check resource-specific permissions with context\r\n      if (context.resource_id) {\r\n        return await this.checkResourceSpecificPermission(context)\r\n      }\r\n\r\n      return false\r\n    } catch (error) {\r\n      // Silent error handling - Error checking permission\r\n      return false\r\n    }\r\n  }\r\n\r\n  private async checkResourceSpecificPermission(context: AccessContext): Promise<boolean> {\r\n    // Check if user owns the resource or has specific access\r\n    switch (context.resource) {\r\n      case \"clients\":\r\n        return await this.checkClientAccess(context.user_id, context.resource_id!, context.action)\r\n      case \"tasks\":\r\n        return await this.checkTaskAccess(context.user_id, context.resource_id!, context.action)\r\n      case \"projects\":\r\n        return await this.checkProjectAccess(context.user_id, context.resource_id!, context.action)\r\n      default:\r\n        return false\r\n    }\r\n  }\r\n\r\n  private async checkClientAccess(userId: string, clientId: string, action: Action): Promise<boolean> {\r\n    if (!supabase) {\r\n      throw new Error('Supabase client is not initialized');\r\n    }\r\n    \r\n    // Check if user is assigned to this client\r\n    const { data } = await supabase\r\n      .from(\"client_assignments\")\r\n      .select(\"*\")\r\n      .eq(\"user_id\", userId)\r\n      .eq(\"client_id\", clientId)\r\n      .single()\r\n\r\n    return !!data\r\n  }\r\n\r\n  private async checkTaskAccess(userId: string, taskId: string, action: Action): Promise<boolean> {\r\n    if (!supabase) {\r\n      throw new Error('Supabase client is not initialized');\r\n    }\r\n    \r\n    // Check if user is assigned to this task or owns it\r\n    const { data } = await (supabase as any).from(\"tasks\").select(\"assigned_to, created_by\").eq(\"id\", taskId).single()\r\n\r\n    if (!data) return false\r\n\r\n    return data.assigned_to === userId || data.created_by === userId\r\n  }\r\n\r\n  private async checkProjectAccess(userId: string, projectId: string, action: Action): Promise<boolean> {\r\n    if (!supabase) {\r\n      throw new Error('Supabase client is not initialized');\r\n    }\r\n    \r\n    // Check if user is a team member of this project\r\n    const { data } = await supabase\r\n      .from(\"project_members\")\r\n      .select(\"*\")\r\n      .eq(\"user_id\", userId)\r\n      .eq(\"project_id\", projectId)\r\n      .single()\r\n\r\n    return !!data\r\n  }\r\n\r\n  // User permissions management\r\n  private async getUserPermissions(userId: string): Promise<Set<string>> {\r\n    if (!supabase) {\r\n      throw new Error('Supabase client is not initialized');\r\n    }\r\n    \r\n    const cacheKey = userId\r\n    const now = Date.now()\r\n\r\n    // Check cache\r\n    if (this.userPermissionsCache.has(cacheKey) && this.cacheExpiry.get(cacheKey)! > now) {\r\n      return this.userPermissionsCache.get(cacheKey)!\r\n    }\r\n\r\n    // Fetch from database\r\n    const { data: userRoles } = await supabase\r\n      .from(\"user_roles\")\r\n      .select(\r\n        `\r\n        role:roles(\r\n          id,\r\n          role_permissions(\r\n            permission:permissions(\r\n              resource,\r\n              action\r\n            )\r\n          )\r\n        )\r\n      `,\r\n      )\r\n      .eq(\"user_id\", userId)\r\n      .or(\"expires_at.is.null,expires_at.gt.\" + new Date().toISOString())\r\n\r\n    const permissions = new Set<string>()\r\n\r\n    if (userRoles) {\r\n      userRoles.forEach((userRole: any) => {\r\n        userRole.role.role_permissions.forEach((rp: any) => {\r\n          const permission = rp.permission\r\n          permissions.add(`${permission.resource}:${permission.action}`)\r\n        })\r\n      })\r\n    }\r\n\r\n    // Cache the result\r\n    this.userPermissionsCache.set(cacheKey, permissions)\r\n    this.cacheExpiry.set(cacheKey, now + this.CACHE_DURATION)\r\n\r\n    return permissions\r\n  }\r\n\r\n  // Role management\r\n  async getRoles(): Promise<Role[]> {\r\n    if (!supabase) {\r\n      throw new Error('Supabase client is not initialized');\r\n    }\r\n    \r\n    const { data, error } = await supabase\r\n      .from(\"roles\")\r\n      .select(\r\n        `\r\n        *,\r\n        role_permissions(\r\n          permission:permissions(*)\r\n        )\r\n      `,\r\n      )\r\n      .order(\"name\")\r\n\r\n    if (error) throw new Error(`Failed to fetch roles: ${error.message}`)\r\n\r\n    return (data || []).map((role: any) => ({\r\n      ...role,\r\n      permissions: role.role_permissions.map((rp: any) => rp.permission),\r\n    }))\r\n  }\r\n\r\n  async createRole(role: Omit<Role, \"id\" | \"created_at\" | \"updated_at\" | \"permissions\">): Promise<Role> {\r\n    if (!supabase) {\r\n      throw new Error('Supabase client is not initialized');\r\n    }\r\n    \r\n    const { data, error } = await (supabase as any)\r\n      .from(\"roles\")\r\n      .insert({\r\n        ...role,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString(),\r\n      })\r\n      .select()\r\n      .single()\r\n\r\n    if (error) throw new Error(`Failed to create role: ${error.message}`)\r\n    return { ...data, permissions: [] }\r\n  }\r\n\r\n  // Permission helpers\r\n  async canAccessResource(userId: string, resource: Resource): Promise<boolean> {\r\n    return await this.hasPermission({\r\n      user_id: userId,\r\n      resource,\r\n      action: \"read\",\r\n    })\r\n  }\r\n\r\n  async canModifyResource(userId: string, resource: Resource, resourceId?: string): Promise<boolean> {\r\n    return await this.hasPermission({\r\n      user_id: userId,\r\n      resource,\r\n      action: \"update\",\r\n      resource_id: resourceId,\r\n    })\r\n  }\r\n\r\n  async canDeleteResource(userId: string, resource: Resource, resourceId?: string): Promise<boolean> {\r\n    return await this.hasPermission({\r\n      user_id: userId,\r\n      resource,\r\n      action: \"delete\",\r\n      resource_id: resourceId,\r\n    })\r\n  }\r\n\r\n  clearAllCache(): void {\r\n    this.userPermissionsCache.clear()\r\n    this.cacheExpiry.clear()\r\n  }\r\n}\r\n\r\nexport const rbacService = new RBACService()\r\nexport default rbacService\r\n"],"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","ignoreList":[]}