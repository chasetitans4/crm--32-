1f5cf407e1136bd3c8ad58c1b93b6155
"use strict";

/* istanbul ignore next */
function cov_1ru9alsmgw() {
  var path = "C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\useContactForm.ts";
  var hash = "d1ff283dd5e5d7116ee9a7d7ea425067fcacb3a5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\useContactForm.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 30
        }
      },
      "3": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 31
        }
      },
      "4": {
        start: {
          line: 12,
          column: 23
        },
        end: {
          line: 91,
          column: 1
        }
      },
      "5": {
        start: {
          line: 13,
          column: 52
        },
        end: {
          line: 13,
          column: 76
        }
      },
      "6": {
        start: {
          line: 14,
          column: 35
        },
        end: {
          line: 20,
          column: 5
        }
      },
      "7": {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 15,
          column: 91
        }
      },
      "8": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 19,
          column: 16
        }
      },
      "9": {
        start: {
          line: 16,
          column: 37
        },
        end: {
          line: 19,
          column: 13
        }
      },
      "10": {
        start: {
          line: 21,
          column: 30
        },
        end: {
          line: 24,
          column: 5
        }
      },
      "11": {
        start: {
          line: 22,
          column: 20
        },
        end: {
          line: 22,
          column: 91
        }
      },
      "12": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 46
        }
      },
      "13": {
        start: {
          line: 25,
          column: 28
        },
        end: {
          line: 39,
          column: 5
        }
      },
      "14": {
        start: {
          line: 26,
          column: 23
        },
        end: {
          line: 26,
          column: 25
        }
      },
      "15": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 29,
          column: 9
        }
      },
      "16": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 44
        }
      },
      "17": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "18": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 45
        }
      },
      "19": {
        start: {
          line: 32,
          column: 15
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "20": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 48
        }
      },
      "21": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "22": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 48
        }
      },
      "23": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 22
        }
      },
      "24": {
        start: {
          line: 40,
          column: 29
        },
        end: {
          line: 63,
          column: 5
        }
      },
      "25": {
        start: {
          line: 41,
          column: 26
        },
        end: {
          line: 41,
          column: 28
        }
      },
      "26": {
        start: {
          line: 42,
          column: 24
        },
        end: {
          line: 42,
          column: 29
        }
      },
      "27": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 49,
          column: 11
        }
      },
      "28": {
        start: {
          line: 44,
          column: 27
        },
        end: {
          line: 44,
          column: 51
        }
      },
      "29": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 48,
          column: 13
        }
      },
      "30": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 42
        }
      },
      "31": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 33
        }
      },
      "32": {
        start: {
          line: 51,
          column: 27
        },
        end: {
          line: 51,
          column: 70
        }
      },
      "33": {
        start: {
          line: 51,
          column: 52
        },
        end: {
          line: 51,
          column: 69
        }
      },
      "34": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "35": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 56,
          column: 14
        }
      },
      "36": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 29
        }
      },
      "37": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 62,
          column: 10
        }
      },
      "38": {
        start: {
          line: 64,
          column: 30
        },
        end: {
          line: 73,
          column: 5
        }
      },
      "39": {
        start: {
          line: 66,
          column: 23
        },
        end: {
          line: 66,
          column: 47
        }
      },
      "40": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "41": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 86
        }
      },
      "42": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 21
        }
      },
      "43": {
        start: {
          line: 74,
          column: 31
        },
        end: {
          line: 80,
          column: 10
        }
      },
      "44": {
        start: {
          line: 74,
          column: 36
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "45": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 90,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 12,
            column: 24
          }
        },
        loc: {
          start: {
            line: 12,
            column: 27
          },
          end: {
            line: 91,
            column: 1
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 14,
            column: 35
          },
          end: {
            line: 14,
            column: 36
          }
        },
        loc: {
          start: {
            line: 14,
            column: 59
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 14
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 16,
            column: 28
          },
          end: {
            line: 16,
            column: 29
          }
        },
        loc: {
          start: {
            line: 16,
            column: 37
          },
          end: {
            line: 19,
            column: 13
          }
        },
        line: 16
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 30
          },
          end: {
            line: 21,
            column: 31
          }
        },
        loc: {
          start: {
            line: 21,
            column: 54
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 25,
            column: 28
          },
          end: {
            line: 25,
            column: 29
          }
        },
        loc: {
          start: {
            line: 25,
            column: 39
          },
          end: {
            line: 39,
            column: 5
          }
        },
        line: 25
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 40,
            column: 29
          },
          end: {
            line: 40,
            column: 30
          }
        },
        loc: {
          start: {
            line: 40,
            column: 41
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 40
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 43,
            column: 25
          },
          end: {
            line: 43,
            column: 26
          }
        },
        loc: {
          start: {
            line: 43,
            column: 43
          },
          end: {
            line: 49,
            column: 9
          }
        },
        line: 43
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 51,
            column: 41
          },
          end: {
            line: 51,
            column: 42
          }
        },
        loc: {
          start: {
            line: 51,
            column: 52
          },
          end: {
            line: 51,
            column: 69
          }
        },
        line: 51
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 64,
            column: 30
          },
          end: {
            line: 64,
            column: 31
          }
        },
        loc: {
          start: {
            line: 64,
            column: 39
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 64
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 74,
            column: 31
          },
          end: {
            line: 74,
            column: 32
          }
        },
        loc: {
          start: {
            line: 74,
            column: 36
          },
          end: {
            line: 80,
            column: 9
          }
        },
        line: 74
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 15,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 15,
            column: 38
          },
          end: {
            line: 15,
            column: 65
          }
        }, {
          start: {
            line: 15,
            column: 68
          },
          end: {
            line: 15,
            column: 91
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 22,
            column: 20
          },
          end: {
            line: 22,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 22,
            column: 38
          },
          end: {
            line: 22,
            column: 65
          }
        }, {
          start: {
            line: 22,
            column: 68
          },
          end: {
            line: 22,
            column: 91
          }
        }],
        line: 22
      },
      "2": {
        loc: {
          start: {
            line: 23,
            column: 15
          },
          end: {
            line: 23,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 15
          },
          end: {
            line: 23,
            column: 36
          }
        }, {
          start: {
            line: 23,
            column: 40
          },
          end: {
            line: 23,
            column: 45
          }
        }],
        line: 23
      },
      "3": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "4": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: 32,
            column: 15
          },
          end: {
            line: 34,
            column: 9
          }
        }],
        line: 30
      },
      "5": {
        loc: {
          start: {
            line: 32,
            column: 15
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 15
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "6": {
        loc: {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "7": {
        loc: {
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 35,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 35,
            column: 25
          }
        }, {
          start: {
            line: 35,
            column: 29
          },
          end: {
            line: 35,
            column: 69
          }
        }],
        line: 35
      },
      "8": {
        loc: {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "9": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "10": {
        loc: {
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 52,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 52,
            column: 23
          }
        }, {
          start: {
            line: 52,
            column: 27
          },
          end: {
            line: 52,
            column: 46
          }
        }],
        line: 52
      },
      "11": {
        loc: {
          start: {
            line: 54,
            column: 19
          },
          end: {
            line: 54,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 19
          },
          end: {
            line: 54,
            column: 31
          }
        }, {
          start: {
            line: 54,
            column: 35
          },
          end: {
            line: 54,
            column: 37
          }
        }],
        line: 54
      },
      "12": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["C:\\Users\\chase\\Downloads\\crm (32)\\src\\hooks\\useContactForm.ts"],
      sourcesContent: ["import { useState } from 'react'\nimport type { Contact } from './useLeadManagement'\n\nexport const useContactForm = () => {\n  const [expandedContacts, setExpandedContacts] = useState<Record<string, boolean>>({})\n\n  const toggleContactExpansion = (leadId: number | null, contactIndex: number) => {\n    const key = leadId !== null ? `${leadId}-${contactIndex}` : contactIndex.toString()\n    setExpandedContacts(prev => ({\n      ...prev,\n      [key]: !prev[key]\n    }))\n  }\n\n  const isContactExpanded = (leadId: number | null, contactIndex: number) => {\n    const key = leadId !== null ? `${leadId}-${contactIndex}` : contactIndex.toString()\n    return expandedContacts[key] || false\n  }\n\n  const validateContact = (contact: Contact) => {\n    const errors: string[] = []\n    \n    if (!contact.name.trim()) {\n      errors.push('Name is required')\n    }\n    \n    if (!contact.email.trim()) {\n      errors.push('Email is required')\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(contact.email)) {\n      errors.push('Invalid email format')\n    }\n    \n    if (contact.phone && !/^[\\d\\s\\-\\(\\)\\+]+$/.test(contact.phone)) {\n      errors.push('Invalid phone format')\n    }\n    \n    return errors\n  }\n\n  const validateContacts = (contacts: Contact[]) => {\n    const allErrors: { [index: number]: string[] } = {}\n    let hasErrors = false\n    \n    contacts.forEach((contact, index) => {\n      const errors = validateContact(contact)\n      if (errors.length > 0) {\n        allErrors[index] = errors\n        hasErrors = true\n      }\n    })\n    \n    // Check if there's at least one primary contact\n    const hasPrimary = contacts.some(contact => contact.isPrimary)\n    if (!hasPrimary && contacts.length > 0) {\n      allErrors[0] = [...(allErrors[0] || []), 'At least one contact must be primary']\n      hasErrors = true\n    }\n    \n    return { errors: allErrors, hasErrors }\n  }\n\n  const formatPhoneNumber = (phone: string) => {\n    // Remove all non-digit characters\n    const digits = phone.replace(/\\D/g, '')\n    \n    // Format as (XXX) XXX-XXXX for US numbers\n    if (digits.length === 10) {\n      return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`\n    }\n    \n    // Return original if not a standard US number\n    return phone\n  }\n\n  const createEmptyContact = (): Contact => ({\n    name: '',\n    email: '',\n    phone: '',\n    position: '',\n    isPrimary: false\n  })\n\n  return {\n    expandedContacts,\n    setExpandedContacts,\n    toggleContactExpansion,\n    isContactExpanded,\n    validateContact,\n    validateContacts,\n    formatPhoneNumber,\n    createEmptyContact,\n  }\n}\n\nexport type { Contact }"],
      names: ["useContactForm", "expandedContacts", "setExpandedContacts", "useState", "toggleContactExpansion", "leadId", "contactIndex", "key", "toString", "prev", "isContactExpanded", "validateContact", "contact", "errors", "name", "trim", "push", "email", "test", "phone", "validateContacts", "contacts", "allErrors", "hasErrors", "forEach", "index", "length", "hasPrimary", "some", "isPrimary", "formatPhoneNumber", "digits", "replace", "slice", "createEmptyContact", "position"],
      mappings: ";;;;+BAGaA;;;eAAAA;;;uBAHY;AAGlB,MAAMA,iBAAiB;IAC5B,MAAM,CAACC,kBAAkBC,oBAAoB,GAAGC,IAAAA,eAAQ,EAA0B,CAAC;IAEnF,MAAMC,yBAAyB,CAACC,QAAuBC;QACrD,MAAMC,MAAMF,WAAW,OAAO,GAAGA,OAAO,CAAC,EAAEC,cAAc,GAAGA,aAAaE,QAAQ;QACjFN,oBAAoBO,CAAAA,OAAS,CAAA;gBAC3B,GAAGA,IAAI;gBACP,CAACF,IAAI,EAAE,CAACE,IAAI,CAACF,IAAI;YACnB,CAAA;IACF;IAEA,MAAMG,oBAAoB,CAACL,QAAuBC;QAChD,MAAMC,MAAMF,WAAW,OAAO,GAAGA,OAAO,CAAC,EAAEC,cAAc,GAAGA,aAAaE,QAAQ;QACjF,OAAOP,gBAAgB,CAACM,IAAI,IAAI;IAClC;IAEA,MAAMI,kBAAkB,CAACC;QACvB,MAAMC,SAAmB,EAAE;QAE3B,IAAI,CAACD,QAAQE,IAAI,CAACC,IAAI,IAAI;YACxBF,OAAOG,IAAI,CAAC;QACd;QAEA,IAAI,CAACJ,QAAQK,KAAK,CAACF,IAAI,IAAI;YACzBF,OAAOG,IAAI,CAAC;QACd,OAAO,IAAI,CAAC,6BAA6BE,IAAI,CAACN,QAAQK,KAAK,GAAG;YAC5DJ,OAAOG,IAAI,CAAC;QACd;QAEA,IAAIJ,QAAQO,KAAK,IAAI,CAAC,oBAAoBD,IAAI,CAACN,QAAQO,KAAK,GAAG;YAC7DN,OAAOG,IAAI,CAAC;QACd;QAEA,OAAOH;IACT;IAEA,MAAMO,mBAAmB,CAACC;QACxB,MAAMC,YAA2C,CAAC;QAClD,IAAIC,YAAY;QAEhBF,SAASG,OAAO,CAAC,CAACZ,SAASa;YACzB,MAAMZ,SAASF,gBAAgBC;YAC/B,IAAIC,OAAOa,MAAM,GAAG,GAAG;gBACrBJ,SAAS,CAACG,MAAM,GAAGZ;gBACnBU,YAAY;YACd;QACF;QAEA,gDAAgD;QAChD,MAAMI,aAAaN,SAASO,IAAI,CAAChB,CAAAA,UAAWA,QAAQiB,SAAS;QAC7D,IAAI,CAACF,cAAcN,SAASK,MAAM,GAAG,GAAG;YACtCJ,SAAS,CAAC,EAAE,GAAG;mBAAKA,SAAS,CAAC,EAAE,IAAI,EAAE;gBAAG;aAAuC;YAChFC,YAAY;QACd;QAEA,OAAO;YAAEV,QAAQS;YAAWC;QAAU;IACxC;IAEA,MAAMO,oBAAoB,CAACX;QACzB,kCAAkC;QAClC,MAAMY,SAASZ,MAAMa,OAAO,CAAC,OAAO;QAEpC,0CAA0C;QAC1C,IAAID,OAAOL,MAAM,KAAK,IAAI;YACxB,OAAO,CAAC,CAAC,EAAEK,OAAOE,KAAK,CAAC,GAAG,GAAG,EAAE,EAAEF,OAAOE,KAAK,CAAC,GAAG,GAAG,CAAC,EAAEF,OAAOE,KAAK,CAAC,IAAI;QAC3E;QAEA,8CAA8C;QAC9C,OAAOd;IACT;IAEA,MAAMe,qBAAqB,IAAgB,CAAA;YACzCpB,MAAM;YACNG,OAAO;YACPE,OAAO;YACPgB,UAAU;YACVN,WAAW;QACb,CAAA;IAEA,OAAO;QACL5B;QACAC;QACAE;QACAM;QACAC;QACAS;QACAU;QACAI;IACF;AACF"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d1ff283dd5e5d7116ee9a7d7ea425067fcacb3a5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ru9alsmgw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ru9alsmgw();
cov_1ru9alsmgw().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1ru9alsmgw().s[1]++;
Object.defineProperty(exports, "useContactForm", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1ru9alsmgw().f[0]++;
    cov_1ru9alsmgw().s[2]++;
    return useContactForm;
  }
});
const _react =
/* istanbul ignore next */
(cov_1ru9alsmgw().s[3]++, require("react"));
/* istanbul ignore next */
cov_1ru9alsmgw().s[4]++;
const useContactForm = () => {
  /* istanbul ignore next */
  cov_1ru9alsmgw().f[1]++;
  const [expandedContacts, setExpandedContacts] =
  /* istanbul ignore next */
  (cov_1ru9alsmgw().s[5]++, (0, _react.useState)({}));
  /* istanbul ignore next */
  cov_1ru9alsmgw().s[6]++;
  const toggleContactExpansion = (leadId, contactIndex) => {
    /* istanbul ignore next */
    cov_1ru9alsmgw().f[2]++;
    const key =
    /* istanbul ignore next */
    (cov_1ru9alsmgw().s[7]++, leadId !== null ?
    /* istanbul ignore next */
    (cov_1ru9alsmgw().b[0][0]++, `${leadId}-${contactIndex}`) :
    /* istanbul ignore next */
    (cov_1ru9alsmgw().b[0][1]++, contactIndex.toString()));
    /* istanbul ignore next */
    cov_1ru9alsmgw().s[8]++;
    setExpandedContacts(prev => {
      /* istanbul ignore next */
      cov_1ru9alsmgw().f[3]++;
      cov_1ru9alsmgw().s[9]++;
      return {
        ...prev,
        [key]: !prev[key]
      };
    });
  };
  /* istanbul ignore next */
  cov_1ru9alsmgw().s[10]++;
  const isContactExpanded = (leadId, contactIndex) => {
    /* istanbul ignore next */
    cov_1ru9alsmgw().f[4]++;
    const key =
    /* istanbul ignore next */
    (cov_1ru9alsmgw().s[11]++, leadId !== null ?
    /* istanbul ignore next */
    (cov_1ru9alsmgw().b[1][0]++, `${leadId}-${contactIndex}`) :
    /* istanbul ignore next */
    (cov_1ru9alsmgw().b[1][1]++, contactIndex.toString()));
    /* istanbul ignore next */
    cov_1ru9alsmgw().s[12]++;
    return /* istanbul ignore next */(cov_1ru9alsmgw().b[2][0]++, expandedContacts[key]) ||
    /* istanbul ignore next */
    (cov_1ru9alsmgw().b[2][1]++, false);
  };
  /* istanbul ignore next */
  cov_1ru9alsmgw().s[13]++;
  const validateContact = contact => {
    /* istanbul ignore next */
    cov_1ru9alsmgw().f[5]++;
    const errors =
    /* istanbul ignore next */
    (cov_1ru9alsmgw().s[14]++, []);
    /* istanbul ignore next */
    cov_1ru9alsmgw().s[15]++;
    if (!contact.name.trim()) {
      /* istanbul ignore next */
      cov_1ru9alsmgw().b[3][0]++;
      cov_1ru9alsmgw().s[16]++;
      errors.push('Name is required');
    } else
    /* istanbul ignore next */
    {
      cov_1ru9alsmgw().b[3][1]++;
    }
    cov_1ru9alsmgw().s[17]++;
    if (!contact.email.trim()) {
      /* istanbul ignore next */
      cov_1ru9alsmgw().b[4][0]++;
      cov_1ru9alsmgw().s[18]++;
      errors.push('Email is required');
    } else {
      /* istanbul ignore next */
      cov_1ru9alsmgw().b[4][1]++;
      cov_1ru9alsmgw().s[19]++;
      if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(contact.email)) {
        /* istanbul ignore next */
        cov_1ru9alsmgw().b[5][0]++;
        cov_1ru9alsmgw().s[20]++;
        errors.push('Invalid email format');
      } else
      /* istanbul ignore next */
      {
        cov_1ru9alsmgw().b[5][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1ru9alsmgw().s[21]++;
    if (
    /* istanbul ignore next */
    (cov_1ru9alsmgw().b[7][0]++, contact.phone) &&
    /* istanbul ignore next */
    (cov_1ru9alsmgw().b[7][1]++, !/^[\d\s\-\(\)\+]+$/.test(contact.phone))) {
      /* istanbul ignore next */
      cov_1ru9alsmgw().b[6][0]++;
      cov_1ru9alsmgw().s[22]++;
      errors.push('Invalid phone format');
    } else
    /* istanbul ignore next */
    {
      cov_1ru9alsmgw().b[6][1]++;
    }
    cov_1ru9alsmgw().s[23]++;
    return errors;
  };
  /* istanbul ignore next */
  cov_1ru9alsmgw().s[24]++;
  const validateContacts = contacts => {
    /* istanbul ignore next */
    cov_1ru9alsmgw().f[6]++;
    const allErrors =
    /* istanbul ignore next */
    (cov_1ru9alsmgw().s[25]++, {});
    let hasErrors =
    /* istanbul ignore next */
    (cov_1ru9alsmgw().s[26]++, false);
    /* istanbul ignore next */
    cov_1ru9alsmgw().s[27]++;
    contacts.forEach((contact, index) => {
      /* istanbul ignore next */
      cov_1ru9alsmgw().f[7]++;
      const errors =
      /* istanbul ignore next */
      (cov_1ru9alsmgw().s[28]++, validateContact(contact));
      /* istanbul ignore next */
      cov_1ru9alsmgw().s[29]++;
      if (errors.length > 0) {
        /* istanbul ignore next */
        cov_1ru9alsmgw().b[8][0]++;
        cov_1ru9alsmgw().s[30]++;
        allErrors[index] = errors;
        /* istanbul ignore next */
        cov_1ru9alsmgw().s[31]++;
        hasErrors = true;
      } else
      /* istanbul ignore next */
      {
        cov_1ru9alsmgw().b[8][1]++;
      }
    });
    // Check if there's at least one primary contact
    const hasPrimary =
    /* istanbul ignore next */
    (cov_1ru9alsmgw().s[32]++, contacts.some(contact => {
      /* istanbul ignore next */
      cov_1ru9alsmgw().f[8]++;
      cov_1ru9alsmgw().s[33]++;
      return contact.isPrimary;
    }));
    /* istanbul ignore next */
    cov_1ru9alsmgw().s[34]++;
    if (
    /* istanbul ignore next */
    (cov_1ru9alsmgw().b[10][0]++, !hasPrimary) &&
    /* istanbul ignore next */
    (cov_1ru9alsmgw().b[10][1]++, contacts.length > 0)) {
      /* istanbul ignore next */
      cov_1ru9alsmgw().b[9][0]++;
      cov_1ru9alsmgw().s[35]++;
      allErrors[0] = [...(
      /* istanbul ignore next */
      (cov_1ru9alsmgw().b[11][0]++, allErrors[0]) ||
      /* istanbul ignore next */
      (cov_1ru9alsmgw().b[11][1]++, [])), 'At least one contact must be primary'];
      /* istanbul ignore next */
      cov_1ru9alsmgw().s[36]++;
      hasErrors = true;
    } else
    /* istanbul ignore next */
    {
      cov_1ru9alsmgw().b[9][1]++;
    }
    cov_1ru9alsmgw().s[37]++;
    return {
      errors: allErrors,
      hasErrors
    };
  };
  /* istanbul ignore next */
  cov_1ru9alsmgw().s[38]++;
  const formatPhoneNumber = phone => {
    /* istanbul ignore next */
    cov_1ru9alsmgw().f[9]++;
    // Remove all non-digit characters
    const digits =
    /* istanbul ignore next */
    (cov_1ru9alsmgw().s[39]++, phone.replace(/\D/g, ''));
    // Format as (XXX) XXX-XXXX for US numbers
    /* istanbul ignore next */
    cov_1ru9alsmgw().s[40]++;
    if (digits.length === 10) {
      /* istanbul ignore next */
      cov_1ru9alsmgw().b[12][0]++;
      cov_1ru9alsmgw().s[41]++;
      return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;
    } else
    /* istanbul ignore next */
    {
      cov_1ru9alsmgw().b[12][1]++;
    }
    // Return original if not a standard US number
    cov_1ru9alsmgw().s[42]++;
    return phone;
  };
  /* istanbul ignore next */
  cov_1ru9alsmgw().s[43]++;
  const createEmptyContact = () => {
    /* istanbul ignore next */
    cov_1ru9alsmgw().f[10]++;
    cov_1ru9alsmgw().s[44]++;
    return {
      name: '',
      email: '',
      phone: '',
      position: '',
      isPrimary: false
    };
  };
  /* istanbul ignore next */
  cov_1ru9alsmgw().s[45]++;
  return {
    expandedContacts,
    setExpandedContacts,
    toggleContactExpansion,
    isContactExpanded,
    validateContact,
    validateContacts,
    formatPhoneNumber,
    createEmptyContact
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,